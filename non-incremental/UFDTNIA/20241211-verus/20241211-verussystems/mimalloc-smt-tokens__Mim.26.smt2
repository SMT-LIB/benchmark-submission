(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module tokens::Mim'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!std_specs.option.is_some. FuelId)
(declare-const fuel%vstd!std_specs.option.is_none. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr. FuelId)
(declare-const fuel%vstd!array.array_view. FuelId)
(declare-const fuel%vstd!array.impl&%0.view. FuelId)
(declare-const fuel%vstd!array.impl&%2.spec_index. FuelId)
(declare-const fuel%vstd!array.lemma_array_index. FuelId)
(declare-const fuel%vstd!array.array_len_matches_n. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.impl&%0.len. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_pair. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.submap_of. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.remove_keys. FuelId)
(declare-const fuel%vstd!math.max. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%2.arrow_0. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%4.view. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%6.ptr. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%6.opt_value. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%6.is_init. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%6.value. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.is_init. FuelId)
(declare-const fuel%vstd!raw_ptr.impl&%7.value. FuelId)
(declare-const fuel%vstd!raw_ptr.ptrs_mut_eq. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.impl&%0.full. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_le. FuelId)
(declare-const fuel%vstd!set.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%vstd!set.impl&%0.disjoint. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_union. FuelId)
(declare-const fuel%vstd!set.axiom_set_complement. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_union_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_choose_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_contains_len. FuelId)
(declare-const fuel%vstd!set.axiom_set_choose_len. FuelId)
(declare-const fuel%vstd!view.impl&%0.view. FuelId)
(declare-const fuel%vstd!view.impl&%2.view. FuelId)
(declare-const fuel%vstd!view.impl&%4.view. FuelId)
(declare-const fuel%vstd!view.impl&%6.view. FuelId)
(declare-const fuel%vstd!view.impl&%10.view. FuelId)
(declare-const fuel%vstd!view.impl&%12.view. FuelId)
(declare-const fuel%vstd!view.impl&%14.view. FuelId)
(declare-const fuel%vstd!view.impl&%16.view. FuelId)
(declare-const fuel%vstd!view.impl&%18.view. FuelId)
(declare-const fuel%vstd!view.impl&%20.view. FuelId)
(declare-const fuel%vstd!view.impl&%24.view. FuelId)
(declare-const fuel%vstd!view.impl&%32.view. FuelId)
(declare-const fuel%vstd!view.impl&%40.view. FuelId)
(declare-const fuel%vstd!view.impl&%42.view. FuelId)
(declare-const fuel%vstd!view.impl&%44.view. FuelId)
(declare-const fuel%vstd!view.impl&%46.view. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_4. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_3. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_set_inst_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_actor_make_idle_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_actor_abandon_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_set_use_delayed_free_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_delay_leave_freeing_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_delay_lookup_heap_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_block_set_heap_id_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_segment_enable_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_segment_enable_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_segment_enable_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_3. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_4. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_3. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_4. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_3. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_4. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_disable_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_disable_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_disable_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_block_in_range_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_block_in_range_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%0.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_set_inst. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_set_inst_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_actor_make_idle. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_actor_make_idle_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_actor_abandon. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_actor_abandon_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_set_use_delayed_free. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_set_use_delayed_free_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_delay_enter_freeing. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_delay_enter_freeing_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_delay_enter_freeing_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_delay_leave_freeing. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_delay_leave_freeing_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_delay_lookup_heap. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_delay_lookup_heap_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_block_set_heap_id. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_block_set_heap_id_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_reserve_uniq_identifier. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_create_thread_mk_tokens. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_create_segment_mk_tokens. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_segment_enable. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_segment_enable_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_segment_enable_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_segment_enable_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_create_page_mk_tokens. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_3. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_4. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_page_enable. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_enable_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_enable_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_enable_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_enable_3. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_enable_4. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_page_mk_block_tokens. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_3. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_4. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_page_destroy_block_tokens. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_page_check_delay_state. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_check_delay_state_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_check_delay_state_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_page_disable. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_disable_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_disable_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_disable_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_page_destroy_tokens. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_destroy_tokens_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_destroy_tokens_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_page_destroy_tokens_2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_block_tokens_distinct. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_block_tokens_distinct_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_block_tokens_distinct_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_block_in_range. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_block_in_range_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_block_in_range_1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%1.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%2.arrow_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%2.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%3.is_initialize. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%3.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%3.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%4.bool_agree. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%4.bool_agree_strict. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%5.option_agree_strict. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%5.option_agree. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%8.map_agree. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%8.map_agree_strict. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%9.set_agree. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%9.set_agree_strict. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%10.map_agree. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%10.map_agree_strict. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%11.map_agree. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%11.map_agree_strict. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%12.map_agree. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%12.map_agree_strict. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%13.map_agree. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%13.map_agree_strict. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%14.map_agree. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%14.map_agree_strict. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%15.map_agree. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%15.map_agree_strict. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%16.set_agree. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%16.set_agree_strict. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%17.map_agree. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%17.map_agree_strict. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.initialize. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.initialize_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.set_inst. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.set_inst_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.set_inst_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.actor_make_idle. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.actor_make_idle_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.actor_make_idle_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.actor_abandon. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.actor_abandon_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.actor_abandon_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.set_use_delayed_free. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.set_use_delayed_free_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.set_use_delayed_free_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.delay_enter_freeing. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.delay_enter_freeing_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.delay_enter_freeing_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.delay_leave_freeing. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.delay_leave_freeing_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.delay_leave_freeing_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.delay_lookup_heap. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.delay_lookup_heap_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.delay_lookup_heap_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.block_set_heap_id. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.block_set_heap_id_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.block_set_heap_id_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.reserve_uniq_identifier. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.reserve_uniq_identifier_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.reserve_uniq_identifier_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.create_thread_mk_tokens. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.create_thread_mk_tokens_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.create_thread_mk_tokens_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.create_segment_mk_tokens. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.create_segment_mk_tokens_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.create_segment_mk_tokens_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.segment_enable. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.segment_enable_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.segment_enable_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.create_page_mk_tokens. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.create_page_mk_tokens_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.create_page_mk_tokens_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_enable. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_enable_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_enable_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_mk_block_tokens. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_mk_block_tokens_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_mk_block_tokens_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_destroy_block_tokens. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_destroy_block_tokens_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_destroy_block_tokens_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_check_delay_state. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_check_delay_state_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_check_delay_state_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_disable. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_disable_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_disable_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_destroy_tokens. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_destroy_tokens_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_destroy_tokens_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.block_tokens_distinct. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.block_tokens_distinct_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.block_tokens_distinct_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.block_in_range. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.block_in_range_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.block_in_range_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.next_by. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.next. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.next_strong_by. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.next_strong. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.init_by. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.init. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.invariant. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_finite. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_reserved. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_reserved2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_right_to_set_inst. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_heap_of_page_delay. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_delay_state. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_delay_actor. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_delay_actor_sub. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_checked_threads. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_no_delay_actor_for_checked. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.right_to_use_thread_complement. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.heap_of_thread_is_valid. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.wf_heap_shared_access_requires_inst. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.wf_heap_shared_access. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_thread_of_segment1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_thread_of_segment2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_thread_has_segment_for_page. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_thread_of_page1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_thread_of_page2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.heap_of_page_is_correct. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_page_shared_access_dom. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_page_shared_access_eq. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_segment_shared_access_dom. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_segment_shared_access_eq. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_block_id_valid. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_block_id_at_idx_uniq. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.heap_ids_thread_id1. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.heap_ids_thread_id2. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_heap_shared_access. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.page_implies_segment_enabled. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.mk_fresh_segment_id. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.okay_to_add_block. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_delay_state_for_page. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_delay_actor_for_page. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.inv_block_id_valid_for_block. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.block_properties. FuelId)
(declare-const fuel%lib!tokens.Mim.impl&%21.blocks_has. FuelId)
(declare-const fuel%lib!tokens.impl&%0.range_from. FuelId)
(declare-const fuel%lib!tokens.impl&%1.page_id_for_slice. FuelId)
(declare-const fuel%lib!tokens.impl&%1.get_slice_idx. FuelId)
(declare-const fuel%lib!tokens.impl&%1.slice_idx_is_right. FuelId)
(declare-const fuel%lib!tokens.segment_u_max. FuelId)
(declare-const fuel%lib!tokens.segment_get_unused_uniq_field. FuelId)
(declare-const fuel%lib!tokens.heap_u_max. FuelId)
(declare-const fuel%lib!tokens.heap_get_unused_uniq_field. FuelId)
(declare-const fuel%lib!types.impl&%16.wf. FuelId)
(declare-const fuel%lib!types.impl&%17.wf. FuelId)
(declare-const fuel%lib!types.impl&%17.wf2. FuelId)
(declare-const fuel%lib!types.impl&%27.wf. FuelId)
(declare-const fuel%lib!layout.is_heap_ptr. FuelId)
(declare-const fuel%lib!layout.is_tld_ptr. FuelId)
(declare-const fuel%lib!config.SLICE_SIZE. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!std_specs.option.is_some. fuel%vstd!std_specs.option.is_none. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr. fuel%vstd!array.array_view. fuel%vstd!array.impl&%0.view. fuel%vstd!array.impl&%2.spec_index. fuel%vstd!array.lemma_array_index. fuel%vstd!array.array_len_matches_n. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.impl&%0.len. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.contains_pair. fuel%vstd!map_lib.impl&%0.submap_of. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!map_lib.impl&%0.remove_keys. fuel%vstd!math.max. fuel%vstd!raw_ptr.impl&%2.arrow_0. fuel%vstd!raw_ptr.impl&%4.view. fuel%vstd!raw_ptr.impl&%6.ptr. fuel%vstd!raw_ptr.impl&%6.opt_value. fuel%vstd!raw_ptr.impl&%6.is_init. fuel%vstd!raw_ptr.impl&%6.value. fuel%vstd!raw_ptr.impl&%7.is_init. fuel%vstd!raw_ptr.impl&%7.value. fuel%vstd!raw_ptr.ptrs_mut_eq. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!set.impl&%0.full. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.spec_le. fuel%vstd!set.impl&%0.spec_add. fuel%vstd!set.impl&%0.choose. fuel%vstd!set.impl&%0.disjoint. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_union. fuel%vstd!set.axiom_set_complement. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!set.axiom_set_union_finite. fuel%vstd!set.axiom_set_choose_finite. fuel%vstd!set.axiom_set_empty_len. fuel%vstd!set.axiom_set_insert_len. fuel%vstd!set.axiom_set_remove_len. fuel%vstd!set.axiom_set_contains_len. fuel%vstd!set.axiom_set_choose_len. fuel%vstd!view.impl&%0.view. fuel%vstd!view.impl&%2.view. fuel%vstd!view.impl&%4.view. fuel%vstd!view.impl&%6.view. fuel%vstd!view.impl&%10.view. fuel%vstd!view.impl&%12.view. fuel%vstd!view.impl&%14.view. fuel%vstd!view.impl&%16.view. fuel%vstd!view.impl&%18.view. fuel%vstd!view.impl&%20.view. fuel%vstd!view.impl&%24.view. fuel%vstd!view.impl&%32.view. fuel%vstd!view.impl&%40.view. fuel%vstd!view.impl&%42.view. fuel%vstd!view.impl&%44.view. fuel%vstd!view.impl&%46.view. fuel%lib!tokens.Mim.impl&%0.arrow_4. fuel%lib!tokens.Mim.impl&%0.arrow_1. fuel%lib!tokens.Mim.impl&%0.arrow_3. fuel%lib!tokens.Mim.impl&%0.arrow_set_inst_0. fuel%lib!tokens.Mim.impl&%0.arrow_actor_make_idle_0. fuel%lib!tokens.Mim.impl&%0.arrow_actor_abandon_0. fuel%lib!tokens.Mim.impl&%0.arrow_set_use_delayed_free_0. fuel%lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_0. fuel%lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_1. fuel%lib!tokens.Mim.impl&%0.arrow_delay_leave_freeing_0. fuel%lib!tokens.Mim.impl&%0.arrow_delay_lookup_heap_0. fuel%lib!tokens.Mim.impl&%0.arrow_block_set_heap_id_0. fuel%lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_0. fuel%lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_1. fuel%lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_0. fuel%lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_1. fuel%lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_2. fuel%lib!tokens.Mim.impl&%0.arrow_segment_enable_0. fuel%lib!tokens.Mim.impl&%0.arrow_segment_enable_1. fuel%lib!tokens.Mim.impl&%0.arrow_segment_enable_2. fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_0. fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_1. fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_2. fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_3. fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_4. fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_0. fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_1. fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_2. fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_3. fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_4. fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_0. fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_1. fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_2. fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_3. fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_4. fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_0. fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_1. fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_2. fuel%lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_0. fuel%lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_1. fuel%lib!tokens.Mim.impl&%0.arrow_page_disable_0. fuel%lib!tokens.Mim.impl&%0.arrow_page_disable_1. fuel%lib!tokens.Mim.impl&%0.arrow_page_disable_2. fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_0. fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_1. fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_2. fuel%lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_0. fuel%lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_1. fuel%lib!tokens.Mim.impl&%0.arrow_block_in_range_0. fuel%lib!tokens.Mim.impl&%0.arrow_block_in_range_1. fuel%lib!tokens.Mim.impl&%0.arrow_dummy_to_use_type_params_0. fuel%lib!tokens.Mim.impl&%1.is_set_inst. fuel%lib!tokens.Mim.impl&%1.get_set_inst_0. fuel%lib!tokens.Mim.impl&%1.is_actor_make_idle. fuel%lib!tokens.Mim.impl&%1.get_actor_make_idle_0. fuel%lib!tokens.Mim.impl&%1.is_actor_abandon. fuel%lib!tokens.Mim.impl&%1.get_actor_abandon_0. fuel%lib!tokens.Mim.impl&%1.is_set_use_delayed_free. fuel%lib!tokens.Mim.impl&%1.get_set_use_delayed_free_0. fuel%lib!tokens.Mim.impl&%1.is_delay_enter_freeing. fuel%lib!tokens.Mim.impl&%1.get_delay_enter_freeing_0. fuel%lib!tokens.Mim.impl&%1.get_delay_enter_freeing_1. fuel%lib!tokens.Mim.impl&%1.is_delay_leave_freeing. fuel%lib!tokens.Mim.impl&%1.get_delay_leave_freeing_0. fuel%lib!tokens.Mim.impl&%1.is_delay_lookup_heap. fuel%lib!tokens.Mim.impl&%1.get_delay_lookup_heap_0. fuel%lib!tokens.Mim.impl&%1.is_block_set_heap_id. fuel%lib!tokens.Mim.impl&%1.get_block_set_heap_id_0. fuel%lib!tokens.Mim.impl&%1.is_reserve_uniq_identifier. fuel%lib!tokens.Mim.impl&%1.is_create_thread_mk_tokens. fuel%lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_0. fuel%lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_1. fuel%lib!tokens.Mim.impl&%1.is_create_segment_mk_tokens. fuel%lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_0. fuel%lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_1. fuel%lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_2. fuel%lib!tokens.Mim.impl&%1.is_segment_enable. fuel%lib!tokens.Mim.impl&%1.get_segment_enable_0. fuel%lib!tokens.Mim.impl&%1.get_segment_enable_1. fuel%lib!tokens.Mim.impl&%1.get_segment_enable_2. fuel%lib!tokens.Mim.impl&%1.is_create_page_mk_tokens. fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_0. fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_1. fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_2. fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_3. fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_4. fuel%lib!tokens.Mim.impl&%1.is_page_enable. fuel%lib!tokens.Mim.impl&%1.get_page_enable_0. fuel%lib!tokens.Mim.impl&%1.get_page_enable_1. fuel%lib!tokens.Mim.impl&%1.get_page_enable_2. fuel%lib!tokens.Mim.impl&%1.get_page_enable_3. fuel%lib!tokens.Mim.impl&%1.get_page_enable_4. fuel%lib!tokens.Mim.impl&%1.is_page_mk_block_tokens. fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_0. fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_1. fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_2. fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_3. fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_4. fuel%lib!tokens.Mim.impl&%1.is_page_destroy_block_tokens. fuel%lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_0. fuel%lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_1. fuel%lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_2. fuel%lib!tokens.Mim.impl&%1.is_page_check_delay_state. fuel%lib!tokens.Mim.impl&%1.get_page_check_delay_state_0. fuel%lib!tokens.Mim.impl&%1.get_page_check_delay_state_1. fuel%lib!tokens.Mim.impl&%1.is_page_disable. fuel%lib!tokens.Mim.impl&%1.get_page_disable_0. fuel%lib!tokens.Mim.impl&%1.get_page_disable_1. fuel%lib!tokens.Mim.impl&%1.get_page_disable_2. fuel%lib!tokens.Mim.impl&%1.is_page_destroy_tokens. fuel%lib!tokens.Mim.impl&%1.get_page_destroy_tokens_0. fuel%lib!tokens.Mim.impl&%1.get_page_destroy_tokens_1. fuel%lib!tokens.Mim.impl&%1.get_page_destroy_tokens_2. fuel%lib!tokens.Mim.impl&%1.is_block_tokens_distinct. fuel%lib!tokens.Mim.impl&%1.get_block_tokens_distinct_0. fuel%lib!tokens.Mim.impl&%1.get_block_tokens_distinct_1. fuel%lib!tokens.Mim.impl&%1.is_block_in_range. fuel%lib!tokens.Mim.impl&%1.get_block_in_range_0. fuel%lib!tokens.Mim.impl&%1.get_block_in_range_1. fuel%lib!tokens.Mim.impl&%1.is_dummy_to_use_type_params. fuel%lib!tokens.Mim.impl&%1.get_dummy_to_use_type_params_0. fuel%lib!tokens.Mim.impl&%2.arrow_0. fuel%lib!tokens.Mim.impl&%2.arrow_dummy_to_use_type_params_0. fuel%lib!tokens.Mim.impl&%3.is_initialize. fuel%lib!tokens.Mim.impl&%3.is_dummy_to_use_type_params. fuel%lib!tokens.Mim.impl&%3.get_dummy_to_use_type_params_0. fuel%lib!tokens.Mim.impl&%4.bool_agree. fuel%lib!tokens.Mim.impl&%4.bool_agree_strict. fuel%lib!tokens.Mim.impl&%5.option_agree_strict. fuel%lib!tokens.Mim.impl&%5.option_agree. fuel%lib!tokens.Mim.impl&%8.map_agree. fuel%lib!tokens.Mim.impl&%8.map_agree_strict. fuel%lib!tokens.Mim.impl&%9.set_agree. fuel%lib!tokens.Mim.impl&%9.set_agree_strict. fuel%lib!tokens.Mim.impl&%10.map_agree. fuel%lib!tokens.Mim.impl&%10.map_agree_strict. fuel%lib!tokens.Mim.impl&%11.map_agree. fuel%lib!tokens.Mim.impl&%11.map_agree_strict. fuel%lib!tokens.Mim.impl&%12.map_agree. fuel%lib!tokens.Mim.impl&%12.map_agree_strict. fuel%lib!tokens.Mim.impl&%13.map_agree. fuel%lib!tokens.Mim.impl&%13.map_agree_strict. fuel%lib!tokens.Mim.impl&%14.map_agree. fuel%lib!tokens.Mim.impl&%14.map_agree_strict. fuel%lib!tokens.Mim.impl&%15.map_agree. fuel%lib!tokens.Mim.impl&%15.map_agree_strict. fuel%lib!tokens.Mim.impl&%16.set_agree. fuel%lib!tokens.Mim.impl&%16.set_agree_strict. fuel%lib!tokens.Mim.impl&%17.map_agree. fuel%lib!tokens.Mim.impl&%17.map_agree_strict. fuel%lib!tokens.Mim.impl&%21.initialize. fuel%lib!tokens.Mim.impl&%21.initialize_enabled. fuel%lib!tokens.Mim.impl&%21.set_inst. fuel%lib!tokens.Mim.impl&%21.set_inst_strong. fuel%lib!tokens.Mim.impl&%21.set_inst_enabled. fuel%lib!tokens.Mim.impl&%21.actor_make_idle. fuel%lib!tokens.Mim.impl&%21.actor_make_idle_strong. fuel%lib!tokens.Mim.impl&%21.actor_make_idle_enabled. fuel%lib!tokens.Mim.impl&%21.actor_abandon. fuel%lib!tokens.Mim.impl&%21.actor_abandon_strong. fuel%lib!tokens.Mim.impl&%21.actor_abandon_enabled. fuel%lib!tokens.Mim.impl&%21.set_use_delayed_free. fuel%lib!tokens.Mim.impl&%21.set_use_delayed_free_strong. fuel%lib!tokens.Mim.impl&%21.set_use_delayed_free_enabled. fuel%lib!tokens.Mim.impl&%21.delay_enter_freeing. fuel%lib!tokens.Mim.impl&%21.delay_enter_freeing_strong. fuel%lib!tokens.Mim.impl&%21.delay_enter_freeing_enabled. fuel%lib!tokens.Mim.impl&%21.delay_leave_freeing. fuel%lib!tokens.Mim.impl&%21.delay_leave_freeing_strong. fuel%lib!tokens.Mim.impl&%21.delay_leave_freeing_enabled. fuel%lib!tokens.Mim.impl&%21.delay_lookup_heap. fuel%lib!tokens.Mim.impl&%21.delay_lookup_heap_strong. fuel%lib!tokens.Mim.impl&%21.delay_lookup_heap_enabled. fuel%lib!tokens.Mim.impl&%21.block_set_heap_id. fuel%lib!tokens.Mim.impl&%21.block_set_heap_id_strong. fuel%lib!tokens.Mim.impl&%21.block_set_heap_id_enabled. fuel%lib!tokens.Mim.impl&%21.reserve_uniq_identifier. fuel%lib!tokens.Mim.impl&%21.reserve_uniq_identifier_strong. fuel%lib!tokens.Mim.impl&%21.reserve_uniq_identifier_enabled. fuel%lib!tokens.Mim.impl&%21.create_thread_mk_tokens. fuel%lib!tokens.Mim.impl&%21.create_thread_mk_tokens_strong. fuel%lib!tokens.Mim.impl&%21.create_thread_mk_tokens_enabled. fuel%lib!tokens.Mim.impl&%21.create_segment_mk_tokens. fuel%lib!tokens.Mim.impl&%21.create_segment_mk_tokens_strong. fuel%lib!tokens.Mim.impl&%21.create_segment_mk_tokens_enabled. fuel%lib!tokens.Mim.impl&%21.segment_enable. fuel%lib!tokens.Mim.impl&%21.segment_enable_strong. fuel%lib!tokens.Mim.impl&%21.segment_enable_enabled. fuel%lib!tokens.Mim.impl&%21.create_page_mk_tokens. fuel%lib!tokens.Mim.impl&%21.create_page_mk_tokens_strong. fuel%lib!tokens.Mim.impl&%21.create_page_mk_tokens_enabled. fuel%lib!tokens.Mim.impl&%21.page_enable. fuel%lib!tokens.Mim.impl&%21.page_enable_strong. fuel%lib!tokens.Mim.impl&%21.page_enable_enabled. fuel%lib!tokens.Mim.impl&%21.page_mk_block_tokens. fuel%lib!tokens.Mim.impl&%21.page_mk_block_tokens_strong. fuel%lib!tokens.Mim.impl&%21.page_mk_block_tokens_enabled. fuel%lib!tokens.Mim.impl&%21.page_destroy_block_tokens. fuel%lib!tokens.Mim.impl&%21.page_destroy_block_tokens_strong. fuel%lib!tokens.Mim.impl&%21.page_destroy_block_tokens_enabled. fuel%lib!tokens.Mim.impl&%21.page_check_delay_state. fuel%lib!tokens.Mim.impl&%21.page_check_delay_state_strong. fuel%lib!tokens.Mim.impl&%21.page_check_delay_state_enabled. fuel%lib!tokens.Mim.impl&%21.page_disable. fuel%lib!tokens.Mim.impl&%21.page_disable_strong. fuel%lib!tokens.Mim.impl&%21.page_disable_enabled. fuel%lib!tokens.Mim.impl&%21.page_destroy_tokens. fuel%lib!tokens.Mim.impl&%21.page_destroy_tokens_strong. fuel%lib!tokens.Mim.impl&%21.page_destroy_tokens_enabled. fuel%lib!tokens.Mim.impl&%21.block_tokens_distinct. fuel%lib!tokens.Mim.impl&%21.block_tokens_distinct_strong. fuel%lib!tokens.Mim.impl&%21.block_tokens_distinct_enabled. fuel%lib!tokens.Mim.impl&%21.block_in_range. fuel%lib!tokens.Mim.impl&%21.block_in_range_strong. fuel%lib!tokens.Mim.impl&%21.block_in_range_enabled. fuel%lib!tokens.Mim.impl&%21.next_by. fuel%lib!tokens.Mim.impl&%21.next. fuel%lib!tokens.Mim.impl&%21.next_strong_by. fuel%lib!tokens.Mim.impl&%21.next_strong. fuel%lib!tokens.Mim.impl&%21.init_by. fuel%lib!tokens.Mim.impl&%21.init. fuel%lib!tokens.Mim.impl&%21.invariant. fuel%lib!tokens.Mim.impl&%21.inv_finite. fuel%lib!tokens.Mim.impl&%21.inv_reserved. fuel%lib!tokens.Mim.impl&%21.inv_reserved2. fuel%lib!tokens.Mim.impl&%21.inv_right_to_set_inst. fuel%lib!tokens.Mim.impl&%21.inv_heap_of_page_delay. fuel%lib!tokens.Mim.impl&%21.inv_delay_state. fuel%lib!tokens.Mim.impl&%21.inv_delay_actor. fuel%lib!tokens.Mim.impl&%21.inv_delay_actor_sub. fuel%lib!tokens.Mim.impl&%21.inv_checked_threads. fuel%lib!tokens.Mim.impl&%21.inv_no_delay_actor_for_checked. fuel%lib!tokens.Mim.impl&%21.right_to_use_thread_complement. fuel%lib!tokens.Mim.impl&%21.heap_of_thread_is_valid. fuel%lib!tokens.Mim.impl&%21.wf_heap_shared_access_requires_inst. fuel%lib!tokens.Mim.impl&%21.wf_heap_shared_access. fuel%lib!tokens.Mim.impl&%21.inv_thread_of_segment1. fuel%lib!tokens.Mim.impl&%21.inv_thread_of_segment2. fuel%lib!tokens.Mim.impl&%21.inv_thread_has_segment_for_page. fuel%lib!tokens.Mim.impl&%21.inv_thread_of_page1. fuel%lib!tokens.Mim.impl&%21.inv_thread_of_page2. fuel%lib!tokens.Mim.impl&%21.heap_of_page_is_correct. fuel%lib!tokens.Mim.impl&%21.inv_page_shared_access_dom. fuel%lib!tokens.Mim.impl&%21.inv_page_shared_access_eq. fuel%lib!tokens.Mim.impl&%21.inv_segment_shared_access_dom. fuel%lib!tokens.Mim.impl&%21.inv_segment_shared_access_eq. fuel%lib!tokens.Mim.impl&%21.inv_block_id_valid. fuel%lib!tokens.Mim.impl&%21.inv_block_id_at_idx_uniq. fuel%lib!tokens.Mim.impl&%21.heap_ids_thread_id1. fuel%lib!tokens.Mim.impl&%21.heap_ids_thread_id2. fuel%lib!tokens.Mim.impl&%21.inv_heap_shared_access. fuel%lib!tokens.Mim.impl&%21.page_implies_segment_enabled. fuel%lib!tokens.Mim.impl&%21.mk_fresh_segment_id. fuel%lib!tokens.Mim.impl&%21.okay_to_add_block. fuel%lib!tokens.Mim.impl&%21.inv_delay_state_for_page. fuel%lib!tokens.Mim.impl&%21.inv_delay_actor_for_page. fuel%lib!tokens.Mim.impl&%21.inv_block_id_valid_for_block. fuel%lib!tokens.Mim.impl&%21.block_properties. fuel%lib!tokens.Mim.impl&%21.blocks_has. fuel%lib!tokens.impl&%0.range_from. fuel%lib!tokens.impl&%1.page_id_for_slice. fuel%lib!tokens.impl&%1.get_slice_idx. fuel%lib!tokens.impl&%1.slice_idx_is_right. fuel%lib!tokens.segment_u_max. fuel%lib!tokens.segment_get_unused_uniq_field. fuel%lib!tokens.heap_u_max. fuel%lib!tokens.heap_get_unused_uniq_field. fuel%lib!types.impl&%16.wf. fuel%lib!types.impl&%17.wf. fuel%lib!types.impl&%17.wf2. fuel%lib!types.impl&%27.wf. fuel%lib!layout.is_heap_ptr. fuel%lib!layout.is_tld_ptr. fuel%lib!config.SLICE_SIZE. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!array.group_array_axioms.) (and (fuel_bool_default fuel%vstd!array.array_len_matches_n.) (fuel_bool_default fuel%vstd!array.lemma_array_index.))))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.ptrs_mut_eq.)))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_union.) (fuel_bool_default fuel%vstd!set.axiom_set_complement.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_union_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_choose_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_len.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_len.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_len.) (fuel_bool_default fuel%vstd!set.axiom_set_contains_len.) (fuel_bool_default fuel%vstd!set.axiom_set_choose_len.))))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%vstd!view.View./V (Dcr Type) Dcr)
(declare-fun proj%vstd!view.View./V (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort lib!commit_mask.CommitMask. 0)
(declare-sort lib!linked_list.LL. 0)
(declare-sort lib!linked_list.StuffAgree.Instance. 0)
(declare-sort lib!linked_list.StuffAgree.x. 0)
(declare-sort lib!linked_list.StuffAgree.y. 0)
(declare-sort lib!types.BoolAgree.Instance. 0)
(declare-sort lib!types.BoolAgree.x. 0)
(declare-sort lib!types.BoolAgree.y. 0)
(declare-sort vstd!atomic.PAtomicU64. 0)
(declare-sort vstd!atomic.PermissionU64. 0)
(declare-sort vstd!cell.PCell<u32.>. 0)
(declare-sort vstd!cell.PCell<usize.>. 0)
(declare-sort vstd!cell.PCell<lib!types.PageInner.>. 0)
(declare-sort vstd!cell.PCell<lib!types.SegmentHeaderMain.>. 0)
(declare-sort vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. 0)
(declare-sort vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. 0)
(declare-sort vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. 0)
(declare-sort vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.actor.>. 0)
(declare-sort vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.right_to_use_thread.>. 0)
(declare-sort vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_checked_state.>. 0)
(declare-sort vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_local_state.>. 0)
(declare-sort vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. 0)
(declare-sort vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. 0)
(declare-sort vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. 0)
(declare-sort vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. 0)
(declare-sort vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. 0)
(declare-sort vstd!map.Map<lib!tokens.HeapId./lib!tokens.Mim.reserved_uniq.>. 0)
(declare-sort vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. 0)
(declare-sort vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. 0)
(declare-sort vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. 0)
(declare-sort vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. 0)
(declare-sort vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay.>. 0)
(declare-sort vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay_actor.>. 0)
(declare-sort vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.heap_of_page.>. 0)
(declare-sort vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. 0)
(declare-sort vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. 0)
(declare-sort vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. 0)
(declare-sort vstd!map.Map<lib!tokens.SegmentId./lib!tokens.Mim.thread_of_segment.>. 0)
(declare-sort vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. 0)
(declare-sort vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. 0)
(declare-sort vstd!raw_ptr.DynMetadata. 0)
(declare-sort vstd!raw_ptr.IsExposed. 0)
(declare-sort vstd!raw_ptr.PointsTo<lib!types.Heap.>. 0)
(declare-sort vstd!raw_ptr.PointsTo<lib!types.Page.>. 0)
(declare-sort vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!set.Set<lib!thread.ThreadId.>. 0)
(declare-sort vstd!set.Set<lib!tokens.BlockId.>. 0)
(declare-sort vstd!set.Set<lib!tokens.HeapId.>. 0)
(declare-sort vstd!set.Set<lib!tokens.PageId.>. 0)
(declare-sort vstd!set.Set<lib!tokens.SegmentId.>. 0)
(declare-sort vstd!state_machine_internal.NoCopy. 0)
(declare-sort vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>. 0)
(declare-sort ptr_mut%<lib!linked_list.Node.>. 0)
(declare-sort ptr_mut%<lib!types.Heap.>. 0)
(declare-sort ptr_mut%<lib!types.Page.>. 0)
(declare-sort ptr_mut%<lib!types.SegmentHeader.>. 0)
(declare-sort ptr_mut%<lib!types.Tld.>. 0)
(declare-sort allocator_global%. 0)
(declare-datatypes ((core!option.Option. 0) (vstd!atomic_ghost.AtomicU64. 0) (vstd!atomic_ghost.AtomicPtr. 0) (vstd!raw_ptr.Metadata. 0) (vstd!raw_ptr.PtrData. 0) (vstd!raw_ptr.MemContents. 0) (vstd!raw_ptr.PointsToData. 0) (lib!tokens.Mim.State. 0) (lib!tokens.Mim.Step. 0) (lib!tokens.Mim.Config. 0) (lib!tokens.Mim.Instance. 0) (lib!tokens.Mim.right_to_set_inst. 0) (lib!tokens.Mim.right_to_set_inst_token_data. 0) (lib!tokens.Mim.my_inst. 0) (lib!tokens.Mim.my_inst_token_data. 0) (lib!tokens.Mim.thread_local_state. 0) (lib!tokens.Mim.thread_local_state_token_data. 0) (lib!tokens.Mim.right_to_use_thread. 0) (lib!tokens.Mim.right_to_use_thread_token_data. 0) (lib!tokens.Mim.block. 0) (lib!tokens.Mim.block_token_data. 0) (lib!tokens.Mim.thread_of_segment. 0) (lib!tokens.Mim.thread_of_segment_token_data. 0) (lib!tokens.Mim.delay. 0) (lib!tokens.Mim.delay_token_data. 0) (lib!tokens.Mim.heap_of_page. 0) (lib!tokens.Mim.heap_of_page_token_data. 0) (lib!tokens.Mim.actor. 0) (lib!tokens.Mim.actor_token_data. 0) (lib!tokens.Mim.delay_actor. 0) (lib!tokens.Mim.delay_actor_token_data. 0) (lib!tokens.Mim.reserved_uniq. 0) (lib!tokens.Mim.reserved_uniq_token_data. 0) (lib!tokens.Mim.thread_checked_state. 0) (lib!tokens.Mim.thread_checked_state_token_data. 0) (lib!thread.ThreadId. 0) (lib!tokens.HeapId. 0) (lib!tokens.TldId. 0) (lib!tokens.SegmentId. 0) (lib!tokens.PageId. 0) (lib!tokens.BlockId. 0) (lib!tokens.DelayState. 0) (lib!tokens.PageState. 0) (lib!tokens.SegmentState. 0) (lib!tokens.BlockState. 0) (lib!tokens.HeapState. 0) (lib!tokens.ThreadState. 0) (lib!tokens.ThreadCheckedState. 0) (lib!tokens.Actor. 0) (lib!tokens.DelayFreeingActor. 0) (lib!types.PageInner. 0) (lib!types.AtomicHeapPtr. 0) (lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. 0) (lib!types.Page. 0) (lib!types.PageSharedAccess. 0) (lib!types.SegmentKind. 0) (lib!types.SegmentHeaderMain. 0) (lib!types.SegmentHeaderMain2. 0) (lib!types.SegmentHeader. 0) (lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. 0) (lib!types.SegmentSharedAccess. 0) (lib!types.PageQueue. 0) (lib!types.Heap. 0) (lib!types.HeapSharedAccess. 0) (lib!types.SegmentsTld. 0) (lib!types.SpanQueueHeader. 0) (lib!types.Tld. 0) (lib!types.TldPtr. 0) (lib!linked_list.Node. 0) (lib!linked_list.ThreadLLSimple. 0) (lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. 0) (lib!linked_list.ThreadLLWithDelayBits. 0) (lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. 0) (tuple%0. 0) (tuple%1. 0) (tuple%2. 0) (tuple%3. 0) (tuple%4. 0) (tuple%13. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((vstd!atomic_ghost.AtomicU64./AtomicU64 (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic vstd!atomic.PAtomicU64.) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv Poly))) ((vstd!atomic_ghost.AtomicPtr./AtomicPtr (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?patomic Poly) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?atomic_inv Poly))) ((vstd!raw_ptr.Metadata./Thin ) (vstd!raw_ptr.Metadata./Length (vstd!raw_ptr.Metadata./Length/?0 Int)) (vstd!raw_ptr.Metadata./Dyn (vstd!raw_ptr.Metadata./Dyn/?0 vstd!raw_ptr.DynMetadata.))) ((vstd!raw_ptr.PtrData./PtrData (vstd!raw_ptr.PtrData./PtrData/?addr Int) (vstd!raw_ptr.PtrData./PtrData/?provenance vstd!raw_ptr.Provenance.) (vstd!raw_ptr.PtrData./PtrData/?metadata vstd!raw_ptr.Metadata.))) ((vstd!raw_ptr.MemContents./Uninit ) (vstd!raw_ptr.MemContents./Init (vstd!raw_ptr.MemContents./Init/?0 Poly))) ((vstd!raw_ptr.PointsToData./PointsToData (vstd!raw_ptr.PointsToData./PointsToData/?ptr Poly) (vstd!raw_ptr.PointsToData./PointsToData/?opt_value vstd!raw_ptr.MemContents.))) ((lib!tokens.Mim.State./State (lib!tokens.Mim.State./State/?right_to_set_inst Bool) (lib!tokens.Mim.State./State/?my_inst core!option.Option.) (lib!tokens.Mim.State./State/?thread_local_state vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>.) (lib!tokens.Mim.State./State/?right_to_use_thread vstd!set.Set<lib!thread.ThreadId.>.) (lib!tokens.Mim.State./State/?block vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>.) (lib!tokens.Mim.State./State/?thread_of_segment vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>.) (lib!tokens.Mim.State./State/?delay vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>.) (lib!tokens.Mim.State./State/?heap_of_page vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>.) (lib!tokens.Mim.State./State/?actor vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>.) (lib!tokens.Mim.State./State/?delay_actor vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>.) (lib!tokens.Mim.State./State/?segment_shared_access vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>.) (lib!tokens.Mim.State./State/?page_shared_access vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.) (lib!tokens.Mim.State./State/?heap_shared_access vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>.) (lib!tokens.Mim.State./State/?reserved_uniq vstd!set.Set<lib!tokens.HeapId.>.) (lib!tokens.Mim.State./State/?thread_checked_state vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>.) (lib!tokens.Mim.State./State/?heap_to_thread vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>.))) ((lib!tokens.Mim.Step./set_inst (lib!tokens.Mim.Step./set_inst/?0 lib!tokens.Mim.Instance.)) (lib!tokens.Mim.Step./actor_make_idle (lib!tokens.Mim.Step./actor_make_idle/?0 lib!thread.ThreadId.)) (lib!tokens.Mim.Step./actor_abandon (lib!tokens.Mim.Step./actor_abandon/?0 lib!thread.ThreadId.)) (lib!tokens.Mim.Step./set_use_delayed_free (lib!tokens.Mim.Step./set_use_delayed_free/?0 lib!tokens.PageId.)) (lib!tokens.Mim.Step./delay_enter_freeing (lib!tokens.Mim.Step./delay_enter_freeing/?0 lib!tokens.PageId.) (lib!tokens.Mim.Step./delay_enter_freeing/?1 lib!tokens.BlockId.)) (lib!tokens.Mim.Step./delay_leave_freeing (lib!tokens.Mim.Step./delay_leave_freeing/?0 lib!tokens.PageId.)) (lib!tokens.Mim.Step./delay_lookup_heap (lib!tokens.Mim.Step./delay_lookup_heap/?0 lib!tokens.BlockId.)) (lib!tokens.Mim.Step./block_set_heap_id (lib!tokens.Mim.Step./block_set_heap_id/?0 lib!tokens.BlockId.)) (lib!tokens.Mim.Step./reserve_uniq_identifier ) (lib!tokens.Mim.Step./create_thread_mk_tokens (lib!tokens.Mim.Step./create_thread_mk_tokens/?0 lib!thread.ThreadId.) (lib!tokens.Mim.Step./create_thread_mk_tokens/?1 lib!tokens.ThreadState.)) (lib!tokens.Mim.Step./create_segment_mk_tokens (lib!tokens.Mim.Step./create_segment_mk_tokens/?0 lib!thread.ThreadId.) (lib!tokens.Mim.Step./create_segment_mk_tokens/?1 lib!tokens.SegmentId.) (lib!tokens.Mim.Step./create_segment_mk_tokens/?2 lib!tokens.SegmentState.)) (lib!tokens.Mim.Step./segment_enable (lib!tokens.Mim.Step./segment_enable/?0 lib!thread.ThreadId.) (lib!tokens.Mim.Step./segment_enable/?1 lib!tokens.SegmentId.) (lib!tokens.Mim.Step./segment_enable/?2 lib!types.SegmentSharedAccess.)) (lib!tokens.Mim.Step./create_page_mk_tokens (lib!tokens.Mim.Step./create_page_mk_tokens/?0 lib!thread.ThreadId.) (lib!tokens.Mim.Step./create_page_mk_tokens/?1 lib!tokens.PageId.) (lib!tokens.Mim.Step./create_page_mk_tokens/?2 Int) (lib!tokens.Mim.Step./create_page_mk_tokens/?3 Int) (lib!tokens.Mim.Step./create_page_mk_tokens/?4 vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)) (lib!tokens.Mim.Step./page_enable (lib!tokens.Mim.Step./page_enable/?0 lib!thread.ThreadId.) (lib!tokens.Mim.Step./page_enable/?1 lib!tokens.PageId.) (lib!tokens.Mim.Step./page_enable/?2 Int) (lib!tokens.Mim.Step./page_enable/?3 vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.) (lib!tokens.Mim.Step./page_enable/?4 vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.)) (lib!tokens.Mim.Step./page_mk_block_tokens (lib!tokens.Mim.Step./page_mk_block_tokens/?0 lib!thread.ThreadId.) (lib!tokens.Mim.Step./page_mk_block_tokens/?1 lib!tokens.PageId.) (lib!tokens.Mim.Step./page_mk_block_tokens/?2 Int) (lib!tokens.Mim.Step./page_mk_block_tokens/?3 Int) (lib!tokens.Mim.Step./page_mk_block_tokens/?4 Int)) (lib!tokens.Mim.Step./page_destroy_block_tokens (lib!tokens.Mim.Step./page_destroy_block_tokens/?0 lib!thread.ThreadId.) (lib!tokens.Mim.Step./page_destroy_block_tokens/?1 lib!tokens.PageId.) (lib!tokens.Mim.Step./page_destroy_block_tokens/?2 vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>.)) (lib!tokens.Mim.Step./page_check_delay_state (lib!tokens.Mim.Step./page_check_delay_state/?0 lib!thread.ThreadId.) (lib!tokens.Mim.Step./page_check_delay_state/?1 lib!tokens.PageId.)) (lib!tokens.Mim.Step./page_disable (lib!tokens.Mim.Step./page_disable/?0 lib!thread.ThreadId.) (lib!tokens.Mim.Step./page_disable/?1 lib!tokens.PageId.) (lib!tokens.Mim.Step./page_disable/?2 Int)) (lib!tokens.Mim.Step./page_destroy_tokens (lib!tokens.Mim.Step./page_destroy_tokens/?0 lib!thread.ThreadId.) (lib!tokens.Mim.Step./page_destroy_tokens/?1 lib!tokens.PageId.) (lib!tokens.Mim.Step./page_destroy_tokens/?2 Int)) (lib!tokens.Mim.Step./block_tokens_distinct (lib!tokens.Mim.Step./block_tokens_distinct/?0 lib!tokens.BlockId.) (lib!tokens.Mim.Step./block_tokens_distinct/?1 lib!tokens.BlockId.)) (lib!tokens.Mim.Step./block_in_range (lib!tokens.Mim.Step./block_in_range/?0 lib!thread.ThreadId.) (lib!tokens.Mim.Step./block_in_range/?1 lib!tokens.BlockId.)) (lib!tokens.Mim.Step./dummy_to_use_type_params (lib!tokens.Mim.Step./dummy_to_use_type_params/?0 lib!tokens.Mim.State.))) ((lib!tokens.Mim.Config./initialize ) (lib!tokens.Mim.Config./dummy_to_use_type_params (lib!tokens.Mim.Config./dummy_to_use_type_params/?0 lib!tokens.Mim.State.))) ((lib!tokens.Mim.Instance./Instance (lib!tokens.Mim.Instance./Instance/?send_sync vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>.) (lib!tokens.Mim.Instance./Instance/?state core!option.Option.) (lib!tokens.Mim.Instance./Instance/?location Int))) ((lib!tokens.Mim.right_to_set_inst./right_to_set_inst (lib!tokens.Mim.right_to_set_inst./right_to_set_inst/?dummy_instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.right_to_set_inst./right_to_set_inst/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!tokens.Mim.right_to_set_inst_token_data./right_to_set_inst_token_data (lib!tokens.Mim.right_to_set_inst_token_data./right_to_set_inst_token_data/?instance lib!tokens.Mim.Instance.))) ((lib!tokens.Mim.my_inst./my_inst (lib!tokens.Mim.my_inst./my_inst/?dummy_instance lib!tokens.Mim.Instance.))) ((lib!tokens.Mim.my_inst_token_data./my_inst_token_data (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/?value lib!tokens.Mim.Instance.))) ((lib!tokens.Mim.thread_local_state./thread_local_state (lib!tokens.Mim.thread_local_state./thread_local_state/?dummy_instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.thread_local_state./thread_local_state/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?key lib!thread.ThreadId.) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?value lib!tokens.ThreadState.))) ((lib!tokens.Mim.right_to_use_thread./right_to_use_thread (lib!tokens.Mim.right_to_use_thread./right_to_use_thread/?dummy_instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.right_to_use_thread./right_to_use_thread/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data (lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data/?key lib!thread.ThreadId.))) ((lib!tokens.Mim.block./block (lib!tokens.Mim.block./block/?dummy_instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.block./block/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!tokens.Mim.block_token_data./block_token_data (lib!tokens.Mim.block_token_data./block_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.block_token_data./block_token_data/?key lib!tokens.BlockId.) (lib!tokens.Mim.block_token_data./block_token_data/?value lib!tokens.BlockState.))) ((lib!tokens.Mim.thread_of_segment./thread_of_segment (lib!tokens.Mim.thread_of_segment./thread_of_segment/?dummy_instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.thread_of_segment./thread_of_segment/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/?key lib!tokens.SegmentId.) (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/?value lib!thread.ThreadId.))) ((lib!tokens.Mim.delay./delay (lib!tokens.Mim.delay./delay/?dummy_instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.delay./delay/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!tokens.Mim.delay_token_data./delay_token_data (lib!tokens.Mim.delay_token_data./delay_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.delay_token_data./delay_token_data/?key lib!tokens.PageId.) (lib!tokens.Mim.delay_token_data./delay_token_data/?value lib!tokens.DelayState.))) ((lib!tokens.Mim.heap_of_page./heap_of_page (lib!tokens.Mim.heap_of_page./heap_of_page/?dummy_instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.heap_of_page./heap_of_page/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/?key lib!tokens.PageId.) (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/?value lib!tokens.HeapId.))) ((lib!tokens.Mim.actor./actor (lib!tokens.Mim.actor./actor/?dummy_instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.actor./actor/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!tokens.Mim.actor_token_data./actor_token_data (lib!tokens.Mim.actor_token_data./actor_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.actor_token_data./actor_token_data/?key lib!thread.ThreadId.) (lib!tokens.Mim.actor_token_data./actor_token_data/?value lib!tokens.Actor.))) ((lib!tokens.Mim.delay_actor./delay_actor (lib!tokens.Mim.delay_actor./delay_actor/?dummy_instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.delay_actor./delay_actor/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/?key lib!tokens.PageId.) (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/?value lib!tokens.DelayFreeingActor.))) ((lib!tokens.Mim.reserved_uniq./reserved_uniq (lib!tokens.Mim.reserved_uniq./reserved_uniq/?dummy_instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.reserved_uniq./reserved_uniq/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data (lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data/?key lib!tokens.HeapId.))) ((lib!tokens.Mim.thread_checked_state./thread_checked_state (lib!tokens.Mim.thread_checked_state./thread_checked_state/?dummy_instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.thread_checked_state./thread_checked_state/?no_copy vstd!state_machine_internal.NoCopy.))) ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?instance lib!tokens.Mim.Instance.) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?key lib!thread.ThreadId.) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?value lib!tokens.ThreadCheckedState.))) ((lib!thread.ThreadId./ThreadId (lib!thread.ThreadId./ThreadId/?thread_id Int))) ((lib!tokens.HeapId./HeapId (lib!tokens.HeapId./HeapId/?id Int) (lib!tokens.HeapId./HeapId/?provenance vstd!raw_ptr.Provenance.) (lib!tokens.HeapId./HeapId/?uniq Int))) ((lib!tokens.TldId./TldId (lib!tokens.TldId./TldId/?id Int) (lib!tokens.TldId./TldId/?provenance vstd!raw_ptr.Provenance.))) ((lib!tokens.SegmentId./SegmentId (lib!tokens.SegmentId./SegmentId/?id Int) (lib!tokens.SegmentId./SegmentId/?provenance vstd!raw_ptr.Provenance.) (lib!tokens.SegmentId./SegmentId/?uniq Int))) ((lib!tokens.PageId./PageId (lib!tokens.PageId./PageId/?segment_id lib!tokens.SegmentId.) (lib!tokens.PageId./PageId/?idx Int))) ((lib!tokens.BlockId./BlockId (lib!tokens.BlockId./BlockId/?page_id lib!tokens.PageId.) (lib!tokens.BlockId./BlockId/?idx Int) (lib!tokens.BlockId./BlockId/?slice_idx Int) (lib!tokens.BlockId./BlockId/?block_size Int))) ((lib!tokens.DelayState./UseDelayedFree ) (lib!tokens.DelayState./Freeing ) (lib!tokens.DelayState./NoDelayedFree ) (lib!tokens.DelayState./NeverDelayedFree )) ((lib!tokens.PageState./PageState (lib!tokens.PageState./PageState/?offset Int) (lib!tokens.PageState./PageState/?block_size Int) (lib!tokens.PageState./PageState/?num_blocks Int) (lib!tokens.PageState./PageState/?shared_access lib!types.PageSharedAccess.) (lib!tokens.PageState./PageState/?is_enabled Bool))) ((lib!tokens.SegmentState./SegmentState (lib!tokens.SegmentState./SegmentState/?shared_access lib!types.SegmentSharedAccess.) (lib!tokens.SegmentState./SegmentState/?is_enabled Bool))) ((lib!tokens.BlockState./BlockState (lib!tokens.BlockState./BlockState/?segment_shared_access lib!types.SegmentSharedAccess.) (lib!tokens.BlockState./BlockState/?page_shared_access lib!types.PageSharedAccess.) (lib!tokens.BlockState./BlockState/?page_slice_shared_access lib!types.PageSharedAccess.) (lib!tokens.BlockState./BlockState/?heap_id core!option.Option.))) ((lib!tokens.HeapState./HeapState (lib!tokens.HeapState./HeapState/?shared_access lib!types.HeapSharedAccess.))) ((lib!tokens.ThreadState./ThreadState (lib!tokens.ThreadState./ThreadState/?heap_id lib!tokens.HeapId.) (lib!tokens.ThreadState./ThreadState/?heap lib!tokens.HeapState.) (lib!tokens.ThreadState./ThreadState/?segments vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.) (lib!tokens.ThreadState./ThreadState/?pages vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.))) ((lib!tokens.ThreadCheckedState./ThreadCheckedState (lib!tokens.ThreadCheckedState./ThreadCheckedState/?pages vstd!set.Set<lib!tokens.PageId.>.))) ((lib!tokens.Actor./Idle ) (lib!tokens.Actor./Abandoned )) ((lib!tokens.DelayFreeingActor./HeapUnknown ) (lib!tokens.DelayFreeingActor./Heap (lib!tokens.DelayFreeingActor./Heap/?0 lib!tokens.HeapId.) (lib!tokens.DelayFreeingActor./Heap/?1 lib!types.HeapSharedAccess.) (lib!tokens.DelayFreeingActor./Heap/?2 lib!types.PageSharedAccess.))) ((lib!types.PageInner./PageInner (lib!types.PageInner./PageInner/?flags0 Int) (lib!types.PageInner./PageInner/?capacity Int) (lib!types.PageInner./PageInner/?reserved Int) (lib!types.PageInner./PageInner/?flags1 Int) (lib!types.PageInner./PageInner/?flags2 Int) (lib!types.PageInner./PageInner/?free lib!linked_list.LL.) (lib!types.PageInner./PageInner/?used Int) (lib!types.PageInner./PageInner/?xblock_size Int) (lib!types.PageInner./PageInner/?local_free lib!linked_list.LL.))) ((lib!types.AtomicHeapPtr./AtomicHeapPtr (lib!types.AtomicHeapPtr./AtomicHeapPtr/?atomic vstd!atomic_ghost.AtomicPtr.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?instance lib!tokens.Mim.Instance.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?page_id lib!tokens.PageId.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp lib!types.BoolAgree.x.) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp_inst lib!types.BoolAgree.Instance.))) ((lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic./InvariantPredicate_auto_AtomicHeapPtr_atomic )) ((lib!types.Page./Page (lib!types.Page./Page/?count vstd!cell.PCell<u32.>.) (lib!types.Page./Page/?offset Int) (lib!types.Page./Page/?inner vstd!cell.PCell<lib!types.PageInner.>.) (lib!types.Page./Page/?xthread_free lib!linked_list.ThreadLLWithDelayBits.) (lib!types.Page./Page/?xheap lib!types.AtomicHeapPtr.) (lib!types.Page./Page/?prev vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (lib!types.Page./Page/?next vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (lib!types.Page./Page/?padding Int))) ((lib!types.PageSharedAccess./PageSharedAccess (lib!types.PageSharedAccess./PageSharedAccess/?points_to vstd!raw_ptr.PointsTo<lib!types.Page.>.) (lib!types.PageSharedAccess./PageSharedAccess/?exposed vstd!raw_ptr.IsExposed.))) ((lib!types.SegmentKind./Normal ) (lib!types.SegmentKind./Huge )) ((lib!types.SegmentHeaderMain./SegmentHeaderMain (lib!types.SegmentHeaderMain./SegmentHeaderMain/?memid Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_pinned Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_large Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_committed Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_alignment Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_align_offset Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?allow_decommit Bool) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_expire Int) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_mask lib!commit_mask.CommitMask.) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?commit_mask lib!commit_mask.CommitMask.))) ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2 (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?next ptr_mut%<lib!types.SegmentHeader.>.) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned_visits Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?used Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?cookie Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_slices Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_info_slices Int) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?kind lib!types.SegmentKind.) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?slice_entries Int))) ((lib!types.SegmentHeader./SegmentHeader (lib!types.SegmentHeader./SegmentHeader/?main vstd!cell.PCell<lib!types.SegmentHeaderMain.>.) (lib!types.SegmentHeader./SegmentHeader/?abandoned_next Int) (lib!types.SegmentHeader./SegmentHeader/?main2 vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.) (lib!types.SegmentHeader./SegmentHeader/?thread_id vstd!atomic_ghost.AtomicU64.) (lib!types.SegmentHeader./SegmentHeader/?instance lib!tokens.Mim.Instance.) (lib!types.SegmentHeader./SegmentHeader/?segment_id lib!tokens.SegmentId.))) ((lib!types.InvariantPredicate_auto_SegmentHeader_thread_id./InvariantPredicate_auto_SegmentHeader_thread_id )) ((lib!types.SegmentSharedAccess./SegmentSharedAccess (lib!types.SegmentSharedAccess./SegmentSharedAccess/?points_to vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.))) ((lib!types.PageQueue./PageQueue (lib!types.PageQueue./PageQueue/?first ptr_mut%<lib!types.Page.>.) (lib!types.PageQueue./PageQueue/?last ptr_mut%<lib!types.Page.>.) (lib!types.PageQueue./PageQueue/?block_size Int))) ((lib!types.Heap./Heap (lib!types.Heap./Heap/?tld_ptr lib!types.TldPtr.) (lib!types.Heap./Heap/?pages_free_direct Poly) (lib!types.Heap./Heap/?pages Poly) (lib!types.Heap./Heap/?thread_delayed_free lib!linked_list.ThreadLLSimple.) (lib!types.Heap./Heap/?thread_id lib!thread.ThreadId.) (lib!types.Heap./Heap/?arena_id Int) (lib!types.Heap./Heap/?page_count vstd!cell.PCell<usize.>.) (lib!types.Heap./Heap/?page_retired_min vstd!cell.PCell<usize.>.) (lib!types.Heap./Heap/?page_retired_max vstd!cell.PCell<usize.>.) (lib!types.Heap./Heap/?no_reclaim Bool) (lib!types.Heap./Heap/?page_empty_ptr ptr_mut%<lib!types.Page.>.))) ((lib!types.HeapSharedAccess./HeapSharedAccess (lib!types.HeapSharedAccess./HeapSharedAccess/?points_to vstd!raw_ptr.PointsTo<lib!types.Heap.>.))) ((lib!types.SegmentsTld./SegmentsTld (lib!types.SegmentsTld./SegmentsTld/?span_queue_headers %%Function%%) (lib!types.SegmentsTld./SegmentsTld/?count Int) (lib!types.SegmentsTld./SegmentsTld/?peak_count Int) (lib!types.SegmentsTld./SegmentsTld/?current_size Int) (lib!types.SegmentsTld./SegmentsTld/?peak_size Int))) ((lib!types.SpanQueueHeader./SpanQueueHeader (lib!types.SpanQueueHeader./SpanQueueHeader/?first ptr_mut%<lib!types.Page.>.) (lib!types.SpanQueueHeader./SpanQueueHeader/?last ptr_mut%<lib!types.Page.>.))) ((lib!types.Tld./Tld (lib!types.Tld./Tld/?heap_backing ptr_mut%<lib!types.Heap.>.) (lib!types.Tld./Tld/?segments lib!types.SegmentsTld.))) ((lib!types.TldPtr./TldPtr (lib!types.TldPtr./TldPtr/?tld_ptr ptr_mut%<lib!types.Tld.>.) (lib!types.TldPtr./TldPtr/?tld_id lib!tokens.TldId.))) ((lib!linked_list.Node./Node (lib!linked_list.Node./Node/?ptr ptr_mut%<lib!linked_list.Node.>.))) ((lib!linked_list.ThreadLLSimple./ThreadLLSimple (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?instance lib!tokens.Mim.Instance.) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?heap_id lib!tokens.HeapId.) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?atomic vstd!atomic_ghost.AtomicPtr.))) ((lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic./InvariantPredicate_auto_ThreadLLSimple_atomic )) ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?instance lib!tokens.Mim.Instance.) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?atomic vstd!atomic_ghost.AtomicPtr.) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp lib!linked_list.StuffAgree.x.) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp_inst lib!linked_list.StuffAgree.Instance.))) ((lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic./InvariantPredicate_auto_ThreadLLWithDelayBits_atomic )) ((tuple%0./tuple%0 )) ((tuple%1./tuple%1 (tuple%1./tuple%1/?0 Poly))) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly))) ((tuple%13./tuple%13 (tuple%13./tuple%13/?0 Poly) (tuple%13./tuple%13/?1 Poly) (tuple%13./tuple%13/?2 Poly) (tuple%13./tuple%13/?3 Poly) (tuple%13./tuple%13/?4 Poly) (tuple%13./tuple%13/?5 Poly) (tuple%13./tuple%13/?6 Poly) (tuple%13./tuple%13/?7 Poly) (tuple%13./tuple%13/?8 Poly) (tuple%13./tuple%13/?9 Poly) (tuple%13./tuple%13/?10 Poly) (tuple%13./tuple%13/?11 Poly) (tuple%13./tuple%13/?12 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/patomic (vstd!atomic_ghost.AtomicU64.) vstd!atomic.PAtomicU64.)
(declare-fun vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic (vstd!atomic_ghost.AtomicPtr.) Poly)
(declare-fun vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (vstd!atomic_ghost.AtomicPtr.) Poly)
(declare-fun vstd!raw_ptr.Metadata./Length/0 (vstd!raw_ptr.Metadata.) Int)
(declare-fun vstd!raw_ptr.Metadata./Dyn/0 (vstd!raw_ptr.Metadata.) vstd!raw_ptr.DynMetadata.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/addr (vstd!raw_ptr.PtrData.) Int)
(declare-fun vstd!raw_ptr.PtrData./PtrData/provenance (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Provenance.)
(declare-fun vstd!raw_ptr.PtrData./PtrData/metadata (vstd!raw_ptr.PtrData.) vstd!raw_ptr.Metadata.)
(declare-fun vstd!raw_ptr.MemContents./Init/0 (vstd!raw_ptr.MemContents.) Poly)
(declare-fun vstd!raw_ptr.PointsToData./PointsToData/ptr (vstd!raw_ptr.PointsToData.) Poly)
(declare-fun vstd!raw_ptr.PointsToData./PointsToData/opt_value (vstd!raw_ptr.PointsToData.) vstd!raw_ptr.MemContents.)
(declare-fun lib!tokens.Mim.State./State/right_to_set_inst (lib!tokens.Mim.State.) Bool)
(declare-fun lib!tokens.Mim.State./State/my_inst (lib!tokens.Mim.State.) core!option.Option.)
(declare-fun lib!tokens.Mim.State./State/thread_local_state (lib!tokens.Mim.State.) vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>.)
(declare-fun lib!tokens.Mim.State./State/right_to_use_thread (lib!tokens.Mim.State.) vstd!set.Set<lib!thread.ThreadId.>.)
(declare-fun lib!tokens.Mim.State./State/block (lib!tokens.Mim.State.) vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>.)
(declare-fun lib!tokens.Mim.State./State/thread_of_segment (lib!tokens.Mim.State.) vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>.)
(declare-fun lib!tokens.Mim.State./State/delay (lib!tokens.Mim.State.) vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>.)
(declare-fun lib!tokens.Mim.State./State/heap_of_page (lib!tokens.Mim.State.) vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>.)
(declare-fun lib!tokens.Mim.State./State/actor (lib!tokens.Mim.State.) vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>.)
(declare-fun lib!tokens.Mim.State./State/delay_actor (lib!tokens.Mim.State.) vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>.)
(declare-fun lib!tokens.Mim.State./State/segment_shared_access (lib!tokens.Mim.State.) vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>.)
(declare-fun lib!tokens.Mim.State./State/page_shared_access (lib!tokens.Mim.State.) vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.)
(declare-fun lib!tokens.Mim.State./State/heap_shared_access (lib!tokens.Mim.State.) vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>.)
(declare-fun lib!tokens.Mim.State./State/reserved_uniq (lib!tokens.Mim.State.) vstd!set.Set<lib!tokens.HeapId.>.)
(declare-fun lib!tokens.Mim.State./State/thread_checked_state (lib!tokens.Mim.State.) vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>.)
(declare-fun lib!tokens.Mim.State./State/heap_to_thread (lib!tokens.Mim.State.) vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>.)
(declare-fun lib!tokens.Mim.Step./set_inst/0 (lib!tokens.Mim.Step.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.Step./actor_make_idle/0 (lib!tokens.Mim.Step.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.Step./actor_abandon/0 (lib!tokens.Mim.Step.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.Step./set_use_delayed_free/0 (lib!tokens.Mim.Step.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.Step./delay_enter_freeing/0 (lib!tokens.Mim.Step.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.Step./delay_enter_freeing/1 (lib!tokens.Mim.Step.) lib!tokens.BlockId.)
(declare-fun lib!tokens.Mim.Step./delay_leave_freeing/0 (lib!tokens.Mim.Step.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.Step./delay_lookup_heap/0 (lib!tokens.Mim.Step.) lib!tokens.BlockId.)
(declare-fun lib!tokens.Mim.Step./block_set_heap_id/0 (lib!tokens.Mim.Step.) lib!tokens.BlockId.)
(declare-fun lib!tokens.Mim.Step./create_thread_mk_tokens/0 (lib!tokens.Mim.Step.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.Step./create_thread_mk_tokens/1 (lib!tokens.Mim.Step.) lib!tokens.ThreadState.)
(declare-fun lib!tokens.Mim.Step./create_segment_mk_tokens/0 (lib!tokens.Mim.Step.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.Step./create_segment_mk_tokens/1 (lib!tokens.Mim.Step.) lib!tokens.SegmentId.)
(declare-fun lib!tokens.Mim.Step./create_segment_mk_tokens/2 (lib!tokens.Mim.Step.) lib!tokens.SegmentState.)
(declare-fun lib!tokens.Mim.Step./segment_enable/0 (lib!tokens.Mim.Step.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.Step./segment_enable/1 (lib!tokens.Mim.Step.) lib!tokens.SegmentId.)
(declare-fun lib!tokens.Mim.Step./segment_enable/2 (lib!tokens.Mim.Step.) lib!types.SegmentSharedAccess.)
(declare-fun lib!tokens.Mim.Step./create_page_mk_tokens/0 (lib!tokens.Mim.Step.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.Step./create_page_mk_tokens/1 (lib!tokens.Mim.Step.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.Step./create_page_mk_tokens/2 (lib!tokens.Mim.Step.) Int)
(declare-fun lib!tokens.Mim.Step./create_page_mk_tokens/3 (lib!tokens.Mim.Step.) Int)
(declare-fun lib!tokens.Mim.Step./create_page_mk_tokens/4 (lib!tokens.Mim.Step.) vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)
(declare-fun lib!tokens.Mim.Step./page_enable/0 (lib!tokens.Mim.Step.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.Step./page_enable/1 (lib!tokens.Mim.Step.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.Step./page_enable/2 (lib!tokens.Mim.Step.) Int)
(declare-fun lib!tokens.Mim.Step./page_enable/3 (lib!tokens.Mim.Step.) vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)
(declare-fun lib!tokens.Mim.Step./page_enable/4 (lib!tokens.Mim.Step.) vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.)
(declare-fun lib!tokens.Mim.Step./page_mk_block_tokens/0 (lib!tokens.Mim.Step.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.Step./page_mk_block_tokens/1 (lib!tokens.Mim.Step.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.Step./page_mk_block_tokens/2 (lib!tokens.Mim.Step.) Int)
(declare-fun lib!tokens.Mim.Step./page_mk_block_tokens/3 (lib!tokens.Mim.Step.) Int)
(declare-fun lib!tokens.Mim.Step./page_mk_block_tokens/4 (lib!tokens.Mim.Step.) Int)
(declare-fun lib!tokens.Mim.Step./page_destroy_block_tokens/0 (lib!tokens.Mim.Step.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.Step./page_destroy_block_tokens/1 (lib!tokens.Mim.Step.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.Step./page_destroy_block_tokens/2 (lib!tokens.Mim.Step.) vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>.)
(declare-fun lib!tokens.Mim.Step./page_check_delay_state/0 (lib!tokens.Mim.Step.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.Step./page_check_delay_state/1 (lib!tokens.Mim.Step.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.Step./page_disable/0 (lib!tokens.Mim.Step.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.Step./page_disable/1 (lib!tokens.Mim.Step.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.Step./page_disable/2 (lib!tokens.Mim.Step.) Int)
(declare-fun lib!tokens.Mim.Step./page_destroy_tokens/0 (lib!tokens.Mim.Step.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.Step./page_destroy_tokens/1 (lib!tokens.Mim.Step.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.Step./page_destroy_tokens/2 (lib!tokens.Mim.Step.) Int)
(declare-fun lib!tokens.Mim.Step./block_tokens_distinct/0 (lib!tokens.Mim.Step.) lib!tokens.BlockId.)
(declare-fun lib!tokens.Mim.Step./block_tokens_distinct/1 (lib!tokens.Mim.Step.) lib!tokens.BlockId.)
(declare-fun lib!tokens.Mim.Step./block_in_range/0 (lib!tokens.Mim.Step.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.Step./block_in_range/1 (lib!tokens.Mim.Step.) lib!tokens.BlockId.)
(declare-fun lib!tokens.Mim.Step./dummy_to_use_type_params/0 (lib!tokens.Mim.Step.) lib!tokens.Mim.State.)
(declare-fun lib!tokens.Mim.Config./dummy_to_use_type_params/0 (lib!tokens.Mim.Config.) lib!tokens.Mim.State.)
(declare-fun lib!tokens.Mim.Instance./Instance/send_sync (lib!tokens.Mim.Instance.) vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>.)
(declare-fun lib!tokens.Mim.Instance./Instance/state (lib!tokens.Mim.Instance.) core!option.Option.)
(declare-fun lib!tokens.Mim.Instance./Instance/location (lib!tokens.Mim.Instance.) Int)
(declare-fun lib!tokens.Mim.right_to_set_inst./right_to_set_inst/dummy_instance (lib!tokens.Mim.right_to_set_inst.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.right_to_set_inst./right_to_set_inst/no_copy (lib!tokens.Mim.right_to_set_inst.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!tokens.Mim.right_to_set_inst_token_data./right_to_set_inst_token_data/instance (lib!tokens.Mim.right_to_set_inst_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.my_inst./my_inst/dummy_instance (lib!tokens.Mim.my_inst.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.my_inst_token_data./my_inst_token_data/instance (lib!tokens.Mim.my_inst_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.my_inst_token_data./my_inst_token_data/value (lib!tokens.Mim.my_inst_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.thread_local_state./thread_local_state/dummy_instance (lib!tokens.Mim.thread_local_state.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.thread_local_state./thread_local_state/no_copy (lib!tokens.Mim.thread_local_state.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance (lib!tokens.Mim.thread_local_state_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (lib!tokens.Mim.thread_local_state_token_data.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (lib!tokens.Mim.thread_local_state_token_data.) lib!tokens.ThreadState.)
(declare-fun lib!tokens.Mim.right_to_use_thread./right_to_use_thread/dummy_instance (lib!tokens.Mim.right_to_use_thread.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.right_to_use_thread./right_to_use_thread/no_copy (lib!tokens.Mim.right_to_use_thread.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data/instance (lib!tokens.Mim.right_to_use_thread_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data/key (lib!tokens.Mim.right_to_use_thread_token_data.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.block./block/dummy_instance (lib!tokens.Mim.block.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.block./block/no_copy (lib!tokens.Mim.block.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!tokens.Mim.block_token_data./block_token_data/instance (lib!tokens.Mim.block_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.block_token_data./block_token_data/key (lib!tokens.Mim.block_token_data.) lib!tokens.BlockId.)
(declare-fun lib!tokens.Mim.block_token_data./block_token_data/value (lib!tokens.Mim.block_token_data.) lib!tokens.BlockState.)
(declare-fun lib!tokens.Mim.thread_of_segment./thread_of_segment/dummy_instance (lib!tokens.Mim.thread_of_segment.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.thread_of_segment./thread_of_segment/no_copy (lib!tokens.Mim.thread_of_segment.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/instance (lib!tokens.Mim.thread_of_segment_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/key (lib!tokens.Mim.thread_of_segment_token_data.) lib!tokens.SegmentId.)
(declare-fun lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/value (lib!tokens.Mim.thread_of_segment_token_data.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.delay./delay/dummy_instance (lib!tokens.Mim.delay.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.delay./delay/no_copy (lib!tokens.Mim.delay.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!tokens.Mim.delay_token_data./delay_token_data/instance (lib!tokens.Mim.delay_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.delay_token_data./delay_token_data/key (lib!tokens.Mim.delay_token_data.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.delay_token_data./delay_token_data/value (lib!tokens.Mim.delay_token_data.) lib!tokens.DelayState.)
(declare-fun lib!tokens.Mim.heap_of_page./heap_of_page/dummy_instance (lib!tokens.Mim.heap_of_page.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.heap_of_page./heap_of_page/no_copy (lib!tokens.Mim.heap_of_page.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/instance (lib!tokens.Mim.heap_of_page_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/key (lib!tokens.Mim.heap_of_page_token_data.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/value (lib!tokens.Mim.heap_of_page_token_data.) lib!tokens.HeapId.)
(declare-fun lib!tokens.Mim.actor./actor/dummy_instance (lib!tokens.Mim.actor.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.actor./actor/no_copy (lib!tokens.Mim.actor.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!tokens.Mim.actor_token_data./actor_token_data/instance (lib!tokens.Mim.actor_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.actor_token_data./actor_token_data/key (lib!tokens.Mim.actor_token_data.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.actor_token_data./actor_token_data/value (lib!tokens.Mim.actor_token_data.) lib!tokens.Actor.)
(declare-fun lib!tokens.Mim.delay_actor./delay_actor/dummy_instance (lib!tokens.Mim.delay_actor.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.delay_actor./delay_actor/no_copy (lib!tokens.Mim.delay_actor.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/instance (lib!tokens.Mim.delay_actor_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/key (lib!tokens.Mim.delay_actor_token_data.) lib!tokens.PageId.)
(declare-fun lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/value (lib!tokens.Mim.delay_actor_token_data.) lib!tokens.DelayFreeingActor.)
(declare-fun lib!tokens.Mim.reserved_uniq./reserved_uniq/dummy_instance (lib!tokens.Mim.reserved_uniq.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.reserved_uniq./reserved_uniq/no_copy (lib!tokens.Mim.reserved_uniq.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data/instance (lib!tokens.Mim.reserved_uniq_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data/key (lib!tokens.Mim.reserved_uniq_token_data.) lib!tokens.HeapId.)
(declare-fun lib!tokens.Mim.thread_checked_state./thread_checked_state/dummy_instance (lib!tokens.Mim.thread_checked_state.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.thread_checked_state./thread_checked_state/no_copy (lib!tokens.Mim.thread_checked_state.) vstd!state_machine_internal.NoCopy.)
(declare-fun lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance (lib!tokens.Mim.thread_checked_state_token_data.) lib!tokens.Mim.Instance.)
(declare-fun lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key (lib!tokens.Mim.thread_checked_state_token_data.) lib!thread.ThreadId.)
(declare-fun lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value (lib!tokens.Mim.thread_checked_state_token_data.) lib!tokens.ThreadCheckedState.)
(declare-fun lib!thread.ThreadId./ThreadId/thread_id (lib!thread.ThreadId.) Int)
(declare-fun lib!tokens.HeapId./HeapId/id (lib!tokens.HeapId.) Int)
(declare-fun lib!tokens.HeapId./HeapId/provenance (lib!tokens.HeapId.) vstd!raw_ptr.Provenance.)
(declare-fun lib!tokens.HeapId./HeapId/uniq (lib!tokens.HeapId.) Int)
(declare-fun lib!tokens.TldId./TldId/id (lib!tokens.TldId.) Int)
(declare-fun lib!tokens.TldId./TldId/provenance (lib!tokens.TldId.) vstd!raw_ptr.Provenance.)
(declare-fun lib!tokens.SegmentId./SegmentId/id (lib!tokens.SegmentId.) Int)
(declare-fun lib!tokens.SegmentId./SegmentId/provenance (lib!tokens.SegmentId.) vstd!raw_ptr.Provenance.)
(declare-fun lib!tokens.SegmentId./SegmentId/uniq (lib!tokens.SegmentId.) Int)
(declare-fun lib!tokens.PageId./PageId/segment_id (lib!tokens.PageId.) lib!tokens.SegmentId.)
(declare-fun lib!tokens.PageId./PageId/idx (lib!tokens.PageId.) Int)
(declare-fun lib!tokens.BlockId./BlockId/page_id (lib!tokens.BlockId.) lib!tokens.PageId.)
(declare-fun lib!tokens.BlockId./BlockId/idx (lib!tokens.BlockId.) Int)
(declare-fun lib!tokens.BlockId./BlockId/slice_idx (lib!tokens.BlockId.) Int)
(declare-fun lib!tokens.BlockId./BlockId/block_size (lib!tokens.BlockId.) Int)
(declare-fun lib!tokens.PageState./PageState/offset (lib!tokens.PageState.) Int)
(declare-fun lib!tokens.PageState./PageState/block_size (lib!tokens.PageState.) Int)
(declare-fun lib!tokens.PageState./PageState/num_blocks (lib!tokens.PageState.) Int)
(declare-fun lib!tokens.PageState./PageState/shared_access (lib!tokens.PageState.) lib!types.PageSharedAccess.)
(declare-fun lib!tokens.PageState./PageState/is_enabled (lib!tokens.PageState.) Bool)
(declare-fun lib!tokens.SegmentState./SegmentState/shared_access (lib!tokens.SegmentState.) lib!types.SegmentSharedAccess.)
(declare-fun lib!tokens.SegmentState./SegmentState/is_enabled (lib!tokens.SegmentState.) Bool)
(declare-fun lib!tokens.BlockState./BlockState/segment_shared_access (lib!tokens.BlockState.) lib!types.SegmentSharedAccess.)
(declare-fun lib!tokens.BlockState./BlockState/page_shared_access (lib!tokens.BlockState.) lib!types.PageSharedAccess.)
(declare-fun lib!tokens.BlockState./BlockState/page_slice_shared_access (lib!tokens.BlockState.) lib!types.PageSharedAccess.)
(declare-fun lib!tokens.BlockState./BlockState/heap_id (lib!tokens.BlockState.) core!option.Option.)
(declare-fun lib!tokens.HeapState./HeapState/shared_access (lib!tokens.HeapState.) lib!types.HeapSharedAccess.)
(declare-fun lib!tokens.ThreadState./ThreadState/heap_id (lib!tokens.ThreadState.) lib!tokens.HeapId.)
(declare-fun lib!tokens.ThreadState./ThreadState/heap (lib!tokens.ThreadState.) lib!tokens.HeapState.)
(declare-fun lib!tokens.ThreadState./ThreadState/segments (lib!tokens.ThreadState.) vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.)
(declare-fun lib!tokens.ThreadState./ThreadState/pages (lib!tokens.ThreadState.) vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)
(declare-fun lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (lib!tokens.ThreadCheckedState.) vstd!set.Set<lib!tokens.PageId.>.)
(declare-fun lib!tokens.DelayFreeingActor./Heap/0 (lib!tokens.DelayFreeingActor.) lib!tokens.HeapId.)
(declare-fun lib!tokens.DelayFreeingActor./Heap/1 (lib!tokens.DelayFreeingActor.) lib!types.HeapSharedAccess.)
(declare-fun lib!tokens.DelayFreeingActor./Heap/2 (lib!tokens.DelayFreeingActor.) lib!types.PageSharedAccess.)
(declare-fun lib!types.PageInner./PageInner/flags0 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/capacity (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/reserved (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/flags1 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/flags2 (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/free (lib!types.PageInner.) lib!linked_list.LL.)
(declare-fun lib!types.PageInner./PageInner/used (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/xblock_size (lib!types.PageInner.) Int)
(declare-fun lib!types.PageInner./PageInner/local_free (lib!types.PageInner.) lib!linked_list.LL.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (lib!types.AtomicHeapPtr.) vstd!atomic_ghost.AtomicPtr.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/instance (lib!types.AtomicHeapPtr.) lib!tokens.Mim.Instance.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id (lib!types.AtomicHeapPtr.) lib!tokens.PageId.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/emp (lib!types.AtomicHeapPtr.) lib!types.BoolAgree.x.)
(declare-fun lib!types.AtomicHeapPtr./AtomicHeapPtr/emp_inst (lib!types.AtomicHeapPtr.) lib!types.BoolAgree.Instance.)
(declare-fun lib!types.Page./Page/count (lib!types.Page.) vstd!cell.PCell<u32.>.)
(declare-fun lib!types.Page./Page/offset (lib!types.Page.) Int)
(declare-fun lib!types.Page./Page/inner (lib!types.Page.) vstd!cell.PCell<lib!types.PageInner.>.)
(declare-fun lib!types.Page./Page/xthread_free (lib!types.Page.) lib!linked_list.ThreadLLWithDelayBits.)
(declare-fun lib!types.Page./Page/xheap (lib!types.Page.) lib!types.AtomicHeapPtr.)
(declare-fun lib!types.Page./Page/prev (lib!types.Page.) vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-fun lib!types.Page./Page/next (lib!types.Page.) vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-fun lib!types.Page./Page/padding (lib!types.Page.) Int)
(declare-fun lib!types.PageSharedAccess./PageSharedAccess/points_to (lib!types.PageSharedAccess.) vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-fun lib!types.PageSharedAccess./PageSharedAccess/exposed (lib!types.PageSharedAccess.) vstd!raw_ptr.IsExposed.)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/memid (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_pinned (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_large (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_committed (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/allow_decommit (lib!types.SegmentHeaderMain.) Bool)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire (lib!types.SegmentHeaderMain.) Int)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_mask (lib!types.SegmentHeaderMain.) lib!commit_mask.CommitMask.)
(declare-fun lib!types.SegmentHeaderMain./SegmentHeaderMain/commit_mask (lib!types.SegmentHeaderMain.) lib!commit_mask.CommitMask.)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/next (lib!types.SegmentHeaderMain2.) ptr_mut%<lib!types.SegmentHeader.>.)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/kind (lib!types.SegmentHeaderMain2.) lib!types.SegmentKind.)
(declare-fun lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries (lib!types.SegmentHeaderMain2.) Int)
(declare-fun lib!types.SegmentHeader./SegmentHeader/main (lib!types.SegmentHeader.) vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/abandoned_next (lib!types.SegmentHeader.) Int)
(declare-fun lib!types.SegmentHeader./SegmentHeader/main2 (lib!types.SegmentHeader.) vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/thread_id (lib!types.SegmentHeader.) vstd!atomic_ghost.AtomicU64.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/instance (lib!types.SegmentHeader.) lib!tokens.Mim.Instance.)
(declare-fun lib!types.SegmentHeader./SegmentHeader/segment_id (lib!types.SegmentHeader.) lib!tokens.SegmentId.)
(declare-fun lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to (lib!types.SegmentSharedAccess.) vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.)
(declare-fun lib!types.PageQueue./PageQueue/first (lib!types.PageQueue.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.PageQueue./PageQueue/last (lib!types.PageQueue.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.PageQueue./PageQueue/block_size (lib!types.PageQueue.) Int)
(declare-fun lib!types.Heap./Heap/tld_ptr (lib!types.Heap.) lib!types.TldPtr.)
(declare-fun lib!types.Heap./Heap/pages_free_direct (lib!types.Heap.) Poly)
(declare-fun lib!types.Heap./Heap/pages (lib!types.Heap.) Poly)
(declare-fun lib!types.Heap./Heap/thread_delayed_free (lib!types.Heap.) lib!linked_list.ThreadLLSimple.)
(declare-fun lib!types.Heap./Heap/thread_id (lib!types.Heap.) lib!thread.ThreadId.)
(declare-fun lib!types.Heap./Heap/arena_id (lib!types.Heap.) Int)
(declare-fun lib!types.Heap./Heap/page_count (lib!types.Heap.) vstd!cell.PCell<usize.>.)
(declare-fun lib!types.Heap./Heap/page_retired_min (lib!types.Heap.) vstd!cell.PCell<usize.>.)
(declare-fun lib!types.Heap./Heap/page_retired_max (lib!types.Heap.) vstd!cell.PCell<usize.>.)
(declare-fun lib!types.Heap./Heap/no_reclaim (lib!types.Heap.) Bool)
(declare-fun lib!types.Heap./Heap/page_empty_ptr (lib!types.Heap.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.HeapSharedAccess./HeapSharedAccess/points_to (lib!types.HeapSharedAccess.) vstd!raw_ptr.PointsTo<lib!types.Heap.>.)
(declare-fun lib!types.SegmentsTld./SegmentsTld/span_queue_headers (lib!types.SegmentsTld.) %%Function%%)
(declare-fun lib!types.SegmentsTld./SegmentsTld/count (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SegmentsTld./SegmentsTld/peak_count (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SegmentsTld./SegmentsTld/current_size (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SegmentsTld./SegmentsTld/peak_size (lib!types.SegmentsTld.) Int)
(declare-fun lib!types.SpanQueueHeader./SpanQueueHeader/first (lib!types.SpanQueueHeader.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.SpanQueueHeader./SpanQueueHeader/last (lib!types.SpanQueueHeader.) ptr_mut%<lib!types.Page.>.)
(declare-fun lib!types.Tld./Tld/heap_backing (lib!types.Tld.) ptr_mut%<lib!types.Heap.>.)
(declare-fun lib!types.Tld./Tld/segments (lib!types.Tld.) lib!types.SegmentsTld.)
(declare-fun lib!types.TldPtr./TldPtr/tld_ptr (lib!types.TldPtr.) ptr_mut%<lib!types.Tld.>.)
(declare-fun lib!types.TldPtr./TldPtr/tld_id (lib!types.TldPtr.) lib!tokens.TldId.)
(declare-fun lib!linked_list.Node./Node/ptr (lib!linked_list.Node.) ptr_mut%<lib!linked_list.Node.>.)
(declare-fun lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance (lib!linked_list.ThreadLLSimple.) lib!tokens.Mim.Instance.)
(declare-fun lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (lib!linked_list.ThreadLLSimple.) lib!tokens.HeapId.)
(declare-fun lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (lib!linked_list.ThreadLLSimple.) vstd!atomic_ghost.AtomicPtr.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance (lib!linked_list.ThreadLLWithDelayBits.) lib!tokens.Mim.Instance.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (lib!linked_list.ThreadLLWithDelayBits.) vstd!atomic_ghost.AtomicPtr.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp (lib!linked_list.ThreadLLWithDelayBits.) lib!linked_list.StuffAgree.x.)
(declare-fun lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst (lib!linked_list.ThreadLLWithDelayBits.) lib!linked_list.StuffAgree.Instance.)
(declare-fun tuple%1./tuple%1/0 (tuple%1.) Poly)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun tuple%13./tuple%13/0 (tuple%13.) Poly)
(declare-fun tuple%13./tuple%13/1 (tuple%13.) Poly)
(declare-fun tuple%13./tuple%13/2 (tuple%13.) Poly)
(declare-fun tuple%13./tuple%13/3 (tuple%13.) Poly)
(declare-fun tuple%13./tuple%13/4 (tuple%13.) Poly)
(declare-fun tuple%13./tuple%13/5 (tuple%13.) Poly)
(declare-fun tuple%13./tuple%13/6 (tuple%13.) Poly)
(declare-fun tuple%13./tuple%13/7 (tuple%13.) Poly)
(declare-fun tuple%13./tuple%13/8 (tuple%13.) Poly)
(declare-fun tuple%13./tuple%13/9 (tuple%13.) Poly)
(declare-fun tuple%13./tuple%13/10 (tuple%13.) Poly)
(declare-fun tuple%13./tuple%13/11 (tuple%13.) Poly)
(declare-fun tuple%13./tuple%13/12 (tuple%13.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-const TYPE%vstd!atomic.PAtomicU64. Type)
(declare-const TYPE%vstd!atomic.PermissionU64. Type)
(declare-fun TYPE%vstd!atomic.PAtomicPtr. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic.PermissionPtr. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredU64. (Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicU64. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPredPtr. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!atomic_ghost.AtomicPtr. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!cell.PCell. (Dcr Type) Type)
(declare-fun TYPE%vstd!invariant.AtomicInvariant. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-const TYPE%vstd!raw_ptr.Metadata. Type)
(declare-const TYPE%vstd!raw_ptr.DynMetadata. Type)
(declare-const TYPE%vstd!raw_ptr.PtrData. Type)
(declare-fun TYPE%vstd!raw_ptr.PointsTo. (Dcr Type) Type)
(declare-fun TYPE%vstd!raw_ptr.MemContents. (Dcr Type) Type)
(declare-fun TYPE%vstd!raw_ptr.PointsToData. (Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.IsExposed. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. (Dcr Type) Type)
(declare-const TYPE%vstd!state_machine_internal.NoCopy. Type)
(declare-const TYPE%lib!tokens.Mim.State. Type)
(declare-const TYPE%lib!tokens.Mim.Step. Type)
(declare-const TYPE%lib!tokens.Mim.Config. Type)
(declare-const TYPE%lib!tokens.Mim.Instance. Type)
(declare-const TYPE%lib!tokens.Mim.right_to_set_inst. Type)
(declare-const TYPE%lib!tokens.Mim.right_to_set_inst_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.my_inst. Type)
(declare-const TYPE%lib!tokens.Mim.my_inst_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.thread_local_state. Type)
(declare-const TYPE%lib!tokens.Mim.thread_local_state_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.right_to_use_thread. Type)
(declare-const TYPE%lib!tokens.Mim.right_to_use_thread_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.block. Type)
(declare-const TYPE%lib!tokens.Mim.block_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.thread_of_segment. Type)
(declare-const TYPE%lib!tokens.Mim.thread_of_segment_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.delay. Type)
(declare-const TYPE%lib!tokens.Mim.delay_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.heap_of_page. Type)
(declare-const TYPE%lib!tokens.Mim.heap_of_page_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.actor. Type)
(declare-const TYPE%lib!tokens.Mim.actor_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.delay_actor. Type)
(declare-const TYPE%lib!tokens.Mim.delay_actor_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.reserved_uniq. Type)
(declare-const TYPE%lib!tokens.Mim.reserved_uniq_token_data. Type)
(declare-const TYPE%lib!tokens.Mim.thread_checked_state. Type)
(declare-const TYPE%lib!tokens.Mim.thread_checked_state_token_data. Type)
(declare-const TYPE%lib!types.BoolAgree.Instance. Type)
(declare-const TYPE%lib!types.BoolAgree.x. Type)
(declare-const TYPE%lib!types.BoolAgree.y. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.Instance. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.x. Type)
(declare-const TYPE%lib!linked_list.StuffAgree.y. Type)
(declare-const TYPE%lib!thread.ThreadId. Type)
(declare-const TYPE%lib!tokens.HeapId. Type)
(declare-const TYPE%lib!tokens.TldId. Type)
(declare-const TYPE%lib!tokens.SegmentId. Type)
(declare-const TYPE%lib!tokens.PageId. Type)
(declare-const TYPE%lib!tokens.BlockId. Type)
(declare-const TYPE%lib!tokens.DelayState. Type)
(declare-const TYPE%lib!tokens.PageState. Type)
(declare-const TYPE%lib!tokens.SegmentState. Type)
(declare-const TYPE%lib!tokens.BlockState. Type)
(declare-const TYPE%lib!tokens.HeapState. Type)
(declare-const TYPE%lib!tokens.ThreadState. Type)
(declare-const TYPE%lib!tokens.ThreadCheckedState. Type)
(declare-const TYPE%lib!tokens.Actor. Type)
(declare-const TYPE%lib!tokens.DelayFreeingActor. Type)
(declare-const TYPE%lib!types.PageInner. Type)
(declare-const TYPE%lib!types.AtomicHeapPtr. Type)
(declare-const TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. Type)
(declare-const TYPE%lib!types.Page. Type)
(declare-const TYPE%lib!types.PageSharedAccess. Type)
(declare-const TYPE%lib!types.SegmentKind. Type)
(declare-const TYPE%lib!types.SegmentHeaderMain. Type)
(declare-const TYPE%lib!types.SegmentHeaderMain2. Type)
(declare-const TYPE%lib!types.SegmentHeader. Type)
(declare-const TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. Type)
(declare-const TYPE%lib!types.SegmentSharedAccess. Type)
(declare-const TYPE%lib!types.PageQueue. Type)
(declare-const TYPE%lib!types.Heap. Type)
(declare-const TYPE%lib!types.HeapSharedAccess. Type)
(declare-const TYPE%lib!types.SegmentsTld. Type)
(declare-const TYPE%lib!types.SpanQueueHeader. Type)
(declare-const TYPE%lib!types.Tld. Type)
(declare-const TYPE%lib!types.TldPtr. Type)
(declare-const TYPE%lib!linked_list.Node. Type)
(declare-const TYPE%lib!linked_list.LL. Type)
(declare-const TYPE%lib!linked_list.ThreadLLSimple. Type)
(declare-const TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. Type)
(declare-const TYPE%lib!linked_list.ThreadLLWithDelayBits. Type)
(declare-const TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. Type)
(declare-const TYPE%lib!commit_mask.CommitMask. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%1. (Dcr Type) Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%13. (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun FNDEF%core!clone.Clone.clone. (Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%array%. (%%Function%%) Poly)
(declare-fun %Poly%array%. (Poly) %%Function%%)
(declare-fun Poly%lib!commit_mask.CommitMask. (lib!commit_mask.CommitMask.) Poly)
(declare-fun %Poly%lib!commit_mask.CommitMask. (Poly) lib!commit_mask.CommitMask.)
(declare-fun Poly%lib!linked_list.LL. (lib!linked_list.LL.) Poly)
(declare-fun %Poly%lib!linked_list.LL. (Poly) lib!linked_list.LL.)
(declare-fun Poly%lib!linked_list.StuffAgree.Instance. (lib!linked_list.StuffAgree.Instance.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.Instance. (Poly) lib!linked_list.StuffAgree.Instance.)
(declare-fun Poly%lib!linked_list.StuffAgree.x. (lib!linked_list.StuffAgree.x.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.x. (Poly) lib!linked_list.StuffAgree.x.)
(declare-fun Poly%lib!linked_list.StuffAgree.y. (lib!linked_list.StuffAgree.y.) Poly)
(declare-fun %Poly%lib!linked_list.StuffAgree.y. (Poly) lib!linked_list.StuffAgree.y.)
(declare-fun Poly%lib!types.BoolAgree.Instance. (lib!types.BoolAgree.Instance.) Poly)
(declare-fun %Poly%lib!types.BoolAgree.Instance. (Poly) lib!types.BoolAgree.Instance.)
(declare-fun Poly%lib!types.BoolAgree.x. (lib!types.BoolAgree.x.) Poly)
(declare-fun %Poly%lib!types.BoolAgree.x. (Poly) lib!types.BoolAgree.x.)
(declare-fun Poly%lib!types.BoolAgree.y. (lib!types.BoolAgree.y.) Poly)
(declare-fun %Poly%lib!types.BoolAgree.y. (Poly) lib!types.BoolAgree.y.)
(declare-fun Poly%vstd!atomic.PAtomicU64. (vstd!atomic.PAtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic.PAtomicU64. (Poly) vstd!atomic.PAtomicU64.)
(declare-fun Poly%vstd!atomic.PermissionU64. (vstd!atomic.PermissionU64.) Poly)
(declare-fun %Poly%vstd!atomic.PermissionU64. (Poly) vstd!atomic.PermissionU64.)
(declare-fun Poly%vstd!cell.PCell<u32.>. (vstd!cell.PCell<u32.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<u32.>. (Poly) vstd!cell.PCell<u32.>.)
(declare-fun Poly%vstd!cell.PCell<usize.>. (vstd!cell.PCell<usize.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<usize.>. (Poly) vstd!cell.PCell<usize.>.)
(declare-fun Poly%vstd!cell.PCell<lib!types.PageInner.>. (vstd!cell.PCell<lib!types.PageInner.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<lib!types.PageInner.>. (Poly) vstd!cell.PCell<lib!types.PageInner.>.)
(declare-fun Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (vstd!cell.PCell<lib!types.SegmentHeaderMain.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (Poly) vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)
(declare-fun Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (Poly) vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)
(declare-fun Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) Poly)
(declare-fun %Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (Poly) vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)
(declare-fun Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (Poly) vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>.)
(declare-fun Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.actor.>. (vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.actor.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.actor.>. (Poly) vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.actor.>.)
(declare-fun Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.right_to_use_thread.>. (vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.right_to_use_thread.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.right_to_use_thread.>. (Poly) vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.right_to_use_thread.>.)
(declare-fun Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_checked_state.>. (vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_checked_state.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_checked_state.>. (Poly) vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_checked_state.>.)
(declare-fun Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_local_state.>. (vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_local_state.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_local_state.>. (Poly) vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_local_state.>.)
(declare-fun Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (Poly) vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>.)
(declare-fun Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (Poly) vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (Poly) vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. (vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. (Poly) vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (Poly) vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.HeapId./lib!tokens.Mim.reserved_uniq.>. (vstd!map.Map<lib!tokens.HeapId./lib!tokens.Mim.reserved_uniq.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.HeapId./lib!tokens.Mim.reserved_uniq.>. (Poly) vstd!map.Map<lib!tokens.HeapId./lib!tokens.Mim.reserved_uniq.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (Poly) vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (Poly) vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (Poly) vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (Poly) vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay.>. (vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay.>. (Poly) vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay_actor.>. (vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay_actor.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay_actor.>. (Poly) vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay_actor.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.heap_of_page.>. (vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.heap_of_page.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.heap_of_page.>. (Poly) vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.heap_of_page.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly) vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (Poly) vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (Poly) vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.Mim.thread_of_segment.>. (vstd!map.Map<lib!tokens.SegmentId./lib!tokens.Mim.thread_of_segment.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.Mim.thread_of_segment.>. (Poly) vstd!map.Map<lib!tokens.SegmentId./lib!tokens.Mim.thread_of_segment.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly) vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (Poly) vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>.)
(declare-fun Poly%vstd!raw_ptr.DynMetadata. (vstd!raw_ptr.DynMetadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.DynMetadata. (Poly) vstd!raw_ptr.DynMetadata.)
(declare-fun Poly%vstd!raw_ptr.IsExposed. (vstd!raw_ptr.IsExposed.) Poly)
(declare-fun %Poly%vstd!raw_ptr.IsExposed. (Poly) vstd!raw_ptr.IsExposed.)
(declare-fun Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (vstd!raw_ptr.PointsTo<lib!types.Heap.>.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (Poly) vstd!raw_ptr.PointsTo<lib!types.Heap.>.)
(declare-fun Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (vstd!raw_ptr.PointsTo<lib!types.Page.>.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (Poly) vstd!raw_ptr.PointsTo<lib!types.Page.>.)
(declare-fun Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (Poly) vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!set.Set<lib!thread.ThreadId.>. (vstd!set.Set<lib!thread.ThreadId.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!thread.ThreadId.>. (Poly) vstd!set.Set<lib!thread.ThreadId.>.)
(declare-fun Poly%vstd!set.Set<lib!tokens.BlockId.>. (vstd!set.Set<lib!tokens.BlockId.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!tokens.BlockId.>. (Poly) vstd!set.Set<lib!tokens.BlockId.>.)
(declare-fun Poly%vstd!set.Set<lib!tokens.HeapId.>. (vstd!set.Set<lib!tokens.HeapId.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!tokens.HeapId.>. (Poly) vstd!set.Set<lib!tokens.HeapId.>.)
(declare-fun Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.Set<lib!tokens.PageId.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!tokens.PageId.>. (Poly) vstd!set.Set<lib!tokens.PageId.>.)
(declare-fun Poly%vstd!set.Set<lib!tokens.SegmentId.>. (vstd!set.Set<lib!tokens.SegmentId.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!tokens.SegmentId.>. (Poly) vstd!set.Set<lib!tokens.SegmentId.>.)
(declare-fun Poly%vstd!state_machine_internal.NoCopy. (vstd!state_machine_internal.NoCopy.) Poly)
(declare-fun %Poly%vstd!state_machine_internal.NoCopy. (Poly) vstd!state_machine_internal.NoCopy.)
(declare-fun Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>. (vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>.) Poly)
(declare-fun %Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>. (Poly) vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>.)
(declare-fun Poly%ptr_mut%<lib!linked_list.Node.>. (ptr_mut%<lib!linked_list.Node.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!linked_list.Node.>. (Poly) ptr_mut%<lib!linked_list.Node.>.)
(declare-fun Poly%ptr_mut%<lib!types.Heap.>. (ptr_mut%<lib!types.Heap.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.Heap.>. (Poly) ptr_mut%<lib!types.Heap.>.)
(declare-fun Poly%ptr_mut%<lib!types.Page.>. (ptr_mut%<lib!types.Page.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.Page.>. (Poly) ptr_mut%<lib!types.Page.>.)
(declare-fun Poly%ptr_mut%<lib!types.SegmentHeader.>. (ptr_mut%<lib!types.SegmentHeader.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.SegmentHeader.>. (Poly) ptr_mut%<lib!types.SegmentHeader.>.)
(declare-fun Poly%ptr_mut%<lib!types.Tld.>. (ptr_mut%<lib!types.Tld.>.) Poly)
(declare-fun %Poly%ptr_mut%<lib!types.Tld.>. (Poly) ptr_mut%<lib!types.Tld.>.)
(declare-fun Poly%allocator_global%. (allocator_global%.) Poly)
(declare-fun %Poly%allocator_global%. (Poly) allocator_global%.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicU64. (Poly) vstd!atomic_ghost.AtomicU64.)
(declare-fun Poly%vstd!atomic_ghost.AtomicPtr. (vstd!atomic_ghost.AtomicPtr.) Poly)
(declare-fun %Poly%vstd!atomic_ghost.AtomicPtr. (Poly) vstd!atomic_ghost.AtomicPtr.)
(declare-fun Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Metadata. (Poly) vstd!raw_ptr.Metadata.)
(declare-fun Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PtrData. (Poly) vstd!raw_ptr.PtrData.)
(declare-fun Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents.) Poly)
(declare-fun %Poly%vstd!raw_ptr.MemContents. (Poly) vstd!raw_ptr.MemContents.)
(declare-fun Poly%vstd!raw_ptr.PointsToData. (vstd!raw_ptr.PointsToData.) Poly)
(declare-fun %Poly%vstd!raw_ptr.PointsToData. (Poly) vstd!raw_ptr.PointsToData.)
(declare-fun Poly%lib!tokens.Mim.State. (lib!tokens.Mim.State.) Poly)
(declare-fun %Poly%lib!tokens.Mim.State. (Poly) lib!tokens.Mim.State.)
(declare-fun Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step.) Poly)
(declare-fun %Poly%lib!tokens.Mim.Step. (Poly) lib!tokens.Mim.Step.)
(declare-fun Poly%lib!tokens.Mim.Config. (lib!tokens.Mim.Config.) Poly)
(declare-fun %Poly%lib!tokens.Mim.Config. (Poly) lib!tokens.Mim.Config.)
(declare-fun Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.Instance.) Poly)
(declare-fun %Poly%lib!tokens.Mim.Instance. (Poly) lib!tokens.Mim.Instance.)
(declare-fun Poly%lib!tokens.Mim.right_to_set_inst. (lib!tokens.Mim.right_to_set_inst.) Poly)
(declare-fun %Poly%lib!tokens.Mim.right_to_set_inst. (Poly) lib!tokens.Mim.right_to_set_inst.)
(declare-fun Poly%lib!tokens.Mim.right_to_set_inst_token_data. (lib!tokens.Mim.right_to_set_inst_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.right_to_set_inst_token_data. (Poly) lib!tokens.Mim.right_to_set_inst_token_data.)
(declare-fun Poly%lib!tokens.Mim.my_inst. (lib!tokens.Mim.my_inst.) Poly)
(declare-fun %Poly%lib!tokens.Mim.my_inst. (Poly) lib!tokens.Mim.my_inst.)
(declare-fun Poly%lib!tokens.Mim.my_inst_token_data. (lib!tokens.Mim.my_inst_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.my_inst_token_data. (Poly) lib!tokens.Mim.my_inst_token_data.)
(declare-fun Poly%lib!tokens.Mim.thread_local_state. (lib!tokens.Mim.thread_local_state.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_local_state. (Poly) lib!tokens.Mim.thread_local_state.)
(declare-fun Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.thread_local_state_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly) lib!tokens.Mim.thread_local_state_token_data.)
(declare-fun Poly%lib!tokens.Mim.right_to_use_thread. (lib!tokens.Mim.right_to_use_thread.) Poly)
(declare-fun %Poly%lib!tokens.Mim.right_to_use_thread. (Poly) lib!tokens.Mim.right_to_use_thread.)
(declare-fun Poly%lib!tokens.Mim.right_to_use_thread_token_data. (lib!tokens.Mim.right_to_use_thread_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.right_to_use_thread_token_data. (Poly) lib!tokens.Mim.right_to_use_thread_token_data.)
(declare-fun Poly%lib!tokens.Mim.block. (lib!tokens.Mim.block.) Poly)
(declare-fun %Poly%lib!tokens.Mim.block. (Poly) lib!tokens.Mim.block.)
(declare-fun Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.block_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.block_token_data. (Poly) lib!tokens.Mim.block_token_data.)
(declare-fun Poly%lib!tokens.Mim.thread_of_segment. (lib!tokens.Mim.thread_of_segment.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_of_segment. (Poly) lib!tokens.Mim.thread_of_segment.)
(declare-fun Poly%lib!tokens.Mim.thread_of_segment_token_data. (lib!tokens.Mim.thread_of_segment_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_of_segment_token_data. (Poly) lib!tokens.Mim.thread_of_segment_token_data.)
(declare-fun Poly%lib!tokens.Mim.delay. (lib!tokens.Mim.delay.) Poly)
(declare-fun %Poly%lib!tokens.Mim.delay. (Poly) lib!tokens.Mim.delay.)
(declare-fun Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.delay_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.delay_token_data. (Poly) lib!tokens.Mim.delay_token_data.)
(declare-fun Poly%lib!tokens.Mim.heap_of_page. (lib!tokens.Mim.heap_of_page.) Poly)
(declare-fun %Poly%lib!tokens.Mim.heap_of_page. (Poly) lib!tokens.Mim.heap_of_page.)
(declare-fun Poly%lib!tokens.Mim.heap_of_page_token_data. (lib!tokens.Mim.heap_of_page_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.heap_of_page_token_data. (Poly) lib!tokens.Mim.heap_of_page_token_data.)
(declare-fun Poly%lib!tokens.Mim.actor. (lib!tokens.Mim.actor.) Poly)
(declare-fun %Poly%lib!tokens.Mim.actor. (Poly) lib!tokens.Mim.actor.)
(declare-fun Poly%lib!tokens.Mim.actor_token_data. (lib!tokens.Mim.actor_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.actor_token_data. (Poly) lib!tokens.Mim.actor_token_data.)
(declare-fun Poly%lib!tokens.Mim.delay_actor. (lib!tokens.Mim.delay_actor.) Poly)
(declare-fun %Poly%lib!tokens.Mim.delay_actor. (Poly) lib!tokens.Mim.delay_actor.)
(declare-fun Poly%lib!tokens.Mim.delay_actor_token_data. (lib!tokens.Mim.delay_actor_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.delay_actor_token_data. (Poly) lib!tokens.Mim.delay_actor_token_data.)
(declare-fun Poly%lib!tokens.Mim.reserved_uniq. (lib!tokens.Mim.reserved_uniq.) Poly)
(declare-fun %Poly%lib!tokens.Mim.reserved_uniq. (Poly) lib!tokens.Mim.reserved_uniq.)
(declare-fun Poly%lib!tokens.Mim.reserved_uniq_token_data. (lib!tokens.Mim.reserved_uniq_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.reserved_uniq_token_data. (Poly) lib!tokens.Mim.reserved_uniq_token_data.)
(declare-fun Poly%lib!tokens.Mim.thread_checked_state. (lib!tokens.Mim.thread_checked_state.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_checked_state. (Poly) lib!tokens.Mim.thread_checked_state.)
(declare-fun Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.thread_checked_state_token_data.) Poly)
(declare-fun %Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly) lib!tokens.Mim.thread_checked_state_token_data.)
(declare-fun Poly%lib!thread.ThreadId. (lib!thread.ThreadId.) Poly)
(declare-fun %Poly%lib!thread.ThreadId. (Poly) lib!thread.ThreadId.)
(declare-fun Poly%lib!tokens.HeapId. (lib!tokens.HeapId.) Poly)
(declare-fun %Poly%lib!tokens.HeapId. (Poly) lib!tokens.HeapId.)
(declare-fun Poly%lib!tokens.TldId. (lib!tokens.TldId.) Poly)
(declare-fun %Poly%lib!tokens.TldId. (Poly) lib!tokens.TldId.)
(declare-fun Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId.) Poly)
(declare-fun %Poly%lib!tokens.SegmentId. (Poly) lib!tokens.SegmentId.)
(declare-fun Poly%lib!tokens.PageId. (lib!tokens.PageId.) Poly)
(declare-fun %Poly%lib!tokens.PageId. (Poly) lib!tokens.PageId.)
(declare-fun Poly%lib!tokens.BlockId. (lib!tokens.BlockId.) Poly)
(declare-fun %Poly%lib!tokens.BlockId. (Poly) lib!tokens.BlockId.)
(declare-fun Poly%lib!tokens.DelayState. (lib!tokens.DelayState.) Poly)
(declare-fun %Poly%lib!tokens.DelayState. (Poly) lib!tokens.DelayState.)
(declare-fun Poly%lib!tokens.PageState. (lib!tokens.PageState.) Poly)
(declare-fun %Poly%lib!tokens.PageState. (Poly) lib!tokens.PageState.)
(declare-fun Poly%lib!tokens.SegmentState. (lib!tokens.SegmentState.) Poly)
(declare-fun %Poly%lib!tokens.SegmentState. (Poly) lib!tokens.SegmentState.)
(declare-fun Poly%lib!tokens.BlockState. (lib!tokens.BlockState.) Poly)
(declare-fun %Poly%lib!tokens.BlockState. (Poly) lib!tokens.BlockState.)
(declare-fun Poly%lib!tokens.HeapState. (lib!tokens.HeapState.) Poly)
(declare-fun %Poly%lib!tokens.HeapState. (Poly) lib!tokens.HeapState.)
(declare-fun Poly%lib!tokens.ThreadState. (lib!tokens.ThreadState.) Poly)
(declare-fun %Poly%lib!tokens.ThreadState. (Poly) lib!tokens.ThreadState.)
(declare-fun Poly%lib!tokens.ThreadCheckedState. (lib!tokens.ThreadCheckedState.) Poly)
(declare-fun %Poly%lib!tokens.ThreadCheckedState. (Poly) lib!tokens.ThreadCheckedState.)
(declare-fun Poly%lib!tokens.Actor. (lib!tokens.Actor.) Poly)
(declare-fun %Poly%lib!tokens.Actor. (Poly) lib!tokens.Actor.)
(declare-fun Poly%lib!tokens.DelayFreeingActor. (lib!tokens.DelayFreeingActor.) Poly)
(declare-fun %Poly%lib!tokens.DelayFreeingActor. (Poly) lib!tokens.DelayFreeingActor.)
(declare-fun Poly%lib!types.PageInner. (lib!types.PageInner.) Poly)
(declare-fun %Poly%lib!types.PageInner. (Poly) lib!types.PageInner.)
(declare-fun Poly%lib!types.AtomicHeapPtr. (lib!types.AtomicHeapPtr.) Poly)
(declare-fun %Poly%lib!types.AtomicHeapPtr. (Poly) lib!types.AtomicHeapPtr.)
(declare-fun Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.) Poly)
(declare-fun %Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (Poly) lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)
(declare-fun Poly%lib!types.Page. (lib!types.Page.) Poly)
(declare-fun %Poly%lib!types.Page. (Poly) lib!types.Page.)
(declare-fun Poly%lib!types.PageSharedAccess. (lib!types.PageSharedAccess.) Poly)
(declare-fun %Poly%lib!types.PageSharedAccess. (Poly) lib!types.PageSharedAccess.)
(declare-fun Poly%lib!types.SegmentKind. (lib!types.SegmentKind.) Poly)
(declare-fun %Poly%lib!types.SegmentKind. (Poly) lib!types.SegmentKind.)
(declare-fun Poly%lib!types.SegmentHeaderMain. (lib!types.SegmentHeaderMain.) Poly)
(declare-fun %Poly%lib!types.SegmentHeaderMain. (Poly) lib!types.SegmentHeaderMain.)
(declare-fun Poly%lib!types.SegmentHeaderMain2. (lib!types.SegmentHeaderMain2.) Poly)
(declare-fun %Poly%lib!types.SegmentHeaderMain2. (Poly) lib!types.SegmentHeaderMain2.)
(declare-fun Poly%lib!types.SegmentHeader. (lib!types.SegmentHeader.) Poly)
(declare-fun %Poly%lib!types.SegmentHeader. (Poly) lib!types.SegmentHeader.)
(declare-fun Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.) Poly)
(declare-fun %Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (Poly) lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)
(declare-fun Poly%lib!types.SegmentSharedAccess. (lib!types.SegmentSharedAccess.) Poly)
(declare-fun %Poly%lib!types.SegmentSharedAccess. (Poly) lib!types.SegmentSharedAccess.)
(declare-fun Poly%lib!types.PageQueue. (lib!types.PageQueue.) Poly)
(declare-fun %Poly%lib!types.PageQueue. (Poly) lib!types.PageQueue.)
(declare-fun Poly%lib!types.Heap. (lib!types.Heap.) Poly)
(declare-fun %Poly%lib!types.Heap. (Poly) lib!types.Heap.)
(declare-fun Poly%lib!types.HeapSharedAccess. (lib!types.HeapSharedAccess.) Poly)
(declare-fun %Poly%lib!types.HeapSharedAccess. (Poly) lib!types.HeapSharedAccess.)
(declare-fun Poly%lib!types.SegmentsTld. (lib!types.SegmentsTld.) Poly)
(declare-fun %Poly%lib!types.SegmentsTld. (Poly) lib!types.SegmentsTld.)
(declare-fun Poly%lib!types.SpanQueueHeader. (lib!types.SpanQueueHeader.) Poly)
(declare-fun %Poly%lib!types.SpanQueueHeader. (Poly) lib!types.SpanQueueHeader.)
(declare-fun Poly%lib!types.Tld. (lib!types.Tld.) Poly)
(declare-fun %Poly%lib!types.Tld. (Poly) lib!types.Tld.)
(declare-fun Poly%lib!types.TldPtr. (lib!types.TldPtr.) Poly)
(declare-fun %Poly%lib!types.TldPtr. (Poly) lib!types.TldPtr.)
(declare-fun Poly%lib!linked_list.Node. (lib!linked_list.Node.) Poly)
(declare-fun %Poly%lib!linked_list.Node. (Poly) lib!linked_list.Node.)
(declare-fun Poly%lib!linked_list.ThreadLLSimple. (lib!linked_list.ThreadLLSimple.) Poly)
(declare-fun %Poly%lib!linked_list.ThreadLLSimple. (Poly) lib!linked_list.ThreadLLSimple.)
(declare-fun Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.) Poly)
(declare-fun %Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (Poly) lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)
(declare-fun Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!linked_list.ThreadLLWithDelayBits.) Poly)
(declare-fun %Poly%lib!linked_list.ThreadLLWithDelayBits. (Poly) lib!linked_list.ThreadLLWithDelayBits.)
(declare-fun Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.) Poly)
(declare-fun %Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (Poly) lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%1. (tuple%1.) Poly)
(declare-fun %Poly%tuple%1. (Poly) tuple%1.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(declare-fun Poly%tuple%13. (tuple%13.) Poly)
(declare-fun %Poly%tuple%13. (Poly) tuple%13.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%array%. (Poly%array%. x))) :pattern ((Poly%array%. x)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (x Poly)) (! (=> (has_type x (ARRAY T&. T& N&. N&)) (= x (Poly%array%. (%Poly%array%. x)))) :pattern ((has_type x (ARRAY T&. T& N&. N&))))))
(assert (forall ((x lib!commit_mask.CommitMask.)) (! (= x (%Poly%lib!commit_mask.CommitMask. (Poly%lib!commit_mask.CommitMask. x))) :pattern ((Poly%lib!commit_mask.CommitMask. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!commit_mask.CommitMask.) (= x (Poly%lib!commit_mask.CommitMask. (%Poly%lib!commit_mask.CommitMask. x)))) :pattern ((has_type x TYPE%lib!commit_mask.CommitMask.)))))
(assert (forall ((x lib!commit_mask.CommitMask.)) (! (has_type (Poly%lib!commit_mask.CommitMask. x) TYPE%lib!commit_mask.CommitMask.) :pattern ((has_type (Poly%lib!commit_mask.CommitMask. x) TYPE%lib!commit_mask.CommitMask.)))))
(assert (forall ((x lib!linked_list.LL.)) (! (= x (%Poly%lib!linked_list.LL. (Poly%lib!linked_list.LL. x))) :pattern ((Poly%lib!linked_list.LL. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.LL.) (= x (Poly%lib!linked_list.LL. (%Poly%lib!linked_list.LL. x)))) :pattern ((has_type x TYPE%lib!linked_list.LL.)))))
(assert (forall ((x lib!linked_list.LL.)) (! (has_type (Poly%lib!linked_list.LL. x) TYPE%lib!linked_list.LL.) :pattern ((has_type (Poly%lib!linked_list.LL. x) TYPE%lib!linked_list.LL.)))))
(assert (forall ((x lib!linked_list.StuffAgree.Instance.)) (! (= x (%Poly%lib!linked_list.StuffAgree.Instance. (Poly%lib!linked_list.StuffAgree.Instance. x))) :pattern ((Poly%lib!linked_list.StuffAgree.Instance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.Instance.) (= x (Poly%lib!linked_list.StuffAgree.Instance. (%Poly%lib!linked_list.StuffAgree.Instance. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.Instance.)))))
(assert (forall ((x lib!linked_list.StuffAgree.Instance.)) (! (has_type (Poly%lib!linked_list.StuffAgree.Instance. x) TYPE%lib!linked_list.StuffAgree.Instance.) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.Instance. x) TYPE%lib!linked_list.StuffAgree.Instance.)))))
(assert (forall ((x lib!linked_list.StuffAgree.x.)) (! (= x (%Poly%lib!linked_list.StuffAgree.x. (Poly%lib!linked_list.StuffAgree.x. x))) :pattern ((Poly%lib!linked_list.StuffAgree.x. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.x.) (= x (Poly%lib!linked_list.StuffAgree.x. (%Poly%lib!linked_list.StuffAgree.x. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.x.)))))
(assert (forall ((x lib!linked_list.StuffAgree.x.)) (! (has_type (Poly%lib!linked_list.StuffAgree.x. x) TYPE%lib!linked_list.StuffAgree.x.) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.x. x) TYPE%lib!linked_list.StuffAgree.x.)))))
(assert (forall ((x lib!linked_list.StuffAgree.y.)) (! (= x (%Poly%lib!linked_list.StuffAgree.y. (Poly%lib!linked_list.StuffAgree.y. x))) :pattern ((Poly%lib!linked_list.StuffAgree.y. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.StuffAgree.y.) (= x (Poly%lib!linked_list.StuffAgree.y. (%Poly%lib!linked_list.StuffAgree.y. x)))) :pattern ((has_type x TYPE%lib!linked_list.StuffAgree.y.)))))
(assert (forall ((x lib!linked_list.StuffAgree.y.)) (! (has_type (Poly%lib!linked_list.StuffAgree.y. x) TYPE%lib!linked_list.StuffAgree.y.) :pattern ((has_type (Poly%lib!linked_list.StuffAgree.y. x) TYPE%lib!linked_list.StuffAgree.y.)))))
(assert (forall ((x lib!types.BoolAgree.Instance.)) (! (= x (%Poly%lib!types.BoolAgree.Instance. (Poly%lib!types.BoolAgree.Instance. x))) :pattern ((Poly%lib!types.BoolAgree.Instance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.BoolAgree.Instance.) (= x (Poly%lib!types.BoolAgree.Instance. (%Poly%lib!types.BoolAgree.Instance. x)))) :pattern ((has_type x TYPE%lib!types.BoolAgree.Instance.)))))
(assert (forall ((x lib!types.BoolAgree.Instance.)) (! (has_type (Poly%lib!types.BoolAgree.Instance. x) TYPE%lib!types.BoolAgree.Instance.) :pattern ((has_type (Poly%lib!types.BoolAgree.Instance. x) TYPE%lib!types.BoolAgree.Instance.)))))
(assert (forall ((x lib!types.BoolAgree.x.)) (! (= x (%Poly%lib!types.BoolAgree.x. (Poly%lib!types.BoolAgree.x. x))) :pattern ((Poly%lib!types.BoolAgree.x. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.BoolAgree.x.) (= x (Poly%lib!types.BoolAgree.x. (%Poly%lib!types.BoolAgree.x. x)))) :pattern ((has_type x TYPE%lib!types.BoolAgree.x.)))))
(assert (forall ((x lib!types.BoolAgree.x.)) (! (has_type (Poly%lib!types.BoolAgree.x. x) TYPE%lib!types.BoolAgree.x.) :pattern ((has_type (Poly%lib!types.BoolAgree.x. x) TYPE%lib!types.BoolAgree.x.)))))
(assert (forall ((x lib!types.BoolAgree.y.)) (! (= x (%Poly%lib!types.BoolAgree.y. (Poly%lib!types.BoolAgree.y. x))) :pattern ((Poly%lib!types.BoolAgree.y. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.BoolAgree.y.) (= x (Poly%lib!types.BoolAgree.y. (%Poly%lib!types.BoolAgree.y. x)))) :pattern ((has_type x TYPE%lib!types.BoolAgree.y.)))))
(assert (forall ((x lib!types.BoolAgree.y.)) (! (has_type (Poly%lib!types.BoolAgree.y. x) TYPE%lib!types.BoolAgree.y.) :pattern ((has_type (Poly%lib!types.BoolAgree.y. x) TYPE%lib!types.BoolAgree.y.)))))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (= x (%Poly%vstd!atomic.PAtomicU64. (Poly%vstd!atomic.PAtomicU64. x))) :pattern ((Poly%vstd!atomic.PAtomicU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PAtomicU64.) (= x (Poly%vstd!atomic.PAtomicU64. (%Poly%vstd!atomic.PAtomicU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PAtomicU64.)))))
(assert (forall ((x vstd!atomic.PAtomicU64.)) (! (has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.) :pattern ((has_type (Poly%vstd!atomic.PAtomicU64. x) TYPE%vstd!atomic.PAtomicU64.)))))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (= x (%Poly%vstd!atomic.PermissionU64. (Poly%vstd!atomic.PermissionU64. x))) :pattern ((Poly%vstd!atomic.PermissionU64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!atomic.PermissionU64.) (= x (Poly%vstd!atomic.PermissionU64. (%Poly%vstd!atomic.PermissionU64. x)))) :pattern ((has_type x TYPE%vstd!atomic.PermissionU64.)))))
(assert (forall ((x vstd!atomic.PermissionU64.)) (! (has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.) :pattern ((has_type (Poly%vstd!atomic.PermissionU64. x) TYPE%vstd!atomic.PermissionU64.)))))
(assert (forall ((x vstd!cell.PCell<u32.>.)) (! (= x (%Poly%vstd!cell.PCell<u32.>. (Poly%vstd!cell.PCell<u32.>. x))) :pattern ((Poly%vstd!cell.PCell<u32.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (UINT 32))) (= x (Poly%vstd!cell.PCell<u32.>. (%Poly%vstd!cell.PCell<u32.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (UINT 32)))))))
(assert (forall ((x vstd!cell.PCell<u32.>.)) (! (has_type (Poly%vstd!cell.PCell<u32.>. x) (TYPE%vstd!cell.PCell. $ (UINT 32))) :pattern ((has_type (Poly%vstd!cell.PCell<u32.>. x) (TYPE%vstd!cell.PCell. $ (UINT 32)))))))
(assert (forall ((x vstd!cell.PCell<usize.>.)) (! (= x (%Poly%vstd!cell.PCell<usize.>. (Poly%vstd!cell.PCell<usize.>. x))) :pattern ((Poly%vstd!cell.PCell<usize.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (UINT SZ))) (= x (Poly%vstd!cell.PCell<usize.>. (%Poly%vstd!cell.PCell<usize.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (UINT SZ)))))))
(assert (forall ((x vstd!cell.PCell<usize.>.)) (! (has_type (Poly%vstd!cell.PCell<usize.>. x) (TYPE%vstd!cell.PCell. $ (UINT SZ))) :pattern ((has_type (Poly%vstd!cell.PCell<usize.>. x) (TYPE%vstd!cell.PCell. $ (UINT SZ)))))))
(assert (forall ((x vstd!cell.PCell<lib!types.PageInner.>.)) (! (= x (%Poly%vstd!cell.PCell<lib!types.PageInner.>. (Poly%vstd!cell.PCell<lib!types.PageInner.>. x))) :pattern ((Poly%vstd!cell.PCell<lib!types.PageInner.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.)) (= x (Poly%vstd!cell.PCell<lib!types.PageInner.>. (%Poly%vstd!cell.PCell<lib!types.PageInner.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.PageInner.>.)) (! (has_type (Poly%vstd!cell.PCell<lib!types.PageInner.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.)) :pattern ((has_type (Poly%vstd!cell.PCell<lib!types.PageInner.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.PageInner.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)) (! (= x (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x))) :pattern ((Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.)) (= x (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain.>.)) (! (has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.)) :pattern ((has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)) (! (= x (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x))) :pattern ((Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.)) (= x (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (%Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.))))))
(assert (forall ((x vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.)) (! (has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.)) :pattern ((has_type (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. x) (TYPE%vstd!cell.PCell. $ TYPE%lib!types.SegmentHeaderMain2.))))))
(assert (forall ((x vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)) (! (= x (%Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x))) :pattern ((Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.))) (= x (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (%Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x)))) :pattern ((has_type x (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.)))))))
(assert (forall ((x vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.)) (! (has_type (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x) (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.))) :pattern ((has_type (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. x) (TYPE%vstd!cell.PCell. $ (PTR $ TYPE%lib!types.Page.)))))))
(assert (forall ((x vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>.)) (! (= x (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. x))) :pattern ((Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor.)) (= x (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor.))))))
(assert (forall ((x vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>.)) (! (has_type (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor.)) :pattern ((has_type (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor.))))))
(assert (forall ((x vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.actor.>.)) (! (= x (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.actor.>. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.actor.>. x))) :pattern ((Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.actor.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.actor.)) (= x (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.actor.>. (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.actor.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.actor.))))))
(assert (forall ((x vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.actor.>.)) (! (has_type (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.actor.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.actor.)) :pattern ((has_type (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.actor.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.actor.))))))
(assert (forall ((x vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.right_to_use_thread.>.)) (! (= x (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.right_to_use_thread.>. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.right_to_use_thread.>. x))) :pattern ((Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.right_to_use_thread.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.right_to_use_thread.)) (= x (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.right_to_use_thread.>. (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.right_to_use_thread.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.right_to_use_thread.))))))
(assert (forall ((x vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.right_to_use_thread.>.)) (! (has_type (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.right_to_use_thread.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.right_to_use_thread.)) :pattern ((has_type (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.right_to_use_thread.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.right_to_use_thread.))))))
(assert (forall ((x vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_checked_state.>.)) (! (= x (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_checked_state.>. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_checked_state.>. x))) :pattern ((Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_checked_state.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_checked_state.)) (= x (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_checked_state.>. (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_checked_state.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_checked_state.))))))
(assert (forall ((x vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_checked_state.>.)) (! (has_type (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_checked_state.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_checked_state.)) :pattern ((has_type (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_checked_state.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_checked_state.))))))
(assert (forall ((x vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_local_state.>.)) (! (= x (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_local_state.>. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_local_state.>. x))) :pattern ((Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_local_state.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_local_state.)) (= x (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_local_state.>. (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_local_state.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_local_state.))))))
(assert (forall ((x vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_local_state.>.)) (! (has_type (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_local_state.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_local_state.)) :pattern ((has_type (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Mim.thread_local_state.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_local_state.))))))
(assert (forall ((x vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>.)) (! (= x (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. x))) :pattern ((Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState.)) (= x (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState.))))))
(assert (forall ((x vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>.)) (! (has_type (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState.)) :pattern ((has_type (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState.))))))
(assert (forall ((x vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>.)) (! (= x (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. x))) :pattern ((Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState.)) (= x (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState.))))))
(assert (forall ((x vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>.)) (! (has_type (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState.)) :pattern ((has_type (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState.)) (= x (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block.)) (= x (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.Mim.block.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId.)) (= x (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (%Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.HeapId./lib!tokens.Mim.reserved_uniq.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.HeapId./lib!tokens.Mim.reserved_uniq.>. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!tokens.Mim.reserved_uniq.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.HeapId./lib!tokens.Mim.reserved_uniq.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!tokens.Mim.reserved_uniq.)) (= x (Poly%vstd!map.Map<lib!tokens.HeapId./lib!tokens.Mim.reserved_uniq.>. (%Poly%vstd!map.Map<lib!tokens.HeapId./lib!tokens.Mim.reserved_uniq.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!tokens.Mim.reserved_uniq.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.HeapId./lib!tokens.Mim.reserved_uniq.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.HeapId./lib!tokens.Mim.reserved_uniq.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!tokens.Mim.reserved_uniq.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.HeapId./lib!tokens.Mim.reserved_uniq.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!tokens.Mim.reserved_uniq.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess.)) (= x (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (%Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor.)) (= x (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState.)) (= x (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId.)) (= x (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay.)) (= x (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay.>. (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay_actor.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay_actor.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay_actor.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay_actor.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay_actor.)) (= x (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay_actor.>. (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay_actor.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay_actor.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay_actor.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay_actor.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay_actor.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.delay_actor.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay_actor.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.heap_of_page.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.heap_of_page.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.heap_of_page.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.heap_of_page.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.heap_of_page.)) (= x (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.heap_of_page.>. (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.heap_of_page.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.heap_of_page.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.heap_of_page.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.heap_of_page.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.heap_of_page.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.Mim.heap_of_page.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.heap_of_page.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.)) (= x (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess.)) (= x (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId.)) (= x (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!tokens.Mim.thread_of_segment.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.Mim.thread_of_segment.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.Mim.thread_of_segment.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.Mim.thread_of_segment.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.Mim.thread_of_segment.)) (= x (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.Mim.thread_of_segment.>. (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.Mim.thread_of_segment.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.Mim.thread_of_segment.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!tokens.Mim.thread_of_segment.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.Mim.thread_of_segment.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.Mim.thread_of_segment.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.Mim.thread_of_segment.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.Mim.thread_of_segment.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState.)) (= x (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess.)) (= x (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess.))))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (= x (%Poly%vstd!raw_ptr.DynMetadata. (Poly%vstd!raw_ptr.DynMetadata. x))) :pattern ((Poly%vstd!raw_ptr.DynMetadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.DynMetadata.) (= x (Poly%vstd!raw_ptr.DynMetadata. (%Poly%vstd!raw_ptr.DynMetadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.) :pattern ((has_type (Poly%vstd!raw_ptr.DynMetadata. x) TYPE%vstd!raw_ptr.DynMetadata.)))))
(assert (forall ((x vstd!raw_ptr.IsExposed.)) (! (= x (%Poly%vstd!raw_ptr.IsExposed. (Poly%vstd!raw_ptr.IsExposed. x))) :pattern ((Poly%vstd!raw_ptr.IsExposed. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.IsExposed.) (= x (Poly%vstd!raw_ptr.IsExposed. (%Poly%vstd!raw_ptr.IsExposed. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.IsExposed.)))))
(assert (forall ((x vstd!raw_ptr.IsExposed.)) (! (has_type (Poly%vstd!raw_ptr.IsExposed. x) TYPE%vstd!raw_ptr.IsExposed.) :pattern ((has_type (Poly%vstd!raw_ptr.IsExposed. x) TYPE%vstd!raw_ptr.IsExposed.)))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.Heap.>.)) (! (= x (%Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x))) :pattern ((Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.)) (= x (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (%Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.Heap.>.)) (! (has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.)) :pattern ((has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.Page.>.)) (! (= x (%Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x))) :pattern ((Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.)) (= x (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (%Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.Page.>.)) (! (has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.)) :pattern ((has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Page.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.)) (! (= x (%Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x))) :pattern ((Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.)) (= x (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (%Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.))))))
(assert (forall ((x vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>.)) (! (has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.)) :pattern ((has_type (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. x) (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.SegmentHeader.))))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!set.Set<lib!thread.ThreadId.>.)) (! (= x (%Poly%vstd!set.Set<lib!thread.ThreadId.>. (Poly%vstd!set.Set<lib!thread.ThreadId.>. x))) :pattern ((Poly%vstd!set.Set<lib!thread.ThreadId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!thread.ThreadId.)) (= x (Poly%vstd!set.Set<lib!thread.ThreadId.>. (%Poly%vstd!set.Set<lib!thread.ThreadId.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!thread.ThreadId.))))))
(assert (forall ((x vstd!set.Set<lib!thread.ThreadId.>.)) (! (has_type (Poly%vstd!set.Set<lib!thread.ThreadId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!thread.ThreadId.)) :pattern ((has_type (Poly%vstd!set.Set<lib!thread.ThreadId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!thread.ThreadId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.BlockId.>.)) (! (= x (%Poly%vstd!set.Set<lib!tokens.BlockId.>. (Poly%vstd!set.Set<lib!tokens.BlockId.>. x))) :pattern ((Poly%vstd!set.Set<lib!tokens.BlockId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.BlockId.)) (= x (Poly%vstd!set.Set<lib!tokens.BlockId.>. (%Poly%vstd!set.Set<lib!tokens.BlockId.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.BlockId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.BlockId.>.)) (! (has_type (Poly%vstd!set.Set<lib!tokens.BlockId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.BlockId.)) :pattern ((has_type (Poly%vstd!set.Set<lib!tokens.BlockId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.BlockId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.HeapId.>.)) (! (= x (%Poly%vstd!set.Set<lib!tokens.HeapId.>. (Poly%vstd!set.Set<lib!tokens.HeapId.>. x))) :pattern ((Poly%vstd!set.Set<lib!tokens.HeapId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.HeapId.)) (= x (Poly%vstd!set.Set<lib!tokens.HeapId.>. (%Poly%vstd!set.Set<lib!tokens.HeapId.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.HeapId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.HeapId.>.)) (! (has_type (Poly%vstd!set.Set<lib!tokens.HeapId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.HeapId.)) :pattern ((has_type (Poly%vstd!set.Set<lib!tokens.HeapId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.HeapId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.PageId.>.)) (! (= x (%Poly%vstd!set.Set<lib!tokens.PageId.>. (Poly%vstd!set.Set<lib!tokens.PageId.>. x))) :pattern ((Poly%vstd!set.Set<lib!tokens.PageId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.)) (= x (Poly%vstd!set.Set<lib!tokens.PageId.>. (%Poly%vstd!set.Set<lib!tokens.PageId.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.PageId.>.)) (! (has_type (Poly%vstd!set.Set<lib!tokens.PageId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.)) :pattern ((has_type (Poly%vstd!set.Set<lib!tokens.PageId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.SegmentId.>.)) (! (= x (%Poly%vstd!set.Set<lib!tokens.SegmentId.>. (Poly%vstd!set.Set<lib!tokens.SegmentId.>. x))) :pattern ((Poly%vstd!set.Set<lib!tokens.SegmentId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.)) (= x (Poly%vstd!set.Set<lib!tokens.SegmentId.>. (%Poly%vstd!set.Set<lib!tokens.SegmentId.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.SegmentId.>.)) (! (has_type (Poly%vstd!set.Set<lib!tokens.SegmentId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.)) :pattern ((has_type (Poly%vstd!set.Set<lib!tokens.SegmentId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.))))))
(assert (forall ((x vstd!state_machine_internal.NoCopy.)) (! (= x (%Poly%vstd!state_machine_internal.NoCopy. (Poly%vstd!state_machine_internal.NoCopy. x))) :pattern ((Poly%vstd!state_machine_internal.NoCopy. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!state_machine_internal.NoCopy.) (= x (Poly%vstd!state_machine_internal.NoCopy. (%Poly%vstd!state_machine_internal.NoCopy. x)))) :pattern ((has_type x TYPE%vstd!state_machine_internal.NoCopy.)))))
(assert (forall ((x vstd!state_machine_internal.NoCopy.)) (! (has_type (Poly%vstd!state_machine_internal.NoCopy. x) TYPE%vstd!state_machine_internal.NoCopy.) :pattern ((has_type (Poly%vstd!state_machine_internal.NoCopy. x) TYPE%vstd!state_machine_internal.NoCopy.)))))
(assert (forall ((x vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>.)) (! (= x (%Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>. (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>. x))) :pattern ((Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ (TYPE%tuple%3. $ TYPE%lib!types.SegmentSharedAccess. $ TYPE%lib!types.PageSharedAccess. $ TYPE%lib!types.HeapSharedAccess.))) (= x (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>. (%Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>. x)))) :pattern ((has_type x (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ (TYPE%tuple%3. $ TYPE%lib!types.SegmentSharedAccess. $ TYPE%lib!types.PageSharedAccess. $ TYPE%lib!types.HeapSharedAccess.)))))))
(assert (forall ((x vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>.)) (! (has_type (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>. x) (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ (TYPE%tuple%3. $ TYPE%lib!types.SegmentSharedAccess. $ TYPE%lib!types.PageSharedAccess. $ TYPE%lib!types.HeapSharedAccess.))) :pattern ((has_type (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>. x) (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. $ (TYPE%tuple%3. $ TYPE%lib!types.SegmentSharedAccess. $ TYPE%lib!types.PageSharedAccess. $ TYPE%lib!types.HeapSharedAccess.)))))))
(assert (forall ((x ptr_mut%<lib!linked_list.Node.>.)) (! (= x (%Poly%ptr_mut%<lib!linked_list.Node.>. (Poly%ptr_mut%<lib!linked_list.Node.>. x))) :pattern ((Poly%ptr_mut%<lib!linked_list.Node.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!linked_list.Node.)) (= x (Poly%ptr_mut%<lib!linked_list.Node.>. (%Poly%ptr_mut%<lib!linked_list.Node.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!linked_list.Node.))))))
(assert (forall ((x ptr_mut%<lib!linked_list.Node.>.)) (! (has_type (Poly%ptr_mut%<lib!linked_list.Node.>. x) (PTR $ TYPE%lib!linked_list.Node.)) :pattern ((has_type (Poly%ptr_mut%<lib!linked_list.Node.>. x) (PTR $ TYPE%lib!linked_list.Node.))))))
(assert (forall ((x ptr_mut%<lib!types.Heap.>.)) (! (= x (%Poly%ptr_mut%<lib!types.Heap.>. (Poly%ptr_mut%<lib!types.Heap.>. x))) :pattern ((Poly%ptr_mut%<lib!types.Heap.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.Heap.)) (= x (Poly%ptr_mut%<lib!types.Heap.>. (%Poly%ptr_mut%<lib!types.Heap.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.Heap.))))))
(assert (forall ((x ptr_mut%<lib!types.Heap.>.)) (! (has_type (Poly%ptr_mut%<lib!types.Heap.>. x) (PTR $ TYPE%lib!types.Heap.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.Heap.>. x) (PTR $ TYPE%lib!types.Heap.))))))
(assert (forall ((x ptr_mut%<lib!types.Page.>.)) (! (= x (%Poly%ptr_mut%<lib!types.Page.>. (Poly%ptr_mut%<lib!types.Page.>. x))) :pattern ((Poly%ptr_mut%<lib!types.Page.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.Page.)) (= x (Poly%ptr_mut%<lib!types.Page.>. (%Poly%ptr_mut%<lib!types.Page.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.Page.))))))
(assert (forall ((x ptr_mut%<lib!types.Page.>.)) (! (has_type (Poly%ptr_mut%<lib!types.Page.>. x) (PTR $ TYPE%lib!types.Page.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.Page.>. x) (PTR $ TYPE%lib!types.Page.))))))
(assert (forall ((x ptr_mut%<lib!types.SegmentHeader.>.)) (! (= x (%Poly%ptr_mut%<lib!types.SegmentHeader.>. (Poly%ptr_mut%<lib!types.SegmentHeader.>. x))) :pattern ((Poly%ptr_mut%<lib!types.SegmentHeader.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.SegmentHeader.)) (= x (Poly%ptr_mut%<lib!types.SegmentHeader.>. (%Poly%ptr_mut%<lib!types.SegmentHeader.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.SegmentHeader.))))))
(assert (forall ((x ptr_mut%<lib!types.SegmentHeader.>.)) (! (has_type (Poly%ptr_mut%<lib!types.SegmentHeader.>. x) (PTR $ TYPE%lib!types.SegmentHeader.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.SegmentHeader.>. x) (PTR $ TYPE%lib!types.SegmentHeader.))))))
(assert (forall ((x ptr_mut%<lib!types.Tld.>.)) (! (= x (%Poly%ptr_mut%<lib!types.Tld.>. (Poly%ptr_mut%<lib!types.Tld.>. x))) :pattern ((Poly%ptr_mut%<lib!types.Tld.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (PTR $ TYPE%lib!types.Tld.)) (= x (Poly%ptr_mut%<lib!types.Tld.>. (%Poly%ptr_mut%<lib!types.Tld.>. x)))) :pattern ((has_type x (PTR $ TYPE%lib!types.Tld.))))))
(assert (forall ((x ptr_mut%<lib!types.Tld.>.)) (! (has_type (Poly%ptr_mut%<lib!types.Tld.>. x) (PTR $ TYPE%lib!types.Tld.)) :pattern ((has_type (Poly%ptr_mut%<lib!types.Tld.>. x) (PTR $ TYPE%lib!types.Tld.))))))
(assert (forall ((x allocator_global%.)) (! (= x (%Poly%allocator_global%. (Poly%allocator_global%. x))) :pattern ((Poly%allocator_global%. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x ALLOCATOR_GLOBAL) (= x (Poly%allocator_global%. (%Poly%allocator_global%. x)))) :pattern ((has_type x ALLOCATOR_GLOBAL)))))
(assert (forall ((x allocator_global%.)) (! (has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL) :pattern ((has_type (Poly%allocator_global%. x) ALLOCATOR_GLOBAL)))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicU64. (Poly%vstd!atomic_ghost.AtomicU64. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicU64. x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicU64. (%Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! vstd!atomic.PAtomicU64.) (_atomic_inv! Poly)) (! (=> (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&))) (has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicU64. (vstd!atomic_ghost.AtomicU64./AtomicU64 _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/patomic x)))))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (= (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x) (vstd!atomic_ghost.AtomicU64./AtomicU64/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)))))
(assert (forall ((K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ TYPE%vstd!atomic.PermissionU64. G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredU64. Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv (%Poly%vstd!atomic_ghost.AtomicU64. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicU64. K&. K& G&. G& Pred&. Pred&))))))
(define-fun is-vstd!atomic_ghost.AtomicU64./AtomicU64_ ((c vstd!atomic_ghost.AtomicU64.)) Bool ((_ is vstd!atomic_ghost.AtomicU64./AtomicU64) c))
(assert (forall ((x vstd!atomic_ghost.AtomicU64.)) (! (=> (is-vstd!atomic_ghost.AtomicU64./AtomicU64_ x) (height_lt (height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicU64. x)))) :pattern ((height (vstd!atomic_ghost.AtomicU64./AtomicU64/atomic_inv x))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (= x (%Poly%vstd!atomic_ghost.AtomicPtr. (Poly%vstd!atomic_ghost.AtomicPtr. x))) :pattern ((Poly%vstd!atomic_ghost.AtomicPtr. x)))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (= x (Poly%vstd!atomic_ghost.AtomicPtr. (%Poly%vstd!atomic_ghost.AtomicPtr. x)))) :pattern ((has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (_patomic! Poly) (_atomic_inv! Poly)) (! (=> (and (has_type _patomic! (TYPE%vstd!atomic.PAtomicPtr. T&. T&)) (has_type _atomic_inv! (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&)))) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (vstd!atomic_ghost.AtomicPtr./AtomicPtr _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))) :pattern ((has_type (Poly%vstd!atomic_ghost.AtomicPtr. (vstd!atomic_ghost.AtomicPtr./AtomicPtr _patomic! _atomic_inv!)) (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (= (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?patomic x)) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x)))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (TYPE%vstd!atomic.PAtomicPtr. T&. T&))) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (= (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x) (vstd!atomic_ghost.AtomicPtr./AtomicPtr/?atomic_inv x)) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x)))))
(assert (forall ((T&. Dcr) (T& Type) (K&. Dcr) (K& Type) (G&. Dcr) (G& Type) (Pred&. Dcr) (Pred& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&)) (has_type (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (TYPE%vstd!invariant.AtomicInvariant. $ (TYPE%tuple%2. K&. K& $ INT) $ (TYPE%tuple%2. $ (TYPE%vstd!atomic.PermissionPtr. T&. T&) G&. G&) $ (TYPE%vstd!atomic_ghost.AtomicPredPtr. T&. T& Pred&. Pred&)))) :pattern ((vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv (%Poly%vstd!atomic_ghost.AtomicPtr. x)) (has_type x (TYPE%vstd!atomic_ghost.AtomicPtr. T&. T& K&. K& G&. G& Pred&. Pred&))))))
(define-fun is-vstd!atomic_ghost.AtomicPtr./AtomicPtr_ ((c vstd!atomic_ghost.AtomicPtr.)) Bool ((_ is vstd!atomic_ghost.AtomicPtr./AtomicPtr) c))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (=> (is-vstd!atomic_ghost.AtomicPtr./AtomicPtr_ x) (height_lt (height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x)) (height (Poly%vstd!atomic_ghost.AtomicPtr. x)))) :pattern ((height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/patomic x))))))
(assert (forall ((x vstd!atomic_ghost.AtomicPtr.)) (! (=> (is-vstd!atomic_ghost.AtomicPtr./AtomicPtr_ x) (height_lt (height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x)) (height (Poly%vstd!atomic_ghost.AtomicPtr. x)))) :pattern ((height (vstd!atomic_ghost.AtomicPtr./AtomicPtr/atomic_inv x))))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= x (%Poly%vstd!raw_ptr.Metadata. (Poly%vstd!raw_ptr.Metadata. x))) :pattern ((Poly%vstd!raw_ptr.Metadata. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (= x (Poly%vstd!raw_ptr.Metadata. (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (has_type (Poly%vstd!raw_ptr.Metadata. vstd!raw_ptr.Metadata./Thin) TYPE%vstd!raw_ptr.Metadata.))
(assert (forall ((_0! Int)) (! (=> (uInv SZ _0!) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Length _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Length/0 x) (vstd!raw_ptr.Metadata./Length/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Length/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Metadata.) (uInv SZ (vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)))) :pattern ((vstd!raw_ptr.Metadata./Length/0 (%Poly%vstd!raw_ptr.Metadata. x)) (has_type x TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((_0! vstd!raw_ptr.DynMetadata.)) (! (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.) :pattern ((has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.Metadata./Dyn _0!)) TYPE%vstd!raw_ptr.Metadata.)))))
(assert (forall ((x vstd!raw_ptr.Metadata.)) (! (= (vstd!raw_ptr.Metadata./Dyn/0 x) (vstd!raw_ptr.Metadata./Dyn/?0 x)) :pattern ((vstd!raw_ptr.Metadata./Dyn/0 x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= x (%Poly%vstd!raw_ptr.PtrData. (Poly%vstd!raw_ptr.PtrData. x))) :pattern ((Poly%vstd!raw_ptr.PtrData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (= x (Poly%vstd!raw_ptr.PtrData. (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((_addr! Int) (_provenance! vstd!raw_ptr.Provenance.) (_metadata! vstd!raw_ptr.Metadata.)) (! (=> (and (uInv SZ _addr!) (has_type (Poly%vstd!raw_ptr.Metadata. _metadata!) TYPE%vstd!raw_ptr.Metadata.)) (has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)) :pattern ((has_type (Poly%vstd!raw_ptr.PtrData. (vstd!raw_ptr.PtrData./PtrData _addr! _provenance! _metadata!)) TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/addr x) (vstd!raw_ptr.PtrData./PtrData/?addr x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (uInv SZ (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)))) :pattern ((vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/provenance x) (vstd!raw_ptr.PtrData./PtrData/?provenance x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/provenance x)))))
(assert (forall ((x vstd!raw_ptr.PtrData.)) (! (= (vstd!raw_ptr.PtrData./PtrData/metadata x) (vstd!raw_ptr.PtrData./PtrData/?metadata x)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.PtrData.) (has_type (Poly%vstd!raw_ptr.Metadata. (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x))) TYPE%vstd!raw_ptr.Metadata.)) :pattern ((vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. x)) (has_type x TYPE%vstd!raw_ptr.PtrData.)))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= x (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. x))) :pattern ((Poly%vstd!raw_ptr.MemContents. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (= x (Poly%vstd!raw_ptr.MemContents. (%Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&)) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. vstd!raw_ptr.MemContents./Uninit) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_0! Poly)) (! (=> (has_type _0! T&) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.MemContents./Init _0!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (= (vstd!raw_ptr.MemContents./Init/0 x) (vstd!raw_ptr.MemContents./Init/?0 x)) :pattern ((vstd!raw_ptr.MemContents./Init/0 x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) T&)) :pattern ((vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. x)) (has_type x (TYPE%vstd!raw_ptr.MemContents. T&. T&))))))
(define-fun is-vstd!raw_ptr.MemContents./Init_ ((c vstd!raw_ptr.MemContents.)) Bool ((_ is vstd!raw_ptr.MemContents./Init) c))
(assert (forall ((x vstd!raw_ptr.MemContents.)) (! (=> (is-vstd!raw_ptr.MemContents./Init_ x) (height_lt (height (vstd!raw_ptr.MemContents./Init/0 x)) (height (Poly%vstd!raw_ptr.MemContents. x)))) :pattern ((height (vstd!raw_ptr.MemContents./Init/0 x))))))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (= x (%Poly%vstd!raw_ptr.PointsToData. (Poly%vstd!raw_ptr.PointsToData. x))) :pattern ((Poly%vstd!raw_ptr.PointsToData. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&)) (= x (Poly%vstd!raw_ptr.PointsToData. (%Poly%vstd!raw_ptr.PointsToData. x)))) :pattern ((has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_ptr! Poly) (_opt_value! vstd!raw_ptr.MemContents.)) (! (=> (and (has_type _ptr! (PTR T&. T&)) (has_type (Poly%vstd!raw_ptr.MemContents. _opt_value!) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) (has_type (Poly%vstd!raw_ptr.PointsToData. (vstd!raw_ptr.PointsToData./PointsToData _ptr! _opt_value!)) (TYPE%vstd!raw_ptr.PointsToData. T&. T&))) :pattern ((has_type (Poly%vstd!raw_ptr.PointsToData. (vstd!raw_ptr.PointsToData./PointsToData _ptr! _opt_value!)) (TYPE%vstd!raw_ptr.PointsToData. T&. T&))))))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (= (vstd!raw_ptr.PointsToData./PointsToData/ptr x) (vstd!raw_ptr.PointsToData./PointsToData/?ptr x)) :pattern ((vstd!raw_ptr.PointsToData./PointsToData/ptr x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&)) (has_type (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. x)) (PTR T&. T&))) :pattern ((vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. x)) (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&))))))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (= (vstd!raw_ptr.PointsToData./PointsToData/opt_value x) (vstd!raw_ptr.PointsToData./PointsToData/?opt_value x)) :pattern ((vstd!raw_ptr.PointsToData./PointsToData/opt_value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&)) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. x))) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. x)) (has_type x (TYPE%vstd!raw_ptr.PointsToData. T&. T&))))))
(define-fun is-vstd!raw_ptr.PointsToData./PointsToData_ ((c vstd!raw_ptr.PointsToData.)) Bool ((_ is vstd!raw_ptr.PointsToData./PointsToData) c))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (=> (is-vstd!raw_ptr.PointsToData./PointsToData_ x) (height_lt (height (vstd!raw_ptr.PointsToData./PointsToData/ptr x)) (height (Poly%vstd!raw_ptr.PointsToData. x)))) :pattern ((height (vstd!raw_ptr.PointsToData./PointsToData/ptr x))))))
(assert (forall ((x vstd!raw_ptr.PointsToData.)) (! (=> (is-vstd!raw_ptr.PointsToData./PointsToData_ x) (height_lt (height (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value x))) (height (Poly%vstd!raw_ptr.PointsToData. x)))) :pattern ((height (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value x)))))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= x (%Poly%lib!tokens.Mim.State. (Poly%lib!tokens.Mim.State. x))) :pattern ((Poly%lib!tokens.Mim.State. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.State.) (= x (Poly%lib!tokens.Mim.State. (%Poly%lib!tokens.Mim.State. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.State.)))))
(assert (forall ((_right_to_set_inst! Bool) (_my_inst! core!option.Option.) (_thread_local_state! vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>.) (_right_to_use_thread! vstd!set.Set<lib!thread.ThreadId.>.) (_block! vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>.) (_thread_of_segment! vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>.) (_delay! vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>.) (_heap_of_page! vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>.) (_actor! vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>.) (_delay_actor! vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>.) (_segment_shared_access! vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>.) (_page_shared_access! vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.) (_heap_shared_access! vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>.) (_reserved_uniq! vstd!set.Set<lib!tokens.HeapId.>.) (_thread_checked_state! vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>.) (_heap_to_thread! vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>.)) (! (=> (has_type (Poly%core!option.Option. _my_inst!) (TYPE%core!option.Option. (BOX $ ALLOCATOR_GLOBAL $) TYPE%lib!tokens.Mim.Instance.)) (has_type (Poly%lib!tokens.Mim.State. (lib!tokens.Mim.State./State _right_to_set_inst! _my_inst! _thread_local_state! _right_to_use_thread! _block! _thread_of_segment! _delay! _heap_of_page! _actor! _delay_actor! _segment_shared_access! _page_shared_access! _heap_shared_access! _reserved_uniq! _thread_checked_state! _heap_to_thread!)) TYPE%lib!tokens.Mim.State.)) :pattern ((has_type (Poly%lib!tokens.Mim.State. (lib!tokens.Mim.State./State _right_to_set_inst! _my_inst! _thread_local_state! _right_to_use_thread! _block! _thread_of_segment! _delay! _heap_of_page! _actor! _delay_actor! _segment_shared_access! _page_shared_access! _heap_shared_access! _reserved_uniq! _thread_checked_state! _heap_to_thread!)) TYPE%lib!tokens.Mim.State.)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/right_to_set_inst x) (lib!tokens.Mim.State./State/?right_to_set_inst x)) :pattern ((lib!tokens.Mim.State./State/right_to_set_inst x)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/my_inst x) (lib!tokens.Mim.State./State/?my_inst x)) :pattern ((lib!tokens.Mim.State./State/my_inst x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.State.) (has_type (Poly%core!option.Option. (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. x))) (TYPE%core!option.Option. (BOX $ ALLOCATOR_GLOBAL $) TYPE%lib!tokens.Mim.Instance.))) :pattern ((lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. x)) (has_type x TYPE%lib!tokens.Mim.State.)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/thread_local_state x) (lib!tokens.Mim.State./State/?thread_local_state x)) :pattern ((lib!tokens.Mim.State./State/thread_local_state x)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/right_to_use_thread x) (lib!tokens.Mim.State./State/?right_to_use_thread x)) :pattern ((lib!tokens.Mim.State./State/right_to_use_thread x)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/block x) (lib!tokens.Mim.State./State/?block x)) :pattern ((lib!tokens.Mim.State./State/block x)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/thread_of_segment x) (lib!tokens.Mim.State./State/?thread_of_segment x)) :pattern ((lib!tokens.Mim.State./State/thread_of_segment x)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/delay x) (lib!tokens.Mim.State./State/?delay x)) :pattern ((lib!tokens.Mim.State./State/delay x)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/heap_of_page x) (lib!tokens.Mim.State./State/?heap_of_page x)) :pattern ((lib!tokens.Mim.State./State/heap_of_page x)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/actor x) (lib!tokens.Mim.State./State/?actor x)) :pattern ((lib!tokens.Mim.State./State/actor x)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/delay_actor x) (lib!tokens.Mim.State./State/?delay_actor x)) :pattern ((lib!tokens.Mim.State./State/delay_actor x)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/segment_shared_access x) (lib!tokens.Mim.State./State/?segment_shared_access x)) :pattern ((lib!tokens.Mim.State./State/segment_shared_access x)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/page_shared_access x) (lib!tokens.Mim.State./State/?page_shared_access x)) :pattern ((lib!tokens.Mim.State./State/page_shared_access x)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/heap_shared_access x) (lib!tokens.Mim.State./State/?heap_shared_access x)) :pattern ((lib!tokens.Mim.State./State/heap_shared_access x)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/reserved_uniq x) (lib!tokens.Mim.State./State/?reserved_uniq x)) :pattern ((lib!tokens.Mim.State./State/reserved_uniq x)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/thread_checked_state x) (lib!tokens.Mim.State./State/?thread_checked_state x)) :pattern ((lib!tokens.Mim.State./State/thread_checked_state x)))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (= (lib!tokens.Mim.State./State/heap_to_thread x) (lib!tokens.Mim.State./State/?heap_to_thread x)) :pattern ((lib!tokens.Mim.State./State/heap_to_thread x)))))
(define-fun is-lib!tokens.Mim.State./State_ ((c lib!tokens.Mim.State.)) Bool ((_ is lib!tokens.Mim.State./State) c))
(assert (forall ((x lib!tokens.Mim.State.)) (! (=> (is-lib!tokens.Mim.State./State_ x) (height_lt (height (Poly%core!option.Option. (lib!tokens.Mim.State./State/my_inst x))) (height (Poly%lib!tokens.Mim.State. x)))) :pattern ((height (Poly%core!option.Option. (lib!tokens.Mim.State./State/my_inst x)))))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (=> (is-lib!tokens.Mim.State./State_ x) (height_lt (height (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state x))) (height (Poly%lib!tokens.Mim.State. x)))) :pattern ((height (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state x)))))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (=> (is-lib!tokens.Mim.State./State_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state x)))) (height (Poly%lib!tokens.Mim.State. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state x))))))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (=> (is-lib!tokens.Mim.State./State_ x) (height_lt (height (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (lib!tokens.Mim.State./State/block x))) (height (Poly%lib!tokens.Mim.State. x)))) :pattern ((height (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (lib!tokens.Mim.State./State/block x)))))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (=> (is-lib!tokens.Mim.State./State_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (lib!tokens.Mim.State./State/block x)))) (height (Poly%lib!tokens.Mim.State. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (lib!tokens.Mim.State./State/block x))))))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (=> (is-lib!tokens.Mim.State./State_ x) (height_lt (height (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (lib!tokens.Mim.State./State/delay_actor x))) (height (Poly%lib!tokens.Mim.State. x)))) :pattern ((height (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (lib!tokens.Mim.State./State/delay_actor x)))))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (=> (is-lib!tokens.Mim.State./State_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (lib!tokens.Mim.State./State/delay_actor x)))) (height (Poly%lib!tokens.Mim.State. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (lib!tokens.Mim.State./State/delay_actor x))))))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (=> (is-lib!tokens.Mim.State./State_ x) (height_lt (height (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (lib!tokens.Mim.State./State/segment_shared_access x))) (height (Poly%lib!tokens.Mim.State. x)))) :pattern ((height (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (lib!tokens.Mim.State./State/segment_shared_access x)))))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (=> (is-lib!tokens.Mim.State./State_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (lib!tokens.Mim.State./State/segment_shared_access x)))) (height (Poly%lib!tokens.Mim.State. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (lib!tokens.Mim.State./State/segment_shared_access x))))))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (=> (is-lib!tokens.Mim.State./State_ x) (height_lt (height (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!tokens.Mim.State./State/page_shared_access x))) (height (Poly%lib!tokens.Mim.State. x)))) :pattern ((height (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!tokens.Mim.State./State/page_shared_access x)))))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (=> (is-lib!tokens.Mim.State./State_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!tokens.Mim.State./State/page_shared_access x)))) (height (Poly%lib!tokens.Mim.State. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!tokens.Mim.State./State/page_shared_access x))))))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (=> (is-lib!tokens.Mim.State./State_ x) (height_lt (height (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access x))) (height (Poly%lib!tokens.Mim.State. x)))) :pattern ((height (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access x)))))))
(assert (forall ((x lib!tokens.Mim.State.)) (! (=> (is-lib!tokens.Mim.State./State_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access x)))) (height (Poly%lib!tokens.Mim.State. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access x))))))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= x (%Poly%lib!tokens.Mim.Step. (Poly%lib!tokens.Mim.Step. x))) :pattern ((Poly%lib!tokens.Mim.Step. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (= x (Poly%lib!tokens.Mim.Step. (%Poly%lib!tokens.Mim.Step. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!tokens.Mim.Instance.)) (! (=> (has_type (Poly%lib!tokens.Mim.Instance. _0!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./set_inst _0!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./set_inst _0!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./set_inst/0 x) (lib!tokens.Mim.Step./set_inst/?0 x)) :pattern ((lib!tokens.Mim.Step./set_inst/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.Step./set_inst/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.Step./set_inst/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!thread.ThreadId.)) (! (=> (has_type (Poly%lib!thread.ThreadId. _0!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./actor_make_idle _0!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./actor_make_idle _0!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./actor_make_idle/0 x) (lib!tokens.Mim.Step./actor_make_idle/?0 x)) :pattern ((lib!tokens.Mim.Step./actor_make_idle/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.Step./actor_make_idle/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.Step./actor_make_idle/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!thread.ThreadId.)) (! (=> (has_type (Poly%lib!thread.ThreadId. _0!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./actor_abandon _0!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./actor_abandon _0!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./actor_abandon/0 x) (lib!tokens.Mim.Step./actor_abandon/?0 x)) :pattern ((lib!tokens.Mim.Step./actor_abandon/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.Step./actor_abandon/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.Step./actor_abandon/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!tokens.PageId.)) (! (=> (has_type (Poly%lib!tokens.PageId. _0!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./set_use_delayed_free _0!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./set_use_delayed_free _0!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./set_use_delayed_free/0 x) (lib!tokens.Mim.Step./set_use_delayed_free/?0 x)) :pattern ((lib!tokens.Mim.Step./set_use_delayed_free/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.Step./set_use_delayed_free/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.Step./set_use_delayed_free/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!tokens.PageId.) (_1! lib!tokens.BlockId.)) (! (=> (and (has_type (Poly%lib!tokens.PageId. _0!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!tokens.BlockId. _1!) TYPE%lib!tokens.BlockId.)) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./delay_enter_freeing _0! _1!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./delay_enter_freeing _0! _1!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./delay_enter_freeing/0 x) (lib!tokens.Mim.Step./delay_enter_freeing/?0 x)) :pattern ((lib!tokens.Mim.Step./delay_enter_freeing/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.Step./delay_enter_freeing/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.Step./delay_enter_freeing/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./delay_enter_freeing/1 x) (lib!tokens.Mim.Step./delay_enter_freeing/?1 x)) :pattern ((lib!tokens.Mim.Step./delay_enter_freeing/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.Step./delay_enter_freeing/1 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.Step./delay_enter_freeing/1 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!tokens.PageId.)) (! (=> (has_type (Poly%lib!tokens.PageId. _0!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./delay_leave_freeing _0!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./delay_leave_freeing _0!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./delay_leave_freeing/0 x) (lib!tokens.Mim.Step./delay_leave_freeing/?0 x)) :pattern ((lib!tokens.Mim.Step./delay_leave_freeing/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.Step./delay_leave_freeing/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.Step./delay_leave_freeing/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!tokens.BlockId.)) (! (=> (has_type (Poly%lib!tokens.BlockId. _0!) TYPE%lib!tokens.BlockId.) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./delay_lookup_heap _0!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./delay_lookup_heap _0!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./delay_lookup_heap/0 x) (lib!tokens.Mim.Step./delay_lookup_heap/?0 x)) :pattern ((lib!tokens.Mim.Step./delay_lookup_heap/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.Step./delay_lookup_heap/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.Step./delay_lookup_heap/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!tokens.BlockId.)) (! (=> (has_type (Poly%lib!tokens.BlockId. _0!) TYPE%lib!tokens.BlockId.) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./block_set_heap_id _0!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./block_set_heap_id _0!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./block_set_heap_id/0 x) (lib!tokens.Mim.Step./block_set_heap_id/?0 x)) :pattern ((lib!tokens.Mim.Step./block_set_heap_id/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.Step./block_set_heap_id/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.Step./block_set_heap_id/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (has_type (Poly%lib!tokens.Mim.Step. lib!tokens.Mim.Step./reserve_uniq_identifier) TYPE%lib!tokens.Mim.Step.))
(assert (forall ((_0! lib!thread.ThreadId.) (_1! lib!tokens.ThreadState.)) (! (=> (and (has_type (Poly%lib!thread.ThreadId. _0!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.ThreadState. _1!) TYPE%lib!tokens.ThreadState.)) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./create_thread_mk_tokens _0! _1!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./create_thread_mk_tokens _0! _1!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./create_thread_mk_tokens/0 x) (lib!tokens.Mim.Step./create_thread_mk_tokens/?0 x)) :pattern ((lib!tokens.Mim.Step./create_thread_mk_tokens/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.Step./create_thread_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.Step./create_thread_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./create_thread_mk_tokens/1 x) (lib!tokens.Mim.Step./create_thread_mk_tokens/?1 x)) :pattern ((lib!tokens.Mim.Step./create_thread_mk_tokens/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.Step./create_thread_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.ThreadState.)) :pattern ((lib!tokens.Mim.Step./create_thread_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!thread.ThreadId.) (_1! lib!tokens.SegmentId.) (_2! lib!tokens.SegmentState.)) (! (=> (and (has_type (Poly%lib!thread.ThreadId. _0!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.SegmentId. _1!) TYPE%lib!tokens.SegmentId.)) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./create_segment_mk_tokens _0! _1! _2!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./create_segment_mk_tokens _0! _1! _2!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./create_segment_mk_tokens/0 x) (lib!tokens.Mim.Step./create_segment_mk_tokens/?0 x)) :pattern ((lib!tokens.Mim.Step./create_segment_mk_tokens/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.Step./create_segment_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.Step./create_segment_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./create_segment_mk_tokens/1 x) (lib!tokens.Mim.Step./create_segment_mk_tokens/?1 x)) :pattern ((lib!tokens.Mim.Step./create_segment_mk_tokens/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.Mim.Step./create_segment_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.Mim.Step./create_segment_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./create_segment_mk_tokens/2 x) (lib!tokens.Mim.Step./create_segment_mk_tokens/?2 x)) :pattern ((lib!tokens.Mim.Step./create_segment_mk_tokens/2 x)))))
(assert (forall ((_0! lib!thread.ThreadId.) (_1! lib!tokens.SegmentId.) (_2! lib!types.SegmentSharedAccess.)) (! (=> (and (has_type (Poly%lib!thread.ThreadId. _0!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.SegmentId. _1!) TYPE%lib!tokens.SegmentId.)) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./segment_enable _0! _1! _2!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./segment_enable _0! _1! _2!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./segment_enable/0 x) (lib!tokens.Mim.Step./segment_enable/?0 x)) :pattern ((lib!tokens.Mim.Step./segment_enable/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.Step./segment_enable/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.Step./segment_enable/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./segment_enable/1 x) (lib!tokens.Mim.Step./segment_enable/?1 x)) :pattern ((lib!tokens.Mim.Step./segment_enable/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.Mim.Step./segment_enable/1 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.Mim.Step./segment_enable/1 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./segment_enable/2 x) (lib!tokens.Mim.Step./segment_enable/?2 x)) :pattern ((lib!tokens.Mim.Step./segment_enable/2 x)))))
(assert (forall ((_0! lib!thread.ThreadId.) (_1! lib!tokens.PageId.) (_2! Int) (_3! Int) (_4! vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)) (! (=> (and (has_type (Poly%lib!thread.ThreadId. _0!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.PageId. _1!) TYPE%lib!tokens.PageId.) (<= 0 _2!) (<= 0 _3!)) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./create_page_mk_tokens _0! _1! _2! _3! _4!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./create_page_mk_tokens _0! _1! _2! _3! _4!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./create_page_mk_tokens/0 x) (lib!tokens.Mim.Step./create_page_mk_tokens/?0 x)) :pattern ((lib!tokens.Mim.Step./create_page_mk_tokens/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.Step./create_page_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.Step./create_page_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./create_page_mk_tokens/1 x) (lib!tokens.Mim.Step./create_page_mk_tokens/?1 x)) :pattern ((lib!tokens.Mim.Step./create_page_mk_tokens/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.Step./create_page_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.Step./create_page_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./create_page_mk_tokens/2 x) (lib!tokens.Mim.Step./create_page_mk_tokens/?2 x)) :pattern ((lib!tokens.Mim.Step./create_page_mk_tokens/2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.Step./create_page_mk_tokens/2 (%Poly%lib!tokens.Mim.Step. x)))) :pattern ((lib!tokens.Mim.Step./create_page_mk_tokens/2 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./create_page_mk_tokens/3 x) (lib!tokens.Mim.Step./create_page_mk_tokens/?3 x)) :pattern ((lib!tokens.Mim.Step./create_page_mk_tokens/3 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.Step./create_page_mk_tokens/3 (%Poly%lib!tokens.Mim.Step. x)))) :pattern ((lib!tokens.Mim.Step./create_page_mk_tokens/3 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./create_page_mk_tokens/4 x) (lib!tokens.Mim.Step./create_page_mk_tokens/?4 x)) :pattern ((lib!tokens.Mim.Step./create_page_mk_tokens/4 x)))))
(assert (forall ((_0! lib!thread.ThreadId.) (_1! lib!tokens.PageId.) (_2! Int) (_3! vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.) (_4! vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.)) (! (=> (and (has_type (Poly%lib!thread.ThreadId. _0!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.PageId. _1!) TYPE%lib!tokens.PageId.) (<= 0 _2!)) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./page_enable _0! _1! _2! _3! _4!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./page_enable _0! _1! _2! _3! _4!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_enable/0 x) (lib!tokens.Mim.Step./page_enable/?0 x)) :pattern ((lib!tokens.Mim.Step./page_enable/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.Step./page_enable/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.Step./page_enable/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_enable/1 x) (lib!tokens.Mim.Step./page_enable/?1 x)) :pattern ((lib!tokens.Mim.Step./page_enable/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.Step./page_enable/1 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.Step./page_enable/1 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_enable/2 x) (lib!tokens.Mim.Step./page_enable/?2 x)) :pattern ((lib!tokens.Mim.Step./page_enable/2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.Step./page_enable/2 (%Poly%lib!tokens.Mim.Step. x)))) :pattern ((lib!tokens.Mim.Step./page_enable/2 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_enable/3 x) (lib!tokens.Mim.Step./page_enable/?3 x)) :pattern ((lib!tokens.Mim.Step./page_enable/3 x)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_enable/4 x) (lib!tokens.Mim.Step./page_enable/?4 x)) :pattern ((lib!tokens.Mim.Step./page_enable/4 x)))))
(assert (forall ((_0! lib!thread.ThreadId.) (_1! lib!tokens.PageId.) (_2! Int) (_3! Int) (_4! Int)) (! (=> (and (has_type (Poly%lib!thread.ThreadId. _0!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.PageId. _1!) TYPE%lib!tokens.PageId.) (<= 0 _2!) (<= 0 _3!) (<= 0 _4!)) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./page_mk_block_tokens _0! _1! _2! _3! _4!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./page_mk_block_tokens _0! _1! _2! _3! _4!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_mk_block_tokens/0 x) (lib!tokens.Mim.Step./page_mk_block_tokens/?0 x)) :pattern ((lib!tokens.Mim.Step./page_mk_block_tokens/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.Step./page_mk_block_tokens/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.Step./page_mk_block_tokens/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_mk_block_tokens/1 x) (lib!tokens.Mim.Step./page_mk_block_tokens/?1 x)) :pattern ((lib!tokens.Mim.Step./page_mk_block_tokens/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.Step./page_mk_block_tokens/1 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.Step./page_mk_block_tokens/1 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_mk_block_tokens/2 x) (lib!tokens.Mim.Step./page_mk_block_tokens/?2 x)) :pattern ((lib!tokens.Mim.Step./page_mk_block_tokens/2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.Step./page_mk_block_tokens/2 (%Poly%lib!tokens.Mim.Step. x)))) :pattern ((lib!tokens.Mim.Step./page_mk_block_tokens/2 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_mk_block_tokens/3 x) (lib!tokens.Mim.Step./page_mk_block_tokens/?3 x)) :pattern ((lib!tokens.Mim.Step./page_mk_block_tokens/3 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.Step./page_mk_block_tokens/3 (%Poly%lib!tokens.Mim.Step. x)))) :pattern ((lib!tokens.Mim.Step./page_mk_block_tokens/3 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_mk_block_tokens/4 x) (lib!tokens.Mim.Step./page_mk_block_tokens/?4 x)) :pattern ((lib!tokens.Mim.Step./page_mk_block_tokens/4 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.Step./page_mk_block_tokens/4 (%Poly%lib!tokens.Mim.Step. x)))) :pattern ((lib!tokens.Mim.Step./page_mk_block_tokens/4 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!thread.ThreadId.) (_1! lib!tokens.PageId.) (_2! vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>.)) (! (=> (and (has_type (Poly%lib!thread.ThreadId. _0!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.PageId. _1!) TYPE%lib!tokens.PageId.)) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./page_destroy_block_tokens _0! _1! _2!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./page_destroy_block_tokens _0! _1! _2!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_destroy_block_tokens/0 x) (lib!tokens.Mim.Step./page_destroy_block_tokens/?0 x)) :pattern ((lib!tokens.Mim.Step./page_destroy_block_tokens/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.Step./page_destroy_block_tokens/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.Step./page_destroy_block_tokens/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_destroy_block_tokens/1 x) (lib!tokens.Mim.Step./page_destroy_block_tokens/?1 x)) :pattern ((lib!tokens.Mim.Step./page_destroy_block_tokens/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.Step./page_destroy_block_tokens/1 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.Step./page_destroy_block_tokens/1 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_destroy_block_tokens/2 x) (lib!tokens.Mim.Step./page_destroy_block_tokens/?2 x)) :pattern ((lib!tokens.Mim.Step./page_destroy_block_tokens/2 x)))))
(assert (forall ((_0! lib!thread.ThreadId.) (_1! lib!tokens.PageId.)) (! (=> (and (has_type (Poly%lib!thread.ThreadId. _0!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.PageId. _1!) TYPE%lib!tokens.PageId.)) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./page_check_delay_state _0! _1!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./page_check_delay_state _0! _1!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_check_delay_state/0 x) (lib!tokens.Mim.Step./page_check_delay_state/?0 x)) :pattern ((lib!tokens.Mim.Step./page_check_delay_state/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.Step./page_check_delay_state/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.Step./page_check_delay_state/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_check_delay_state/1 x) (lib!tokens.Mim.Step./page_check_delay_state/?1 x)) :pattern ((lib!tokens.Mim.Step./page_check_delay_state/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.Step./page_check_delay_state/1 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.Step./page_check_delay_state/1 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!thread.ThreadId.) (_1! lib!tokens.PageId.) (_2! Int)) (! (=> (and (has_type (Poly%lib!thread.ThreadId. _0!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.PageId. _1!) TYPE%lib!tokens.PageId.) (<= 0 _2!)) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./page_disable _0! _1! _2!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./page_disable _0! _1! _2!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_disable/0 x) (lib!tokens.Mim.Step./page_disable/?0 x)) :pattern ((lib!tokens.Mim.Step./page_disable/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.Step./page_disable/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.Step./page_disable/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_disable/1 x) (lib!tokens.Mim.Step./page_disable/?1 x)) :pattern ((lib!tokens.Mim.Step./page_disable/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.Step./page_disable/1 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.Step./page_disable/1 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_disable/2 x) (lib!tokens.Mim.Step./page_disable/?2 x)) :pattern ((lib!tokens.Mim.Step./page_disable/2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.Step./page_disable/2 (%Poly%lib!tokens.Mim.Step. x)))) :pattern ((lib!tokens.Mim.Step./page_disable/2 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!thread.ThreadId.) (_1! lib!tokens.PageId.) (_2! Int)) (! (=> (and (has_type (Poly%lib!thread.ThreadId. _0!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.PageId. _1!) TYPE%lib!tokens.PageId.) (<= 0 _2!)) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./page_destroy_tokens _0! _1! _2!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./page_destroy_tokens _0! _1! _2!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_destroy_tokens/0 x) (lib!tokens.Mim.Step./page_destroy_tokens/?0 x)) :pattern ((lib!tokens.Mim.Step./page_destroy_tokens/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.Step./page_destroy_tokens/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.Step./page_destroy_tokens/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_destroy_tokens/1 x) (lib!tokens.Mim.Step./page_destroy_tokens/?1 x)) :pattern ((lib!tokens.Mim.Step./page_destroy_tokens/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.Step./page_destroy_tokens/1 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.Step./page_destroy_tokens/1 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./page_destroy_tokens/2 x) (lib!tokens.Mim.Step./page_destroy_tokens/?2 x)) :pattern ((lib!tokens.Mim.Step./page_destroy_tokens/2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.Step./page_destroy_tokens/2 (%Poly%lib!tokens.Mim.Step. x)))) :pattern ((lib!tokens.Mim.Step./page_destroy_tokens/2 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!tokens.BlockId.) (_1! lib!tokens.BlockId.)) (! (=> (and (has_type (Poly%lib!tokens.BlockId. _0!) TYPE%lib!tokens.BlockId.) (has_type (Poly%lib!tokens.BlockId. _1!) TYPE%lib!tokens.BlockId.)) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./block_tokens_distinct _0! _1!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./block_tokens_distinct _0! _1!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./block_tokens_distinct/0 x) (lib!tokens.Mim.Step./block_tokens_distinct/?0 x)) :pattern ((lib!tokens.Mim.Step./block_tokens_distinct/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.Step./block_tokens_distinct/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.Step./block_tokens_distinct/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./block_tokens_distinct/1 x) (lib!tokens.Mim.Step./block_tokens_distinct/?1 x)) :pattern ((lib!tokens.Mim.Step./block_tokens_distinct/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.Step./block_tokens_distinct/1 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.Step./block_tokens_distinct/1 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!thread.ThreadId.) (_1! lib!tokens.BlockId.)) (! (=> (and (has_type (Poly%lib!thread.ThreadId. _0!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.BlockId. _1!) TYPE%lib!tokens.BlockId.)) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./block_in_range _0! _1!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./block_in_range _0! _1!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./block_in_range/0 x) (lib!tokens.Mim.Step./block_in_range/?0 x)) :pattern ((lib!tokens.Mim.Step./block_in_range/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.Step./block_in_range/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.Step./block_in_range/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./block_in_range/1 x) (lib!tokens.Mim.Step./block_in_range/?1 x)) :pattern ((lib!tokens.Mim.Step./block_in_range/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.Step./block_in_range/1 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.Step./block_in_range/1 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((_0! lib!tokens.Mim.State.)) (! (=> (has_type (Poly%lib!tokens.Mim.State. _0!) TYPE%lib!tokens.Mim.State.) (has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./dummy_to_use_type_params _0!)) TYPE%lib!tokens.Mim.Step.)) :pattern ((has_type (Poly%lib!tokens.Mim.Step. (lib!tokens.Mim.Step./dummy_to_use_type_params _0!)) TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Step.)) (! (= (lib!tokens.Mim.Step./dummy_to_use_type_params/0 x) (lib!tokens.Mim.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!tokens.Mim.Step./dummy_to_use_type_params/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.Mim.State. (lib!tokens.Mim.Step./dummy_to_use_type_params/0 (%Poly%lib!tokens.Mim.Step. x))) TYPE%lib!tokens.Mim.State.)) :pattern ((lib!tokens.Mim.Step./dummy_to_use_type_params/0 (%Poly%lib!tokens.Mim.Step. x)) (has_type x TYPE%lib!tokens.Mim.Step.)))))
(assert (forall ((x lib!tokens.Mim.Config.)) (! (= x (%Poly%lib!tokens.Mim.Config. (Poly%lib!tokens.Mim.Config. x))) :pattern ((Poly%lib!tokens.Mim.Config. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Config.) (= x (Poly%lib!tokens.Mim.Config. (%Poly%lib!tokens.Mim.Config. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.Config.)))))
(assert (has_type (Poly%lib!tokens.Mim.Config. lib!tokens.Mim.Config./initialize) TYPE%lib!tokens.Mim.Config.))
(assert (forall ((_0! lib!tokens.Mim.State.)) (! (=> (has_type (Poly%lib!tokens.Mim.State. _0!) TYPE%lib!tokens.Mim.State.) (has_type (Poly%lib!tokens.Mim.Config. (lib!tokens.Mim.Config./dummy_to_use_type_params _0!)) TYPE%lib!tokens.Mim.Config.)) :pattern ((has_type (Poly%lib!tokens.Mim.Config. (lib!tokens.Mim.Config./dummy_to_use_type_params _0!)) TYPE%lib!tokens.Mim.Config.)))))
(assert (forall ((x lib!tokens.Mim.Config.)) (! (= (lib!tokens.Mim.Config./dummy_to_use_type_params/0 x) (lib!tokens.Mim.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!tokens.Mim.Config./dummy_to_use_type_params/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Config.) (has_type (Poly%lib!tokens.Mim.State. (lib!tokens.Mim.Config./dummy_to_use_type_params/0 (%Poly%lib!tokens.Mim.Config. x))) TYPE%lib!tokens.Mim.State.)) :pattern ((lib!tokens.Mim.Config./dummy_to_use_type_params/0 (%Poly%lib!tokens.Mim.Config. x)) (has_type x TYPE%lib!tokens.Mim.Config.)))))
(assert (forall ((x lib!tokens.Mim.Instance.)) (! (= x (%Poly%lib!tokens.Mim.Instance. (Poly%lib!tokens.Mim.Instance. x))) :pattern ((Poly%lib!tokens.Mim.Instance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Instance.) (= x (Poly%lib!tokens.Mim.Instance. (%Poly%lib!tokens.Mim.Instance. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.Instance.)))))
(assert (forall ((_send_sync! vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>.) (_state! core!option.Option.) (_location! Int)) (! (=> (has_type (Poly%core!option.Option. _state!) (TYPE%core!option.Option. (GHOST $) TYPE%lib!tokens.Mim.State.)) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.Instance./Instance _send_sync! _state! _location!)) TYPE%lib!tokens.Mim.Instance.)) :pattern ((has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.Instance./Instance _send_sync! _state! _location!)) TYPE%lib!tokens.Mim.Instance.)))))
(assert (forall ((x lib!tokens.Mim.Instance.)) (! (= (lib!tokens.Mim.Instance./Instance/send_sync x) (lib!tokens.Mim.Instance./Instance/?send_sync x)) :pattern ((lib!tokens.Mim.Instance./Instance/send_sync x)))))
(assert (forall ((x lib!tokens.Mim.Instance.)) (! (= (lib!tokens.Mim.Instance./Instance/state x) (lib!tokens.Mim.Instance./Instance/?state x)) :pattern ((lib!tokens.Mim.Instance./Instance/state x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%core!option.Option. (lib!tokens.Mim.Instance./Instance/state (%Poly%lib!tokens.Mim.Instance. x))) (TYPE%core!option.Option. (GHOST $) TYPE%lib!tokens.Mim.State.))) :pattern ((lib!tokens.Mim.Instance./Instance/state (%Poly%lib!tokens.Mim.Instance. x)) (has_type x TYPE%lib!tokens.Mim.Instance.)))))
(assert (forall ((x lib!tokens.Mim.Instance.)) (! (= (lib!tokens.Mim.Instance./Instance/location x) (lib!tokens.Mim.Instance./Instance/?location x)) :pattern ((lib!tokens.Mim.Instance./Instance/location x)))))
(define-fun is-lib!tokens.Mim.Instance./Instance_ ((c lib!tokens.Mim.Instance.)) Bool ((_ is lib!tokens.Mim.Instance./Instance) c))
(assert (forall ((x lib!tokens.Mim.Instance.)) (! (=> (is-lib!tokens.Mim.Instance./Instance_ x) (height_lt (height (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>. (lib!tokens.Mim.Instance./Instance/send_sync x))) (height (Poly%lib!tokens.Mim.Instance. x)))) :pattern ((height (Poly%vstd!state_machine_internal.SyncSendIfSyncSend<tuple%3<lib!types.SegmentSharedAccess./lib!types.PageSharedAccess./lib!types.HeapSharedAccess.>.>. (lib!tokens.Mim.Instance./Instance/send_sync x)))))))
(assert (forall ((x lib!tokens.Mim.Instance.)) (! (=> (is-lib!tokens.Mim.Instance./Instance_ x) (height_lt (height (Poly%core!option.Option. (lib!tokens.Mim.Instance./Instance/state x))) (height (Poly%lib!tokens.Mim.Instance. x)))) :pattern ((height (Poly%core!option.Option. (lib!tokens.Mim.Instance./Instance/state x)))))))
(assert (forall ((x lib!tokens.Mim.right_to_set_inst.)) (! (= x (%Poly%lib!tokens.Mim.right_to_set_inst. (Poly%lib!tokens.Mim.right_to_set_inst. x))) :pattern ((Poly%lib!tokens.Mim.right_to_set_inst. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.right_to_set_inst.) (= x (Poly%lib!tokens.Mim.right_to_set_inst. (%Poly%lib!tokens.Mim.right_to_set_inst. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.right_to_set_inst.)))))
(assert (forall ((_dummy_instance! lib!tokens.Mim.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!tokens.Mim.Instance. _dummy_instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.right_to_set_inst. (lib!tokens.Mim.right_to_set_inst./right_to_set_inst _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.right_to_set_inst.)) :pattern ((has_type (Poly%lib!tokens.Mim.right_to_set_inst. (lib!tokens.Mim.right_to_set_inst./right_to_set_inst _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.right_to_set_inst.)))))
(assert (forall ((x lib!tokens.Mim.right_to_set_inst.)) (! (= (lib!tokens.Mim.right_to_set_inst./right_to_set_inst/dummy_instance x) (lib!tokens.Mim.right_to_set_inst./right_to_set_inst/?dummy_instance x)) :pattern ((lib!tokens.Mim.right_to_set_inst./right_to_set_inst/dummy_instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.right_to_set_inst.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.right_to_set_inst./right_to_set_inst/dummy_instance (%Poly%lib!tokens.Mim.right_to_set_inst. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.right_to_set_inst./right_to_set_inst/dummy_instance (%Poly%lib!tokens.Mim.right_to_set_inst. x)) (has_type x TYPE%lib!tokens.Mim.right_to_set_inst.)))))
(assert (forall ((x lib!tokens.Mim.right_to_set_inst.)) (! (= (lib!tokens.Mim.right_to_set_inst./right_to_set_inst/no_copy x) (lib!tokens.Mim.right_to_set_inst./right_to_set_inst/?no_copy x)) :pattern ((lib!tokens.Mim.right_to_set_inst./right_to_set_inst/no_copy x)))))
(assert (forall ((x lib!tokens.Mim.right_to_set_inst_token_data.)) (! (= x (%Poly%lib!tokens.Mim.right_to_set_inst_token_data. (Poly%lib!tokens.Mim.right_to_set_inst_token_data. x))) :pattern ((Poly%lib!tokens.Mim.right_to_set_inst_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.right_to_set_inst_token_data.) (= x (Poly%lib!tokens.Mim.right_to_set_inst_token_data. (%Poly%lib!tokens.Mim.right_to_set_inst_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.right_to_set_inst_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.)) (! (=> (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.right_to_set_inst_token_data. (lib!tokens.Mim.right_to_set_inst_token_data./right_to_set_inst_token_data _instance!)) TYPE%lib!tokens.Mim.right_to_set_inst_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.right_to_set_inst_token_data. (lib!tokens.Mim.right_to_set_inst_token_data./right_to_set_inst_token_data _instance!)) TYPE%lib!tokens.Mim.right_to_set_inst_token_data.)))))
(assert (forall ((x lib!tokens.Mim.right_to_set_inst_token_data.)) (! (= (lib!tokens.Mim.right_to_set_inst_token_data./right_to_set_inst_token_data/instance x) (lib!tokens.Mim.right_to_set_inst_token_data./right_to_set_inst_token_data/?instance x)) :pattern ((lib!tokens.Mim.right_to_set_inst_token_data./right_to_set_inst_token_data/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.right_to_set_inst_token_data.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.right_to_set_inst_token_data./right_to_set_inst_token_data/instance (%Poly%lib!tokens.Mim.right_to_set_inst_token_data. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.right_to_set_inst_token_data./right_to_set_inst_token_data/instance (%Poly%lib!tokens.Mim.right_to_set_inst_token_data. x)) (has_type x TYPE%lib!tokens.Mim.right_to_set_inst_token_data.)))))
(assert (forall ((x lib!tokens.Mim.my_inst.)) (! (= x (%Poly%lib!tokens.Mim.my_inst. (Poly%lib!tokens.Mim.my_inst. x))) :pattern ((Poly%lib!tokens.Mim.my_inst. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.my_inst.) (= x (Poly%lib!tokens.Mim.my_inst. (%Poly%lib!tokens.Mim.my_inst. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.my_inst.)))))
(assert (forall ((_dummy_instance! lib!tokens.Mim.Instance.)) (! (=> (has_type (Poly%lib!tokens.Mim.Instance. _dummy_instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.my_inst. (lib!tokens.Mim.my_inst./my_inst _dummy_instance!)) TYPE%lib!tokens.Mim.my_inst.)) :pattern ((has_type (Poly%lib!tokens.Mim.my_inst. (lib!tokens.Mim.my_inst./my_inst _dummy_instance!)) TYPE%lib!tokens.Mim.my_inst.)))))
(assert (forall ((x lib!tokens.Mim.my_inst.)) (! (= (lib!tokens.Mim.my_inst./my_inst/dummy_instance x) (lib!tokens.Mim.my_inst./my_inst/?dummy_instance x)) :pattern ((lib!tokens.Mim.my_inst./my_inst/dummy_instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.my_inst.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.my_inst./my_inst/dummy_instance (%Poly%lib!tokens.Mim.my_inst. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.my_inst./my_inst/dummy_instance (%Poly%lib!tokens.Mim.my_inst. x)) (has_type x TYPE%lib!tokens.Mim.my_inst.)))))
(assert (forall ((x lib!tokens.Mim.my_inst_token_data.)) (! (= x (%Poly%lib!tokens.Mim.my_inst_token_data. (Poly%lib!tokens.Mim.my_inst_token_data. x))) :pattern ((Poly%lib!tokens.Mim.my_inst_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.my_inst_token_data.) (= x (Poly%lib!tokens.Mim.my_inst_token_data. (%Poly%lib!tokens.Mim.my_inst_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.my_inst_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_value! lib!tokens.Mim.Instance.)) (! (=> (and (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.Instance. _value!) TYPE%lib!tokens.Mim.Instance.)) (has_type (Poly%lib!tokens.Mim.my_inst_token_data. (lib!tokens.Mim.my_inst_token_data./my_inst_token_data _instance! _value!)) TYPE%lib!tokens.Mim.my_inst_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.my_inst_token_data. (lib!tokens.Mim.my_inst_token_data./my_inst_token_data _instance! _value!)) TYPE%lib!tokens.Mim.my_inst_token_data.)))))
(assert (forall ((x lib!tokens.Mim.my_inst_token_data.)) (! (= (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/instance x) (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/?instance x)) :pattern ((lib!tokens.Mim.my_inst_token_data./my_inst_token_data/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.my_inst_token_data.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/instance (%Poly%lib!tokens.Mim.my_inst_token_data. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.my_inst_token_data./my_inst_token_data/instance (%Poly%lib!tokens.Mim.my_inst_token_data. x)) (has_type x TYPE%lib!tokens.Mim.my_inst_token_data.)))))
(assert (forall ((x lib!tokens.Mim.my_inst_token_data.)) (! (= (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/value x) (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/?value x)) :pattern ((lib!tokens.Mim.my_inst_token_data./my_inst_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.my_inst_token_data.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/value (%Poly%lib!tokens.Mim.my_inst_token_data. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.my_inst_token_data./my_inst_token_data/value (%Poly%lib!tokens.Mim.my_inst_token_data. x)) (has_type x TYPE%lib!tokens.Mim.my_inst_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state.)) (! (= x (%Poly%lib!tokens.Mim.thread_local_state. (Poly%lib!tokens.Mim.thread_local_state. x))) :pattern ((Poly%lib!tokens.Mim.thread_local_state. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_local_state.) (= x (Poly%lib!tokens.Mim.thread_local_state. (%Poly%lib!tokens.Mim.thread_local_state. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_local_state.)))))
(assert (forall ((_dummy_instance! lib!tokens.Mim.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!tokens.Mim.Instance. _dummy_instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.thread_local_state. (lib!tokens.Mim.thread_local_state./thread_local_state _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.thread_local_state.)) :pattern ((has_type (Poly%lib!tokens.Mim.thread_local_state. (lib!tokens.Mim.thread_local_state./thread_local_state _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.thread_local_state.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state.)) (! (= (lib!tokens.Mim.thread_local_state./thread_local_state/dummy_instance x) (lib!tokens.Mim.thread_local_state./thread_local_state/?dummy_instance x)) :pattern ((lib!tokens.Mim.thread_local_state./thread_local_state/dummy_instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_local_state.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.thread_local_state./thread_local_state/dummy_instance (%Poly%lib!tokens.Mim.thread_local_state. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.thread_local_state./thread_local_state/dummy_instance (%Poly%lib!tokens.Mim.thread_local_state. x)) (has_type x TYPE%lib!tokens.Mim.thread_local_state.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state.)) (! (= (lib!tokens.Mim.thread_local_state./thread_local_state/no_copy x) (lib!tokens.Mim.thread_local_state./thread_local_state/?no_copy x)) :pattern ((lib!tokens.Mim.thread_local_state./thread_local_state/no_copy x)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state_token_data.)) (! (= x (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. x))) :pattern ((Poly%lib!tokens.Mim.thread_local_state_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.) (= x (Poly%lib!tokens.Mim.thread_local_state_token_data. (%Poly%lib!tokens.Mim.thread_local_state_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!thread.ThreadId.) (_value! lib!tokens.ThreadState.)) (! (=> (and (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!thread.ThreadId. _key!) TYPE%lib!thread.ThreadId.) (has_type (Poly%lib!tokens.ThreadState. _value!) TYPE%lib!tokens.ThreadState.)) (has_type (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_local_state_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_local_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state_token_data.)) (! (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance x) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?instance x)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance (%Poly%lib!tokens.Mim.thread_local_state_token_data. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance (%Poly%lib!tokens.Mim.thread_local_state_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state_token_data.)) (! (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key x) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?key x)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (%Poly%lib!tokens.Mim.thread_local_state_token_data. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (%Poly%lib!tokens.Mim.thread_local_state_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_local_state_token_data.)) (! (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value x) (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/?value x)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.) (has_type (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. x))) TYPE%lib!tokens.ThreadState.)) :pattern ((lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_local_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.right_to_use_thread.)) (! (= x (%Poly%lib!tokens.Mim.right_to_use_thread. (Poly%lib!tokens.Mim.right_to_use_thread. x))) :pattern ((Poly%lib!tokens.Mim.right_to_use_thread. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.right_to_use_thread.) (= x (Poly%lib!tokens.Mim.right_to_use_thread. (%Poly%lib!tokens.Mim.right_to_use_thread. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.right_to_use_thread.)))))
(assert (forall ((_dummy_instance! lib!tokens.Mim.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!tokens.Mim.Instance. _dummy_instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.right_to_use_thread. (lib!tokens.Mim.right_to_use_thread./right_to_use_thread _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.right_to_use_thread.)) :pattern ((has_type (Poly%lib!tokens.Mim.right_to_use_thread. (lib!tokens.Mim.right_to_use_thread./right_to_use_thread _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.right_to_use_thread.)))))
(assert (forall ((x lib!tokens.Mim.right_to_use_thread.)) (! (= (lib!tokens.Mim.right_to_use_thread./right_to_use_thread/dummy_instance x) (lib!tokens.Mim.right_to_use_thread./right_to_use_thread/?dummy_instance x)) :pattern ((lib!tokens.Mim.right_to_use_thread./right_to_use_thread/dummy_instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.right_to_use_thread.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.right_to_use_thread./right_to_use_thread/dummy_instance (%Poly%lib!tokens.Mim.right_to_use_thread. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.right_to_use_thread./right_to_use_thread/dummy_instance (%Poly%lib!tokens.Mim.right_to_use_thread. x)) (has_type x TYPE%lib!tokens.Mim.right_to_use_thread.)))))
(assert (forall ((x lib!tokens.Mim.right_to_use_thread.)) (! (= (lib!tokens.Mim.right_to_use_thread./right_to_use_thread/no_copy x) (lib!tokens.Mim.right_to_use_thread./right_to_use_thread/?no_copy x)) :pattern ((lib!tokens.Mim.right_to_use_thread./right_to_use_thread/no_copy x)))))
(assert (forall ((x lib!tokens.Mim.right_to_use_thread_token_data.)) (! (= x (%Poly%lib!tokens.Mim.right_to_use_thread_token_data. (Poly%lib!tokens.Mim.right_to_use_thread_token_data. x))) :pattern ((Poly%lib!tokens.Mim.right_to_use_thread_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.right_to_use_thread_token_data.) (= x (Poly%lib!tokens.Mim.right_to_use_thread_token_data. (%Poly%lib!tokens.Mim.right_to_use_thread_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.right_to_use_thread_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!thread.ThreadId.)) (! (=> (and (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!thread.ThreadId. _key!) TYPE%lib!thread.ThreadId.)) (has_type (Poly%lib!tokens.Mim.right_to_use_thread_token_data. (lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data _instance! _key!)) TYPE%lib!tokens.Mim.right_to_use_thread_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.right_to_use_thread_token_data. (lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data _instance! _key!)) TYPE%lib!tokens.Mim.right_to_use_thread_token_data.)))))
(assert (forall ((x lib!tokens.Mim.right_to_use_thread_token_data.)) (! (= (lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data/instance x) (lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data/?instance x)) :pattern ((lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.right_to_use_thread_token_data.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data/instance (%Poly%lib!tokens.Mim.right_to_use_thread_token_data. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data/instance (%Poly%lib!tokens.Mim.right_to_use_thread_token_data. x)) (has_type x TYPE%lib!tokens.Mim.right_to_use_thread_token_data.)))))
(assert (forall ((x lib!tokens.Mim.right_to_use_thread_token_data.)) (! (= (lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data/key x) (lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data/?key x)) :pattern ((lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.right_to_use_thread_token_data.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data/key (%Poly%lib!tokens.Mim.right_to_use_thread_token_data. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data/key (%Poly%lib!tokens.Mim.right_to_use_thread_token_data. x)) (has_type x TYPE%lib!tokens.Mim.right_to_use_thread_token_data.)))))
(assert (forall ((x lib!tokens.Mim.block.)) (! (= x (%Poly%lib!tokens.Mim.block. (Poly%lib!tokens.Mim.block. x))) :pattern ((Poly%lib!tokens.Mim.block. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.block.) (= x (Poly%lib!tokens.Mim.block. (%Poly%lib!tokens.Mim.block. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.block.)))))
(assert (forall ((_dummy_instance! lib!tokens.Mim.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!tokens.Mim.Instance. _dummy_instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.block. (lib!tokens.Mim.block./block _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.block.)) :pattern ((has_type (Poly%lib!tokens.Mim.block. (lib!tokens.Mim.block./block _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.block.)))))
(assert (forall ((x lib!tokens.Mim.block.)) (! (= (lib!tokens.Mim.block./block/dummy_instance x) (lib!tokens.Mim.block./block/?dummy_instance x)) :pattern ((lib!tokens.Mim.block./block/dummy_instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.block.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.block./block/dummy_instance (%Poly%lib!tokens.Mim.block. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.block./block/dummy_instance (%Poly%lib!tokens.Mim.block. x)) (has_type x TYPE%lib!tokens.Mim.block.)))))
(assert (forall ((x lib!tokens.Mim.block.)) (! (= (lib!tokens.Mim.block./block/no_copy x) (lib!tokens.Mim.block./block/?no_copy x)) :pattern ((lib!tokens.Mim.block./block/no_copy x)))))
(define-fun is-lib!tokens.Mim.block./block_ ((c lib!tokens.Mim.block.)) Bool ((_ is lib!tokens.Mim.block./block) c))
(assert (forall ((x lib!tokens.Mim.block.)) (! (=> (is-lib!tokens.Mim.block./block_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.block./block/dummy_instance x))) (height (Poly%lib!tokens.Mim.block. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.block./block/dummy_instance x)))))))
(assert (forall ((x lib!tokens.Mim.block_token_data.)) (! (= x (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. x))) :pattern ((Poly%lib!tokens.Mim.block_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.block_token_data.) (= x (Poly%lib!tokens.Mim.block_token_data. (%Poly%lib!tokens.Mim.block_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.block_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!tokens.BlockId.) (_value! lib!tokens.BlockState.)) (! (=> (and (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.BlockId. _key!) TYPE%lib!tokens.BlockId.) (has_type (Poly%lib!tokens.BlockState. _value!) TYPE%lib!tokens.BlockState.)) (has_type (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.block_token_data./block_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.block_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.block_token_data./block_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.block_token_data.)))))
(assert (forall ((x lib!tokens.Mim.block_token_data.)) (! (= (lib!tokens.Mim.block_token_data./block_token_data/instance x) (lib!tokens.Mim.block_token_data./block_token_data/?instance x)) :pattern ((lib!tokens.Mim.block_token_data./block_token_data/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.block_token_data.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. x)) (has_type x TYPE%lib!tokens.Mim.block_token_data.)))))
(assert (forall ((x lib!tokens.Mim.block_token_data.)) (! (= (lib!tokens.Mim.block_token_data./block_token_data/key x) (lib!tokens.Mim.block_token_data./block_token_data/?key x)) :pattern ((lib!tokens.Mim.block_token_data./block_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.block_token_data.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. x))) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. x)) (has_type x TYPE%lib!tokens.Mim.block_token_data.)))))
(assert (forall ((x lib!tokens.Mim.block_token_data.)) (! (= (lib!tokens.Mim.block_token_data./block_token_data/value x) (lib!tokens.Mim.block_token_data./block_token_data/?value x)) :pattern ((lib!tokens.Mim.block_token_data./block_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.block_token_data.) (has_type (Poly%lib!tokens.BlockState. (lib!tokens.Mim.block_token_data./block_token_data/value (%Poly%lib!tokens.Mim.block_token_data. x))) TYPE%lib!tokens.BlockState.)) :pattern ((lib!tokens.Mim.block_token_data./block_token_data/value (%Poly%lib!tokens.Mim.block_token_data. x)) (has_type x TYPE%lib!tokens.Mim.block_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment.)) (! (= x (%Poly%lib!tokens.Mim.thread_of_segment. (Poly%lib!tokens.Mim.thread_of_segment. x))) :pattern ((Poly%lib!tokens.Mim.thread_of_segment. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_of_segment.) (= x (Poly%lib!tokens.Mim.thread_of_segment. (%Poly%lib!tokens.Mim.thread_of_segment. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_of_segment.)))))
(assert (forall ((_dummy_instance! lib!tokens.Mim.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!tokens.Mim.Instance. _dummy_instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.thread_of_segment. (lib!tokens.Mim.thread_of_segment./thread_of_segment _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.thread_of_segment.)) :pattern ((has_type (Poly%lib!tokens.Mim.thread_of_segment. (lib!tokens.Mim.thread_of_segment./thread_of_segment _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.thread_of_segment.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment.)) (! (= (lib!tokens.Mim.thread_of_segment./thread_of_segment/dummy_instance x) (lib!tokens.Mim.thread_of_segment./thread_of_segment/?dummy_instance x)) :pattern ((lib!tokens.Mim.thread_of_segment./thread_of_segment/dummy_instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_of_segment.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.thread_of_segment./thread_of_segment/dummy_instance (%Poly%lib!tokens.Mim.thread_of_segment. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.thread_of_segment./thread_of_segment/dummy_instance (%Poly%lib!tokens.Mim.thread_of_segment. x)) (has_type x TYPE%lib!tokens.Mim.thread_of_segment.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment.)) (! (= (lib!tokens.Mim.thread_of_segment./thread_of_segment/no_copy x) (lib!tokens.Mim.thread_of_segment./thread_of_segment/?no_copy x)) :pattern ((lib!tokens.Mim.thread_of_segment./thread_of_segment/no_copy x)))))
(define-fun is-lib!tokens.Mim.thread_of_segment./thread_of_segment_ ((c lib!tokens.Mim.thread_of_segment.)) Bool ((_ is lib!tokens.Mim.thread_of_segment./thread_of_segment) c))
(assert (forall ((x lib!tokens.Mim.thread_of_segment.)) (! (=> (is-lib!tokens.Mim.thread_of_segment./thread_of_segment_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.thread_of_segment./thread_of_segment/dummy_instance x))) (height (Poly%lib!tokens.Mim.thread_of_segment. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.thread_of_segment./thread_of_segment/dummy_instance x)))))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment_token_data.)) (! (= x (%Poly%lib!tokens.Mim.thread_of_segment_token_data. (Poly%lib!tokens.Mim.thread_of_segment_token_data. x))) :pattern ((Poly%lib!tokens.Mim.thread_of_segment_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_of_segment_token_data.) (= x (Poly%lib!tokens.Mim.thread_of_segment_token_data. (%Poly%lib!tokens.Mim.thread_of_segment_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_of_segment_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!tokens.SegmentId.) (_value! lib!thread.ThreadId.)) (! (=> (and (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.SegmentId. _key!) TYPE%lib!tokens.SegmentId.) (has_type (Poly%lib!thread.ThreadId. _value!) TYPE%lib!thread.ThreadId.)) (has_type (Poly%lib!tokens.Mim.thread_of_segment_token_data. (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_of_segment_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.thread_of_segment_token_data. (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_of_segment_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment_token_data.)) (! (= (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/instance x) (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/?instance x)) :pattern ((lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_of_segment_token_data.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/instance (%Poly%lib!tokens.Mim.thread_of_segment_token_data. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/instance (%Poly%lib!tokens.Mim.thread_of_segment_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_of_segment_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment_token_data.)) (! (= (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/key x) (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/?key x)) :pattern ((lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_of_segment_token_data.) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/key (%Poly%lib!tokens.Mim.thread_of_segment_token_data. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/key (%Poly%lib!tokens.Mim.thread_of_segment_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_of_segment_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_of_segment_token_data.)) (! (= (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/value x) (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/?value x)) :pattern ((lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_of_segment_token_data.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/value (%Poly%lib!tokens.Mim.thread_of_segment_token_data. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/value (%Poly%lib!tokens.Mim.thread_of_segment_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_of_segment_token_data.)))))
(assert (forall ((x lib!tokens.Mim.delay.)) (! (= x (%Poly%lib!tokens.Mim.delay. (Poly%lib!tokens.Mim.delay. x))) :pattern ((Poly%lib!tokens.Mim.delay. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay.) (= x (Poly%lib!tokens.Mim.delay. (%Poly%lib!tokens.Mim.delay. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.delay.)))))
(assert (forall ((_dummy_instance! lib!tokens.Mim.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!tokens.Mim.Instance. _dummy_instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.delay. (lib!tokens.Mim.delay./delay _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.delay.)) :pattern ((has_type (Poly%lib!tokens.Mim.delay. (lib!tokens.Mim.delay./delay _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.delay.)))))
(assert (forall ((x lib!tokens.Mim.delay.)) (! (= (lib!tokens.Mim.delay./delay/dummy_instance x) (lib!tokens.Mim.delay./delay/?dummy_instance x)) :pattern ((lib!tokens.Mim.delay./delay/dummy_instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.delay./delay/dummy_instance (%Poly%lib!tokens.Mim.delay. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.delay./delay/dummy_instance (%Poly%lib!tokens.Mim.delay. x)) (has_type x TYPE%lib!tokens.Mim.delay.)))))
(assert (forall ((x lib!tokens.Mim.delay.)) (! (= (lib!tokens.Mim.delay./delay/no_copy x) (lib!tokens.Mim.delay./delay/?no_copy x)) :pattern ((lib!tokens.Mim.delay./delay/no_copy x)))))
(define-fun is-lib!tokens.Mim.delay./delay_ ((c lib!tokens.Mim.delay.)) Bool ((_ is lib!tokens.Mim.delay./delay) c))
(assert (forall ((x lib!tokens.Mim.delay.)) (! (=> (is-lib!tokens.Mim.delay./delay_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.delay./delay/dummy_instance x))) (height (Poly%lib!tokens.Mim.delay. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.delay./delay/dummy_instance x)))))))
(assert (forall ((x lib!tokens.Mim.delay_token_data.)) (! (= x (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. x))) :pattern ((Poly%lib!tokens.Mim.delay_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay_token_data.) (= x (Poly%lib!tokens.Mim.delay_token_data. (%Poly%lib!tokens.Mim.delay_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.delay_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!tokens.PageId.) (_value! lib!tokens.DelayState.)) (! (=> (and (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.PageId. _key!) TYPE%lib!tokens.PageId.)) (has_type (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.delay_token_data./delay_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.delay_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.delay_token_data./delay_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.delay_token_data.)))))
(assert (forall ((x lib!tokens.Mim.delay_token_data.)) (! (= (lib!tokens.Mim.delay_token_data./delay_token_data/instance x) (lib!tokens.Mim.delay_token_data./delay_token_data/?instance x)) :pattern ((lib!tokens.Mim.delay_token_data./delay_token_data/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay_token_data.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.delay_token_data./delay_token_data/instance (%Poly%lib!tokens.Mim.delay_token_data. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.delay_token_data./delay_token_data/instance (%Poly%lib!tokens.Mim.delay_token_data. x)) (has_type x TYPE%lib!tokens.Mim.delay_token_data.)))))
(assert (forall ((x lib!tokens.Mim.delay_token_data.)) (! (= (lib!tokens.Mim.delay_token_data./delay_token_data/key x) (lib!tokens.Mim.delay_token_data./delay_token_data/?key x)) :pattern ((lib!tokens.Mim.delay_token_data./delay_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay_token_data.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.delay_token_data./delay_token_data/key (%Poly%lib!tokens.Mim.delay_token_data. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.delay_token_data./delay_token_data/key (%Poly%lib!tokens.Mim.delay_token_data. x)) (has_type x TYPE%lib!tokens.Mim.delay_token_data.)))))
(assert (forall ((x lib!tokens.Mim.delay_token_data.)) (! (= (lib!tokens.Mim.delay_token_data./delay_token_data/value x) (lib!tokens.Mim.delay_token_data./delay_token_data/?value x)) :pattern ((lib!tokens.Mim.delay_token_data./delay_token_data/value x)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page.)) (! (= x (%Poly%lib!tokens.Mim.heap_of_page. (Poly%lib!tokens.Mim.heap_of_page. x))) :pattern ((Poly%lib!tokens.Mim.heap_of_page. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.heap_of_page.) (= x (Poly%lib!tokens.Mim.heap_of_page. (%Poly%lib!tokens.Mim.heap_of_page. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.heap_of_page.)))))
(assert (forall ((_dummy_instance! lib!tokens.Mim.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!tokens.Mim.Instance. _dummy_instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.heap_of_page. (lib!tokens.Mim.heap_of_page./heap_of_page _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.heap_of_page.)) :pattern ((has_type (Poly%lib!tokens.Mim.heap_of_page. (lib!tokens.Mim.heap_of_page./heap_of_page _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.heap_of_page.)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page.)) (! (= (lib!tokens.Mim.heap_of_page./heap_of_page/dummy_instance x) (lib!tokens.Mim.heap_of_page./heap_of_page/?dummy_instance x)) :pattern ((lib!tokens.Mim.heap_of_page./heap_of_page/dummy_instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.heap_of_page.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.heap_of_page./heap_of_page/dummy_instance (%Poly%lib!tokens.Mim.heap_of_page. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.heap_of_page./heap_of_page/dummy_instance (%Poly%lib!tokens.Mim.heap_of_page. x)) (has_type x TYPE%lib!tokens.Mim.heap_of_page.)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page.)) (! (= (lib!tokens.Mim.heap_of_page./heap_of_page/no_copy x) (lib!tokens.Mim.heap_of_page./heap_of_page/?no_copy x)) :pattern ((lib!tokens.Mim.heap_of_page./heap_of_page/no_copy x)))))
(define-fun is-lib!tokens.Mim.heap_of_page./heap_of_page_ ((c lib!tokens.Mim.heap_of_page.)) Bool ((_ is lib!tokens.Mim.heap_of_page./heap_of_page) c))
(assert (forall ((x lib!tokens.Mim.heap_of_page.)) (! (=> (is-lib!tokens.Mim.heap_of_page./heap_of_page_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.heap_of_page./heap_of_page/dummy_instance x))) (height (Poly%lib!tokens.Mim.heap_of_page. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.heap_of_page./heap_of_page/dummy_instance x)))))))
(assert (forall ((x lib!tokens.Mim.heap_of_page_token_data.)) (! (= x (%Poly%lib!tokens.Mim.heap_of_page_token_data. (Poly%lib!tokens.Mim.heap_of_page_token_data. x))) :pattern ((Poly%lib!tokens.Mim.heap_of_page_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.heap_of_page_token_data.) (= x (Poly%lib!tokens.Mim.heap_of_page_token_data. (%Poly%lib!tokens.Mim.heap_of_page_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.heap_of_page_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!tokens.PageId.) (_value! lib!tokens.HeapId.)) (! (=> (and (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.PageId. _key!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!tokens.HeapId. _value!) TYPE%lib!tokens.HeapId.)) (has_type (Poly%lib!tokens.Mim.heap_of_page_token_data. (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.heap_of_page_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.heap_of_page_token_data. (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.heap_of_page_token_data.)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page_token_data.)) (! (= (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/instance x) (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/?instance x)) :pattern ((lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.heap_of_page_token_data.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/instance (%Poly%lib!tokens.Mim.heap_of_page_token_data. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/instance (%Poly%lib!tokens.Mim.heap_of_page_token_data. x)) (has_type x TYPE%lib!tokens.Mim.heap_of_page_token_data.)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page_token_data.)) (! (= (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/key x) (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/?key x)) :pattern ((lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.heap_of_page_token_data.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/key (%Poly%lib!tokens.Mim.heap_of_page_token_data. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/key (%Poly%lib!tokens.Mim.heap_of_page_token_data. x)) (has_type x TYPE%lib!tokens.Mim.heap_of_page_token_data.)))))
(assert (forall ((x lib!tokens.Mim.heap_of_page_token_data.)) (! (= (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/value x) (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/?value x)) :pattern ((lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.heap_of_page_token_data.) (has_type (Poly%lib!tokens.HeapId. (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/value (%Poly%lib!tokens.Mim.heap_of_page_token_data. x))) TYPE%lib!tokens.HeapId.)) :pattern ((lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/value (%Poly%lib!tokens.Mim.heap_of_page_token_data. x)) (has_type x TYPE%lib!tokens.Mim.heap_of_page_token_data.)))))
(assert (forall ((x lib!tokens.Mim.actor.)) (! (= x (%Poly%lib!tokens.Mim.actor. (Poly%lib!tokens.Mim.actor. x))) :pattern ((Poly%lib!tokens.Mim.actor. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.actor.) (= x (Poly%lib!tokens.Mim.actor. (%Poly%lib!tokens.Mim.actor. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.actor.)))))
(assert (forall ((_dummy_instance! lib!tokens.Mim.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!tokens.Mim.Instance. _dummy_instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.actor. (lib!tokens.Mim.actor./actor _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.actor.)) :pattern ((has_type (Poly%lib!tokens.Mim.actor. (lib!tokens.Mim.actor./actor _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.actor.)))))
(assert (forall ((x lib!tokens.Mim.actor.)) (! (= (lib!tokens.Mim.actor./actor/dummy_instance x) (lib!tokens.Mim.actor./actor/?dummy_instance x)) :pattern ((lib!tokens.Mim.actor./actor/dummy_instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.actor.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.actor./actor/dummy_instance (%Poly%lib!tokens.Mim.actor. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.actor./actor/dummy_instance (%Poly%lib!tokens.Mim.actor. x)) (has_type x TYPE%lib!tokens.Mim.actor.)))))
(assert (forall ((x lib!tokens.Mim.actor.)) (! (= (lib!tokens.Mim.actor./actor/no_copy x) (lib!tokens.Mim.actor./actor/?no_copy x)) :pattern ((lib!tokens.Mim.actor./actor/no_copy x)))))
(assert (forall ((x lib!tokens.Mim.actor_token_data.)) (! (= x (%Poly%lib!tokens.Mim.actor_token_data. (Poly%lib!tokens.Mim.actor_token_data. x))) :pattern ((Poly%lib!tokens.Mim.actor_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.actor_token_data.) (= x (Poly%lib!tokens.Mim.actor_token_data. (%Poly%lib!tokens.Mim.actor_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.actor_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!thread.ThreadId.) (_value! lib!tokens.Actor.)) (! (=> (and (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!thread.ThreadId. _key!) TYPE%lib!thread.ThreadId.)) (has_type (Poly%lib!tokens.Mim.actor_token_data. (lib!tokens.Mim.actor_token_data./actor_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.actor_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.actor_token_data. (lib!tokens.Mim.actor_token_data./actor_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.actor_token_data.)))))
(assert (forall ((x lib!tokens.Mim.actor_token_data.)) (! (= (lib!tokens.Mim.actor_token_data./actor_token_data/instance x) (lib!tokens.Mim.actor_token_data./actor_token_data/?instance x)) :pattern ((lib!tokens.Mim.actor_token_data./actor_token_data/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.actor_token_data.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.actor_token_data./actor_token_data/instance (%Poly%lib!tokens.Mim.actor_token_data. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.actor_token_data./actor_token_data/instance (%Poly%lib!tokens.Mim.actor_token_data. x)) (has_type x TYPE%lib!tokens.Mim.actor_token_data.)))))
(assert (forall ((x lib!tokens.Mim.actor_token_data.)) (! (= (lib!tokens.Mim.actor_token_data./actor_token_data/key x) (lib!tokens.Mim.actor_token_data./actor_token_data/?key x)) :pattern ((lib!tokens.Mim.actor_token_data./actor_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.actor_token_data.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.actor_token_data./actor_token_data/key (%Poly%lib!tokens.Mim.actor_token_data. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.actor_token_data./actor_token_data/key (%Poly%lib!tokens.Mim.actor_token_data. x)) (has_type x TYPE%lib!tokens.Mim.actor_token_data.)))))
(assert (forall ((x lib!tokens.Mim.actor_token_data.)) (! (= (lib!tokens.Mim.actor_token_data./actor_token_data/value x) (lib!tokens.Mim.actor_token_data./actor_token_data/?value x)) :pattern ((lib!tokens.Mim.actor_token_data./actor_token_data/value x)))))
(assert (forall ((x lib!tokens.Mim.delay_actor.)) (! (= x (%Poly%lib!tokens.Mim.delay_actor. (Poly%lib!tokens.Mim.delay_actor. x))) :pattern ((Poly%lib!tokens.Mim.delay_actor. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay_actor.) (= x (Poly%lib!tokens.Mim.delay_actor. (%Poly%lib!tokens.Mim.delay_actor. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.delay_actor.)))))
(assert (forall ((_dummy_instance! lib!tokens.Mim.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!tokens.Mim.Instance. _dummy_instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.delay_actor. (lib!tokens.Mim.delay_actor./delay_actor _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.delay_actor.)) :pattern ((has_type (Poly%lib!tokens.Mim.delay_actor. (lib!tokens.Mim.delay_actor./delay_actor _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.delay_actor.)))))
(assert (forall ((x lib!tokens.Mim.delay_actor.)) (! (= (lib!tokens.Mim.delay_actor./delay_actor/dummy_instance x) (lib!tokens.Mim.delay_actor./delay_actor/?dummy_instance x)) :pattern ((lib!tokens.Mim.delay_actor./delay_actor/dummy_instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay_actor.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.delay_actor./delay_actor/dummy_instance (%Poly%lib!tokens.Mim.delay_actor. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.delay_actor./delay_actor/dummy_instance (%Poly%lib!tokens.Mim.delay_actor. x)) (has_type x TYPE%lib!tokens.Mim.delay_actor.)))))
(assert (forall ((x lib!tokens.Mim.delay_actor.)) (! (= (lib!tokens.Mim.delay_actor./delay_actor/no_copy x) (lib!tokens.Mim.delay_actor./delay_actor/?no_copy x)) :pattern ((lib!tokens.Mim.delay_actor./delay_actor/no_copy x)))))
(assert (forall ((x lib!tokens.Mim.delay_actor_token_data.)) (! (= x (%Poly%lib!tokens.Mim.delay_actor_token_data. (Poly%lib!tokens.Mim.delay_actor_token_data. x))) :pattern ((Poly%lib!tokens.Mim.delay_actor_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay_actor_token_data.) (= x (Poly%lib!tokens.Mim.delay_actor_token_data. (%Poly%lib!tokens.Mim.delay_actor_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.delay_actor_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!tokens.PageId.) (_value! lib!tokens.DelayFreeingActor.)) (! (=> (and (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.PageId. _key!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!tokens.DelayFreeingActor. _value!) TYPE%lib!tokens.DelayFreeingActor.)) (has_type (Poly%lib!tokens.Mim.delay_actor_token_data. (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.delay_actor_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.delay_actor_token_data. (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.delay_actor_token_data.)))))
(assert (forall ((x lib!tokens.Mim.delay_actor_token_data.)) (! (= (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/instance x) (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/?instance x)) :pattern ((lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay_actor_token_data.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/instance (%Poly%lib!tokens.Mim.delay_actor_token_data. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/instance (%Poly%lib!tokens.Mim.delay_actor_token_data. x)) (has_type x TYPE%lib!tokens.Mim.delay_actor_token_data.)))))
(assert (forall ((x lib!tokens.Mim.delay_actor_token_data.)) (! (= (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/key x) (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/?key x)) :pattern ((lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay_actor_token_data.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/key (%Poly%lib!tokens.Mim.delay_actor_token_data. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/key (%Poly%lib!tokens.Mim.delay_actor_token_data. x)) (has_type x TYPE%lib!tokens.Mim.delay_actor_token_data.)))))
(assert (forall ((x lib!tokens.Mim.delay_actor_token_data.)) (! (= (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/value x) (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/?value x)) :pattern ((lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.delay_actor_token_data.) (has_type (Poly%lib!tokens.DelayFreeingActor. (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/value (%Poly%lib!tokens.Mim.delay_actor_token_data. x))) TYPE%lib!tokens.DelayFreeingActor.)) :pattern ((lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/value (%Poly%lib!tokens.Mim.delay_actor_token_data. x)) (has_type x TYPE%lib!tokens.Mim.delay_actor_token_data.)))))
(assert (forall ((x lib!tokens.Mim.reserved_uniq.)) (! (= x (%Poly%lib!tokens.Mim.reserved_uniq. (Poly%lib!tokens.Mim.reserved_uniq. x))) :pattern ((Poly%lib!tokens.Mim.reserved_uniq. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.reserved_uniq.) (= x (Poly%lib!tokens.Mim.reserved_uniq. (%Poly%lib!tokens.Mim.reserved_uniq. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.reserved_uniq.)))))
(assert (forall ((_dummy_instance! lib!tokens.Mim.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!tokens.Mim.Instance. _dummy_instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.reserved_uniq. (lib!tokens.Mim.reserved_uniq./reserved_uniq _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.reserved_uniq.)) :pattern ((has_type (Poly%lib!tokens.Mim.reserved_uniq. (lib!tokens.Mim.reserved_uniq./reserved_uniq _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.reserved_uniq.)))))
(assert (forall ((x lib!tokens.Mim.reserved_uniq.)) (! (= (lib!tokens.Mim.reserved_uniq./reserved_uniq/dummy_instance x) (lib!tokens.Mim.reserved_uniq./reserved_uniq/?dummy_instance x)) :pattern ((lib!tokens.Mim.reserved_uniq./reserved_uniq/dummy_instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.reserved_uniq.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.reserved_uniq./reserved_uniq/dummy_instance (%Poly%lib!tokens.Mim.reserved_uniq. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.reserved_uniq./reserved_uniq/dummy_instance (%Poly%lib!tokens.Mim.reserved_uniq. x)) (has_type x TYPE%lib!tokens.Mim.reserved_uniq.)))))
(assert (forall ((x lib!tokens.Mim.reserved_uniq.)) (! (= (lib!tokens.Mim.reserved_uniq./reserved_uniq/no_copy x) (lib!tokens.Mim.reserved_uniq./reserved_uniq/?no_copy x)) :pattern ((lib!tokens.Mim.reserved_uniq./reserved_uniq/no_copy x)))))
(assert (forall ((x lib!tokens.Mim.reserved_uniq_token_data.)) (! (= x (%Poly%lib!tokens.Mim.reserved_uniq_token_data. (Poly%lib!tokens.Mim.reserved_uniq_token_data. x))) :pattern ((Poly%lib!tokens.Mim.reserved_uniq_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.reserved_uniq_token_data.) (= x (Poly%lib!tokens.Mim.reserved_uniq_token_data. (%Poly%lib!tokens.Mim.reserved_uniq_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.reserved_uniq_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!tokens.HeapId.)) (! (=> (and (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.HeapId. _key!) TYPE%lib!tokens.HeapId.)) (has_type (Poly%lib!tokens.Mim.reserved_uniq_token_data. (lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data _instance! _key!)) TYPE%lib!tokens.Mim.reserved_uniq_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.reserved_uniq_token_data. (lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data _instance! _key!)) TYPE%lib!tokens.Mim.reserved_uniq_token_data.)))))
(assert (forall ((x lib!tokens.Mim.reserved_uniq_token_data.)) (! (= (lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data/instance x) (lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data/?instance x)) :pattern ((lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.reserved_uniq_token_data.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data/instance (%Poly%lib!tokens.Mim.reserved_uniq_token_data. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data/instance (%Poly%lib!tokens.Mim.reserved_uniq_token_data. x)) (has_type x TYPE%lib!tokens.Mim.reserved_uniq_token_data.)))))
(assert (forall ((x lib!tokens.Mim.reserved_uniq_token_data.)) (! (= (lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data/key x) (lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data/?key x)) :pattern ((lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.reserved_uniq_token_data.) (has_type (Poly%lib!tokens.HeapId. (lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data/key (%Poly%lib!tokens.Mim.reserved_uniq_token_data. x))) TYPE%lib!tokens.HeapId.)) :pattern ((lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data/key (%Poly%lib!tokens.Mim.reserved_uniq_token_data. x)) (has_type x TYPE%lib!tokens.Mim.reserved_uniq_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state.)) (! (= x (%Poly%lib!tokens.Mim.thread_checked_state. (Poly%lib!tokens.Mim.thread_checked_state. x))) :pattern ((Poly%lib!tokens.Mim.thread_checked_state. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_checked_state.) (= x (Poly%lib!tokens.Mim.thread_checked_state. (%Poly%lib!tokens.Mim.thread_checked_state. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_checked_state.)))))
(assert (forall ((_dummy_instance! lib!tokens.Mim.Instance.) (_no_copy! vstd!state_machine_internal.NoCopy.)) (! (=> (has_type (Poly%lib!tokens.Mim.Instance. _dummy_instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.Mim.thread_checked_state. (lib!tokens.Mim.thread_checked_state./thread_checked_state _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.thread_checked_state.)) :pattern ((has_type (Poly%lib!tokens.Mim.thread_checked_state. (lib!tokens.Mim.thread_checked_state./thread_checked_state _dummy_instance! _no_copy!)) TYPE%lib!tokens.Mim.thread_checked_state.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state.)) (! (= (lib!tokens.Mim.thread_checked_state./thread_checked_state/dummy_instance x) (lib!tokens.Mim.thread_checked_state./thread_checked_state/?dummy_instance x)) :pattern ((lib!tokens.Mim.thread_checked_state./thread_checked_state/dummy_instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_checked_state.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.thread_checked_state./thread_checked_state/dummy_instance (%Poly%lib!tokens.Mim.thread_checked_state. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.thread_checked_state./thread_checked_state/dummy_instance (%Poly%lib!tokens.Mim.thread_checked_state. x)) (has_type x TYPE%lib!tokens.Mim.thread_checked_state.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state.)) (! (= (lib!tokens.Mim.thread_checked_state./thread_checked_state/no_copy x) (lib!tokens.Mim.thread_checked_state./thread_checked_state/?no_copy x)) :pattern ((lib!tokens.Mim.thread_checked_state./thread_checked_state/no_copy x)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state_token_data.)) (! (= x (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. x))) :pattern ((Poly%lib!tokens.Mim.thread_checked_state_token_data. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_checked_state_token_data.) (= x (Poly%lib!tokens.Mim.thread_checked_state_token_data. (%Poly%lib!tokens.Mim.thread_checked_state_token_data. x)))) :pattern ((has_type x TYPE%lib!tokens.Mim.thread_checked_state_token_data.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_key! lib!thread.ThreadId.) (_value! lib!tokens.ThreadCheckedState.)) (! (=> (and (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!thread.ThreadId. _key!) TYPE%lib!thread.ThreadId.)) (has_type (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_checked_state_token_data.)) :pattern ((has_type (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data _instance! _key! _value!)) TYPE%lib!tokens.Mim.thread_checked_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state_token_data.)) (! (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance x) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?instance x)) :pattern ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_checked_state_token_data.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance (%Poly%lib!tokens.Mim.thread_checked_state_token_data. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance (%Poly%lib!tokens.Mim.thread_checked_state_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_checked_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state_token_data.)) (! (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key x) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?key x)) :pattern ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Mim.thread_checked_state_token_data.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key (%Poly%lib!tokens.Mim.thread_checked_state_token_data. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key (%Poly%lib!tokens.Mim.thread_checked_state_token_data. x)) (has_type x TYPE%lib!tokens.Mim.thread_checked_state_token_data.)))))
(assert (forall ((x lib!tokens.Mim.thread_checked_state_token_data.)) (! (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value x) (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/?value x)) :pattern ((lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value x)))))
(assert (forall ((x lib!thread.ThreadId.)) (! (= x (%Poly%lib!thread.ThreadId. (Poly%lib!thread.ThreadId. x))) :pattern ((Poly%lib!thread.ThreadId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!thread.ThreadId.) (= x (Poly%lib!thread.ThreadId. (%Poly%lib!thread.ThreadId. x)))) :pattern ((has_type x TYPE%lib!thread.ThreadId.)))))
(assert (forall ((_thread_id! Int)) (! (=> (uInv 64 _thread_id!) (has_type (Poly%lib!thread.ThreadId. (lib!thread.ThreadId./ThreadId _thread_id!)) TYPE%lib!thread.ThreadId.)) :pattern ((has_type (Poly%lib!thread.ThreadId. (lib!thread.ThreadId./ThreadId _thread_id!)) TYPE%lib!thread.ThreadId.)))))
(assert (forall ((x lib!thread.ThreadId.)) (! (= (lib!thread.ThreadId./ThreadId/thread_id x) (lib!thread.ThreadId./ThreadId/?thread_id x)) :pattern ((lib!thread.ThreadId./ThreadId/thread_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!thread.ThreadId.) (uInv 64 (lib!thread.ThreadId./ThreadId/thread_id (%Poly%lib!thread.ThreadId. x)))) :pattern ((lib!thread.ThreadId./ThreadId/thread_id (%Poly%lib!thread.ThreadId. x)) (has_type x TYPE%lib!thread.ThreadId.)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= x (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. x))) :pattern ((Poly%lib!tokens.HeapId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.HeapId.) (= x (Poly%lib!tokens.HeapId. (%Poly%lib!tokens.HeapId. x)))) :pattern ((has_type x TYPE%lib!tokens.HeapId.)))))
(assert (forall ((_id! Int) (_provenance! vstd!raw_ptr.Provenance.) (_uniq! Int)) (! (=> (<= 0 _id!) (has_type (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId _id! _provenance! _uniq!)) TYPE%lib!tokens.HeapId.)) :pattern ((has_type (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId _id! _provenance! _uniq!)) TYPE%lib!tokens.HeapId.)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= (lib!tokens.HeapId./HeapId/id x) (lib!tokens.HeapId./HeapId/?id x)) :pattern ((lib!tokens.HeapId./HeapId/id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.HeapId.) (<= 0 (lib!tokens.HeapId./HeapId/id (%Poly%lib!tokens.HeapId. x)))) :pattern ((lib!tokens.HeapId./HeapId/id (%Poly%lib!tokens.HeapId. x)) (has_type x TYPE%lib!tokens.HeapId.)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= (lib!tokens.HeapId./HeapId/provenance x) (lib!tokens.HeapId./HeapId/?provenance x)) :pattern ((lib!tokens.HeapId./HeapId/provenance x)))))
(assert (forall ((x lib!tokens.HeapId.)) (! (= (lib!tokens.HeapId./HeapId/uniq x) (lib!tokens.HeapId./HeapId/?uniq x)) :pattern ((lib!tokens.HeapId./HeapId/uniq x)))))
(assert (forall ((x lib!tokens.TldId.)) (! (= x (%Poly%lib!tokens.TldId. (Poly%lib!tokens.TldId. x))) :pattern ((Poly%lib!tokens.TldId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.TldId.) (= x (Poly%lib!tokens.TldId. (%Poly%lib!tokens.TldId. x)))) :pattern ((has_type x TYPE%lib!tokens.TldId.)))))
(assert (forall ((_id! Int) (_provenance! vstd!raw_ptr.Provenance.)) (! (=> (<= 0 _id!) (has_type (Poly%lib!tokens.TldId. (lib!tokens.TldId./TldId _id! _provenance!)) TYPE%lib!tokens.TldId.)) :pattern ((has_type (Poly%lib!tokens.TldId. (lib!tokens.TldId./TldId _id! _provenance!)) TYPE%lib!tokens.TldId.)))))
(assert (forall ((x lib!tokens.TldId.)) (! (= (lib!tokens.TldId./TldId/id x) (lib!tokens.TldId./TldId/?id x)) :pattern ((lib!tokens.TldId./TldId/id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.TldId.) (<= 0 (lib!tokens.TldId./TldId/id (%Poly%lib!tokens.TldId. x)))) :pattern ((lib!tokens.TldId./TldId/id (%Poly%lib!tokens.TldId. x)) (has_type x TYPE%lib!tokens.TldId.)))))
(assert (forall ((x lib!tokens.TldId.)) (! (= (lib!tokens.TldId./TldId/provenance x) (lib!tokens.TldId./TldId/?provenance x)) :pattern ((lib!tokens.TldId./TldId/provenance x)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= x (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. x))) :pattern ((Poly%lib!tokens.SegmentId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentId.) (= x (Poly%lib!tokens.SegmentId. (%Poly%lib!tokens.SegmentId. x)))) :pattern ((has_type x TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((_id! Int) (_provenance! vstd!raw_ptr.Provenance.) (_uniq! Int)) (! (=> (<= 0 _id!) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId./SegmentId _id! _provenance! _uniq!)) TYPE%lib!tokens.SegmentId.)) :pattern ((has_type (Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId./SegmentId _id! _provenance! _uniq!)) TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/id x) (lib!tokens.SegmentId./SegmentId/?id x)) :pattern ((lib!tokens.SegmentId./SegmentId/id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentId.) (<= 0 (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. x)))) :pattern ((lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. x)) (has_type x TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/provenance x) (lib!tokens.SegmentId./SegmentId/?provenance x)) :pattern ((lib!tokens.SegmentId./SegmentId/provenance x)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/uniq x) (lib!tokens.SegmentId./SegmentId/?uniq x)) :pattern ((lib!tokens.SegmentId./SegmentId/uniq x)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= x (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. x))) :pattern ((Poly%lib!tokens.PageId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (= x (Poly%lib!tokens.PageId. (%Poly%lib!tokens.PageId. x)))) :pattern ((has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((_segment_id! lib!tokens.SegmentId.) (_idx! Int)) (! (=> (and (has_type (Poly%lib!tokens.SegmentId. _segment_id!) TYPE%lib!tokens.SegmentId.) (<= 0 _idx!)) (has_type (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId _segment_id! _idx!)) TYPE%lib!tokens.PageId.)) :pattern ((has_type (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId _segment_id! _idx!)) TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= (lib!tokens.PageId./PageId/segment_id x) (lib!tokens.PageId./PageId/?segment_id x)) :pattern ((lib!tokens.PageId./PageId/segment_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. x)) (has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= (lib!tokens.PageId./PageId/idx x) (lib!tokens.PageId./PageId/?idx x)) :pattern ((lib!tokens.PageId./PageId/idx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (<= 0 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. x)))) :pattern ((lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. x)) (has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= x (%Poly%lib!tokens.BlockId. (Poly%lib!tokens.BlockId. x))) :pattern ((Poly%lib!tokens.BlockId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (= x (Poly%lib!tokens.BlockId. (%Poly%lib!tokens.BlockId. x)))) :pattern ((has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((_page_id! lib!tokens.PageId.) (_idx! Int) (_slice_idx! Int) (_block_size! Int)) (! (=> (and (has_type (Poly%lib!tokens.PageId. _page_id!) TYPE%lib!tokens.PageId.) (<= 0 _idx!) (<= 0 _slice_idx!) (<= 0 _block_size!)) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.BlockId./BlockId _page_id! _idx! _slice_idx! _block_size!)) TYPE%lib!tokens.BlockId.)) :pattern ((has_type (Poly%lib!tokens.BlockId. (lib!tokens.BlockId./BlockId _page_id! _idx! _slice_idx! _block_size!)) TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= (lib!tokens.BlockId./BlockId/page_id x) (lib!tokens.BlockId./BlockId/?page_id x)) :pattern ((lib!tokens.BlockId./BlockId/page_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. x)) (has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= (lib!tokens.BlockId./BlockId/idx x) (lib!tokens.BlockId./BlockId/?idx x)) :pattern ((lib!tokens.BlockId./BlockId/idx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (<= 0 (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. x)))) :pattern ((lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. x)) (has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= (lib!tokens.BlockId./BlockId/slice_idx x) (lib!tokens.BlockId./BlockId/?slice_idx x)) :pattern ((lib!tokens.BlockId./BlockId/slice_idx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (<= 0 (lib!tokens.BlockId./BlockId/slice_idx (%Poly%lib!tokens.BlockId. x)))) :pattern ((lib!tokens.BlockId./BlockId/slice_idx (%Poly%lib!tokens.BlockId. x)) (has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!tokens.BlockId.)) (! (= (lib!tokens.BlockId./BlockId/block_size x) (lib!tokens.BlockId./BlockId/?block_size x)) :pattern ((lib!tokens.BlockId./BlockId/block_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockId.) (<= 0 (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. x)))) :pattern ((lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. x)) (has_type x TYPE%lib!tokens.BlockId.)))))
(assert (forall ((x lib!tokens.DelayState.)) (! (= x (%Poly%lib!tokens.DelayState. (Poly%lib!tokens.DelayState. x))) :pattern ((Poly%lib!tokens.DelayState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.DelayState.) (= x (Poly%lib!tokens.DelayState. (%Poly%lib!tokens.DelayState. x)))) :pattern ((has_type x TYPE%lib!tokens.DelayState.)))))
(assert (forall ((x lib!tokens.DelayState.)) (! (has_type (Poly%lib!tokens.DelayState. x) TYPE%lib!tokens.DelayState.) :pattern ((has_type (Poly%lib!tokens.DelayState. x) TYPE%lib!tokens.DelayState.)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= x (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. x))) :pattern ((Poly%lib!tokens.PageState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageState.) (= x (Poly%lib!tokens.PageState. (%Poly%lib!tokens.PageState. x)))) :pattern ((has_type x TYPE%lib!tokens.PageState.)))))
(assert (forall ((_offset! Int) (_block_size! Int) (_num_blocks! Int) (_shared_access! lib!types.PageSharedAccess.) (_is_enabled! Bool)) (! (=> (and (<= 0 _block_size!) (<= 0 _num_blocks!)) (has_type (Poly%lib!tokens.PageState. (lib!tokens.PageState./PageState _offset! _block_size! _num_blocks! _shared_access! _is_enabled!)) TYPE%lib!tokens.PageState.)) :pattern ((has_type (Poly%lib!tokens.PageState. (lib!tokens.PageState./PageState _offset! _block_size! _num_blocks! _shared_access! _is_enabled!)) TYPE%lib!tokens.PageState.)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/offset x) (lib!tokens.PageState./PageState/?offset x)) :pattern ((lib!tokens.PageState./PageState/offset x)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/block_size x) (lib!tokens.PageState./PageState/?block_size x)) :pattern ((lib!tokens.PageState./PageState/block_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageState.) (<= 0 (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. x)))) :pattern ((lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. x)) (has_type x TYPE%lib!tokens.PageState.)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/num_blocks x) (lib!tokens.PageState./PageState/?num_blocks x)) :pattern ((lib!tokens.PageState./PageState/num_blocks x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageState.) (<= 0 (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. x)))) :pattern ((lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. x)) (has_type x TYPE%lib!tokens.PageState.)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/shared_access x) (lib!tokens.PageState./PageState/?shared_access x)) :pattern ((lib!tokens.PageState./PageState/shared_access x)))))
(assert (forall ((x lib!tokens.PageState.)) (! (= (lib!tokens.PageState./PageState/is_enabled x) (lib!tokens.PageState./PageState/?is_enabled x)) :pattern ((lib!tokens.PageState./PageState/is_enabled x)))))
(define-fun is-lib!tokens.PageState./PageState_ ((c lib!tokens.PageState.)) Bool ((_ is lib!tokens.PageState./PageState) c))
(assert (forall ((x lib!tokens.PageState.)) (! (=> (is-lib!tokens.PageState./PageState_ x) (height_lt (height (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access x))) (height (Poly%lib!tokens.PageState. x)))) :pattern ((height (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access x)))))))
(assert (forall ((x lib!tokens.SegmentState.)) (! (= x (%Poly%lib!tokens.SegmentState. (Poly%lib!tokens.SegmentState. x))) :pattern ((Poly%lib!tokens.SegmentState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentState.) (= x (Poly%lib!tokens.SegmentState. (%Poly%lib!tokens.SegmentState. x)))) :pattern ((has_type x TYPE%lib!tokens.SegmentState.)))))
(assert (forall ((x lib!tokens.SegmentState.)) (! (= (lib!tokens.SegmentState./SegmentState/shared_access x) (lib!tokens.SegmentState./SegmentState/?shared_access x)) :pattern ((lib!tokens.SegmentState./SegmentState/shared_access x)))))
(assert (forall ((x lib!tokens.SegmentState.)) (! (= (lib!tokens.SegmentState./SegmentState/is_enabled x) (lib!tokens.SegmentState./SegmentState/?is_enabled x)) :pattern ((lib!tokens.SegmentState./SegmentState/is_enabled x)))))
(assert (forall ((x lib!tokens.SegmentState.)) (! (has_type (Poly%lib!tokens.SegmentState. x) TYPE%lib!tokens.SegmentState.) :pattern ((has_type (Poly%lib!tokens.SegmentState. x) TYPE%lib!tokens.SegmentState.)))))
(define-fun is-lib!tokens.SegmentState./SegmentState_ ((c lib!tokens.SegmentState.)) Bool ((_ is lib!tokens.SegmentState./SegmentState) c))
(assert (forall ((x lib!tokens.SegmentState.)) (! (=> (is-lib!tokens.SegmentState./SegmentState_ x) (height_lt (height (Poly%lib!types.SegmentSharedAccess. (lib!tokens.SegmentState./SegmentState/shared_access x))) (height (Poly%lib!tokens.SegmentState. x)))) :pattern ((height (Poly%lib!types.SegmentSharedAccess. (lib!tokens.SegmentState./SegmentState/shared_access x)))))))
(assert (forall ((x lib!tokens.BlockState.)) (! (= x (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. x))) :pattern ((Poly%lib!tokens.BlockState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockState.) (= x (Poly%lib!tokens.BlockState. (%Poly%lib!tokens.BlockState. x)))) :pattern ((has_type x TYPE%lib!tokens.BlockState.)))))
(assert (forall ((_segment_shared_access! lib!types.SegmentSharedAccess.) (_page_shared_access! lib!types.PageSharedAccess.) (_page_slice_shared_access! lib!types.PageSharedAccess.) (_heap_id! core!option.Option.)) (! (=> (has_type (Poly%core!option.Option. _heap_id!) (TYPE%core!option.Option. $ TYPE%lib!tokens.HeapId.)) (has_type (Poly%lib!tokens.BlockState. (lib!tokens.BlockState./BlockState _segment_shared_access! _page_shared_access! _page_slice_shared_access! _heap_id!)) TYPE%lib!tokens.BlockState.)) :pattern ((has_type (Poly%lib!tokens.BlockState. (lib!tokens.BlockState./BlockState _segment_shared_access! _page_shared_access! _page_slice_shared_access! _heap_id!)) TYPE%lib!tokens.BlockState.)))))
(assert (forall ((x lib!tokens.BlockState.)) (! (= (lib!tokens.BlockState./BlockState/segment_shared_access x) (lib!tokens.BlockState./BlockState/?segment_shared_access x)) :pattern ((lib!tokens.BlockState./BlockState/segment_shared_access x)))))
(assert (forall ((x lib!tokens.BlockState.)) (! (= (lib!tokens.BlockState./BlockState/page_shared_access x) (lib!tokens.BlockState./BlockState/?page_shared_access x)) :pattern ((lib!tokens.BlockState./BlockState/page_shared_access x)))))
(assert (forall ((x lib!tokens.BlockState.)) (! (= (lib!tokens.BlockState./BlockState/page_slice_shared_access x) (lib!tokens.BlockState./BlockState/?page_slice_shared_access x)) :pattern ((lib!tokens.BlockState./BlockState/page_slice_shared_access x)))))
(assert (forall ((x lib!tokens.BlockState.)) (! (= (lib!tokens.BlockState./BlockState/heap_id x) (lib!tokens.BlockState./BlockState/?heap_id x)) :pattern ((lib!tokens.BlockState./BlockState/heap_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.BlockState.) (has_type (Poly%core!option.Option. (lib!tokens.BlockState./BlockState/heap_id (%Poly%lib!tokens.BlockState. x))) (TYPE%core!option.Option. $ TYPE%lib!tokens.HeapId.))) :pattern ((lib!tokens.BlockState./BlockState/heap_id (%Poly%lib!tokens.BlockState. x)) (has_type x TYPE%lib!tokens.BlockState.)))))
(define-fun is-lib!tokens.BlockState./BlockState_ ((c lib!tokens.BlockState.)) Bool ((_ is lib!tokens.BlockState./BlockState) c))
(assert (forall ((x lib!tokens.BlockState.)) (! (=> (is-lib!tokens.BlockState./BlockState_ x) (height_lt (height (Poly%lib!types.SegmentSharedAccess. (lib!tokens.BlockState./BlockState/segment_shared_access x))) (height (Poly%lib!tokens.BlockState. x)))) :pattern ((height (Poly%lib!types.SegmentSharedAccess. (lib!tokens.BlockState./BlockState/segment_shared_access x)))))))
(assert (forall ((x lib!tokens.BlockState.)) (! (=> (is-lib!tokens.BlockState./BlockState_ x) (height_lt (height (Poly%lib!types.PageSharedAccess. (lib!tokens.BlockState./BlockState/page_shared_access x))) (height (Poly%lib!tokens.BlockState. x)))) :pattern ((height (Poly%lib!types.PageSharedAccess. (lib!tokens.BlockState./BlockState/page_shared_access x)))))))
(assert (forall ((x lib!tokens.BlockState.)) (! (=> (is-lib!tokens.BlockState./BlockState_ x) (height_lt (height (Poly%lib!types.PageSharedAccess. (lib!tokens.BlockState./BlockState/page_slice_shared_access x))) (height (Poly%lib!tokens.BlockState. x)))) :pattern ((height (Poly%lib!types.PageSharedAccess. (lib!tokens.BlockState./BlockState/page_slice_shared_access x)))))))
(assert (forall ((x lib!tokens.HeapState.)) (! (= x (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. x))) :pattern ((Poly%lib!tokens.HeapState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.HeapState.) (= x (Poly%lib!tokens.HeapState. (%Poly%lib!tokens.HeapState. x)))) :pattern ((has_type x TYPE%lib!tokens.HeapState.)))))
(assert (forall ((x lib!tokens.HeapState.)) (! (= (lib!tokens.HeapState./HeapState/shared_access x) (lib!tokens.HeapState./HeapState/?shared_access x)) :pattern ((lib!tokens.HeapState./HeapState/shared_access x)))))
(assert (forall ((x lib!tokens.HeapState.)) (! (has_type (Poly%lib!tokens.HeapState. x) TYPE%lib!tokens.HeapState.) :pattern ((has_type (Poly%lib!tokens.HeapState. x) TYPE%lib!tokens.HeapState.)))))
(define-fun is-lib!tokens.HeapState./HeapState_ ((c lib!tokens.HeapState.)) Bool ((_ is lib!tokens.HeapState./HeapState) c))
(assert (forall ((x lib!tokens.HeapState.)) (! (=> (is-lib!tokens.HeapState./HeapState_ x) (height_lt (height (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access x))) (height (Poly%lib!tokens.HeapState. x)))) :pattern ((height (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access x)))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= x (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. x))) :pattern ((Poly%lib!tokens.ThreadState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.ThreadState.) (= x (Poly%lib!tokens.ThreadState. (%Poly%lib!tokens.ThreadState. x)))) :pattern ((has_type x TYPE%lib!tokens.ThreadState.)))))
(assert (forall ((_heap_id! lib!tokens.HeapId.) (_heap! lib!tokens.HeapState.) (_segments! vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>.) (_pages! vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)) (! (=> (has_type (Poly%lib!tokens.HeapId. _heap_id!) TYPE%lib!tokens.HeapId.) (has_type (Poly%lib!tokens.ThreadState. (lib!tokens.ThreadState./ThreadState _heap_id! _heap! _segments! _pages!)) TYPE%lib!tokens.ThreadState.)) :pattern ((has_type (Poly%lib!tokens.ThreadState. (lib!tokens.ThreadState./ThreadState _heap_id! _heap! _segments! _pages!)) TYPE%lib!tokens.ThreadState.)))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= (lib!tokens.ThreadState./ThreadState/heap_id x) (lib!tokens.ThreadState./ThreadState/?heap_id x)) :pattern ((lib!tokens.ThreadState./ThreadState/heap_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.ThreadState.) (has_type (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. x))) TYPE%lib!tokens.HeapId.)) :pattern ((lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. x)) (has_type x TYPE%lib!tokens.ThreadState.)))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= (lib!tokens.ThreadState./ThreadState/heap x) (lib!tokens.ThreadState./ThreadState/?heap x)) :pattern ((lib!tokens.ThreadState./ThreadState/heap x)))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= (lib!tokens.ThreadState./ThreadState/segments x) (lib!tokens.ThreadState./ThreadState/?segments x)) :pattern ((lib!tokens.ThreadState./ThreadState/segments x)))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (= (lib!tokens.ThreadState./ThreadState/pages x) (lib!tokens.ThreadState./ThreadState/?pages x)) :pattern ((lib!tokens.ThreadState./ThreadState/pages x)))))
(define-fun is-lib!tokens.ThreadState./ThreadState_ ((c lib!tokens.ThreadState.)) Bool ((_ is lib!tokens.ThreadState./ThreadState) c))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap x))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap x)))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments x))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments x)))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments x)))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments x))))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages x))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages x)))))))
(assert (forall ((x lib!tokens.ThreadState.)) (! (=> (is-lib!tokens.ThreadState./ThreadState_ x) (height_lt (height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages x)))) (height (Poly%lib!tokens.ThreadState. x)))) :pattern ((height (fun_from_recursive_field (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages x))))))))
(assert (forall ((x lib!tokens.ThreadCheckedState.)) (! (= x (%Poly%lib!tokens.ThreadCheckedState. (Poly%lib!tokens.ThreadCheckedState. x))) :pattern ((Poly%lib!tokens.ThreadCheckedState. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.ThreadCheckedState.) (= x (Poly%lib!tokens.ThreadCheckedState. (%Poly%lib!tokens.ThreadCheckedState. x)))) :pattern ((has_type x TYPE%lib!tokens.ThreadCheckedState.)))))
(assert (forall ((x lib!tokens.ThreadCheckedState.)) (! (= (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages x) (lib!tokens.ThreadCheckedState./ThreadCheckedState/?pages x)) :pattern ((lib!tokens.ThreadCheckedState./ThreadCheckedState/pages x)))))
(assert (forall ((x lib!tokens.ThreadCheckedState.)) (! (has_type (Poly%lib!tokens.ThreadCheckedState. x) TYPE%lib!tokens.ThreadCheckedState.) :pattern ((has_type (Poly%lib!tokens.ThreadCheckedState. x) TYPE%lib!tokens.ThreadCheckedState.)))))
(assert (forall ((x lib!tokens.Actor.)) (! (= x (%Poly%lib!tokens.Actor. (Poly%lib!tokens.Actor. x))) :pattern ((Poly%lib!tokens.Actor. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.Actor.) (= x (Poly%lib!tokens.Actor. (%Poly%lib!tokens.Actor. x)))) :pattern ((has_type x TYPE%lib!tokens.Actor.)))))
(assert (forall ((x lib!tokens.Actor.)) (! (has_type (Poly%lib!tokens.Actor. x) TYPE%lib!tokens.Actor.) :pattern ((has_type (Poly%lib!tokens.Actor. x) TYPE%lib!tokens.Actor.)))))
(assert (forall ((x lib!tokens.DelayFreeingActor.)) (! (= x (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. x))) :pattern ((Poly%lib!tokens.DelayFreeingActor. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.DelayFreeingActor.) (= x (Poly%lib!tokens.DelayFreeingActor. (%Poly%lib!tokens.DelayFreeingActor. x)))) :pattern ((has_type x TYPE%lib!tokens.DelayFreeingActor.)))))
(assert (has_type (Poly%lib!tokens.DelayFreeingActor. lib!tokens.DelayFreeingActor./HeapUnknown) TYPE%lib!tokens.DelayFreeingActor.))
(assert (forall ((_0! lib!tokens.HeapId.) (_1! lib!types.HeapSharedAccess.) (_2! lib!types.PageSharedAccess.)) (! (=> (has_type (Poly%lib!tokens.HeapId. _0!) TYPE%lib!tokens.HeapId.) (has_type (Poly%lib!tokens.DelayFreeingActor. (lib!tokens.DelayFreeingActor./Heap _0! _1! _2!)) TYPE%lib!tokens.DelayFreeingActor.)) :pattern ((has_type (Poly%lib!tokens.DelayFreeingActor. (lib!tokens.DelayFreeingActor./Heap _0! _1! _2!)) TYPE%lib!tokens.DelayFreeingActor.)))))
(assert (forall ((x lib!tokens.DelayFreeingActor.)) (! (= (lib!tokens.DelayFreeingActor./Heap/0 x) (lib!tokens.DelayFreeingActor./Heap/?0 x)) :pattern ((lib!tokens.DelayFreeingActor./Heap/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.DelayFreeingActor.) (has_type (Poly%lib!tokens.HeapId. (lib!tokens.DelayFreeingActor./Heap/0 (%Poly%lib!tokens.DelayFreeingActor. x))) TYPE%lib!tokens.HeapId.)) :pattern ((lib!tokens.DelayFreeingActor./Heap/0 (%Poly%lib!tokens.DelayFreeingActor. x)) (has_type x TYPE%lib!tokens.DelayFreeingActor.)))))
(assert (forall ((x lib!tokens.DelayFreeingActor.)) (! (= (lib!tokens.DelayFreeingActor./Heap/1 x) (lib!tokens.DelayFreeingActor./Heap/?1 x)) :pattern ((lib!tokens.DelayFreeingActor./Heap/1 x)))))
(assert (forall ((x lib!tokens.DelayFreeingActor.)) (! (= (lib!tokens.DelayFreeingActor./Heap/2 x) (lib!tokens.DelayFreeingActor./Heap/?2 x)) :pattern ((lib!tokens.DelayFreeingActor./Heap/2 x)))))
(define-fun is-lib!tokens.DelayFreeingActor./Heap_ ((c lib!tokens.DelayFreeingActor.)) Bool ((_ is lib!tokens.DelayFreeingActor./Heap) c))
(assert (forall ((x lib!tokens.DelayFreeingActor.)) (! (=> (is-lib!tokens.DelayFreeingActor./Heap_ x) (height_lt (height (Poly%lib!types.HeapSharedAccess. (lib!tokens.DelayFreeingActor./Heap/1 x))) (height (Poly%lib!tokens.DelayFreeingActor. x)))) :pattern ((height (Poly%lib!types.HeapSharedAccess. (lib!tokens.DelayFreeingActor./Heap/1 x)))))))
(assert (forall ((x lib!tokens.DelayFreeingActor.)) (! (=> (is-lib!tokens.DelayFreeingActor./Heap_ x) (height_lt (height (Poly%lib!types.PageSharedAccess. (lib!tokens.DelayFreeingActor./Heap/2 x))) (height (Poly%lib!tokens.DelayFreeingActor. x)))) :pattern ((height (Poly%lib!types.PageSharedAccess. (lib!tokens.DelayFreeingActor./Heap/2 x)))))))
(assert (forall ((x lib!types.PageInner.)) (! (= x (%Poly%lib!types.PageInner. (Poly%lib!types.PageInner. x))) :pattern ((Poly%lib!types.PageInner. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (= x (Poly%lib!types.PageInner. (%Poly%lib!types.PageInner. x)))) :pattern ((has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((_flags0! Int) (_capacity! Int) (_reserved! Int) (_flags1! Int) (_flags2! Int) (_free! lib!linked_list.LL.) (_used! Int) (_xblock_size! Int) (_local_free! lib!linked_list.LL.)) (! (=> (and (uInv 8 _flags0!) (uInv 16 _capacity!) (uInv 16 _reserved!) (uInv 8 _flags1!) (uInv 8 _flags2!) (uInv 32 _used!) (uInv 32 _xblock_size!)) (has_type (Poly%lib!types.PageInner. (lib!types.PageInner./PageInner _flags0! _capacity! _reserved! _flags1! _flags2! _free! _used! _xblock_size! _local_free!)) TYPE%lib!types.PageInner.)) :pattern ((has_type (Poly%lib!types.PageInner. (lib!types.PageInner./PageInner _flags0! _capacity! _reserved! _flags1! _flags2! _free! _used! _xblock_size! _local_free!)) TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags0 x) (lib!types.PageInner./PageInner/?flags0 x)) :pattern ((lib!types.PageInner./PageInner/flags0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags0 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/capacity x) (lib!types.PageInner./PageInner/?capacity x)) :pattern ((lib!types.PageInner./PageInner/capacity x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 16 (lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/capacity (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/reserved x) (lib!types.PageInner./PageInner/?reserved x)) :pattern ((lib!types.PageInner./PageInner/reserved x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 16 (lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/reserved (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags1 x) (lib!types.PageInner./PageInner/?flags1 x)) :pattern ((lib!types.PageInner./PageInner/flags1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags1 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/flags2 x) (lib!types.PageInner./PageInner/?flags2 x)) :pattern ((lib!types.PageInner./PageInner/flags2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 8 (lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/flags2 (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/free x) (lib!types.PageInner./PageInner/?free x)) :pattern ((lib!types.PageInner./PageInner/free x)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/used x) (lib!types.PageInner./PageInner/?used x)) :pattern ((lib!types.PageInner./PageInner/used x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 32 (lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/used (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/xblock_size x) (lib!types.PageInner./PageInner/?xblock_size x)) :pattern ((lib!types.PageInner./PageInner/xblock_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageInner.) (uInv 32 (lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. x)))) :pattern ((lib!types.PageInner./PageInner/xblock_size (%Poly%lib!types.PageInner. x)) (has_type x TYPE%lib!types.PageInner.)))))
(assert (forall ((x lib!types.PageInner.)) (! (= (lib!types.PageInner./PageInner/local_free x) (lib!types.PageInner./PageInner/?local_free x)) :pattern ((lib!types.PageInner./PageInner/local_free x)))))
(define-fun is-lib!types.PageInner./PageInner_ ((c lib!types.PageInner.)) Bool ((_ is lib!types.PageInner./PageInner) c))
(assert (forall ((x lib!types.PageInner.)) (! (=> (is-lib!types.PageInner./PageInner_ x) (height_lt (height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free x))) (height (Poly%lib!types.PageInner. x)))) :pattern ((height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/free x)))))))
(assert (forall ((x lib!types.PageInner.)) (! (=> (is-lib!types.PageInner./PageInner_ x) (height_lt (height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free x))) (height (Poly%lib!types.PageInner. x)))) :pattern ((height (Poly%lib!linked_list.LL. (lib!types.PageInner./PageInner/local_free x)))))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= x (%Poly%lib!types.AtomicHeapPtr. (Poly%lib!types.AtomicHeapPtr. x))) :pattern ((Poly%lib!types.AtomicHeapPtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.AtomicHeapPtr.) (= x (Poly%lib!types.AtomicHeapPtr. (%Poly%lib!types.AtomicHeapPtr. x)))) :pattern ((has_type x TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((_atomic! vstd!atomic_ghost.AtomicPtr.) (_instance! lib!tokens.Mim.Instance.) (_page_id! lib!tokens.PageId.) (_emp! lib!types.BoolAgree.x.) (_emp_inst! lib!types.BoolAgree.Instance.)) (! (=> (and (has_type (Poly%vstd!atomic_ghost.AtomicPtr. _atomic!) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!types.Heap. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)) (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.PageId. _page_id!) TYPE%lib!tokens.PageId.)) (has_type (Poly%lib!types.AtomicHeapPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr _atomic! _instance! _page_id! _emp! _emp_inst!)) TYPE%lib!types.AtomicHeapPtr.)) :pattern ((has_type (Poly%lib!types.AtomicHeapPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr _atomic! _instance! _page_id! _emp! _emp_inst!)) TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?atomic x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.AtomicHeapPtr.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (%Poly%lib!types.AtomicHeapPtr. x))) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!types.Heap. $ (TYPE%tuple%4. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.PageId. (TRACKED $) TYPE%lib!types.BoolAgree.x. (TRACKED $) TYPE%lib!types.BoolAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!types.BoolAgree.y. $ (TYPE%core!option.Option. $ TYPE%lib!tokens.Mim.heap_of_page.)) $ TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.))) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic (%Poly%lib!types.AtomicHeapPtr. x)) (has_type x TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?instance x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.AtomicHeapPtr.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance (%Poly%lib!types.AtomicHeapPtr. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/instance (%Poly%lib!types.AtomicHeapPtr. x)) (has_type x TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?page_id x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.AtomicHeapPtr.) (has_type (Poly%lib!tokens.PageId. (lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id (%Poly%lib!types.AtomicHeapPtr. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/page_id (%Poly%lib!types.AtomicHeapPtr. x)) (has_type x TYPE%lib!types.AtomicHeapPtr.)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/emp x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/emp x)))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (= (lib!types.AtomicHeapPtr./AtomicHeapPtr/emp_inst x) (lib!types.AtomicHeapPtr./AtomicHeapPtr/?emp_inst x)) :pattern ((lib!types.AtomicHeapPtr./AtomicHeapPtr/emp_inst x)))))
(define-fun is-lib!types.AtomicHeapPtr./AtomicHeapPtr_ ((c lib!types.AtomicHeapPtr.)) Bool ((_ is lib!types.AtomicHeapPtr./AtomicHeapPtr) c))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (=> (is-lib!types.AtomicHeapPtr./AtomicHeapPtr_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x))) (height (Poly%lib!types.AtomicHeapPtr. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!types.AtomicHeapPtr./AtomicHeapPtr/atomic x)))))))
(assert (forall ((x lib!types.AtomicHeapPtr.)) (! (=> (is-lib!types.AtomicHeapPtr./AtomicHeapPtr_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x))) (height (Poly%lib!types.AtomicHeapPtr. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!types.AtomicHeapPtr./AtomicHeapPtr/instance x)))))))
(assert (forall ((x lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)) (! (= x (%Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x))) :pattern ((Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.) (= x (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. (%Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x)))) :pattern ((has_type x TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)))))
(assert (forall ((x lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)) (! (has_type (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x) TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.) :pattern ((has_type (Poly%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic. x) TYPE%lib!types.InvariantPredicate_auto_AtomicHeapPtr_atomic.)))))
(assert (forall ((x lib!types.Page.)) (! (= x (%Poly%lib!types.Page. (Poly%lib!types.Page. x))) :pattern ((Poly%lib!types.Page. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (= x (Poly%lib!types.Page. (%Poly%lib!types.Page. x)))) :pattern ((has_type x TYPE%lib!types.Page.)))))
(assert (forall ((_count! vstd!cell.PCell<u32.>.) (_offset! Int) (_inner! vstd!cell.PCell<lib!types.PageInner.>.) (_xthread_free! lib!linked_list.ThreadLLWithDelayBits.) (_xheap! lib!types.AtomicHeapPtr.) (_prev! vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (_next! vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>.) (_padding! Int)) (! (=> (and (uInv 32 _offset!) (has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. _xthread_free!) TYPE%lib!linked_list.ThreadLLWithDelayBits.) (has_type (Poly%lib!types.AtomicHeapPtr. _xheap!) TYPE%lib!types.AtomicHeapPtr.) (uInv SZ _padding!)) (has_type (Poly%lib!types.Page. (lib!types.Page./Page _count! _offset! _inner! _xthread_free! _xheap! _prev! _next! _padding!)) TYPE%lib!types.Page.)) :pattern ((has_type (Poly%lib!types.Page. (lib!types.Page./Page _count! _offset! _inner! _xthread_free! _xheap! _prev! _next! _padding!)) TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/count x) (lib!types.Page./Page/?count x)) :pattern ((lib!types.Page./Page/count x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/offset x) (lib!types.Page./Page/?offset x)) :pattern ((lib!types.Page./Page/offset x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (uInv 32 (lib!types.Page./Page/offset (%Poly%lib!types.Page. x)))) :pattern ((lib!types.Page./Page/offset (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/inner x) (lib!types.Page./Page/?inner x)) :pattern ((lib!types.Page./Page/inner x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/xthread_free x) (lib!types.Page./Page/?xthread_free x)) :pattern ((lib!types.Page./Page/xthread_free x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. x))) TYPE%lib!linked_list.ThreadLLWithDelayBits.)) :pattern ((lib!types.Page./Page/xthread_free (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/xheap x) (lib!types.Page./Page/?xheap x)) :pattern ((lib!types.Page./Page/xheap x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (has_type (Poly%lib!types.AtomicHeapPtr. (lib!types.Page./Page/xheap (%Poly%lib!types.Page. x))) TYPE%lib!types.AtomicHeapPtr.)) :pattern ((lib!types.Page./Page/xheap (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/prev x) (lib!types.Page./Page/?prev x)) :pattern ((lib!types.Page./Page/prev x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/next x) (lib!types.Page./Page/?next x)) :pattern ((lib!types.Page./Page/next x)))))
(assert (forall ((x lib!types.Page.)) (! (= (lib!types.Page./Page/padding x) (lib!types.Page./Page/?padding x)) :pattern ((lib!types.Page./Page/padding x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Page.) (uInv SZ (lib!types.Page./Page/padding (%Poly%lib!types.Page. x)))) :pattern ((lib!types.Page./Page/padding (%Poly%lib!types.Page. x)) (has_type x TYPE%lib!types.Page.)))))
(define-fun is-lib!types.Page./Page_ ((c lib!types.Page.)) Bool ((_ is lib!types.Page./Page) c))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%vstd!cell.PCell<lib!types.PageInner.>. (lib!types.Page./Page/inner x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%vstd!cell.PCell<lib!types.PageInner.>. (lib!types.Page./Page/inner x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!types.Page./Page/xthread_free x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%lib!types.AtomicHeapPtr. (lib!types.Page./Page/xheap x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%lib!types.AtomicHeapPtr. (lib!types.Page./Page/xheap x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/prev x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/prev x)))))))
(assert (forall ((x lib!types.Page.)) (! (=> (is-lib!types.Page./Page_ x) (height_lt (height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/next x))) (height (Poly%lib!types.Page. x)))) :pattern ((height (Poly%vstd!cell.PCell<ptr_mut%<lib!types.Page.>.>. (lib!types.Page./Page/next x)))))))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (= x (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. x))) :pattern ((Poly%lib!types.PageSharedAccess. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageSharedAccess.) (= x (Poly%lib!types.PageSharedAccess. (%Poly%lib!types.PageSharedAccess. x)))) :pattern ((has_type x TYPE%lib!types.PageSharedAccess.)))))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (= (lib!types.PageSharedAccess./PageSharedAccess/points_to x) (lib!types.PageSharedAccess./PageSharedAccess/?points_to x)) :pattern ((lib!types.PageSharedAccess./PageSharedAccess/points_to x)))))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (= (lib!types.PageSharedAccess./PageSharedAccess/exposed x) (lib!types.PageSharedAccess./PageSharedAccess/?exposed x)) :pattern ((lib!types.PageSharedAccess./PageSharedAccess/exposed x)))))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (has_type (Poly%lib!types.PageSharedAccess. x) TYPE%lib!types.PageSharedAccess.) :pattern ((has_type (Poly%lib!types.PageSharedAccess. x) TYPE%lib!types.PageSharedAccess.)))))
(define-fun is-lib!types.PageSharedAccess./PageSharedAccess_ ((c lib!types.PageSharedAccess.)) Bool ((_ is lib!types.PageSharedAccess./PageSharedAccess) c))
(assert (forall ((x lib!types.PageSharedAccess.)) (! (=> (is-lib!types.PageSharedAccess./PageSharedAccess_ x) (height_lt (height (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to x))) (height (Poly%lib!types.PageSharedAccess. x)))) :pattern ((height (Poly%vstd!raw_ptr.PointsTo<lib!types.Page.>. (lib!types.PageSharedAccess./PageSharedAccess/points_to x)))))))
(assert (forall ((x lib!types.SegmentKind.)) (! (= x (%Poly%lib!types.SegmentKind. (Poly%lib!types.SegmentKind. x))) :pattern ((Poly%lib!types.SegmentKind. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentKind.) (= x (Poly%lib!types.SegmentKind. (%Poly%lib!types.SegmentKind. x)))) :pattern ((has_type x TYPE%lib!types.SegmentKind.)))))
(assert (forall ((x lib!types.SegmentKind.)) (! (has_type (Poly%lib!types.SegmentKind. x) TYPE%lib!types.SegmentKind.) :pattern ((has_type (Poly%lib!types.SegmentKind. x) TYPE%lib!types.SegmentKind.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= x (%Poly%lib!types.SegmentHeaderMain. (Poly%lib!types.SegmentHeaderMain. x))) :pattern ((Poly%lib!types.SegmentHeaderMain. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (= x (Poly%lib!types.SegmentHeaderMain. (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((_memid! Int) (_mem_is_pinned! Bool) (_mem_is_large! Bool) (_mem_is_committed! Bool) (_mem_alignment! Int) (_mem_align_offset! Int) (_allow_decommit! Bool) (_decommit_expire! Int) (_decommit_mask! lib!commit_mask.CommitMask.) (_commit_mask! lib!commit_mask.CommitMask.)) (! (=> (and (uInv SZ _memid!) (uInv SZ _mem_alignment!) (uInv SZ _mem_align_offset!) (iInv 64 _decommit_expire!)) (has_type (Poly%lib!types.SegmentHeaderMain. (lib!types.SegmentHeaderMain./SegmentHeaderMain _memid! _mem_is_pinned! _mem_is_large! _mem_is_committed! _mem_alignment! _mem_align_offset! _allow_decommit! _decommit_expire! _decommit_mask! _commit_mask!)) TYPE%lib!types.SegmentHeaderMain.)) :pattern ((has_type (Poly%lib!types.SegmentHeaderMain. (lib!types.SegmentHeaderMain./SegmentHeaderMain _memid! _mem_is_pinned! _mem_is_large! _mem_is_committed! _mem_alignment! _mem_align_offset! _allow_decommit! _decommit_expire! _decommit_mask! _commit_mask!)) TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/memid x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?memid x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/memid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (uInv SZ (lib!types.SegmentHeaderMain./SegmentHeaderMain/memid (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/memid (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_pinned x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_pinned x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_pinned x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_large x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_large x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_large x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_committed x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_is_committed x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_is_committed x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_alignment x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (uInv SZ (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_alignment (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?mem_align_offset x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (uInv SZ (lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/mem_align_offset (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/allow_decommit x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?allow_decommit x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/allow_decommit x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_expire x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain.) (iInv 64 (lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire (%Poly%lib!types.SegmentHeaderMain. x)))) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_expire (%Poly%lib!types.SegmentHeaderMain. x)) (has_type x TYPE%lib!types.SegmentHeaderMain.)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_mask x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?decommit_mask x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/decommit_mask x)))))
(assert (forall ((x lib!types.SegmentHeaderMain.)) (! (= (lib!types.SegmentHeaderMain./SegmentHeaderMain/commit_mask x) (lib!types.SegmentHeaderMain./SegmentHeaderMain/?commit_mask x)) :pattern ((lib!types.SegmentHeaderMain./SegmentHeaderMain/commit_mask x)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= x (%Poly%lib!types.SegmentHeaderMain2. (Poly%lib!types.SegmentHeaderMain2. x))) :pattern ((Poly%lib!types.SegmentHeaderMain2. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (= x (Poly%lib!types.SegmentHeaderMain2. (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((_next! ptr_mut%<lib!types.SegmentHeader.>.) (_abandoned! Int) (_abandoned_visits! Int) (_used! Int) (_cookie! Int) (_segment_slices! Int) (_segment_info_slices! Int) (_kind! lib!types.SegmentKind.) (_slice_entries! Int)) (! (=> (and (uInv SZ _abandoned!) (uInv SZ _abandoned_visits!) (uInv SZ _used!) (uInv SZ _cookie!) (uInv SZ _segment_slices!) (uInv SZ _segment_info_slices!) (uInv SZ _slice_entries!)) (has_type (Poly%lib!types.SegmentHeaderMain2. (lib!types.SegmentHeaderMain2./SegmentHeaderMain2 _next! _abandoned! _abandoned_visits! _used! _cookie! _segment_slices! _segment_info_slices! _kind! _slice_entries!)) TYPE%lib!types.SegmentHeaderMain2.)) :pattern ((has_type (Poly%lib!types.SegmentHeaderMain2. (lib!types.SegmentHeaderMain2./SegmentHeaderMain2 _next! _abandoned! _abandoned_visits! _used! _cookie! _segment_slices! _segment_info_slices! _kind! _slice_entries!)) TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/next x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?next x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/next x)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?abandoned_visits x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/abandoned_visits (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?used x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/used (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?cookie x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/cookie (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_slices x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_slices (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?segment_info_slices x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/segment_info_slices (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/kind x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?kind x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/kind x)))))
(assert (forall ((x lib!types.SegmentHeaderMain2.)) (! (= (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries x) (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/?slice_entries x)) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeaderMain2.) (uInv SZ (lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries (%Poly%lib!types.SegmentHeaderMain2. x)))) :pattern ((lib!types.SegmentHeaderMain2./SegmentHeaderMain2/slice_entries (%Poly%lib!types.SegmentHeaderMain2. x)) (has_type x TYPE%lib!types.SegmentHeaderMain2.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= x (%Poly%lib!types.SegmentHeader. (Poly%lib!types.SegmentHeader. x))) :pattern ((Poly%lib!types.SegmentHeader. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (= x (Poly%lib!types.SegmentHeader. (%Poly%lib!types.SegmentHeader. x)))) :pattern ((has_type x TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((_main! vstd!cell.PCell<lib!types.SegmentHeaderMain.>.) (_abandoned_next! Int) (_main2! vstd!cell.PCell<lib!types.SegmentHeaderMain2.>.) (_thread_id! vstd!atomic_ghost.AtomicU64.) (_instance! lib!tokens.Mim.Instance.) (_segment_id! lib!tokens.SegmentId.)) (! (=> (and (uInv SZ _abandoned_next!) (has_type (Poly%vstd!atomic_ghost.AtomicU64. _thread_id!) (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ TYPE%lib!tokens.Mim.thread_of_segment. $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)) (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.SegmentId. _segment_id!) TYPE%lib!tokens.SegmentId.)) (has_type (Poly%lib!types.SegmentHeader. (lib!types.SegmentHeader./SegmentHeader _main! _abandoned_next! _main2! _thread_id! _instance! _segment_id!)) TYPE%lib!types.SegmentHeader.)) :pattern ((has_type (Poly%lib!types.SegmentHeader. (lib!types.SegmentHeader./SegmentHeader _main! _abandoned_next! _main2! _thread_id! _instance! _segment_id!)) TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/main x) (lib!types.SegmentHeader./SegmentHeader/?main x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/main x)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/abandoned_next x) (lib!types.SegmentHeader./SegmentHeader/?abandoned_next x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/abandoned_next x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (uInv SZ (lib!types.SegmentHeader./SegmentHeader/abandoned_next (%Poly%lib!types.SegmentHeader. x)))) :pattern ((lib!types.SegmentHeader./SegmentHeader/abandoned_next (%Poly%lib!types.SegmentHeader. x)) (has_type x TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/main2 x) (lib!types.SegmentHeader./SegmentHeader/?main2 x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/main2 x)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/thread_id x) (lib!types.SegmentHeader./SegmentHeader/?thread_id x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/thread_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (has_type (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id (%Poly%lib!types.SegmentHeader. x))) (TYPE%vstd!atomic_ghost.AtomicU64. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.SegmentId.) $ TYPE%lib!tokens.Mim.thread_of_segment. $ TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.))) :pattern ((lib!types.SegmentHeader./SegmentHeader/thread_id (%Poly%lib!types.SegmentHeader. x)) (has_type x TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/instance x) (lib!types.SegmentHeader./SegmentHeader/?instance x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!types.SegmentHeader./SegmentHeader/instance (%Poly%lib!types.SegmentHeader. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!types.SegmentHeader./SegmentHeader/instance (%Poly%lib!types.SegmentHeader. x)) (has_type x TYPE%lib!types.SegmentHeader.)))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (= (lib!types.SegmentHeader./SegmentHeader/segment_id x) (lib!types.SegmentHeader./SegmentHeader/?segment_id x)) :pattern ((lib!types.SegmentHeader./SegmentHeader/segment_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentHeader.) (has_type (Poly%lib!tokens.SegmentId. (lib!types.SegmentHeader./SegmentHeader/segment_id (%Poly%lib!types.SegmentHeader. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!types.SegmentHeader./SegmentHeader/segment_id (%Poly%lib!types.SegmentHeader. x)) (has_type x TYPE%lib!types.SegmentHeader.)))))
(define-fun is-lib!types.SegmentHeader./SegmentHeader_ ((c lib!types.SegmentHeader.)) Bool ((_ is lib!types.SegmentHeader./SegmentHeader) c))
(assert (forall ((x lib!types.SegmentHeader.)) (! (=> (is-lib!types.SegmentHeader./SegmentHeader_ x) (height_lt (height (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (lib!types.SegmentHeader./SegmentHeader/main2 x))) (height (Poly%lib!types.SegmentHeader. x)))) :pattern ((height (Poly%vstd!cell.PCell<lib!types.SegmentHeaderMain2.>. (lib!types.SegmentHeader./SegmentHeader/main2 x)))))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (=> (is-lib!types.SegmentHeader./SegmentHeader_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id x))) (height (Poly%lib!types.SegmentHeader. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicU64. (lib!types.SegmentHeader./SegmentHeader/thread_id x)))))))
(assert (forall ((x lib!types.SegmentHeader.)) (! (=> (is-lib!types.SegmentHeader./SegmentHeader_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!types.SegmentHeader./SegmentHeader/instance x))) (height (Poly%lib!types.SegmentHeader. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!types.SegmentHeader./SegmentHeader/instance x)))))))
(assert (forall ((x lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)) (! (= x (%Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x))) :pattern ((Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.) (= x (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. (%Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x)))) :pattern ((has_type x TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)))))
(assert (forall ((x lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)) (! (has_type (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x) TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.) :pattern ((has_type (Poly%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id. x) TYPE%lib!types.InvariantPredicate_auto_SegmentHeader_thread_id.)))))
(assert (forall ((x lib!types.SegmentSharedAccess.)) (! (= x (%Poly%lib!types.SegmentSharedAccess. (Poly%lib!types.SegmentSharedAccess. x))) :pattern ((Poly%lib!types.SegmentSharedAccess. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentSharedAccess.) (= x (Poly%lib!types.SegmentSharedAccess. (%Poly%lib!types.SegmentSharedAccess. x)))) :pattern ((has_type x TYPE%lib!types.SegmentSharedAccess.)))))
(assert (forall ((x lib!types.SegmentSharedAccess.)) (! (= (lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to x) (lib!types.SegmentSharedAccess./SegmentSharedAccess/?points_to x)) :pattern ((lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to x)))))
(assert (forall ((x lib!types.SegmentSharedAccess.)) (! (has_type (Poly%lib!types.SegmentSharedAccess. x) TYPE%lib!types.SegmentSharedAccess.) :pattern ((has_type (Poly%lib!types.SegmentSharedAccess. x) TYPE%lib!types.SegmentSharedAccess.)))))
(define-fun is-lib!types.SegmentSharedAccess./SegmentSharedAccess_ ((c lib!types.SegmentSharedAccess.)) Bool ((_ is lib!types.SegmentSharedAccess./SegmentSharedAccess) c))
(assert (forall ((x lib!types.SegmentSharedAccess.)) (! (=> (is-lib!types.SegmentSharedAccess./SegmentSharedAccess_ x) (height_lt (height (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to x))) (height (Poly%lib!types.SegmentSharedAccess. x)))) :pattern ((height (Poly%vstd!raw_ptr.PointsTo<lib!types.SegmentHeader.>. (lib!types.SegmentSharedAccess./SegmentSharedAccess/points_to x)))))))
(assert (forall ((x lib!types.PageQueue.)) (! (= x (%Poly%lib!types.PageQueue. (Poly%lib!types.PageQueue. x))) :pattern ((Poly%lib!types.PageQueue. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageQueue.) (= x (Poly%lib!types.PageQueue. (%Poly%lib!types.PageQueue. x)))) :pattern ((has_type x TYPE%lib!types.PageQueue.)))))
(assert (forall ((_first! ptr_mut%<lib!types.Page.>.) (_last! ptr_mut%<lib!types.Page.>.) (_block_size! Int)) (! (=> (uInv SZ _block_size!) (has_type (Poly%lib!types.PageQueue. (lib!types.PageQueue./PageQueue _first! _last! _block_size!)) TYPE%lib!types.PageQueue.)) :pattern ((has_type (Poly%lib!types.PageQueue. (lib!types.PageQueue./PageQueue _first! _last! _block_size!)) TYPE%lib!types.PageQueue.)))))
(assert (forall ((x lib!types.PageQueue.)) (! (= (lib!types.PageQueue./PageQueue/first x) (lib!types.PageQueue./PageQueue/?first x)) :pattern ((lib!types.PageQueue./PageQueue/first x)))))
(assert (forall ((x lib!types.PageQueue.)) (! (= (lib!types.PageQueue./PageQueue/last x) (lib!types.PageQueue./PageQueue/?last x)) :pattern ((lib!types.PageQueue./PageQueue/last x)))))
(assert (forall ((x lib!types.PageQueue.)) (! (= (lib!types.PageQueue./PageQueue/block_size x) (lib!types.PageQueue./PageQueue/?block_size x)) :pattern ((lib!types.PageQueue./PageQueue/block_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.PageQueue.) (uInv SZ (lib!types.PageQueue./PageQueue/block_size (%Poly%lib!types.PageQueue. x)))) :pattern ((lib!types.PageQueue./PageQueue/block_size (%Poly%lib!types.PageQueue. x)) (has_type x TYPE%lib!types.PageQueue.)))))
(assert (forall ((x lib!types.Heap.)) (! (= x (%Poly%lib!types.Heap. (Poly%lib!types.Heap. x))) :pattern ((Poly%lib!types.Heap. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (= x (Poly%lib!types.Heap. (%Poly%lib!types.Heap. x)))) :pattern ((has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((_tld_ptr! lib!types.TldPtr.) (_pages_free_direct! Poly) (_pages! Poly) (_thread_delayed_free! lib!linked_list.ThreadLLSimple.) (_thread_id! lib!thread.ThreadId.) (_arena_id! Int) (_page_count! vstd!cell.PCell<usize.>.) (_page_retired_min! vstd!cell.PCell<usize.>.) (_page_retired_max! vstd!cell.PCell<usize.>.) (_no_reclaim! Bool) (_page_empty_ptr! ptr_mut%<lib!types.Page.>.)) (! (=> (and (has_type (Poly%lib!types.TldPtr. _tld_ptr!) TYPE%lib!types.TldPtr.) (has_type _pages_free_direct! (TYPE%vstd!cell.PCell. $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129)))) (has_type _pages! (TYPE%vstd!cell.PCell. $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75)))) (has_type (Poly%lib!linked_list.ThreadLLSimple. _thread_delayed_free!) TYPE%lib!linked_list.ThreadLLSimple.) (has_type (Poly%lib!thread.ThreadId. _thread_id!) TYPE%lib!thread.ThreadId.) (uInv SZ _arena_id!)) (has_type (Poly%lib!types.Heap. (lib!types.Heap./Heap _tld_ptr! _pages_free_direct! _pages! _thread_delayed_free! _thread_id! _arena_id! _page_count! _page_retired_min! _page_retired_max! _no_reclaim! _page_empty_ptr!)) TYPE%lib!types.Heap.)) :pattern ((has_type (Poly%lib!types.Heap. (lib!types.Heap./Heap _tld_ptr! _pages_free_direct! _pages! _thread_delayed_free! _thread_id! _arena_id! _page_count! _page_retired_min! _page_retired_max! _no_reclaim! _page_empty_ptr!)) TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/tld_ptr x) (lib!types.Heap./Heap/?tld_ptr x)) :pattern ((lib!types.Heap./Heap/tld_ptr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. x))) TYPE%lib!types.TldPtr.)) :pattern ((lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/pages_free_direct x) (lib!types.Heap./Heap/?pages_free_direct x)) :pattern ((lib!types.Heap./Heap/pages_free_direct x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (lib!types.Heap./Heap/pages_free_direct (%Poly%lib!types.Heap. x)) (TYPE%vstd!cell.PCell. $ (ARRAY $ (PTR $ TYPE%lib!types.Page.) $ (CONST_INT 129))))) :pattern ((lib!types.Heap./Heap/pages_free_direct (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/pages x) (lib!types.Heap./Heap/?pages x)) :pattern ((lib!types.Heap./Heap/pages x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (lib!types.Heap./Heap/pages (%Poly%lib!types.Heap. x)) (TYPE%vstd!cell.PCell. $ (ARRAY $ TYPE%lib!types.PageQueue. $ (CONST_INT 75))))) :pattern ((lib!types.Heap./Heap/pages (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/thread_delayed_free x) (lib!types.Heap./Heap/?thread_delayed_free x)) :pattern ((lib!types.Heap./Heap/thread_delayed_free x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free (%Poly%lib!types.Heap. x))) TYPE%lib!linked_list.ThreadLLSimple.)) :pattern ((lib!types.Heap./Heap/thread_delayed_free (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/thread_id x) (lib!types.Heap./Heap/?thread_id x)) :pattern ((lib!types.Heap./Heap/thread_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (has_type (Poly%lib!thread.ThreadId. (lib!types.Heap./Heap/thread_id (%Poly%lib!types.Heap. x))) TYPE%lib!thread.ThreadId.)) :pattern ((lib!types.Heap./Heap/thread_id (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/arena_id x) (lib!types.Heap./Heap/?arena_id x)) :pattern ((lib!types.Heap./Heap/arena_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Heap.) (uInv SZ (lib!types.Heap./Heap/arena_id (%Poly%lib!types.Heap. x)))) :pattern ((lib!types.Heap./Heap/arena_id (%Poly%lib!types.Heap. x)) (has_type x TYPE%lib!types.Heap.)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_count x) (lib!types.Heap./Heap/?page_count x)) :pattern ((lib!types.Heap./Heap/page_count x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_retired_min x) (lib!types.Heap./Heap/?page_retired_min x)) :pattern ((lib!types.Heap./Heap/page_retired_min x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_retired_max x) (lib!types.Heap./Heap/?page_retired_max x)) :pattern ((lib!types.Heap./Heap/page_retired_max x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/no_reclaim x) (lib!types.Heap./Heap/?no_reclaim x)) :pattern ((lib!types.Heap./Heap/no_reclaim x)))))
(assert (forall ((x lib!types.Heap.)) (! (= (lib!types.Heap./Heap/page_empty_ptr x) (lib!types.Heap./Heap/?page_empty_ptr x)) :pattern ((lib!types.Heap./Heap/page_empty_ptr x)))))
(define-fun is-lib!types.Heap./Heap_ ((c lib!types.Heap.)) Bool ((_ is lib!types.Heap./Heap) c))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr x))) (height (Poly%lib!types.Heap. x)))) :pattern ((height (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr x)))))))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (lib!types.Heap./Heap/pages_free_direct x)) (height (Poly%lib!types.Heap. x)))) :pattern ((height (lib!types.Heap./Heap/pages_free_direct x))))))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (lib!types.Heap./Heap/pages x)) (height (Poly%lib!types.Heap. x)))) :pattern ((height (lib!types.Heap./Heap/pages x))))))
(assert (forall ((x lib!types.Heap.)) (! (=> (is-lib!types.Heap./Heap_ x) (height_lt (height (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free x))) (height (Poly%lib!types.Heap. x)))) :pattern ((height (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free x)))))))
(assert (forall ((x lib!types.HeapSharedAccess.)) (! (= x (%Poly%lib!types.HeapSharedAccess. (Poly%lib!types.HeapSharedAccess. x))) :pattern ((Poly%lib!types.HeapSharedAccess. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.HeapSharedAccess.) (= x (Poly%lib!types.HeapSharedAccess. (%Poly%lib!types.HeapSharedAccess. x)))) :pattern ((has_type x TYPE%lib!types.HeapSharedAccess.)))))
(assert (forall ((x lib!types.HeapSharedAccess.)) (! (= (lib!types.HeapSharedAccess./HeapSharedAccess/points_to x) (lib!types.HeapSharedAccess./HeapSharedAccess/?points_to x)) :pattern ((lib!types.HeapSharedAccess./HeapSharedAccess/points_to x)))))
(assert (forall ((x lib!types.HeapSharedAccess.)) (! (has_type (Poly%lib!types.HeapSharedAccess. x) TYPE%lib!types.HeapSharedAccess.) :pattern ((has_type (Poly%lib!types.HeapSharedAccess. x) TYPE%lib!types.HeapSharedAccess.)))))
(define-fun is-lib!types.HeapSharedAccess./HeapSharedAccess_ ((c lib!types.HeapSharedAccess.)) Bool ((_ is lib!types.HeapSharedAccess./HeapSharedAccess) c))
(assert (forall ((x lib!types.HeapSharedAccess.)) (! (=> (is-lib!types.HeapSharedAccess./HeapSharedAccess_ x) (height_lt (height (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to x))) (height (Poly%lib!types.HeapSharedAccess. x)))) :pattern ((height (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to x)))))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= x (%Poly%lib!types.SegmentsTld. (Poly%lib!types.SegmentsTld. x))) :pattern ((Poly%lib!types.SegmentsTld. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (= x (Poly%lib!types.SegmentsTld. (%Poly%lib!types.SegmentsTld. x)))) :pattern ((has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((_span_queue_headers! %%Function%%) (_count! Int) (_peak_count! Int) (_current_size! Int) (_peak_size! Int)) (! (=> (and (has_type (Poly%array%. _span_queue_headers!) (ARRAY $ TYPE%lib!types.SpanQueueHeader. $ (CONST_INT 32))) (uInv SZ _count!) (uInv SZ _peak_count!) (uInv SZ _current_size!) (uInv SZ _peak_size!)) (has_type (Poly%lib!types.SegmentsTld. (lib!types.SegmentsTld./SegmentsTld _span_queue_headers! _count! _peak_count! _current_size! _peak_size!)) TYPE%lib!types.SegmentsTld.)) :pattern ((has_type (Poly%lib!types.SegmentsTld. (lib!types.SegmentsTld./SegmentsTld _span_queue_headers! _count! _peak_count! _current_size! _peak_size!)) TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/span_queue_headers x) (lib!types.SegmentsTld./SegmentsTld/?span_queue_headers x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/span_queue_headers x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (has_type (Poly%array%. (lib!types.SegmentsTld./SegmentsTld/span_queue_headers (%Poly%lib!types.SegmentsTld. x))) (ARRAY $ TYPE%lib!types.SpanQueueHeader. $ (CONST_INT 32)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/span_queue_headers (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/count x) (lib!types.SegmentsTld./SegmentsTld/?count x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/count (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/count (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/peak_count x) (lib!types.SegmentsTld./SegmentsTld/?peak_count x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/peak_count (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_count (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/current_size x) (lib!types.SegmentsTld./SegmentsTld/?current_size x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/current_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/current_size (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/current_size (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SegmentsTld.)) (! (= (lib!types.SegmentsTld./SegmentsTld/peak_size x) (lib!types.SegmentsTld./SegmentsTld/?peak_size x)) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_size x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SegmentsTld.) (uInv SZ (lib!types.SegmentsTld./SegmentsTld/peak_size (%Poly%lib!types.SegmentsTld. x)))) :pattern ((lib!types.SegmentsTld./SegmentsTld/peak_size (%Poly%lib!types.SegmentsTld. x)) (has_type x TYPE%lib!types.SegmentsTld.)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (= x (%Poly%lib!types.SpanQueueHeader. (Poly%lib!types.SpanQueueHeader. x))) :pattern ((Poly%lib!types.SpanQueueHeader. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.SpanQueueHeader.) (= x (Poly%lib!types.SpanQueueHeader. (%Poly%lib!types.SpanQueueHeader. x)))) :pattern ((has_type x TYPE%lib!types.SpanQueueHeader.)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (= (lib!types.SpanQueueHeader./SpanQueueHeader/first x) (lib!types.SpanQueueHeader./SpanQueueHeader/?first x)) :pattern ((lib!types.SpanQueueHeader./SpanQueueHeader/first x)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (= (lib!types.SpanQueueHeader./SpanQueueHeader/last x) (lib!types.SpanQueueHeader./SpanQueueHeader/?last x)) :pattern ((lib!types.SpanQueueHeader./SpanQueueHeader/last x)))))
(assert (forall ((x lib!types.SpanQueueHeader.)) (! (has_type (Poly%lib!types.SpanQueueHeader. x) TYPE%lib!types.SpanQueueHeader.) :pattern ((has_type (Poly%lib!types.SpanQueueHeader. x) TYPE%lib!types.SpanQueueHeader.)))))
(assert (forall ((x lib!types.Tld.)) (! (= x (%Poly%lib!types.Tld. (Poly%lib!types.Tld. x))) :pattern ((Poly%lib!types.Tld. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Tld.) (= x (Poly%lib!types.Tld. (%Poly%lib!types.Tld. x)))) :pattern ((has_type x TYPE%lib!types.Tld.)))))
(assert (forall ((_heap_backing! ptr_mut%<lib!types.Heap.>.) (_segments! lib!types.SegmentsTld.)) (! (=> (has_type (Poly%lib!types.SegmentsTld. _segments!) TYPE%lib!types.SegmentsTld.) (has_type (Poly%lib!types.Tld. (lib!types.Tld./Tld _heap_backing! _segments!)) TYPE%lib!types.Tld.)) :pattern ((has_type (Poly%lib!types.Tld. (lib!types.Tld./Tld _heap_backing! _segments!)) TYPE%lib!types.Tld.)))))
(assert (forall ((x lib!types.Tld.)) (! (= (lib!types.Tld./Tld/heap_backing x) (lib!types.Tld./Tld/?heap_backing x)) :pattern ((lib!types.Tld./Tld/heap_backing x)))))
(assert (forall ((x lib!types.Tld.)) (! (= (lib!types.Tld./Tld/segments x) (lib!types.Tld./Tld/?segments x)) :pattern ((lib!types.Tld./Tld/segments x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.Tld.) (has_type (Poly%lib!types.SegmentsTld. (lib!types.Tld./Tld/segments (%Poly%lib!types.Tld. x))) TYPE%lib!types.SegmentsTld.)) :pattern ((lib!types.Tld./Tld/segments (%Poly%lib!types.Tld. x)) (has_type x TYPE%lib!types.Tld.)))))
(define-fun is-lib!types.Tld./Tld_ ((c lib!types.Tld.)) Bool ((_ is lib!types.Tld./Tld) c))
(assert (forall ((x lib!types.Tld.)) (! (=> (is-lib!types.Tld./Tld_ x) (height_lt (height (Poly%lib!types.SegmentsTld. (lib!types.Tld./Tld/segments x))) (height (Poly%lib!types.Tld. x)))) :pattern ((height (Poly%lib!types.SegmentsTld. (lib!types.Tld./Tld/segments x)))))))
(assert (forall ((x lib!types.TldPtr.)) (! (= x (%Poly%lib!types.TldPtr. (Poly%lib!types.TldPtr. x))) :pattern ((Poly%lib!types.TldPtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.TldPtr.) (= x (Poly%lib!types.TldPtr. (%Poly%lib!types.TldPtr. x)))) :pattern ((has_type x TYPE%lib!types.TldPtr.)))))
(assert (forall ((_tld_ptr! ptr_mut%<lib!types.Tld.>.) (_tld_id! lib!tokens.TldId.)) (! (=> (has_type (Poly%lib!tokens.TldId. _tld_id!) TYPE%lib!tokens.TldId.) (has_type (Poly%lib!types.TldPtr. (lib!types.TldPtr./TldPtr _tld_ptr! _tld_id!)) TYPE%lib!types.TldPtr.)) :pattern ((has_type (Poly%lib!types.TldPtr. (lib!types.TldPtr./TldPtr _tld_ptr! _tld_id!)) TYPE%lib!types.TldPtr.)))))
(assert (forall ((x lib!types.TldPtr.)) (! (= (lib!types.TldPtr./TldPtr/tld_ptr x) (lib!types.TldPtr./TldPtr/?tld_ptr x)) :pattern ((lib!types.TldPtr./TldPtr/tld_ptr x)))))
(assert (forall ((x lib!types.TldPtr.)) (! (= (lib!types.TldPtr./TldPtr/tld_id x) (lib!types.TldPtr./TldPtr/?tld_id x)) :pattern ((lib!types.TldPtr./TldPtr/tld_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!types.TldPtr.) (has_type (Poly%lib!tokens.TldId. (lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. x))) TYPE%lib!tokens.TldId.)) :pattern ((lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. x)) (has_type x TYPE%lib!types.TldPtr.)))))
(assert (forall ((x lib!linked_list.Node.)) (! (= x (%Poly%lib!linked_list.Node. (Poly%lib!linked_list.Node. x))) :pattern ((Poly%lib!linked_list.Node. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.Node.) (= x (Poly%lib!linked_list.Node. (%Poly%lib!linked_list.Node. x)))) :pattern ((has_type x TYPE%lib!linked_list.Node.)))))
(assert (forall ((x lib!linked_list.Node.)) (! (= (lib!linked_list.Node./Node/ptr x) (lib!linked_list.Node./Node/?ptr x)) :pattern ((lib!linked_list.Node./Node/ptr x)))))
(assert (forall ((x lib!linked_list.Node.)) (! (has_type (Poly%lib!linked_list.Node. x) TYPE%lib!linked_list.Node.) :pattern ((has_type (Poly%lib!linked_list.Node. x) TYPE%lib!linked_list.Node.)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= x (%Poly%lib!linked_list.ThreadLLSimple. (Poly%lib!linked_list.ThreadLLSimple. x))) :pattern ((Poly%lib!linked_list.ThreadLLSimple. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLSimple.) (= x (Poly%lib!linked_list.ThreadLLSimple. (%Poly%lib!linked_list.ThreadLLSimple. x)))) :pattern ((has_type x TYPE%lib!linked_list.ThreadLLSimple.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_heap_id! lib!tokens.HeapId.) (_atomic! vstd!atomic_ghost.AtomicPtr.)) (! (=> (and (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%lib!tokens.HeapId. _heap_id!) TYPE%lib!tokens.HeapId.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. _atomic!) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ TYPE%lib!linked_list.LL. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.))) (has_type (Poly%lib!linked_list.ThreadLLSimple. (lib!linked_list.ThreadLLSimple./ThreadLLSimple _instance! _heap_id! _atomic!)) TYPE%lib!linked_list.ThreadLLSimple.)) :pattern ((has_type (Poly%lib!linked_list.ThreadLLSimple. (lib!linked_list.ThreadLLSimple./ThreadLLSimple _instance! _heap_id! _atomic!)) TYPE%lib!linked_list.ThreadLLSimple.)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?instance x)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLSimple.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance (%Poly%lib!linked_list.ThreadLLSimple. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance (%Poly%lib!linked_list.ThreadLLSimple. x)) (has_type x TYPE%lib!linked_list.ThreadLLSimple.)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id x) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?heap_id x)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLSimple.) (has_type (Poly%lib!tokens.HeapId. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (%Poly%lib!linked_list.ThreadLLSimple. x))) TYPE%lib!tokens.HeapId.)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (%Poly%lib!linked_list.ThreadLLSimple. x)) (has_type x TYPE%lib!linked_list.ThreadLLSimple.)))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x) (lib!linked_list.ThreadLLSimple./ThreadLLSimple/?atomic x)) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLSimple.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (%Poly%lib!linked_list.ThreadLLSimple. x))) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (GHOST $) TYPE%lib!tokens.Mim.Instance. (GHOST $) TYPE%lib!tokens.HeapId.) $ TYPE%lib!linked_list.LL. $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.))) :pattern ((lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic (%Poly%lib!linked_list.ThreadLLSimple. x)) (has_type x TYPE%lib!linked_list.ThreadLLSimple.)))))
(define-fun is-lib!linked_list.ThreadLLSimple./ThreadLLSimple_ ((c lib!linked_list.ThreadLLSimple.)) Bool ((_ is lib!linked_list.ThreadLLSimple./ThreadLLSimple) c))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (=> (is-lib!linked_list.ThreadLLSimple./ThreadLLSimple_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x))) (height (Poly%lib!linked_list.ThreadLLSimple. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance x)))))))
(assert (forall ((x lib!linked_list.ThreadLLSimple.)) (! (=> (is-lib!linked_list.ThreadLLSimple./ThreadLLSimple_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x))) (height (Poly%lib!linked_list.ThreadLLSimple. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLSimple./ThreadLLSimple/atomic x)))))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)) (! (= x (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x))) :pattern ((Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.) (= x (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x)))) :pattern ((has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)) (! (has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.) :pattern ((has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLSimple_atomic.)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= x (%Poly%lib!linked_list.ThreadLLWithDelayBits. (Poly%lib!linked_list.ThreadLLWithDelayBits. x))) :pattern ((Poly%lib!linked_list.ThreadLLWithDelayBits. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.) (= x (Poly%lib!linked_list.ThreadLLWithDelayBits. (%Poly%lib!linked_list.ThreadLLWithDelayBits. x)))) :pattern ((has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.)))))
(assert (forall ((_instance! lib!tokens.Mim.Instance.) (_atomic! vstd!atomic_ghost.AtomicPtr.) (_emp! lib!linked_list.StuffAgree.x.) (_emp_inst! lib!linked_list.StuffAgree.Instance.)) (! (=> (and (has_type (Poly%lib!tokens.Mim.Instance. _instance!) TYPE%lib!tokens.Mim.Instance.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. _atomic!) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.))) (has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits _instance! _atomic! _emp! _emp_inst!)) TYPE%lib!linked_list.ThreadLLWithDelayBits.)) :pattern ((has_type (Poly%lib!linked_list.ThreadLLWithDelayBits. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits _instance! _atomic! _emp! _emp_inst!)) TYPE%lib!linked_list.ThreadLLWithDelayBits.)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?instance x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance (%Poly%lib!linked_list.ThreadLLWithDelayBits. x))) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance (%Poly%lib!linked_list.ThreadLLWithDelayBits. x)) (has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?atomic x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.) (has_type (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (%Poly%lib!linked_list.ThreadLLWithDelayBits. x))) (TYPE%vstd!atomic_ghost.AtomicPtr. $ TYPE%lib!linked_list.Node. $ (TYPE%tuple%2. (TRACKED $) TYPE%lib!tokens.Mim.Instance. (TRACKED $) TYPE%lib!linked_list.StuffAgree.Instance.) $ (TYPE%tuple%2. $ TYPE%lib!linked_list.StuffAgree.y. $ (TYPE%core!option.Option. $ (TYPE%tuple%2. $ TYPE%lib!tokens.Mim.delay. $ TYPE%lib!linked_list.LL.))) $ TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.))) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic (%Poly%lib!linked_list.ThreadLLWithDelayBits. x)) (has_type x TYPE%lib!linked_list.ThreadLLWithDelayBits.)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp x)))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (= (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst x) (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/?emp_inst x)) :pattern ((lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/emp_inst x)))))
(define-fun is-lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits_ ((c lib!linked_list.ThreadLLWithDelayBits.)) Bool ((_ is lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits) c))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (=> (is-lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits_ x) (height_lt (height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x))) (height (Poly%lib!linked_list.ThreadLLWithDelayBits. x)))) :pattern ((height (Poly%lib!tokens.Mim.Instance. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/instance x)))))))
(assert (forall ((x lib!linked_list.ThreadLLWithDelayBits.)) (! (=> (is-lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits_ x) (height_lt (height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x))) (height (Poly%lib!linked_list.ThreadLLWithDelayBits. x)))) :pattern ((height (Poly%vstd!atomic_ghost.AtomicPtr. (lib!linked_list.ThreadLLWithDelayBits./ThreadLLWithDelayBits/atomic x)))))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)) (! (= x (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x))) :pattern ((Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.) (= x (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. (%Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x)))) :pattern ((has_type x TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)))))
(assert (forall ((x lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)) (! (has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.) :pattern ((has_type (Poly%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic. x) TYPE%lib!linked_list.InvariantPredicate_auto_ThreadLLWithDelayBits_atomic.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%1.)) (! (= x (%Poly%tuple%1. (Poly%tuple%1. x))) :pattern ((Poly%tuple%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (= x (Poly%tuple%1. (%Poly%tuple%1. x)))) :pattern ((has_type x (TYPE%tuple%1. T%0&. T%0&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (_0! Poly)) (! (=> (has_type _0! T%0&) (has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))) :pattern ((has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))))))
(assert (forall ((x tuple%1.)) (! (= (tuple%1./tuple%1/0 x) (tuple%1./tuple%1/?0 x)) :pattern ((tuple%1./tuple%1/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) T%0&)) :pattern ((tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (has_type x (TYPE%tuple%1. T%0&. T%0&))))))
(define-fun is-tuple%1./tuple%1_ ((c tuple%1.)) Bool ((_ is tuple%1./tuple%1) c))
(assert (forall ((x tuple%1.)) (! (=> (is-tuple%1./tuple%1_ x) (height_lt (height (tuple%1./tuple%1/0 x)) (height (Poly%tuple%1. x)))) :pattern ((height (tuple%1./tuple%1/0 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type y (TYPE%tuple%1. T%0&. T%0&)) (ext_eq deep T%0& (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (tuple%1./tuple%1/0 (%Poly%tuple%1. y)))) (ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)) :pattern ((ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)))))
(assert (forall ((x tuple%13.)) (! (= x (%Poly%tuple%13. (Poly%tuple%13. x))) :pattern ((Poly%tuple%13. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (= x (Poly%tuple%13. (%Poly%tuple%13. x)))) :pattern ((has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly) (_4! Poly) (_5! Poly) (_6! Poly) (_7! Poly) (_8! Poly) (_9! Poly) (_10! Poly) (_11! Poly) (_12! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&) (has_type _4! T%4&) (has_type _5! T%5&) (has_type _6! T%6&) (has_type _7! T%7&) (has_type _8! T%8&) (has_type _9! T%9&) (has_type _10! T%10&) (has_type _11! T%11&) (has_type _12! T%12&)) (has_type (Poly%tuple%13. (tuple%13./tuple%13 _0! _1! _2! _3! _4! _5! _6! _7! _8! _9! _10! _11! _12!)) (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))) :pattern ((has_type (Poly%tuple%13. (tuple%13./tuple%13 _0! _1! _2! _3! _4! _5! _6! _7! _8! _9! _10! _11! _12!)) (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(assert (forall ((x tuple%13.)) (! (= (tuple%13./tuple%13/0 x) (tuple%13./tuple%13/?0 x)) :pattern ((tuple%13./tuple%13/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (has_type (tuple%13./tuple%13/0 (%Poly%tuple%13. x)) T%0&)) :pattern ((tuple%13./tuple%13/0 (%Poly%tuple%13. x)) (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(assert (forall ((x tuple%13.)) (! (= (tuple%13./tuple%13/1 x) (tuple%13./tuple%13/?1 x)) :pattern ((tuple%13./tuple%13/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (has_type (tuple%13./tuple%13/1 (%Poly%tuple%13. x)) T%1&)) :pattern ((tuple%13./tuple%13/1 (%Poly%tuple%13. x)) (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(assert (forall ((x tuple%13.)) (! (= (tuple%13./tuple%13/2 x) (tuple%13./tuple%13/?2 x)) :pattern ((tuple%13./tuple%13/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (has_type (tuple%13./tuple%13/2 (%Poly%tuple%13. x)) T%2&)) :pattern ((tuple%13./tuple%13/2 (%Poly%tuple%13. x)) (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(assert (forall ((x tuple%13.)) (! (= (tuple%13./tuple%13/3 x) (tuple%13./tuple%13/?3 x)) :pattern ((tuple%13./tuple%13/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (has_type (tuple%13./tuple%13/3 (%Poly%tuple%13. x)) T%3&)) :pattern ((tuple%13./tuple%13/3 (%Poly%tuple%13. x)) (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(assert (forall ((x tuple%13.)) (! (= (tuple%13./tuple%13/4 x) (tuple%13./tuple%13/?4 x)) :pattern ((tuple%13./tuple%13/4 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (has_type (tuple%13./tuple%13/4 (%Poly%tuple%13. x)) T%4&)) :pattern ((tuple%13./tuple%13/4 (%Poly%tuple%13. x)) (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(assert (forall ((x tuple%13.)) (! (= (tuple%13./tuple%13/5 x) (tuple%13./tuple%13/?5 x)) :pattern ((tuple%13./tuple%13/5 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (has_type (tuple%13./tuple%13/5 (%Poly%tuple%13. x)) T%5&)) :pattern ((tuple%13./tuple%13/5 (%Poly%tuple%13. x)) (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(assert (forall ((x tuple%13.)) (! (= (tuple%13./tuple%13/6 x) (tuple%13./tuple%13/?6 x)) :pattern ((tuple%13./tuple%13/6 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (has_type (tuple%13./tuple%13/6 (%Poly%tuple%13. x)) T%6&)) :pattern ((tuple%13./tuple%13/6 (%Poly%tuple%13. x)) (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(assert (forall ((x tuple%13.)) (! (= (tuple%13./tuple%13/7 x) (tuple%13./tuple%13/?7 x)) :pattern ((tuple%13./tuple%13/7 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (has_type (tuple%13./tuple%13/7 (%Poly%tuple%13. x)) T%7&)) :pattern ((tuple%13./tuple%13/7 (%Poly%tuple%13. x)) (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(assert (forall ((x tuple%13.)) (! (= (tuple%13./tuple%13/8 x) (tuple%13./tuple%13/?8 x)) :pattern ((tuple%13./tuple%13/8 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (has_type (tuple%13./tuple%13/8 (%Poly%tuple%13. x)) T%8&)) :pattern ((tuple%13./tuple%13/8 (%Poly%tuple%13. x)) (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(assert (forall ((x tuple%13.)) (! (= (tuple%13./tuple%13/9 x) (tuple%13./tuple%13/?9 x)) :pattern ((tuple%13./tuple%13/9 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (has_type (tuple%13./tuple%13/9 (%Poly%tuple%13. x)) T%9&)) :pattern ((tuple%13./tuple%13/9 (%Poly%tuple%13. x)) (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(assert (forall ((x tuple%13.)) (! (= (tuple%13./tuple%13/10 x) (tuple%13./tuple%13/?10 x)) :pattern ((tuple%13./tuple%13/10 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (has_type (tuple%13./tuple%13/10 (%Poly%tuple%13. x)) T%10&)) :pattern ((tuple%13./tuple%13/10 (%Poly%tuple%13. x)) (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(assert (forall ((x tuple%13.)) (! (= (tuple%13./tuple%13/11 x) (tuple%13./tuple%13/?11 x)) :pattern ((tuple%13./tuple%13/11 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (has_type (tuple%13./tuple%13/11 (%Poly%tuple%13. x)) T%11&)) :pattern ((tuple%13./tuple%13/11 (%Poly%tuple%13. x)) (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(assert (forall ((x tuple%13.)) (! (= (tuple%13./tuple%13/12 x) (tuple%13./tuple%13/?12 x)) :pattern ((tuple%13./tuple%13/12 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (has_type (tuple%13./tuple%13/12 (%Poly%tuple%13. x)) T%12&)) :pattern ((tuple%13./tuple%13/12 (%Poly%tuple%13. x)) (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&))))))
(define-fun is-tuple%13./tuple%13_ ((c tuple%13.)) Bool ((_ is tuple%13./tuple%13) c))
(assert (forall ((x tuple%13.)) (! (=> (is-tuple%13./tuple%13_ x) (height_lt (height (tuple%13./tuple%13/0 x)) (height (Poly%tuple%13. x)))) :pattern ((height (tuple%13./tuple%13/0 x))))))
(assert (forall ((x tuple%13.)) (! (=> (is-tuple%13./tuple%13_ x) (height_lt (height (tuple%13./tuple%13/1 x)) (height (Poly%tuple%13. x)))) :pattern ((height (tuple%13./tuple%13/1 x))))))
(assert (forall ((x tuple%13.)) (! (=> (is-tuple%13./tuple%13_ x) (height_lt (height (tuple%13./tuple%13/2 x)) (height (Poly%tuple%13. x)))) :pattern ((height (tuple%13./tuple%13/2 x))))))
(assert (forall ((x tuple%13.)) (! (=> (is-tuple%13./tuple%13_ x) (height_lt (height (tuple%13./tuple%13/3 x)) (height (Poly%tuple%13. x)))) :pattern ((height (tuple%13./tuple%13/3 x))))))
(assert (forall ((x tuple%13.)) (! (=> (is-tuple%13./tuple%13_ x) (height_lt (height (tuple%13./tuple%13/4 x)) (height (Poly%tuple%13. x)))) :pattern ((height (tuple%13./tuple%13/4 x))))))
(assert (forall ((x tuple%13.)) (! (=> (is-tuple%13./tuple%13_ x) (height_lt (height (tuple%13./tuple%13/5 x)) (height (Poly%tuple%13. x)))) :pattern ((height (tuple%13./tuple%13/5 x))))))
(assert (forall ((x tuple%13.)) (! (=> (is-tuple%13./tuple%13_ x) (height_lt (height (tuple%13./tuple%13/6 x)) (height (Poly%tuple%13. x)))) :pattern ((height (tuple%13./tuple%13/6 x))))))
(assert (forall ((x tuple%13.)) (! (=> (is-tuple%13./tuple%13_ x) (height_lt (height (tuple%13./tuple%13/7 x)) (height (Poly%tuple%13. x)))) :pattern ((height (tuple%13./tuple%13/7 x))))))
(assert (forall ((x tuple%13.)) (! (=> (is-tuple%13./tuple%13_ x) (height_lt (height (tuple%13./tuple%13/8 x)) (height (Poly%tuple%13. x)))) :pattern ((height (tuple%13./tuple%13/8 x))))))
(assert (forall ((x tuple%13.)) (! (=> (is-tuple%13./tuple%13_ x) (height_lt (height (tuple%13./tuple%13/9 x)) (height (Poly%tuple%13. x)))) :pattern ((height (tuple%13./tuple%13/9 x))))))
(assert (forall ((x tuple%13.)) (! (=> (is-tuple%13./tuple%13_ x) (height_lt (height (tuple%13./tuple%13/10 x)) (height (Poly%tuple%13. x)))) :pattern ((height (tuple%13./tuple%13/10 x))))))
(assert (forall ((x tuple%13.)) (! (=> (is-tuple%13./tuple%13_ x) (height_lt (height (tuple%13./tuple%13/11 x)) (height (Poly%tuple%13. x)))) :pattern ((height (tuple%13./tuple%13/11 x))))))
(assert (forall ((x tuple%13.)) (! (=> (is-tuple%13./tuple%13_ x) (height_lt (height (tuple%13./tuple%13/12 x)) (height (Poly%tuple%13. x)))) :pattern ((height (tuple%13./tuple%13/12 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (T%4&. Dcr) (T%4& Type) (T%5&. Dcr) (T%5& Type) (T%6&. Dcr) (T%6& Type) (T%7&. Dcr) (T%7& Type) (T%8&. Dcr) (T%8& Type) (T%9&. Dcr) (T%9& Type) (T%10&. Dcr) (T%10& Type) (T%11&. Dcr) (T%11& Type) (T%12&. Dcr) (T%12& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (has_type y (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&)) (ext_eq deep T%0& (tuple%13./tuple%13/0 (%Poly%tuple%13. x)) (tuple%13./tuple%13/0 (%Poly%tuple%13. y))) (ext_eq deep T%1& (tuple%13./tuple%13/1 (%Poly%tuple%13. x)) (tuple%13./tuple%13/1 (%Poly%tuple%13. y))) (ext_eq deep T%2& (tuple%13./tuple%13/2 (%Poly%tuple%13. x)) (tuple%13./tuple%13/2 (%Poly%tuple%13. y))) (ext_eq deep T%3& (tuple%13./tuple%13/3 (%Poly%tuple%13. x)) (tuple%13./tuple%13/3 (%Poly%tuple%13. y))) (ext_eq deep T%4& (tuple%13./tuple%13/4 (%Poly%tuple%13. x)) (tuple%13./tuple%13/4 (%Poly%tuple%13. y))) (ext_eq deep T%5& (tuple%13./tuple%13/5 (%Poly%tuple%13. x)) (tuple%13./tuple%13/5 (%Poly%tuple%13. y))) (ext_eq deep T%6& (tuple%13./tuple%13/6 (%Poly%tuple%13. x)) (tuple%13./tuple%13/6 (%Poly%tuple%13. y))) (ext_eq deep T%7& (tuple%13./tuple%13/7 (%Poly%tuple%13. x)) (tuple%13./tuple%13/7 (%Poly%tuple%13. y))) (ext_eq deep T%8& (tuple%13./tuple%13/8 (%Poly%tuple%13. x)) (tuple%13./tuple%13/8 (%Poly%tuple%13. y))) (ext_eq deep T%9& (tuple%13./tuple%13/9 (%Poly%tuple%13. x)) (tuple%13./tuple%13/9 (%Poly%tuple%13. y))) (ext_eq deep T%10& (tuple%13./tuple%13/10 (%Poly%tuple%13. x)) (tuple%13./tuple%13/10 (%Poly%tuple%13. y))) (ext_eq deep T%11& (tuple%13./tuple%13/11 (%Poly%tuple%13. x)) (tuple%13./tuple%13/11 (%Poly%tuple%13. y))) (ext_eq deep T%12& (tuple%13./tuple%13/12 (%Poly%tuple%13. x)) (tuple%13./tuple%13/12 (%Poly%tuple%13. y)))) (ext_eq deep (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&) x y)) :pattern ((ext_eq deep (TYPE%tuple%13. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3& T%4&. T%4& T%5&. T%5& T%6&. T%6& T%7&. T%7& T%8&. T%8& T%9&. T%9& T%10&. T%10& T%11&. T%11& T%12&. T%12&) x y)))))
(declare-fun array_new (Dcr Type Int %%Function%%) Poly)
(declare-fun array_index (Dcr Type Dcr Type %%Function%% Poly) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (= (array_new Tdcr T N Fn) (Poly%array%. Fn)) :pattern ((array_new Tdcr T N Fn)))))
(declare-fun %%apply%%1 (%%Function%% Int) Poly)
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%)) (! (=> (forall ((i Int)) (! (=> (and (<= 0 i) (< i N)) (has_type (%%apply%%1 Fn i) T)) :pattern ((has_type (%%apply%%1 Fn i) T)))) (has_type (array_new Tdcr T N Fn) (ARRAY Tdcr T $ (CONST_INT N)))) :pattern ((array_new Tdcr T N Fn)))))
(assert (forall ((Tdcr Dcr) (T Type) (Ndcr Dcr) (N Type) (Fn %%Function%%) (i Poly)) (! (=> (and (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N)) (has_type i INT)) (has_type (array_index Tdcr T $ N Fn i) T)) :pattern ((array_index Tdcr T $ N Fn i) (has_type (Poly%array%. Fn) (ARRAY Tdcr T Ndcr N))))))
(assert (forall ((Tdcr Dcr) (T Type) (N Int) (Fn %%Function%%) (i Int)) (! (= (array_index Tdcr T $ (CONST_INT N) Fn (I i)) (%%apply%%1 Fn i)) :pattern ((array_new Tdcr T N Fn) (%%apply%%1 Fn i)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!array.ArrayAdditionalSpecFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%vstd!view.View. (Dcr Type) Bool)
(declare-fun tr_bound%core!clone.Clone. (Dcr Type) Bool)
(declare-fun tr_bound%core!alloc.Allocator. (Dcr Type) Bool)
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! (=> (tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&) (and (tr_bound%vstd!view.View. Self%&. Self%&) (and (= $ (proj%%vstd!view.View./V Self%&. Self%&)) (= (TYPE%vstd!seq.Seq. T&. T&) (proj%vstd!view.View./V Self%&. Self%&))))) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. Self%&. Self%& T&. T&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%vstd!view.View. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!clone.Clone. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! true :pattern ((tr_bound%core!alloc.Allocator. Self%&. Self%&)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) $) :pattern ((proj%%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (ARRAY T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V $ (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) $) :pattern ((proj%%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&)) TYPE%vstd!raw_ptr.PtrData.) :pattern ((proj%vstd!view.View./V (CONST_PTR $) (PTR T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (TYPE%vstd!raw_ptr.PointsToData. T&. T&)) :pattern ((proj%vstd!view.View./V $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%%vstd!view.View./V $ (SLICE T&. T&)) $) :pattern ((proj%%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (proj%vstd!view.View./V $ (SLICE T&. T&)) (TYPE%vstd!seq.Seq. T&. T&)) :pattern ((proj%vstd!view.View./V $ (SLICE T&. T&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (REF A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (REF A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (REF A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%%vstd!view.View./V A&. A&)) :pattern ((proj%%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&) (proj%vstd!view.View./V A&. A&)) :pattern ((proj%vstd!view.View./V (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(assert (= (proj%%vstd!view.View./V $ TYPE%tuple%0.) $))
(assert (= (proj%vstd!view.View./V $ TYPE%tuple%0.) TYPE%tuple%0.))
(assert (= (proj%%vstd!view.View./V $ BOOL) $))
(assert (= (proj%vstd!view.View./V $ BOOL) BOOL))
(assert (= (proj%%vstd!view.View./V $ (UINT 8)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 8)) (UINT 8)))
(assert (= (proj%%vstd!view.View./V $ (UINT 16)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 16)) (UINT 16)))
(assert (= (proj%%vstd!view.View./V $ (UINT 32)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 32)) (UINT 32)))
(assert (= (proj%%vstd!view.View./V $ (UINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (UINT 64)) (UINT 64)))
(assert (= (proj%%vstd!view.View./V $ (UINT SZ)) $))
(assert (= (proj%vstd!view.View./V $ (UINT SZ)) (UINT SZ)))
(assert (= (proj%%vstd!view.View./V $ (SINT 64)) $))
(assert (= (proj%vstd!view.View./V $ (SINT 64)) (SINT 64)))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&))))))
(assert (forall ((A0&. Dcr) (A0& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&)) (TYPE%tuple%1. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%1. A0&. A0&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&)) (TYPE%tuple%2. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&)) (TYPE%tuple%3. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) $) :pattern ((proj%%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (= (proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&)) (TYPE%tuple%4. (proj%%vstd!view.View./V A0&. A0&) (proj%vstd!view.View./V A0&. A0&) (proj%%vstd!view.View./V A1&. A1&) (proj%vstd!view.View./V A1&. A1&) (proj%%vstd!view.View./V A2&. A2&) (proj%vstd!view.View./V A2&. A2&) (proj%%vstd!view.View./V A3&. A3&) (proj%vstd!view.View./V A3&. A3&))) :pattern ((proj%vstd!view.View./V $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(set-info :comment ";; Function-Decl vstd::view::View::view")
(declare-fun vstd!view.View.view.? (Dcr Type Poly) Poly)
(declare-fun vstd!view.View.view%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!array.ArrayAdditionalSpecFns.spec_index%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_some")
(declare-fun vstd!std_specs.option.is_some.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_none")
(declare-fun vstd!std_specs.option.is_none.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::ptr_mut_specs::spec_addr")
(declare-fun vstd!raw_ptr.ptr_mut_specs.spec_addr.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::array::array_view")
(declare-fun vstd!array.array_view.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::subset_of")
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::remove_keys")
(declare-fun vstd!map_lib.impl&%0.remove_keys.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::union_prefer_right")
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%0::null")
(declare-fun vstd!raw_ptr.impl&%0.null.? (Poly) vstd!raw_ptr.Provenance.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%6::ptr")
(declare-fun vstd!raw_ptr.impl&%6.ptr.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%6::opt_value")
(declare-fun vstd!raw_ptr.impl&%6.opt_value.? (Dcr Type Poly) vstd!raw_ptr.MemContents.)
(set-info :comment ";; Function-Decl vstd::raw_ptr::view_reverse_for_eq")
(declare-fun vstd!raw_ptr.view_reverse_for_eq.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::is_init")
(declare-fun vstd!raw_ptr.impl&%7.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%6::is_init")
(declare-fun vstd!raw_ptr.impl&%6.is_init.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%2::arrow_0")
(declare-fun vstd!raw_ptr.impl&%2.arrow_0.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%7::value")
(declare-fun vstd!raw_ptr.impl&%7.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::raw_ptr::impl&%6::value")
(declare-fun vstd!raw_ptr.impl&%6.value.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_add")
(declare-fun vstd!set.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::set_inst")
(declare-fun lib!tokens.Mim.impl&%21.set_inst.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::actor_make_idle")
(declare-fun lib!tokens.Mim.impl&%21.actor_make_idle.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::actor_abandon")
(declare-fun lib!tokens.Mim.impl&%21.actor_abandon.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_pair")
(declare-fun vstd!map_lib.impl&%0.contains_pair.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::set_use_delayed_free")
(declare-fun lib!tokens.Mim.impl&%21.set_use_delayed_free.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::delay_enter_freeing")
(declare-fun lib!tokens.Mim.impl&%21.delay_enter_freeing.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::delay_leave_freeing")
(declare-fun lib!tokens.Mim.impl&%21.delay_leave_freeing.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::layout::is_heap_ptr")
(declare-fun lib!layout.is_heap_ptr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::block::view")
(declare-fun lib!tokens.Mim.impl&%10.view.? (Poly) lib!tokens.Mim.block_token_data.)
(set-info :comment ";; Function-Decl lib::config::SLICE_SIZE")
(declare-fun lib!config.SLICE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::layout::start_offset")
(declare-fun lib!layout.start_offset.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::linked_list::ThreadLLSimple::wf")
(declare-fun lib!linked_list.impl&%4.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::layout::is_tld_ptr")
(declare-fun lib!layout.is_tld_ptr.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::TldPtr::wf")
(declare-fun lib!types.impl&%27.wf.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::Heap::wf")
(declare-fun lib!types.impl&%16.wf.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::HeapSharedAccess::wf")
(declare-fun lib!types.impl&%17.wf.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::types::HeapSharedAccess::wf2")
(declare-fun lib!types.impl&%17.wf2.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::delay_lookup_heap")
(declare-fun lib!tokens.Mim.impl&%21.delay_lookup_heap.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::block_set_heap_id")
(declare-fun lib!tokens.Mim.impl&%21.block_set_heap_id.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::math::max")
(declare-fun vstd!math.max.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::heap_u_max")
(declare-fun lib!tokens.heap_u_max.? (Poly) Int)
(declare-fun lib!tokens.rec%heap_u_max.? (Poly Fuel) Int)
(set-info :comment ";; Function-Decl lib::tokens::heap_get_unused_uniq_field")
(declare-fun lib!tokens.heap_get_unused_uniq_field.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::reserve_uniq_identifier")
(declare-fun lib!tokens.Mim.impl&%21.reserve_uniq_identifier.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::create_thread_mk_tokens")
(declare-fun lib!tokens.Mim.impl&%21.create_thread_mk_tokens.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::segment_u_max")
(declare-fun lib!tokens.segment_u_max.? (Poly) Int)
(declare-fun lib!tokens.rec%segment_u_max.? (Poly Fuel) Int)
(set-info :comment ";; Function-Decl lib::tokens::segment_get_unused_uniq_field")
(declare-fun lib!tokens.segment_get_unused_uniq_field.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::mk_fresh_segment_id")
(declare-fun lib!tokens.Mim.impl&%21.mk_fresh_segment_id.? (Poly Poly) lib!tokens.SegmentId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::create_segment_mk_tokens")
(declare-fun lib!tokens.Mim.impl&%21.create_segment_mk_tokens.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::segment_enable")
(declare-fun lib!tokens.Mim.impl&%21.segment_enable.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::disjoint")
(declare-fun vstd!set.impl&%0.disjoint.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::create_page_mk_tokens")
(declare-fun lib!tokens.Mim.impl&%21.create_page_mk_tokens.? (Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_enable")
(declare-fun lib!tokens.Mim.impl&%21.page_enable.? (Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::BlockId::get_slice_idx")
(declare-fun lib!tokens.impl&%1.get_slice_idx.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::okay_to_add_block")
(declare-fun lib!tokens.Mim.impl&%21.okay_to_add_block.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::BlockId::slice_idx_is_right")
(declare-fun lib!tokens.impl&%1.slice_idx_is_right.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::BlockId::page_id_for_slice")
(declare-fun lib!tokens.impl&%1.page_id_for_slice.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_mk_block_tokens")
(declare-fun lib!tokens.Mim.impl&%21.page_mk_block_tokens.? (Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::len")
(declare-fun vstd!map.impl&%0.len.? (Dcr Type Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::submap_of")
(declare-fun vstd!map_lib.impl&%0.submap_of.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_destroy_block_tokens")
(declare-fun lib!tokens.Mim.impl&%21.page_destroy_block_tokens.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_check_delay_state")
(declare-fun lib!tokens.Mim.impl&%21.page_check_delay_state.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::PageId::range_from")
(declare-fun lib!tokens.impl&%0.range_from.? (Poly Poly Poly) vstd!set.Set<lib!tokens.PageId.>.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_disable")
(declare-fun lib!tokens.Mim.impl&%21.page_disable.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_destroy_tokens")
(declare-fun lib!tokens.Mim.impl&%21.page_destroy_tokens.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::block_tokens_distinct")
(declare-fun lib!tokens.Mim.impl&%21.block_tokens_distinct.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::block_in_range")
(declare-fun lib!tokens.Mim.impl&%21.block_in_range.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::next_by")
(declare-fun lib!tokens.Mim.impl&%21.next_by.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::next")
(declare-fun lib!tokens.Mim.impl&%21.next.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::full")
(declare-fun vstd!set.impl&%0.full.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::initialize")
(declare-fun lib!tokens.Mim.impl&%21.initialize.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::init_by")
(declare-fun lib!tokens.Mim.impl&%21.init_by.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::init")
(declare-fun lib!tokens.Mim.impl&%21.init.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::right_to_set_inst::view")
(declare-fun lib!tokens.Mim.impl&%4.view.? (Poly) lib!tokens.Mim.right_to_set_inst_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::my_inst::view")
(declare-fun lib!tokens.Mim.impl&%5.view.? (Poly) lib!tokens.Mim.my_inst_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::thread_local_state::view")
(declare-fun lib!tokens.Mim.impl&%8.view.? (Poly) lib!tokens.Mim.thread_local_state_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::right_to_use_thread::view")
(declare-fun lib!tokens.Mim.impl&%9.view.? (Poly) lib!tokens.Mim.right_to_use_thread_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::thread_of_segment::view")
(declare-fun lib!tokens.Mim.impl&%11.view.? (Poly) lib!tokens.Mim.thread_of_segment_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::delay::view")
(declare-fun lib!tokens.Mim.impl&%12.view.? (Poly) lib!tokens.Mim.delay_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::heap_of_page::view")
(declare-fun lib!tokens.Mim.impl&%13.view.? (Poly) lib!tokens.Mim.heap_of_page_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::actor::view")
(declare-fun lib!tokens.Mim.impl&%14.view.? (Poly) lib!tokens.Mim.actor_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::delay_actor::view")
(declare-fun lib!tokens.Mim.impl&%15.view.? (Poly) lib!tokens.Mim.delay_actor_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::reserved_uniq::view")
(declare-fun lib!tokens.Mim.impl&%16.view.? (Poly) lib!tokens.Mim.reserved_uniq_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::thread_checked_state::view")
(declare-fun lib!tokens.Mim.impl&%17.view.? (Poly) lib!tokens.Mim.thread_checked_state_token_data.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_finite")
(declare-fun lib!tokens.Mim.impl&%21.inv_finite.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_reserved")
(declare-fun lib!tokens.Mim.impl&%21.inv_reserved.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_reserved2")
(declare-fun lib!tokens.Mim.impl&%21.inv_reserved2.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_right_to_set_inst")
(declare-fun lib!tokens.Mim.impl&%21.inv_right_to_set_inst.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_heap_of_page_delay")
(declare-fun lib!tokens.Mim.impl&%21.inv_heap_of_page_delay.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_delay_state_for_page")
(declare-fun lib!tokens.Mim.impl&%21.inv_delay_state_for_page.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_delay_state")
(declare-fun lib!tokens.Mim.impl&%21.inv_delay_state.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_delay_actor_for_page")
(declare-fun lib!tokens.Mim.impl&%21.inv_delay_actor_for_page.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_delay_actor")
(declare-fun lib!tokens.Mim.impl&%21.inv_delay_actor.? (Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::spec_le")
(declare-fun vstd!set.impl&%0.spec_le.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_delay_actor_sub")
(declare-fun lib!tokens.Mim.impl&%21.inv_delay_actor_sub.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_checked_threads")
(declare-fun lib!tokens.Mim.impl&%21.inv_checked_threads.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_no_delay_actor_for_checked")
(declare-fun lib!tokens.Mim.impl&%21.inv_no_delay_actor_for_checked.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::right_to_use_thread_complement")
(declare-fun lib!tokens.Mim.impl&%21.right_to_use_thread_complement.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::heap_of_thread_is_valid")
(declare-fun lib!tokens.Mim.impl&%21.heap_of_thread_is_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::wf_heap_shared_access_requires_inst")
(declare-fun lib!tokens.Mim.impl&%21.wf_heap_shared_access_requires_inst.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::wf_heap_shared_access")
(declare-fun lib!tokens.Mim.impl&%21.wf_heap_shared_access.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_thread_of_segment1")
(declare-fun lib!tokens.Mim.impl&%21.inv_thread_of_segment1.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_thread_of_segment2")
(declare-fun lib!tokens.Mim.impl&%21.inv_thread_of_segment2.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_thread_has_segment_for_page")
(declare-fun lib!tokens.Mim.impl&%21.inv_thread_has_segment_for_page.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_thread_of_page1")
(declare-fun lib!tokens.Mim.impl&%21.inv_thread_of_page1.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_thread_of_page2")
(declare-fun lib!tokens.Mim.impl&%21.inv_thread_of_page2.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::heap_of_page_is_correct")
(declare-fun lib!tokens.Mim.impl&%21.heap_of_page_is_correct.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_page_shared_access_dom")
(declare-fun lib!tokens.Mim.impl&%21.inv_page_shared_access_dom.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_page_shared_access_eq")
(declare-fun lib!tokens.Mim.impl&%21.inv_page_shared_access_eq.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_segment_shared_access_dom")
(declare-fun lib!tokens.Mim.impl&%21.inv_segment_shared_access_dom.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_segment_shared_access_eq")
(declare-fun lib!tokens.Mim.impl&%21.inv_segment_shared_access_eq.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::block_properties")
(declare-fun lib!tokens.Mim.impl&%21.block_properties.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_block_id_valid_for_block")
(declare-fun lib!tokens.Mim.impl&%21.inv_block_id_valid_for_block.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_block_id_valid")
(declare-fun lib!tokens.Mim.impl&%21.inv_block_id_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_block_id_at_idx_uniq")
(declare-fun lib!tokens.Mim.impl&%21.inv_block_id_at_idx_uniq.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::heap_ids_thread_id1")
(declare-fun lib!tokens.Mim.impl&%21.heap_ids_thread_id1.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::heap_ids_thread_id2")
(declare-fun lib!tokens.Mim.impl&%21.heap_ids_thread_id2.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::inv_heap_shared_access")
(declare-fun lib!tokens.Mim.impl&%21.inv_heap_shared_access.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_implies_segment_enabled")
(declare-fun lib!tokens.Mim.impl&%21.page_implies_segment_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_4")
(declare-fun lib!tokens.Mim.impl&%0.arrow_4.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_1")
(declare-fun lib!tokens.Mim.impl&%0.arrow_1.? (Poly) lib!tokens.BlockId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_3")
(declare-fun lib!tokens.Mim.impl&%0.arrow_3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_set_inst_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_set_inst_0.? (Poly) lib!tokens.Mim.Instance.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_actor_make_idle_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_actor_make_idle_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_actor_abandon_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_actor_abandon_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_set_use_delayed_free_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_set_use_delayed_free_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_delay_enter_freeing_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_delay_enter_freeing_1")
(declare-fun lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_1.? (Poly) lib!tokens.BlockId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_delay_leave_freeing_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_delay_leave_freeing_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_delay_lookup_heap_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_delay_lookup_heap_0.? (Poly) lib!tokens.BlockId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_block_set_heap_id_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_block_set_heap_id_0.? (Poly) lib!tokens.BlockId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_create_thread_mk_tokens_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_create_thread_mk_tokens_1")
(declare-fun lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_1.? (Poly) lib!tokens.ThreadState.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_create_segment_mk_tokens_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_create_segment_mk_tokens_1")
(declare-fun lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_1.? (Poly) lib!tokens.SegmentId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_create_segment_mk_tokens_2")
(declare-fun lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_2.? (Poly) lib!tokens.SegmentState.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_segment_enable_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_segment_enable_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_segment_enable_1")
(declare-fun lib!tokens.Mim.impl&%0.arrow_segment_enable_1.? (Poly) lib!tokens.SegmentId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_segment_enable_2")
(declare-fun lib!tokens.Mim.impl&%0.arrow_segment_enable_2.? (Poly) lib!types.SegmentSharedAccess.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_create_page_mk_tokens_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_create_page_mk_tokens_1")
(declare-fun lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_1.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_create_page_mk_tokens_2")
(declare-fun lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_create_page_mk_tokens_3")
(declare-fun lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_create_page_mk_tokens_4")
(declare-fun lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_4.? (Poly) vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_enable_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_enable_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_enable_1")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_enable_1.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_enable_2")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_enable_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_enable_3")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_enable_3.? (Poly) vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_enable_4")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_enable_4.? (Poly) vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_mk_block_tokens_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_mk_block_tokens_1")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_1.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_mk_block_tokens_2")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_mk_block_tokens_3")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_mk_block_tokens_4")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_4.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_destroy_block_tokens_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_destroy_block_tokens_1")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_1.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_destroy_block_tokens_2")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_2.? (Poly) vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_check_delay_state_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_check_delay_state_1")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_1.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_disable_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_disable_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_disable_1")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_disable_1.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_disable_2")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_disable_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_destroy_tokens_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_destroy_tokens_1")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_1.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_page_destroy_tokens_2")
(declare-fun lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_block_tokens_distinct_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_0.? (Poly) lib!tokens.BlockId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_block_tokens_distinct_1")
(declare-fun lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_1.? (Poly) lib!tokens.BlockId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_block_in_range_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_block_in_range_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_block_in_range_1")
(declare-fun lib!tokens.Mim.impl&%0.arrow_block_in_range_1.? (Poly) lib!tokens.BlockId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::arrow_dummy_to_use_type_params_0")
(declare-fun lib!tokens.Mim.impl&%0.arrow_dummy_to_use_type_params_0.? (Poly) lib!tokens.Mim.State.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_set_inst")
(declare-fun lib!tokens.Mim.impl&%1.is_set_inst.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_set_inst_0")
(declare-fun lib!tokens.Mim.impl&%1.get_set_inst_0.? (Poly) lib!tokens.Mim.Instance.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_actor_make_idle")
(declare-fun lib!tokens.Mim.impl&%1.is_actor_make_idle.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_actor_make_idle_0")
(declare-fun lib!tokens.Mim.impl&%1.get_actor_make_idle_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_actor_abandon")
(declare-fun lib!tokens.Mim.impl&%1.is_actor_abandon.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_actor_abandon_0")
(declare-fun lib!tokens.Mim.impl&%1.get_actor_abandon_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_set_use_delayed_free")
(declare-fun lib!tokens.Mim.impl&%1.is_set_use_delayed_free.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_set_use_delayed_free_0")
(declare-fun lib!tokens.Mim.impl&%1.get_set_use_delayed_free_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_delay_enter_freeing")
(declare-fun lib!tokens.Mim.impl&%1.is_delay_enter_freeing.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_delay_enter_freeing_0")
(declare-fun lib!tokens.Mim.impl&%1.get_delay_enter_freeing_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_delay_enter_freeing_1")
(declare-fun lib!tokens.Mim.impl&%1.get_delay_enter_freeing_1.? (Poly) lib!tokens.BlockId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_delay_leave_freeing")
(declare-fun lib!tokens.Mim.impl&%1.is_delay_leave_freeing.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_delay_leave_freeing_0")
(declare-fun lib!tokens.Mim.impl&%1.get_delay_leave_freeing_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_delay_lookup_heap")
(declare-fun lib!tokens.Mim.impl&%1.is_delay_lookup_heap.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_delay_lookup_heap_0")
(declare-fun lib!tokens.Mim.impl&%1.get_delay_lookup_heap_0.? (Poly) lib!tokens.BlockId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_block_set_heap_id")
(declare-fun lib!tokens.Mim.impl&%1.is_block_set_heap_id.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_block_set_heap_id_0")
(declare-fun lib!tokens.Mim.impl&%1.get_block_set_heap_id_0.? (Poly) lib!tokens.BlockId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_reserve_uniq_identifier")
(declare-fun lib!tokens.Mim.impl&%1.is_reserve_uniq_identifier.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_create_thread_mk_tokens")
(declare-fun lib!tokens.Mim.impl&%1.is_create_thread_mk_tokens.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_create_thread_mk_tokens_0")
(declare-fun lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_create_thread_mk_tokens_1")
(declare-fun lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_1.? (Poly) lib!tokens.ThreadState.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_create_segment_mk_tokens")
(declare-fun lib!tokens.Mim.impl&%1.is_create_segment_mk_tokens.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_create_segment_mk_tokens_0")
(declare-fun lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_create_segment_mk_tokens_1")
(declare-fun lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_1.? (Poly) lib!tokens.SegmentId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_create_segment_mk_tokens_2")
(declare-fun lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_2.? (Poly) lib!tokens.SegmentState.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_segment_enable")
(declare-fun lib!tokens.Mim.impl&%1.is_segment_enable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_segment_enable_0")
(declare-fun lib!tokens.Mim.impl&%1.get_segment_enable_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_segment_enable_1")
(declare-fun lib!tokens.Mim.impl&%1.get_segment_enable_1.? (Poly) lib!tokens.SegmentId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_segment_enable_2")
(declare-fun lib!tokens.Mim.impl&%1.get_segment_enable_2.? (Poly) lib!types.SegmentSharedAccess.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_create_page_mk_tokens")
(declare-fun lib!tokens.Mim.impl&%1.is_create_page_mk_tokens.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_create_page_mk_tokens_0")
(declare-fun lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_create_page_mk_tokens_1")
(declare-fun lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_1.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_create_page_mk_tokens_2")
(declare-fun lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_create_page_mk_tokens_3")
(declare-fun lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_create_page_mk_tokens_4")
(declare-fun lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_4.? (Poly) vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_page_enable")
(declare-fun lib!tokens.Mim.impl&%1.is_page_enable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_enable_0")
(declare-fun lib!tokens.Mim.impl&%1.get_page_enable_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_enable_1")
(declare-fun lib!tokens.Mim.impl&%1.get_page_enable_1.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_enable_2")
(declare-fun lib!tokens.Mim.impl&%1.get_page_enable_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_enable_3")
(declare-fun lib!tokens.Mim.impl&%1.get_page_enable_3.? (Poly) vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_enable_4")
(declare-fun lib!tokens.Mim.impl&%1.get_page_enable_4.? (Poly) vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_page_mk_block_tokens")
(declare-fun lib!tokens.Mim.impl&%1.is_page_mk_block_tokens.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_mk_block_tokens_0")
(declare-fun lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_mk_block_tokens_1")
(declare-fun lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_1.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_mk_block_tokens_2")
(declare-fun lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_mk_block_tokens_3")
(declare-fun lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_mk_block_tokens_4")
(declare-fun lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_4.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_page_destroy_block_tokens")
(declare-fun lib!tokens.Mim.impl&%1.is_page_destroy_block_tokens.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_destroy_block_tokens_0")
(declare-fun lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_destroy_block_tokens_1")
(declare-fun lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_1.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_destroy_block_tokens_2")
(declare-fun lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_2.? (Poly) vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_page_check_delay_state")
(declare-fun lib!tokens.Mim.impl&%1.is_page_check_delay_state.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_check_delay_state_0")
(declare-fun lib!tokens.Mim.impl&%1.get_page_check_delay_state_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_check_delay_state_1")
(declare-fun lib!tokens.Mim.impl&%1.get_page_check_delay_state_1.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_page_disable")
(declare-fun lib!tokens.Mim.impl&%1.is_page_disable.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_disable_0")
(declare-fun lib!tokens.Mim.impl&%1.get_page_disable_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_disable_1")
(declare-fun lib!tokens.Mim.impl&%1.get_page_disable_1.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_disable_2")
(declare-fun lib!tokens.Mim.impl&%1.get_page_disable_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_page_destroy_tokens")
(declare-fun lib!tokens.Mim.impl&%1.is_page_destroy_tokens.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_destroy_tokens_0")
(declare-fun lib!tokens.Mim.impl&%1.get_page_destroy_tokens_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_destroy_tokens_1")
(declare-fun lib!tokens.Mim.impl&%1.get_page_destroy_tokens_1.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_page_destroy_tokens_2")
(declare-fun lib!tokens.Mim.impl&%1.get_page_destroy_tokens_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_block_tokens_distinct")
(declare-fun lib!tokens.Mim.impl&%1.is_block_tokens_distinct.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_block_tokens_distinct_0")
(declare-fun lib!tokens.Mim.impl&%1.get_block_tokens_distinct_0.? (Poly) lib!tokens.BlockId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_block_tokens_distinct_1")
(declare-fun lib!tokens.Mim.impl&%1.get_block_tokens_distinct_1.? (Poly) lib!tokens.BlockId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_block_in_range")
(declare-fun lib!tokens.Mim.impl&%1.is_block_in_range.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_block_in_range_0")
(declare-fun lib!tokens.Mim.impl&%1.get_block_in_range_0.? (Poly) lib!thread.ThreadId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_block_in_range_1")
(declare-fun lib!tokens.Mim.impl&%1.get_block_in_range_1.? (Poly) lib!tokens.BlockId.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::is_dummy_to_use_type_params")
(declare-fun lib!tokens.Mim.impl&%1.is_dummy_to_use_type_params.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Step::get_dummy_to_use_type_params_0")
(declare-fun lib!tokens.Mim.impl&%1.get_dummy_to_use_type_params_0.? (Poly) lib!tokens.Mim.State.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Config::arrow_0")
(declare-fun lib!tokens.Mim.impl&%2.arrow_0.? (Poly) lib!tokens.Mim.State.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Config::arrow_dummy_to_use_type_params_0")
(declare-fun lib!tokens.Mim.impl&%2.arrow_dummy_to_use_type_params_0.? (Poly) lib!tokens.Mim.State.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Config::is_initialize")
(declare-fun lib!tokens.Mim.impl&%3.is_initialize.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Config::is_dummy_to_use_type_params")
(declare-fun lib!tokens.Mim.impl&%3.is_dummy_to_use_type_params.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::Config::get_dummy_to_use_type_params_0")
(declare-fun lib!tokens.Mim.impl&%3.get_dummy_to_use_type_params_0.? (Poly) lib!tokens.Mim.State.)
(set-info :comment ";; Function-Decl lib::tokens::Mim::right_to_set_inst::bool_agree")
(declare-fun lib!tokens.Mim.impl&%4.bool_agree.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::right_to_set_inst::bool_agree_strict")
(declare-fun lib!tokens.Mim.impl&%4.bool_agree_strict.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::my_inst::option_agree")
(declare-fun lib!tokens.Mim.impl&%5.option_agree.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::my_inst::option_agree_strict")
(declare-fun lib!tokens.Mim.impl&%5.option_agree_strict.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::thread_local_state::map_agree")
(declare-fun lib!tokens.Mim.impl&%8.map_agree.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::thread_local_state::map_agree_strict")
(declare-fun lib!tokens.Mim.impl&%8.map_agree_strict.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::right_to_use_thread::set_agree")
(declare-fun lib!tokens.Mim.impl&%9.set_agree.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::right_to_use_thread::set_agree_strict")
(declare-fun lib!tokens.Mim.impl&%9.set_agree_strict.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::block::map_agree")
(declare-fun lib!tokens.Mim.impl&%10.map_agree.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::block::map_agree_strict")
(declare-fun lib!tokens.Mim.impl&%10.map_agree_strict.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::thread_of_segment::map_agree")
(declare-fun lib!tokens.Mim.impl&%11.map_agree.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::thread_of_segment::map_agree_strict")
(declare-fun lib!tokens.Mim.impl&%11.map_agree_strict.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::delay::map_agree")
(declare-fun lib!tokens.Mim.impl&%12.map_agree.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::delay::map_agree_strict")
(declare-fun lib!tokens.Mim.impl&%12.map_agree_strict.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::heap_of_page::map_agree")
(declare-fun lib!tokens.Mim.impl&%13.map_agree.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::heap_of_page::map_agree_strict")
(declare-fun lib!tokens.Mim.impl&%13.map_agree_strict.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::actor::map_agree")
(declare-fun lib!tokens.Mim.impl&%14.map_agree.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::actor::map_agree_strict")
(declare-fun lib!tokens.Mim.impl&%14.map_agree_strict.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::delay_actor::map_agree")
(declare-fun lib!tokens.Mim.impl&%15.map_agree.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::delay_actor::map_agree_strict")
(declare-fun lib!tokens.Mim.impl&%15.map_agree_strict.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::reserved_uniq::set_agree")
(declare-fun lib!tokens.Mim.impl&%16.set_agree.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::reserved_uniq::set_agree_strict")
(declare-fun lib!tokens.Mim.impl&%16.set_agree_strict.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::thread_checked_state::map_agree")
(declare-fun lib!tokens.Mim.impl&%17.map_agree.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::thread_checked_state::map_agree_strict")
(declare-fun lib!tokens.Mim.impl&%17.map_agree_strict.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::initialize_enabled")
(declare-fun lib!tokens.Mim.impl&%21.initialize_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::set_inst_strong")
(declare-fun lib!tokens.Mim.impl&%21.set_inst_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::set_inst_enabled")
(declare-fun lib!tokens.Mim.impl&%21.set_inst_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::actor_make_idle_strong")
(declare-fun lib!tokens.Mim.impl&%21.actor_make_idle_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::actor_make_idle_enabled")
(declare-fun lib!tokens.Mim.impl&%21.actor_make_idle_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::actor_abandon_strong")
(declare-fun lib!tokens.Mim.impl&%21.actor_abandon_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::actor_abandon_enabled")
(declare-fun lib!tokens.Mim.impl&%21.actor_abandon_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::set_use_delayed_free_strong")
(declare-fun lib!tokens.Mim.impl&%21.set_use_delayed_free_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::set_use_delayed_free_enabled")
(declare-fun lib!tokens.Mim.impl&%21.set_use_delayed_free_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::delay_enter_freeing_strong")
(declare-fun lib!tokens.Mim.impl&%21.delay_enter_freeing_strong.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::delay_enter_freeing_enabled")
(declare-fun lib!tokens.Mim.impl&%21.delay_enter_freeing_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::delay_leave_freeing_strong")
(declare-fun lib!tokens.Mim.impl&%21.delay_leave_freeing_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::delay_leave_freeing_enabled")
(declare-fun lib!tokens.Mim.impl&%21.delay_leave_freeing_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::delay_lookup_heap_strong")
(declare-fun lib!tokens.Mim.impl&%21.delay_lookup_heap_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::delay_lookup_heap_enabled")
(declare-fun lib!tokens.Mim.impl&%21.delay_lookup_heap_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::block_set_heap_id_strong")
(declare-fun lib!tokens.Mim.impl&%21.block_set_heap_id_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::block_set_heap_id_enabled")
(declare-fun lib!tokens.Mim.impl&%21.block_set_heap_id_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::reserve_uniq_identifier_strong")
(declare-fun lib!tokens.Mim.impl&%21.reserve_uniq_identifier_strong.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::reserve_uniq_identifier_enabled")
(declare-fun lib!tokens.Mim.impl&%21.reserve_uniq_identifier_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::create_thread_mk_tokens_strong")
(declare-fun lib!tokens.Mim.impl&%21.create_thread_mk_tokens_strong.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::create_thread_mk_tokens_enabled")
(declare-fun lib!tokens.Mim.impl&%21.create_thread_mk_tokens_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::create_segment_mk_tokens_strong")
(declare-fun lib!tokens.Mim.impl&%21.create_segment_mk_tokens_strong.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::create_segment_mk_tokens_enabled")
(declare-fun lib!tokens.Mim.impl&%21.create_segment_mk_tokens_enabled.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::segment_enable_strong")
(declare-fun lib!tokens.Mim.impl&%21.segment_enable_strong.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::segment_enable_enabled")
(declare-fun lib!tokens.Mim.impl&%21.segment_enable_enabled.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::create_page_mk_tokens_strong")
(declare-fun lib!tokens.Mim.impl&%21.create_page_mk_tokens_strong.? (Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::create_page_mk_tokens_enabled")
(declare-fun lib!tokens.Mim.impl&%21.create_page_mk_tokens_enabled.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_enable_strong")
(declare-fun lib!tokens.Mim.impl&%21.page_enable_strong.? (Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_enable_enabled")
(declare-fun lib!tokens.Mim.impl&%21.page_enable_enabled.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_mk_block_tokens_strong")
(declare-fun lib!tokens.Mim.impl&%21.page_mk_block_tokens_strong.? (Poly Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_mk_block_tokens_enabled")
(declare-fun lib!tokens.Mim.impl&%21.page_mk_block_tokens_enabled.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_destroy_block_tokens_strong")
(declare-fun lib!tokens.Mim.impl&%21.page_destroy_block_tokens_strong.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_destroy_block_tokens_enabled")
(declare-fun lib!tokens.Mim.impl&%21.page_destroy_block_tokens_enabled.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_check_delay_state_strong")
(declare-fun lib!tokens.Mim.impl&%21.page_check_delay_state_strong.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_check_delay_state_enabled")
(declare-fun lib!tokens.Mim.impl&%21.page_check_delay_state_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_disable_strong")
(declare-fun lib!tokens.Mim.impl&%21.page_disable_strong.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_disable_enabled")
(declare-fun lib!tokens.Mim.impl&%21.page_disable_enabled.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_destroy_tokens_strong")
(declare-fun lib!tokens.Mim.impl&%21.page_destroy_tokens_strong.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::page_destroy_tokens_enabled")
(declare-fun lib!tokens.Mim.impl&%21.page_destroy_tokens_enabled.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::block_tokens_distinct_strong")
(declare-fun lib!tokens.Mim.impl&%21.block_tokens_distinct_strong.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::block_tokens_distinct_enabled")
(declare-fun lib!tokens.Mim.impl&%21.block_tokens_distinct_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::block_in_range_strong")
(declare-fun lib!tokens.Mim.impl&%21.block_in_range_strong.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::block_in_range_enabled")
(declare-fun lib!tokens.Mim.impl&%21.block_in_range_enabled.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::next_strong_by")
(declare-fun lib!tokens.Mim.impl&%21.next_strong_by.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::next_strong")
(declare-fun lib!tokens.Mim.impl&%21.next_strong.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::invariant")
(declare-fun lib!tokens.Mim.impl&%21.invariant.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::tokens::Mim::State::blocks_has")
(declare-fun lib!tokens.Mim.impl&%21.blocks_has.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Axioms vstd::view::View::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!view.View.view.? Self%&. Self%& self!) (proj%vstd!view.View./V Self%&. Self%&))) :pattern ((vstd!view.View.view.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::array::ArrayAdditionalSpecFns::spec_index")
(declare-fun req%vstd!array.ArrayAdditionalSpecFns.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? Self%&. Self%& self!)))))) :pattern ((req%vstd!array.ArrayAdditionalSpecFns.spec_index. Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::ArrayAdditionalSpecFns::spec_index")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! Self%&) (has_type i! INT)) (has_type (vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!) T&)) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? Self%&. Self%& T&. T& self! i!)))))
(set-info :comment ";; Function-Specs core::clone::Clone::clone")
(declare-fun ens%core!clone.Clone.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (%return! Poly)) (! (= (ens%core!clone.Clone.clone. Self%&. Self%& self! %return!) (has_type %return! Self%&)) :pattern ((ens%core!clone.Clone.clone. Self%&. Self%& self! %return!)))))
(assert (forall ((tmp%%$ Poly) (Self%&. Dcr) (Self%& Type)) (! (=> (has_type tmp%%$ (TYPE%tuple%1. (REF Self%&.) Self%&)) (=> (let ((self$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) true) (closure_req (FNDEF%core!clone.Clone.clone. Self%&. Self%&) $ (TYPE%tuple%1. (REF Self%&.) Self%&) (F fndef_singleton) tmp%%$))) :pattern ((closure_req (FNDEF%core!clone.Clone.clone. Self%&. Self%&) $ (TYPE%tuple%1. (REF Self%&.) Self%&) (F fndef_singleton) tmp%%$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%6::clone")
(declare-fun ens%core!clone.impls.impl&%6.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%6.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 8) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%6.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 8))) (has_type res$ (UINT 8))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 8)) $ (TYPE%tuple%1. (REF $) (UINT 8)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 8)) $ (TYPE%tuple%1. (REF $) (UINT 8)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%7::clone")
(declare-fun ens%core!clone.impls.impl&%7.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%7.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 16) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%7.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 16))) (has_type res$ (UINT 16))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 16)) $ (TYPE%tuple%1. (REF $) (UINT 16)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 16)) $ (TYPE%tuple%1. (REF $) (UINT 16)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%8::clone")
(declare-fun ens%core!clone.impls.impl&%8.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%8.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 32) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%8.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 32))) (has_type res$ (UINT 32))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 32)) $ (TYPE%tuple%1. (REF $) (UINT 32)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 32)) $ (TYPE%tuple%1. (REF $) (UINT 32)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%9::clone")
(declare-fun ens%core!clone.impls.impl&%9.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%9.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 64) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%9.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 64))) (has_type res$ (UINT 64))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 64)) $ (TYPE%tuple%1. (REF $) (UINT 64)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 64)) $ (TYPE%tuple%1. (REF $) (UINT 64)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%15::clone")
(declare-fun ens%core!clone.impls.impl&%15.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%15.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (SINT 64) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%15.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (SINT 64))) (has_type res$ (SINT 64))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (SINT 64)) $ (TYPE%tuple%1. (REF $) (SINT 64)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (SINT 64)) $ (TYPE%tuple%1. (REF $) (SINT 64)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%5::clone")
(declare-fun ens%core!clone.impls.impl&%5.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%5.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT SZ) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%5.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT SZ))) (has_type res$ (UINT SZ))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT SZ)) $ (TYPE%tuple%1. (REF $) (UINT SZ)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT SZ)) $ (TYPE%tuple%1. (REF $) (UINT SZ)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%21::clone")
(declare-fun ens%core!clone.impls.impl&%21.clone. (Poly Poly) Bool)
(assert (forall ((b! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%21.clone. b! res!) (and (ens%core!clone.Clone.clone. $ BOOL b! res!) (= res! b!))) :pattern ((ens%core!clone.impls.impl&%21.clone. b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) BOOL)) (has_type res$ BOOL)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ BOOL) $ (TYPE%tuple%1. (REF $) BOOL) (F fndef_singleton) tmp%%$ res$) (let ((b$ (%B (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%B res$) b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ BOOL) $ (TYPE%tuple%1. (REF $) BOOL) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%3::clone")
(declare-fun ens%core!clone.impls.impl&%3.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%3.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (REF T&.) T& b! res!) (= res! b!))) :pattern ((ens%core!clone.impls.impl&%3.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (REF T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (REF T&.) T&) $ (TYPE%tuple%1. (REF (REF T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (REF T&.) T&) $ (TYPE%tuple%1. (REF (REF T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs builtin::impl&%4::clone")
(declare-fun ens%builtin!impl&%4.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%builtin!impl&%4.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (TRACKED T&.) T& b! res!) (= res! b!))) :pattern ((ens%builtin!impl&%4.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (TRACKED T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (TRACKED T&.) T&) $ (TYPE%tuple%1. (REF (TRACKED T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (TRACKED T&.) T&) $ (TYPE%tuple%1. (REF (TRACKED T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs builtin::impl&%2::clone")
(declare-fun ens%builtin!impl&%2.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%builtin!impl&%2.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (GHOST T&.) T& b! res!) (= res! b!))) :pattern ((ens%builtin!impl&%2.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (GHOST T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (GHOST T&.) T&) $ (TYPE%tuple%1. (REF (GHOST T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (GHOST T&.) T&) $ (TYPE%tuple%1. (REF (GHOST T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_some.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_some.? T&. T& option!) (is-core!option.Option./Some_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_some.? T&. T& option!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_none")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_none.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_none.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_none.? T&. T& option!) (is-core!option.Option./None_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_none.? T&. T& option!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%1 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Specs core::option::impl&%5::clone")
(declare-fun ens%core!option.impl&%5.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (opt! Poly) (res! Poly)) (! (= (ens%core!option.impl&%5.clone. T&. T& opt! res!) (and (ens%core!clone.Clone.clone. $ (TYPE%core!option.Option. T&. T&) opt! res!) (=> (is-core!option.Option./None_ (%Poly%core!option.Option. opt!)) (is-core!option.Option./None_ (%Poly%core!option.Option. res!))) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. opt!)) (and (is-core!option.Option./Some_ (%Poly%core!option.Option. res!)) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 (core!option.Option./Some/0 (%Poly%core!option.Option. opt!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. res!))))))) :pattern ((ens%core!option.impl&%5.clone. T&. T& opt! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (TYPE%core!option.Option. T&. T&))) (has_type res$ (TYPE%core!option.Option. T&. T&))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%core!option.Option. T&. T&)) $ (TYPE%tuple%1. (REF $) (TYPE%core!option.Option. T&. T&)) (F fndef_singleton) tmp%%$ res$) (let ((opt$ (%Poly%core!option.Option. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (and (=> (is-core!option.Option./None_ opt$) (is-core!option.Option./None_ (%Poly%core!option.Option. res$))) (=> (is-core!option.Option./Some_ opt$) (and (is-core!option.Option./Some_ (%Poly%core!option.Option. res$)) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. opt$))))) (core!option.Option./Some/0 (%Poly%core!option.Option. res$))))))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%core!option.Option. T&. T&)) $ (TYPE%tuple%1. (REF $) (TYPE%core!option.Option. T&. T&)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs alloc::boxed::impl&%12::clone")
(declare-fun ens%alloc!boxed.impl&%12.clone. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type) (b! Poly) (res! Poly)) (! (= (ens%alloc!boxed.impl&%12.clone. T&. T& A&. A& b! res!) (and (ens%core!clone.Clone.clone. (BOX A&. A& T&.) T& b! res!) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 b!)) res!))) :pattern ((ens%alloc!boxed.impl&%12.clone. T&. T& A&. A& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (BOX A&. A& T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (BOX A&. A& T&.) T&) $ (TYPE%tuple%1. (REF (BOX A&. A& T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (closure_ens (FNDEF%core!clone.Clone.clone. T&. T&) $ (TYPE%tuple%1. (REF T&.) T&) (F fndef_singleton) (Poly%tuple%1. (tuple%1./tuple%1 b$)) res$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (BOX A&. A& T&.) T&) $ (TYPE%tuple%1. (REF (BOX A&. A& T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::ptr_mut_specs::spec_addr")
(assert (fuel_bool_default fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptr_mut_specs.spec_addr.) (forall ((T&. Dcr) (T& Type) (p! Poly)) (! (= (vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR T&. T&) p!)))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!))))))
(assert (forall ((T&. Dcr) (T& Type) (p! Poly)) (! (=> (has_type p! (PTR T&. T&)) (uInv SZ (vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!))) :pattern ((vstd!raw_ptr.ptr_mut_specs.spec_addr.? T&. T& p!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Axioms vstd::array::array_view")
(assert (fuel_bool_default fuel%vstd!array.array_view.))
(declare-fun %%lambda%%0 (Dcr Type Dcr Type %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 %%Function%%) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (array_index %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%vstd!array.array_view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (= (vstd!array.array_view.? T&. T& N&. N& a!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (const_int N&)) (Poly%fun%1. (mk_fun (%%lambda%%0 T&. T& N&. N& (%Poly%array%. a!)))))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly)) (! (=> (has_type a! (ARRAY T&. T& N&. N&)) (has_type (vstd!array.array_view.? T&. T& N&. N& a!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((vstd!array.array_view.? T&. T& N&. N& a!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!array.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%0.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) (vstd!array.array_view.? T&. T& N&. N& self!))) :pattern ((vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!))))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::array::impl&%2::spec_index")
(assert (fuel_bool_default fuel%vstd!array.impl&%2.spec_index.))
(assert (=> (fuel_bool fuel%vstd!array.impl&%2.spec_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (uInv SZ (const_int N&)) (= (vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!) (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) self!) i!))) :pattern ((vstd!array.ArrayAdditionalSpecFns.spec_index.? $ (ARRAY T&. T& N&. N&) T&. T& self! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Broadcast vstd::array::lemma_array_index")
(assert (=> (fuel_bool fuel%vstd!array.lemma_array_index.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (a! Poly) (i! Poly)) (! (=> (and (has_type a! (ARRAY T&. T& N&. N&)) (has_type i! INT)) (=> (and (uInv SZ (const_int N&)) (and (<= 0 (%I i!)) (< (%I i!) (const_int N&)))) (= (vstd!seq.Seq.index.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) a!) i!) (vstd!seq.Seq.index.? T&. T& (vstd!array.array_view.? T&. T& N&. N& a!) i!)))) :pattern ((array_index T&. T& N&. N& (%Poly%array%. a!) i!))))))
(set-info :comment ";; Broadcast vstd::array::array_len_matches_n")
(assert (=> (fuel_bool fuel%vstd!array.array_len_matches_n.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (ar! Poly)) (! (=> (has_type ar! (ARRAY T&. T& N&. N&)) (=> (uInv SZ (const_int N&)) (= (vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)) (const_int N&)))) :pattern ((vstd!seq.Seq.len.? T&. T& (vstd!view.View.view.? $ (ARRAY T&. T& N&. N&) ar!)))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::subset_of")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::remove_keys")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.remove_keys.))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (not (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$))))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%2 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.remove_keys.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%2 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!)))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::union_prefer_right")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%3 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%4 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%3 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%4 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%6::ptr")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%6.ptr.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%6.ptr.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%6.ptr.? T&. T& self!) (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!)))) :pattern ((vstd!raw_ptr.impl&%6.ptr.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (has_type (vstd!raw_ptr.impl&%6.ptr.? T&. T& self!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.impl&%6.ptr.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%6::opt_value")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%6.opt_value.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%6.opt_value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%6.opt_value.? T&. T& self!) (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!)))) :pattern ((vstd!raw_ptr.impl&%6.opt_value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (has_type (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.impl&%6.opt_value.? T&. T& self!)) (TYPE%vstd!raw_ptr.MemContents. T&. T&))) :pattern ((vstd!raw_ptr.impl&%6.opt_value.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::view_reverse_for_eq")
(assert (forall ((T&. Dcr) (T& Type) (data! Poly)) (! (=> (has_type data! TYPE%vstd!raw_ptr.PtrData.) (has_type (vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!) (PTR T&. T&))) :pattern ((vstd!raw_ptr.view_reverse_for_eq.? T&. T& data!)))))
(set-info :comment ";; Broadcast vstd::raw_ptr::ptrs_mut_eq")
(assert (=> (fuel_bool fuel%vstd!raw_ptr.ptrs_mut_eq.) (forall ((T&. Dcr) (T& Type) (a! Poly)) (! (=> (has_type a! (PTR T&. T&)) (= (vstd!raw_ptr.view_reverse_for_eq.? T&. T& (vstd!view.View.view.? $ (PTR T&. T&) a!)) a!)) :pattern ((vstd!view.View.view.? $ (PTR T&. T&) a!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::is_init")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.is_init.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.is_init.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.is_init.? T&. T& self!) (is-vstd!raw_ptr.MemContents./Init_ (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.is_init.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%6::is_init")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%6.is_init.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%6.is_init.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%6.is_init.? T&. T& self!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!))))) :pattern ((vstd!raw_ptr.impl&%6.is_init.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%2::arrow_0")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%2.arrow_0.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%2.arrow_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%2.arrow_0.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%7::value")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%7.value.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%7.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%7.value.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. self!))) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.MemContents. T&. T&)) (has_type (vstd!raw_ptr.impl&%7.value.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%7.value.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%6::value")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%6.value.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%6.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!raw_ptr.impl&%6.value.? T&. T& self!) (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&) self!))))))) :pattern ((vstd!raw_ptr.impl&%6.value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) (has_type (vstd!raw_ptr.impl&%6.value.? T&. T& self!) T&)) :pattern ((vstd!raw_ptr.impl&%6.value.? T&. T& self!)))))
(set-info :comment ";; Function-Specs vstd::raw_ptr::impl&%8::clone")
(declare-fun ens%vstd!raw_ptr.impl&%8.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (s! Poly)) (! (= (ens%vstd!raw_ptr.impl&%8.clone. self! s!) (and (ens%core!clone.Clone.clone. $ TYPE%vstd!raw_ptr.IsExposed. self! s!) (= s! self!))) :pattern ((ens%vstd!raw_ptr.impl&%8.clone. self! s!)))))
(assert (forall ((tmp%%$ Poly) (s$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%vstd!raw_ptr.IsExposed.)) (has_type s$ TYPE%vstd!raw_ptr.IsExposed.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%vstd!raw_ptr.IsExposed.) $ (TYPE%tuple%1. (REF $) TYPE%vstd!raw_ptr.IsExposed.) (F fndef_singleton) tmp%%$ s$) (let ((self$ (%Poly%vstd!raw_ptr.IsExposed. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%vstd!raw_ptr.IsExposed. s$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%vstd!raw_ptr.IsExposed.) $ (TYPE%tuple%1. (REF $) TYPE%vstd!raw_ptr.IsExposed.) (F fndef_singleton) tmp%%$ s$)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (vstd!set.impl&%0.union.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.spec_add.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.spec_add.? A&. A& self! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_complement.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_union_finite.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)))) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_choose_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_len.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_contains_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_choose_len.) (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))))))
(set-info :comment ";; Function-Specs vstd::set_lib::lemma_set_empty_equivalency_len")
(declare-fun req%vstd!set_lib.lemma_set_empty_equivalency_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set_lib.lemma_set_empty_equivalency_len. A&. A& s!) (=> %%global_location_label%%6 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set_lib.lemma_set_empty_equivalency_len. A&. A& s!)))))
(declare-fun ens%vstd!set_lib.lemma_set_empty_equivalency_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set_lib.lemma_set_empty_equivalency_len. A&. A& s!) (and (= (= (vstd!set.impl&%0.len.? A&. A& s!) 0) (= s! (vstd!set.impl&%0.empty.? A&. A&))) (=> (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)) (exists ((x$ Poly)) (! (and (has_type x$ A&) (vstd!set.impl&%0.contains.? A&. A& s! x$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! x$))))))) :pattern ((ens%vstd!set_lib.lemma_set_empty_equivalency_len. A&. A& s!)))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_safety")
(declare-fun req%vstd!state_machine_internal.assert_safety. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_safety. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_safety. b!)))))
(declare-fun ens%vstd!state_machine_internal.assert_safety. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_safety. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_safety. b!)))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_add_set")
(declare-fun req%vstd!state_machine_internal.assert_add_set. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_add_set. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_add_set. b!)))))
(declare-fun ens%vstd!state_machine_internal.assert_add_set. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_add_set. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_add_set. b!)))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_add_map")
(declare-fun req%vstd!state_machine_internal.assert_add_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_add_map. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_add_map. b!)))))
(declare-fun ens%vstd!state_machine_internal.assert_add_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_add_map. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_add_map. b!)))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_add_persistent_option")
(declare-fun req%vstd!state_machine_internal.assert_add_persistent_option. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_add_persistent_option. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_add_persistent_option. b!)))))
(declare-fun ens%vstd!state_machine_internal.assert_add_persistent_option. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_add_persistent_option. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_add_persistent_option. b!)))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_deposit_map")
(declare-fun req%vstd!state_machine_internal.assert_deposit_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_deposit_map. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_deposit_map. b!)))))
(declare-fun ens%vstd!state_machine_internal.assert_deposit_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_deposit_map. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_deposit_map. b!)))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_guard_map")
(declare-fun req%vstd!state_machine_internal.assert_guard_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_guard_map. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_guard_map. b!)))))
(declare-fun ens%vstd!state_machine_internal.assert_guard_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_guard_map. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_guard_map. b!)))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_general_add_map")
(declare-fun req%vstd!state_machine_internal.assert_general_add_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_general_add_map. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_general_add_map. b!)))))
(declare-fun ens%vstd!state_machine_internal.assert_general_add_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_general_add_map. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_general_add_map. b!)))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_general_withdraw_map")
(declare-fun req%vstd!state_machine_internal.assert_general_withdraw_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_general_withdraw_map. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_general_withdraw_map. b!)))))
(declare-fun ens%vstd!state_machine_internal.assert_general_withdraw_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_general_withdraw_map. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_general_withdraw_map. b!)))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_general_deposit_map")
(declare-fun req%vstd!state_machine_internal.assert_general_deposit_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_general_deposit_map. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_general_deposit_map. b!)))))
(declare-fun ens%vstd!state_machine_internal.assert_general_deposit_map. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_general_deposit_map. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_general_deposit_map. b!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::set_inst")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.set_inst.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.set_inst.) (forall ((pre! Poly) (post! Poly) (inst! Poly)) (! (= (lib!tokens.Mim.impl&%21.set_inst.? pre! post! inst!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and update_tmp_right_to_set_inst$ (let ((update_tmp_right_to_set_inst$1 false)) (let ((tmp_assert$1 (and tmp_assert$ (=> (is-core!option.Option./Some_ update_tmp_my_inst$) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_my_inst$))) inst!))))) (let ((update_tmp_my_inst$1 (core!option.Option./Some inst!))) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$1)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$1)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$))))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.set_inst.? pre! post! inst!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::actor_make_idle")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.actor_make_idle.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.actor_make_idle.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.actor_make_idle.? pre! post! thread_id!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$)) thread_id!) (and (let ((actor$ (%Poly%lib!tokens.Actor. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$) thread_id!)))) (let ((update_tmp_actor$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$) thread_id!)))) (and (=> tmp_assert$ (not (= actor$ lib!tokens.Actor./Abandoned))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$1)) thread_id!))))) (let ((update_tmp_actor$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$1) thread_id! (Poly%lib!tokens.Actor. lib!tokens.Actor./Idle))))) (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$2))))))) (let ((tmp_assert$2 (let ((actor$ (%Poly%lib!tokens.Actor. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$) thread_id!)))) (let ((update_tmp_actor$3 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$) thread_id!)))) (let ((tmp_assert$3 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$3)) thread_id!))))) (let ((update_tmp_actor$4 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$3) thread_id! (Poly%lib!tokens.Actor. lib!tokens.Actor./Idle))))) tmp_assert$3)))))) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.actor_make_idle.? pre! post! thread_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::actor_abandon")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.actor_abandon.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.actor_abandon.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.actor_abandon.? pre! post! thread_id!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$)) thread_id!) (let ((update_tmp_actor$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$) thread_id!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$1)) thread_id!))))) (let ((update_tmp_actor$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$1) thread_id! (Poly%lib!tokens.Actor. lib!tokens.Actor./Abandoned))))) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$2)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.actor_abandon.? pre! post! thread_id!))))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_pair")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_pair.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_pair.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k!) v!))) :pattern ((vstd!map_lib.impl&%0.contains_pair.? K&. K& V&. V& self! k! v!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::set_use_delayed_free")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.set_use_delayed_free.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.set_use_delayed_free.) (forall ((pre! Poly) (post! Poly) (page_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.set_use_delayed_free.? pre! post! page_id!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!map_lib.impl&%0.contains_pair.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./NoDelayedFree)) (let ((update_tmp_delay$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$1)) page_id!))))) (let ((update_tmp_delay$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$1) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./UseDelayedFree))))) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$2)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.set_use_delayed_free.? pre! post! page_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::delay_enter_freeing")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.delay_enter_freeing.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.delay_enter_freeing.) (forall ((pre! Poly) (post! Poly) (page_id! Poly) (block_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.delay_enter_freeing.? pre! post! page_id! block_id!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!map_lib.impl&%0.contains_pair.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./UseDelayedFree)) (let ((update_tmp_delay$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$1)) page_id!))))) (let ((update_tmp_delay$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$1) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./Freeing))))) (and (=> tmp_assert$1 (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)) (%Poly%lib!tokens.PageId. page_id!))) (and (=> tmp_assert$1 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id!)) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$)) page_id!))))) (let ((update_tmp_delay_actor$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) page_id! (Poly%lib!tokens.DelayFreeingActor. lib!tokens.DelayFreeingActor./HeapUnknown))))) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$1)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$2)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.delay_enter_freeing.? pre! post! page_id! block_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::delay_leave_freeing")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.delay_leave_freeing.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.delay_leave_freeing.) (forall ((pre! Poly) (post! Poly) (page_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.delay_leave_freeing.? pre! post! page_id!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$)) page_id!) (and (let ((prev_state$ (%Poly%lib!tokens.DelayState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (let ((update_tmp_delay$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$1)) page_id!))))) (let ((update_tmp_delay$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$1) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./NoDelayedFree))))) (and (=> tmp_assert$1 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$)) page_id!)) (let ((update_tmp_delay_actor$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) page_id!)))) (let ((tmp_assert$2 (and tmp_assert$1 (= prev_state$ lib!tokens.DelayState./Freeing)))) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$1)) (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$2)))))))))) (let ((tmp_assert$3 (let ((prev_state$ (%Poly%lib!tokens.DelayState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (let ((update_tmp_delay$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (let ((tmp_assert$4 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$3)) page_id!))))) (let ((update_tmp_delay$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$3) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./NoDelayedFree))))) (let ((update_tmp_delay_actor$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) page_id!)))) (let ((tmp_assert$5 (and tmp_assert$4 (= prev_state$ lib!tokens.DelayState./Freeing)))) tmp_assert$5)))))))) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.delay_leave_freeing.? pre! post! page_id!))))))
(set-info :comment ";; Function-Axioms lib::layout::is_heap_ptr")
(assert (fuel_bool_default fuel%lib!layout.is_heap_ptr.))
(assert (=> (fuel_bool fuel%lib!layout.is_heap_ptr.) (forall ((ptr! Poly) (heap_id! Poly)) (! (= (lib!layout.is_heap_ptr.? ptr! heap_id!) (and (and (= (lib!tokens.HeapId./HeapId/id (%Poly%lib!tokens.HeapId. heap_id!)) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Heap.) ptr!)))) (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Heap.) ptr!))) (lib!tokens.HeapId./HeapId/provenance (%Poly%lib!tokens.HeapId. heap_id!)))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Heap.) ptr!))) vstd!raw_ptr.Metadata./Thin))) :pattern ((lib!layout.is_heap_ptr.? ptr! heap_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::block::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.block.) (has_type (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? self!)) TYPE%lib!tokens.Mim.block_token_data.)) :pattern ((lib!tokens.Mim.impl&%10.view.? self!)))))
(set-info :comment ";; Function-Axioms lib::config::SLICE_SIZE")
(assert (fuel_bool_default fuel%lib!config.SLICE_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.SLICE_SIZE.) (= lib!config.SLICE_SIZE.? 65536)))
(assert (uInv 64 lib!config.SLICE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::layout::is_tld_ptr")
(assert (fuel_bool_default fuel%lib!layout.is_tld_ptr.))
(assert (=> (fuel_bool fuel%lib!layout.is_tld_ptr.) (forall ((ptr! Poly) (tld_id! Poly)) (! (= (lib!layout.is_tld_ptr.? ptr! tld_id!) (and (and (= (lib!tokens.TldId./TldId/id (%Poly%lib!tokens.TldId. tld_id!)) (vstd!raw_ptr.PtrData./PtrData/addr (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Tld.) ptr!)))) (= (vstd!raw_ptr.PtrData./PtrData/provenance (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Tld.) ptr!))) (lib!tokens.TldId./TldId/provenance (%Poly%lib!tokens.TldId. tld_id!)))) (= (vstd!raw_ptr.PtrData./PtrData/metadata (%Poly%vstd!raw_ptr.PtrData. (vstd!view.View.view.? $ (PTR $ TYPE%lib!types.Tld.) ptr!))) vstd!raw_ptr.Metadata./Thin))) :pattern ((lib!layout.is_tld_ptr.? ptr! tld_id!))))))
(set-info :comment ";; Function-Axioms lib::types::TldPtr::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%27.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%27.wf.) (forall ((self! Poly)) (! (= (lib!types.impl&%27.wf.? self!) (lib!layout.is_tld_ptr.? (Poly%ptr_mut%<lib!types.Tld.>. (lib!types.TldPtr./TldPtr/tld_ptr (%Poly%lib!types.TldPtr. self!))) (Poly%lib!tokens.TldId. (lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. self!))))) :pattern ((lib!types.impl&%27.wf.? self!))))))
(set-info :comment ";; Function-Axioms lib::types::Heap::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%16.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%16.wf.) (forall ((self! Poly) (heap_id! Poly) (tld_id! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%16.wf.? self! heap_id! tld_id! mim_instance!) (and (and (and (and (lib!linked_list.impl&%4.wf.? (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free (%Poly%lib!types.Heap. self!)))) (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/instance (%Poly%lib!linked_list.ThreadLLSimple. (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free (%Poly%lib!types.Heap. self!))))) (%Poly%lib!tokens.Mim.Instance. mim_instance!))) (= (lib!linked_list.ThreadLLSimple./ThreadLLSimple/heap_id (%Poly%lib!linked_list.ThreadLLSimple. (Poly%lib!linked_list.ThreadLLSimple. (lib!types.Heap./Heap/thread_delayed_free (%Poly%lib!types.Heap. self!))))) (%Poly%lib!tokens.HeapId. heap_id!))) (lib!layout.is_tld_ptr.? (Poly%ptr_mut%<lib!types.Tld.>. (lib!types.TldPtr./TldPtr/tld_ptr (%Poly%lib!types.TldPtr. (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. self!)))))) (Poly%lib!tokens.TldId. (lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. self!)))))))) (= (lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. self!))))) (%Poly%lib!tokens.TldId. tld_id!)))) :pattern ((lib!types.impl&%16.wf.? self! heap_id! tld_id! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::types::HeapSharedAccess::wf")
(assert (fuel_bool_default fuel%lib!types.impl&%17.wf.))
(assert (=> (fuel_bool fuel%lib!types.impl&%17.wf.) (forall ((self! Poly) (heap_id! Poly) (tld_id! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%17.wf.? self! heap_id! tld_id! mim_instance!) (and (and (lib!layout.is_heap_ptr.? (vstd!raw_ptr.PointsToData./PointsToData/ptr (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to (%Poly%lib!types.HeapSharedAccess. self!)))))) heap_id!) (is-vstd!raw_ptr.MemContents./Init_ (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to (%Poly%lib!types.HeapSharedAccess. self!)))))))) (lib!types.impl&%16.wf.? (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to (%Poly%lib!types.HeapSharedAccess. self!))))))))) heap_id! tld_id! mim_instance!))) :pattern ((lib!types.impl&%17.wf.? self! heap_id! tld_id! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::types::HeapSharedAccess::wf2")
(assert (fuel_bool_default fuel%lib!types.impl&%17.wf2.))
(assert (=> (fuel_bool fuel%lib!types.impl&%17.wf2.) (forall ((self! Poly) (heap_id! Poly) (mim_instance! Poly)) (! (= (lib!types.impl&%17.wf2.? self! heap_id! mim_instance!) (lib!types.impl&%17.wf.? self! heap_id! (Poly%lib!tokens.TldId. (lib!types.TldPtr./TldPtr/tld_id (%Poly%lib!types.TldPtr. (Poly%lib!types.TldPtr. (lib!types.Heap./Heap/tld_ptr (%Poly%lib!types.Heap. (vstd!raw_ptr.MemContents./Init/0 (%Poly%vstd!raw_ptr.MemContents. (Poly%vstd!raw_ptr.MemContents. (vstd!raw_ptr.PointsToData./PointsToData/opt_value (%Poly%vstd!raw_ptr.PointsToData. (vstd!view.View.view.? $ (TYPE%vstd!raw_ptr.PointsTo. $ TYPE%lib!types.Heap.) (Poly%vstd!raw_ptr.PointsTo<lib!types.Heap.>. (lib!types.HeapSharedAccess./HeapSharedAccess/points_to (%Poly%lib!types.HeapSharedAccess. self!))))))))))))))) mim_instance!)) :pattern ((lib!types.impl&%17.wf2.? self! heap_id! mim_instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::delay_lookup_heap")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.delay_lookup_heap.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.delay_lookup_heap.) (forall ((pre! Poly) (post! Poly) (block_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.delay_lookup_heap.? pre! post! block_id!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$)) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))) (and (let ((heap_id$ (%Poly%lib!tokens.HeapId. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id!)) (let ((block_state$ (%Poly%lib!tokens.BlockState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) block_id!)))) (and (=> tmp_assert$ (is-core!option.Option./Some_ update_tmp_my_inst$)) (let ((inst$ (%Poly%lib!tokens.Mim.Instance. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_my_inst$)))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$)) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))) (let ((update_tmp_delay_actor$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (let ((hsa$ (%Poly%lib!types.HeapSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!))) (Poly%lib!tokens.HeapId. heap_id$))))) (let ((psa$ (lib!tokens.BlockState./BlockState/page_shared_access (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. block_state$))))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$1)) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))))))) (let ((update_tmp_delay_actor$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$1) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))) (Poly%lib!tokens.DelayFreeingActor. (lib!tokens.DelayFreeingActor./Heap (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. heap_id$)) (%Poly%lib!types.HeapSharedAccess. (Poly%lib!types.HeapSharedAccess. hsa$)) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. psa$)))))))) (let ((tmp_assert$2 (and tmp_assert$1 (lib!types.impl&%17.wf2.? (Poly%lib!types.HeapSharedAccess. hsa$) (Poly%lib!tokens.HeapId. heap_id$) (Poly%lib!tokens.Mim.Instance. inst$))))) (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$2)))))))))))))) (let ((tmp_assert$3 (let ((heap_id$ (%Poly%lib!tokens.HeapId. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (let ((tmp_assert$4 (let ((block_state$ (%Poly%lib!tokens.BlockState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) block_id!)))) (let ((tmp_assert$5 (let ((inst$ (%Poly%lib!tokens.Mim.Instance. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_my_inst$)))))) (let ((update_tmp_delay_actor$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (let ((tmp_assert$6 (let ((hsa$ (%Poly%lib!types.HeapSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!))) (Poly%lib!tokens.HeapId. heap_id$))))) (let ((tmp_assert$7 (let ((psa$ (lib!tokens.BlockState./BlockState/page_shared_access (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. block_state$))))) (let ((tmp_assert$8 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$3)) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))))))) (let ((update_tmp_delay_actor$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$3) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))) (Poly%lib!tokens.DelayFreeingActor. (lib!tokens.DelayFreeingActor./Heap (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. heap_id$)) (%Poly%lib!types.HeapSharedAccess. (Poly%lib!types.HeapSharedAccess. hsa$)) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. psa$)))))))) (let ((tmp_assert$9 (and tmp_assert$8 (lib!types.impl&%17.wf2.? (Poly%lib!types.HeapSharedAccess. hsa$) (Poly%lib!tokens.HeapId. heap_id$) (Poly%lib!tokens.Mim.Instance. inst$))))) tmp_assert$9)))))) tmp_assert$7)))) tmp_assert$6))))) tmp_assert$5)))) tmp_assert$4)))) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.delay_lookup_heap.? pre! post! block_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::block_set_heap_id")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.block_set_heap_id.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.block_set_heap_id.) (forall ((pre! Poly) (post! Poly) (block_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.block_set_heap_id.? pre! post! block_id!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$)) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))) (let ((tmp%%$ (%Poly%lib!tokens.DelayFreeingActor. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (and (is-lib!tokens.DelayFreeingActor./Heap_ tmp%%$) (let ((heap_id$ (lib!tokens.DelayFreeingActor./Heap/0 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$))))) (let ((_hsa$ (lib!tokens.DelayFreeingActor./Heap/1 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$))))) (let ((_psa$ (lib!tokens.DelayFreeingActor./Heap/2 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$))))) true)))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!tokens.DelayFreeingActor. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (ite (is-lib!tokens.DelayFreeingActor./Heap_ tmp%%$2) (let ((heap_id$ (lib!tokens.DelayFreeingActor./Heap/0 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$2))))) (let ((_hsa$ (lib!tokens.DelayFreeingActor./Heap/1 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$2))))) (let ((_psa$ (lib!tokens.DelayFreeingActor./Heap/2 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$2))))) (tuple%3./tuple%3 (Poly%lib!tokens.HeapId. heap_id$) (Poly%lib!types.HeapSharedAccess. _hsa$) (Poly%lib!types.PageSharedAccess. _psa$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. $ TYPE%lib!types.PageSharedAccess.))))))) (let ((heap_id$ (%Poly%lib!tokens.HeapId. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((_hsa$ (%Poly%lib!types.HeapSharedAccess. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((_psa$ (%Poly%lib!types.PageSharedAccess. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id!)) (let ((block_state$ (%Poly%lib!tokens.BlockState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) block_id!)))) (let ((update_tmp_block$1 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) block_id!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$1)) block_id!))))) (let ((update_tmp_block$2 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$1) block_id! (Poly%lib!tokens.BlockState. (lib!tokens.BlockState./BlockState (%Poly%lib!types.SegmentSharedAccess. (Poly%lib!types.SegmentSharedAccess. (lib!tokens.BlockState./BlockState/segment_shared_access (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. block_state$))))) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.BlockState./BlockState/page_shared_access (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. block_state$))))) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.BlockState./BlockState/page_slice_shared_access (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. block_state$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.HeapId. heap_id$)))))))))) (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$2))))))))))) (let ((tmp_assert$2 (let ((tmp%%$ (let ((tmp%%$4 (%Poly%lib!tokens.DelayFreeingActor. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (ite (is-lib!tokens.DelayFreeingActor./Heap_ tmp%%$4) (let ((heap_id$ (lib!tokens.DelayFreeingActor./Heap/0 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$4))))) (let ((_hsa$ (lib!tokens.DelayFreeingActor./Heap/1 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$4))))) (let ((_psa$ (lib!tokens.DelayFreeingActor./Heap/2 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$4))))) (tuple%3./tuple%3 (Poly%lib!tokens.HeapId. heap_id$) (Poly%lib!types.HeapSharedAccess. _hsa$) (Poly%lib!types.PageSharedAccess. _psa$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. $ TYPE%lib!types.PageSharedAccess.))))))) (let ((heap_id$ (%Poly%lib!tokens.HeapId. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((_hsa$ (%Poly%lib!types.HeapSharedAccess. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((_psa$ (%Poly%lib!types.PageSharedAccess. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((tmp_assert$3 (let ((block_state$ (%Poly%lib!tokens.BlockState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) block_id!)))) (let ((update_tmp_block$3 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) block_id!)))) (let ((tmp_assert$4 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$3)) block_id!))))) (let ((update_tmp_block$4 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$3) block_id! (Poly%lib!tokens.BlockState. (lib!tokens.BlockState./BlockState (%Poly%lib!types.SegmentSharedAccess. (Poly%lib!types.SegmentSharedAccess. (lib!tokens.BlockState./BlockState/segment_shared_access (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. block_state$))))) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.BlockState./BlockState/page_shared_access (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. block_state$))))) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.BlockState./BlockState/page_slice_shared_access (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. block_state$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.HeapId. heap_id$)))))))))) tmp_assert$4)))))) tmp_assert$3))))))) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.block_set_heap_id.? pre! post! block_id!))))))
(set-info :comment ";; Function-Axioms vstd::math::max")
(assert (fuel_bool_default fuel%vstd!math.max.))
(assert (=> (fuel_bool fuel%vstd!math.max.) (forall ((x! Poly) (y! Poly)) (! (= (vstd!math.max.? x! y!) (%I (ite (>= (%I x!) (%I y!)) x! y!))) :pattern ((vstd!math.max.? x! y!))))))
(set-info :comment ";; Function-Specs lib::tokens::heap_u_max")
(declare-fun req%lib!tokens.heap_u_max. (Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((s! Poly)) (! (= (req%lib!tokens.heap_u_max. s!) (=> %%global_location_label%%7 (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.HeapId. s!))) :pattern ((req%lib!tokens.heap_u_max. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::heap_u_max")
(assert (fuel_bool_default fuel%lib!tokens.heap_u_max.))
(declare-const fuel_nat%lib!tokens.heap_u_max. Fuel)
(assert (forall ((s! Poly) (fuel% Fuel)) (! (= (lib!tokens.rec%heap_u_max.? s! fuel%) (lib!tokens.rec%heap_u_max.? s! zero)) :pattern ((lib!tokens.rec%heap_u_max.? s! fuel%)))))
(assert (forall ((s! Poly) (fuel% Fuel)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. $ TYPE%lib!tokens.HeapId.)) (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.HeapId. s!)) (= (lib!tokens.rec%heap_u_max.? s! (succ fuel%)) (ite (= (vstd!set.impl&%0.len.? $ TYPE%lib!tokens.HeapId. s!) 0) 0 (let ((x$ (%Poly%lib!tokens.HeapId. (vstd!set.impl&%0.choose.? $ TYPE%lib!tokens.HeapId. s!)))) (vstd!math.max.? (I (lib!tokens.rec%heap_u_max.? (vstd!set.impl&%0.remove.? $ TYPE%lib!tokens.HeapId. s! (Poly%lib!tokens.HeapId. x$)) fuel%)) (I (lib!tokens.HeapId./HeapId/uniq (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. x$))))))))) :pattern ((lib!tokens.rec%heap_u_max.? s! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!tokens.heap_u_max.) (forall ((s! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. $ TYPE%lib!tokens.HeapId.)) (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.HeapId. s!)) (= (lib!tokens.heap_u_max.? s!) (lib!tokens.rec%heap_u_max.? s! (succ fuel_nat%lib!tokens.heap_u_max.)))) :pattern ((lib!tokens.heap_u_max.? s!))))))
(set-info :comment ";; Function-Axioms lib::tokens::heap_get_unused_uniq_field")
(assert (fuel_bool_default fuel%lib!tokens.heap_get_unused_uniq_field.))
(assert (=> (fuel_bool fuel%lib!tokens.heap_get_unused_uniq_field.) (forall ((s! Poly)) (! (= (lib!tokens.heap_get_unused_uniq_field.? s!) (Add (lib!tokens.heap_u_max.? s!) 1)) :pattern ((lib!tokens.heap_get_unused_uniq_field.? s!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::reserve_uniq_identifier")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.reserve_uniq_identifier.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.reserve_uniq_identifier.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!tokens.Mim.impl&%21.reserve_uniq_identifier.? pre! post!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (let ((u$ (lib!tokens.heap_get_unused_uniq_field.? (vstd!set.impl&%0.union.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (Poly%vstd!set.Set<lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!))))))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. update_tmp_reserved_uniq$) (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%I (I u$))))))))) (let ((update_tmp_reserved_uniq$1 (%Poly%vstd!set.Set<lib!tokens.HeapId.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. update_tmp_reserved_uniq$) (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%I (I u$)))))))) (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$1))))) (let ((tmp_assert$2 (let ((u$ (lib!tokens.heap_get_unused_uniq_field.? (vstd!set.impl&%0.union.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (Poly%vstd!set.Set<lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!))))))) (let ((tmp_assert$3 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. update_tmp_reserved_uniq$) (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%I (I u$))))))))) (let ((update_tmp_reserved_uniq$2 (%Poly%vstd!set.Set<lib!tokens.HeapId.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. update_tmp_reserved_uniq$) (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%I (I u$)))))))) tmp_assert$3))))) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.reserve_uniq_identifier.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::create_thread_mk_tokens")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.create_thread_mk_tokens.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.create_thread_mk_tokens.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (thread_state! Poly)) (! (= (lib!tokens.Mim.impl&%21.create_thread_mk_tokens.? pre! post! thread_id! thread_state!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (Poly%vstd!set.Set<lib!thread.ThreadId.>. update_tmp_right_to_use_thread$) thread_id!) (let ((update_tmp_right_to_use_thread$1 (%Poly%vstd!set.Set<lib!thread.ThreadId.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. (Poly%vstd!set.Set<lib!thread.ThreadId.>. update_tmp_right_to_use_thread$) thread_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. update_tmp_reserved_uniq$) (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%I (I (lib!tokens.HeapId./HeapId/uniq (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!)))))))))) (let ((update_tmp_reserved_uniq$1 (%Poly%vstd!set.Set<lib!tokens.HeapId.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. update_tmp_reserved_uniq$) (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%I (I (lib!tokens.HeapId./HeapId/uniq (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!))))))))))))) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. thread_state!)))) (vstd!set.impl&%0.empty.? $ TYPE%lib!tokens.PageId.)) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. thread_state!)))) (vstd!set.impl&%0.empty.? $ TYPE%lib!tokens.SegmentId.)) (and (is-core!option.Option./Some_ update_tmp_my_inst$) (and (let ((inst$ (%Poly%lib!tokens.Mim.Instance. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_my_inst$)))))) (and (=> tmp_assert$ (lib!types.impl&%17.wf2.? (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. thread_state!)))))) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!))) (Poly%lib!tokens.Mim.Instance. inst$))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. update_tmp_heap_shared_access$)) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!)))))))) (let ((update_tmp_heap_shared_access$1 (%Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. update_tmp_heap_shared_access$) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!))) (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. thread_state!)))))))))) (let ((update_tmp_heap_to_thread$ (%Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!))) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!))) thread_id!)))) (and (let ((real_thread_state$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!)))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. thread_state!)))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. thread_state!)))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. thread_state!))))))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!))))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id! (Poly%lib!tokens.ThreadState. real_thread_state$))))) (let ((tmp_assert$3 (and tmp_assert$2 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$)) thread_id!))))) (let ((update_tmp_thread_checked_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id! (Poly%lib!tokens.ThreadCheckedState. (lib!tokens.ThreadCheckedState./ThreadCheckedState (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.empty.? $ TYPE%lib!tokens.PageId.)))))))) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$1)) (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$1)))))))) (let ((tmp_assert$4 (let ((real_thread_state$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!)))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. thread_state!)))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. thread_state!)))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. thread_state!))))))) (let ((tmp_assert$5 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!))))) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id! (Poly%lib!tokens.ThreadState. real_thread_state$))))) (let ((tmp_assert$6 (and tmp_assert$5 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$)) thread_id!))))) (let ((update_tmp_thread_checked_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id! (Poly%lib!tokens.ThreadCheckedState. (lib!tokens.ThreadCheckedState./ThreadCheckedState (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.empty.? $ TYPE%lib!tokens.PageId.)))))))) tmp_assert$6))))))) (and (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$1)))))))))) (let ((tmp_assert$7 (let ((inst$ (%Poly%lib!tokens.Mim.Instance. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_my_inst$)))))) (let ((tmp_assert$8 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. update_tmp_heap_shared_access$)) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!)))))))) (let ((update_tmp_heap_shared_access$2 (%Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. update_tmp_heap_shared_access$) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!))) (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. thread_state!)))))))))) (let ((update_tmp_heap_to_thread$ (%Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!))) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!))) thread_id!)))) (let ((tmp_assert$9 (let ((real_thread_state$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!)))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. thread_state!)))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. thread_state!)))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. thread_state!))))))) (let ((tmp_assert$10 (and tmp_assert$8 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!))))) (let ((update_tmp_thread_local_state$3 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id! (Poly%lib!tokens.ThreadState. real_thread_state$))))) (let ((tmp_assert$11 (and tmp_assert$10 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$)) thread_id!))))) (let ((update_tmp_thread_checked_state$3 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id! (Poly%lib!tokens.ThreadCheckedState. (lib!tokens.ThreadCheckedState./ThreadCheckedState (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.empty.? $ TYPE%lib!tokens.PageId.)))))))) tmp_assert$11))))))) tmp_assert$9))))))) (and (=> tmp_assert$7 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$1)) (and (=> tmp_assert$7 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$1)) (and (=> tmp_assert$7 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$7 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$7 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$7 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$7 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$7 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$7 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$7 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$7 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$7 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.create_thread_mk_tokens.? pre! post! thread_id! thread_state!))))))
(set-info :comment ";; Function-Specs lib::tokens::segment_u_max")
(declare-fun req%lib!tokens.segment_u_max. (Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((s! Poly)) (! (= (req%lib!tokens.segment_u_max. s!) (=> %%global_location_label%%8 (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.SegmentId. s!))) :pattern ((req%lib!tokens.segment_u_max. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::segment_u_max")
(assert (fuel_bool_default fuel%lib!tokens.segment_u_max.))
(declare-const fuel_nat%lib!tokens.segment_u_max. Fuel)
(assert (forall ((s! Poly) (fuel% Fuel)) (! (= (lib!tokens.rec%segment_u_max.? s! fuel%) (lib!tokens.rec%segment_u_max.? s! zero)) :pattern ((lib!tokens.rec%segment_u_max.? s! fuel%)))))
(assert (forall ((s! Poly) (fuel% Fuel)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.)) (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.SegmentId. s!)) (= (lib!tokens.rec%segment_u_max.? s! (succ fuel%)) (ite (= (vstd!set.impl&%0.len.? $ TYPE%lib!tokens.SegmentId. s!) 0) 0 (let ((x$ (%Poly%lib!tokens.SegmentId. (vstd!set.impl&%0.choose.? $ TYPE%lib!tokens.SegmentId. s!)))) (vstd!math.max.? (I (lib!tokens.rec%segment_u_max.? (vstd!set.impl&%0.remove.? $ TYPE%lib!tokens.SegmentId. s! (Poly%lib!tokens.SegmentId. x$)) fuel%)) (I (lib!tokens.SegmentId./SegmentId/uniq (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. x$))))))))) :pattern ((lib!tokens.rec%segment_u_max.? s! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!tokens.segment_u_max.) (forall ((s! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.)) (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.SegmentId. s!)) (= (lib!tokens.segment_u_max.? s!) (lib!tokens.rec%segment_u_max.? s! (succ fuel_nat%lib!tokens.segment_u_max.)))) :pattern ((lib!tokens.segment_u_max.? s!))))))
(set-info :comment ";; Function-Axioms lib::tokens::segment_get_unused_uniq_field")
(assert (fuel_bool_default fuel%lib!tokens.segment_get_unused_uniq_field.))
(assert (=> (fuel_bool fuel%lib!tokens.segment_get_unused_uniq_field.) (forall ((s! Poly)) (! (= (lib!tokens.segment_get_unused_uniq_field.? s!) (Add (lib!tokens.segment_u_max.? s!) 1)) :pattern ((lib!tokens.segment_get_unused_uniq_field.? s!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::mk_fresh_segment_id")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.mk_fresh_segment_id.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.mk_fresh_segment_id.) (forall ((tos! Poly) (sid! Poly)) (! (= (lib!tokens.Mim.impl&%21.mk_fresh_segment_id.? tos! sid!) (let ((uniq$ (lib!tokens.segment_get_unused_uniq_field.? (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. tos!)))) (lib!tokens.SegmentId./SegmentId (%I (I (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. sid!)))) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. sid!)))) (%I (I uniq$))))) :pattern ((lib!tokens.Mim.impl&%21.mk_fresh_segment_id.? tos! sid!))))))
(assert (forall ((tos! Poly) (sid! Poly)) (! (=> (and (has_type tos! (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId.)) (has_type sid! TYPE%lib!tokens.SegmentId.)) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.Mim.impl&%21.mk_fresh_segment_id.? tos! sid!)) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.Mim.impl&%21.mk_fresh_segment_id.? tos! sid!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::create_segment_mk_tokens")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.create_segment_mk_tokens.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.create_segment_mk_tokens.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (pre_segment_id! Poly) (segment_state! Poly)) (! (= (lib!tokens.Mim.impl&%21.create_segment_mk_tokens.? pre! post! thread_id! pre_segment_id! segment_state!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (not (lib!tokens.SegmentState./SegmentState/is_enabled (%Poly%lib!tokens.SegmentState. segment_state!))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((real_segment_id$ (lib!tokens.Mim.impl&%21.mk_fresh_segment_id.? (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!))) pre_segment_id!))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (Poly%lib!tokens.SegmentId. real_segment_id$)))))) (let ((tmp_assert$2 (and tmp_assert$1 (and (= (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. pre_segment_id!)) (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. real_segment_id$)))) (= (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. pre_segment_id!)) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. real_segment_id$)))))))) (let ((new_segments$ (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%lib!tokens.SegmentId. real_segment_id$) segment_state!)))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. new_segments$)) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))))))) (let ((tmp_assert$3 (and tmp_assert$2 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!))))) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (let ((tmp_assert$4 (and tmp_assert$3 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. update_tmp_thread_of_segment$)) (Poly%lib!tokens.SegmentId. real_segment_id$)))))) (let ((update_tmp_thread_of_segment$1 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. update_tmp_thread_of_segment$) (Poly%lib!tokens.SegmentId. real_segment_id$) thread_id!)))) (and (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$1)) (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2)))))))))))))) (let ((tmp_assert$5 (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$3 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((tmp_assert$6 (let ((real_segment_id$ (lib!tokens.Mim.impl&%21.mk_fresh_segment_id.? (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!))) pre_segment_id!))) (let ((tmp_assert$7 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (Poly%lib!tokens.SegmentId. real_segment_id$)))))) (let ((tmp_assert$8 (and tmp_assert$7 (and (= (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. pre_segment_id!)) (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. real_segment_id$)))) (= (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. pre_segment_id!)) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. real_segment_id$)))))))) (let ((tmp_assert$9 (let ((new_segments$ (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%lib!tokens.SegmentId. real_segment_id$) segment_state!)))) (let ((tmp_assert$10 (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. new_segments$)) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))))))) (let ((tmp_assert$11 (and tmp_assert$8 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$3)) thread_id!))))) (let ((update_tmp_thread_local_state$4 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$3) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (let ((tmp_assert$12 (and tmp_assert$11 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. update_tmp_thread_of_segment$)) (Poly%lib!tokens.SegmentId. real_segment_id$)))))) (let ((update_tmp_thread_of_segment$2 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. update_tmp_thread_of_segment$) (Poly%lib!tokens.SegmentId. real_segment_id$) thread_id!)))) tmp_assert$12))))))) tmp_assert$10)))) tmp_assert$9)))))) tmp_assert$6))))) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.create_segment_mk_tokens.? pre! post! thread_id! pre_segment_id! segment_state!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::segment_enable")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.segment_enable.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.segment_enable.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (segment_id! Poly) (shared_access! Poly)) (! (= (lib!tokens.Mim.impl&%21.segment_enable.? pre! post! thread_id! segment_id! shared_access!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) segment_id!)) (and (=> tmp_assert$ (not (lib!tokens.SegmentState./SegmentState/is_enabled (%Poly%lib!tokens.SegmentState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) segment_id!))))) (let ((segment_state$ (lib!tokens.SegmentState./SegmentState (%Poly%lib!types.SegmentSharedAccess. shared_access!) (%B (B true))))) (let ((new_segments$ (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) segment_id! (Poly%lib!tokens.SegmentState. segment_state$))))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. new_segments$)) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))))))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!))))) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. update_tmp_segment_shared_access$)) segment_id!))))) (let ((update_tmp_segment_shared_access$1 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. update_tmp_segment_shared_access$) segment_id! shared_access!)))) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$1)) (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2)))))))))))))) (let ((tmp_assert$3 (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$3 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((tmp_assert$4 (let ((segment_state$ (lib!tokens.SegmentState./SegmentState (%Poly%lib!types.SegmentSharedAccess. shared_access!) (%B (B true))))) (let ((tmp_assert$5 (let ((new_segments$ (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) segment_id! (Poly%lib!tokens.SegmentState. segment_state$))))) (let ((tmp_assert$6 (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. new_segments$)) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))))))) (let ((tmp_assert$7 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$3)) thread_id!))))) (let ((update_tmp_thread_local_state$4 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$3) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (let ((tmp_assert$8 (and tmp_assert$7 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. update_tmp_segment_shared_access$)) segment_id!))))) (let ((update_tmp_segment_shared_access$2 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. update_tmp_segment_shared_access$) segment_id! shared_access!)))) tmp_assert$8))))))) tmp_assert$6)))) tmp_assert$5)))) tmp_assert$4))))) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.segment_enable.? pre! post! thread_id! segment_id! shared_access!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::disjoint")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.disjoint.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.disjoint.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.disjoint.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (not (vstd!set.impl&%0.contains.? A&. A& s2! a$)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.disjoint.? A&. A& self! s2!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::create_page_mk_tokens")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.create_page_mk_tokens.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.create_page_mk_tokens.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (page_id! Poly) (n_slices! Poly) (block_size! Poly) (page_map! Poly)) (! (= (lib!tokens.Mim.impl&%21.create_page_mk_tokens.? pre! post! thread_id! page_id! n_slices! block_size! page_map!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))))) (and (=> tmp_assert$ (lib!tokens.SegmentState./SegmentState/is_enabled (%Poly%lib!tokens.SegmentState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) tmp%%$) (< tmp%%$ (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) (%I n_slices!))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (Add (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (not (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$))) 0))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) page_id!)) (and (=> tmp_assert$ (= (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! page_id!))) (%I block_size!))) (and (=> tmp_assert$ (vstd!set.impl&%0.disjoint.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_map!)))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!))))) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$)) page_id!))))) (let ((update_tmp_heap_of_page$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$) page_id! (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))))))) (let ((tmp_assert$3 (and tmp_assert$2 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$)) page_id!))))) (let ((update_tmp_delay$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./UseDelayedFree))))) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$1)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$1)) (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2))))))))))))))))))))))) (let ((tmp_assert$4 (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$3 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((tmp_assert$5 (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_map!)))) (let ((tmp_assert$6 (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (let ((tmp_assert$7 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$3)) thread_id!))))) (let ((update_tmp_thread_local_state$4 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$3) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (let ((tmp_assert$8 (and tmp_assert$7 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$)) page_id!))))) (let ((update_tmp_heap_of_page$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$) page_id! (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))))))) (let ((tmp_assert$9 (and tmp_assert$8 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$)) page_id!))))) (let ((update_tmp_delay$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./UseDelayedFree))))) tmp_assert$9))))))))) tmp_assert$6)))) tmp_assert$5))))) (and (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.create_page_mk_tokens.? pre! post! thread_id! page_id! n_slices! block_size! page_map!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_enable")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_enable.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_enable.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (page_id! Poly) (n_slices! Poly) (page_map! Poly) (psa_map! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_enable.? pre! post! thread_id! page_id! n_slices! page_map! psa_map!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) tmp%%$) (< tmp%%$ (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) (%I n_slices!))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$))))) (and (=> tmp_assert$ (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map!))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (%Poly%lib!types.PageSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map! pid$)) (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$)))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map! pid$))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (Add (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) pid$) (not (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$)) (let ((tmp%%$ (%Poly%lib!types.PageSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map! pid$)))) (let ((tmp%%$2 (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))) (lib!tokens.PageState./PageState (%I (I (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$2))))) (%I (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$2))))) (%I (I (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$2))))) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. tmp%%$)) (%B (B true)))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$))))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_map!)))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!))))) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (let ((tmp_assert$2 (and tmp_assert$1 (vstd!set.impl&%0.disjoint.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. update_tmp_page_shared_access$)) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map!))))) (let ((update_tmp_page_shared_access$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. update_tmp_page_shared_access$) psa_map!)))) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$1)) (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2))))))))))))))))) (let ((tmp_assert$3 (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$3 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((tmp_assert$4 (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_map!)))) (let ((tmp_assert$5 (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (let ((tmp_assert$6 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$3)) thread_id!))))) (let ((update_tmp_thread_local_state$4 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$3) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (let ((tmp_assert$7 (and tmp_assert$6 (vstd!set.impl&%0.disjoint.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. update_tmp_page_shared_access$)) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map!))))) (let ((update_tmp_page_shared_access$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. update_tmp_page_shared_access$) psa_map!)))) tmp_assert$7))))))) tmp_assert$5)))) tmp_assert$4))))) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_enable.? pre! post! thread_id! page_id! n_slices! page_map! psa_map!))))))
(set-info :comment ";; Function-Axioms lib::tokens::BlockId::get_slice_idx")
(assert (fuel_bool_default fuel%lib!tokens.impl&%1.get_slice_idx.))
(assert (=> (fuel_bool fuel%lib!tokens.impl&%1.get_slice_idx.) (forall ((page_id! Poly) (idx! Poly) (block_size! Poly)) (! (= (lib!tokens.impl&%1.get_slice_idx.? page_id! idx! block_size!) (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) (EucDiv (Add (lib!layout.start_offset.? block_size!) (nClip (Mul (%I idx!) (%I block_size!)))) lib!config.SLICE_SIZE.?)))) :pattern ((lib!tokens.impl&%1.get_slice_idx.? page_id! idx! block_size!))))))
(assert (forall ((page_id! Poly) (idx! Poly) (block_size! Poly)) (! (=> (and (has_type page_id! TYPE%lib!tokens.PageId.) (has_type idx! NAT) (has_type block_size! NAT)) (<= 0 (lib!tokens.impl&%1.get_slice_idx.? page_id! idx! block_size!))) :pattern ((lib!tokens.impl&%1.get_slice_idx.? page_id! idx! block_size!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::okay_to_add_block")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.okay_to_add_block.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.okay_to_add_block.) (forall ((ts! Poly) (page_id! Poly) (idx! Poly) (block_size! Poly)) (! (= (lib!tokens.Mim.impl&%21.okay_to_add_block.? ts! page_id! idx! block_size!) (let ((slice_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (lib!tokens.impl&%1.get_slice_idx.? page_id! idx! block_size!)))))) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. ts!)))) (Poly%lib!tokens.PageId. slice_id$)) (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. ts!))) (Poly%lib!tokens.PageId. slice_id$))))) (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. ts!))) (Poly%lib!tokens.PageId. slice_id$)))) (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. slice_id$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))))))) :pattern ((lib!tokens.Mim.impl&%21.okay_to_add_block.? ts! page_id! idx! block_size!))))))
(set-info :comment ";; Function-Axioms lib::tokens::BlockId::slice_idx_is_right")
(assert (fuel_bool_default fuel%lib!tokens.impl&%1.slice_idx_is_right.))
(assert (=> (fuel_bool fuel%lib!tokens.impl&%1.slice_idx_is_right.) (forall ((self! Poly)) (! (= (lib!tokens.impl&%1.slice_idx_is_right.? self!) (= (lib!tokens.BlockId./BlockId/slice_idx (%Poly%lib!tokens.BlockId. self!)) (lib!tokens.impl&%1.get_slice_idx.? (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. self!))) (I (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. self!))) (I (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. self!)))))) :pattern ((lib!tokens.impl&%1.slice_idx_is_right.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::BlockId::page_id_for_slice")
(assert (fuel_bool_default fuel%lib!tokens.impl&%1.page_id_for_slice.))
(assert (=> (fuel_bool fuel%lib!tokens.impl&%1.page_id_for_slice.) (forall ((self! Poly)) (! (= (lib!tokens.impl&%1.page_id_for_slice.? self!) (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. self!))))))) (%I (I (lib!tokens.BlockId./BlockId/slice_idx (%Poly%lib!tokens.BlockId. self!)))))) :pattern ((lib!tokens.impl&%1.page_id_for_slice.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.BlockId.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.impl&%1.page_id_for_slice.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.impl&%1.page_id_for_slice.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_mk_block_tokens")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_mk_block_tokens.))
(declare-fun %%lambda%%5 (lib!tokens.PageId. Int Int Int) %%Function%%)
(assert (forall ((%%hole%%0 lib!tokens.PageId.) (%%hole%%1 Int) (%%hole%%2 Int) (%%hole%%3 Int) (block_id$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) block_id$) (B (and (and (and (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id$)) %%hole%%0) (let ((tmp%%$ (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. block_id$)))) (and (<= %%hole%%1 tmp%%$) (< tmp%%$ %%hole%%2)))) (= (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. block_id$)) %%hole%%3)) (lib!tokens.impl&%1.slice_idx_is_right.? block_id$)))) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) block_id$)))))
(declare-fun %%lambda%%6 (Dcr Type Dcr Type Poly lib!types.SegmentSharedAccess. lib!types.PageSharedAccess. core!option.Option.) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 lib!types.SegmentSharedAccess.) (%%hole%%6 lib!types.PageSharedAccess.) (%%hole%%7 core!option.Option.) (block_id$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) block_id$) (Poly%lib!tokens.BlockState. (lib!tokens.BlockState./BlockState %%hole%%5 %%hole%%6 (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 (Poly%lib!tokens.PageId. (lib!tokens.impl&%1.page_id_for_slice.? block_id$))))))) %%hole%%7))) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) block_id$)))))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_mk_block_tokens.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (page_id! Poly) (old_num_blocks! Poly) (new_num_blocks! Poly) (block_size! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_mk_block_tokens.? pre! post! thread_id! page_id! old_num_blocks! new_num_blocks! block_size!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$)) thread_id!)) (let ((cs$ (%Poly%lib!tokens.ThreadCheckedState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (let ((update_tmp_thread_checked_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) page_id!)) (and (=> tmp_assert$ (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!)))) (and (=> tmp_assert$ (= (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) (%I old_num_blocks!))) (and (=> tmp_assert$ (= (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) (%I block_size!))) (and (=> tmp_assert$ (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) 0)) (and (=> tmp_assert$ (<= (%I old_num_blocks!) (%I new_num_blocks!))) (let ((new_page$ (let ((tmp%%$ (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!)))) (lib!tokens.PageState./PageState (%I (I (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I new_num_blocks!) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%B (B (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))))))) (let ((cs2$ (lib!tokens.ThreadCheckedState./ThreadCheckedState (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (%Poly%lib!tokens.ThreadCheckedState. (Poly%lib!tokens.ThreadCheckedState. cs$)))) page_id!))))) (and (=> tmp_assert$ (forall ((idx$ Poly)) (! (=> (has_type idx$ NAT) (=> (and (<= (%I old_num_blocks!) (%I idx$)) (< (%I idx$) (%I new_num_blocks!))) (lib!tokens.Mim.impl&%21.okay_to_add_block.? (Poly%lib!tokens.ThreadState. ts$) page_id! idx$ block_size!))) :pattern ((lib!tokens.Mim.impl&%21.okay_to_add_block.? (Poly%lib!tokens.ThreadState. ts$) page_id! idx$ block_size!))))) (let ((ssa$ (%Poly%lib!types.SegmentSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))))))) (let ((block_map$ (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. $ (TYPE%fun%1. $ TYPE%lib!tokens.BlockId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState.) (Poly%fun%1. (mk_fun (%%lambda%%5 (%Poly%lib!tokens.PageId. page_id!) (%I old_num_blocks!) (%I new_num_blocks!) (%I block_size!)))) (Poly%fun%1. (mk_fun (%%lambda%%6 $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (%Poly%lib!types.SegmentSharedAccess. (Poly%lib!types.SegmentSharedAccess. ssa$)) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.disjoint.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. block_map$)))))) (let ((update_tmp_block$1 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. block_map$))))) (and (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id! (Poly%lib!tokens.PageState. new_page$))))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (let ((tmp_assert$2 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!))))) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (let ((tmp_assert$3 (and tmp_assert$2 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$1)) thread_id!))))) (let ((update_tmp_thread_checked_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$1) thread_id! (Poly%lib!tokens.ThreadCheckedState. cs2$))))) (and (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$2)) (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2))))))))) (let ((tmp_assert$4 (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id! (Poly%lib!tokens.PageState. new_page$))))) (let ((tmp_assert$5 (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (let ((tmp_assert$6 (and tmp_assert$1 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!))))) (let ((update_tmp_thread_local_state$3 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (let ((tmp_assert$7 (and tmp_assert$6 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$1)) thread_id!))))) (let ((update_tmp_thread_checked_state$3 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$1) thread_id! (Poly%lib!tokens.ThreadCheckedState. cs2$))))) tmp_assert$7))))))) tmp_assert$5)))) (=> tmp_assert$4 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$1)))))))))))))))))))))) (let ((tmp_assert$8 (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$4 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((tmp_assert$9 (let ((cs$ (%Poly%lib!tokens.ThreadCheckedState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (let ((update_tmp_thread_checked_state$4 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (let ((tmp_assert$10 (let ((new_page$ (let ((tmp%%$ (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!)))) (lib!tokens.PageState./PageState (%I (I (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I new_num_blocks!) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%B (B (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))))))) (let ((tmp_assert$11 (let ((cs2$ (lib!tokens.ThreadCheckedState./ThreadCheckedState (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (%Poly%lib!tokens.ThreadCheckedState. (Poly%lib!tokens.ThreadCheckedState. cs$)))) page_id!))))) (let ((tmp_assert$12 (let ((ssa$ (%Poly%lib!types.SegmentSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))))))) (let ((tmp_assert$13 (let ((block_map$ (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. $ (TYPE%fun%1. $ TYPE%lib!tokens.BlockId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState.) (Poly%fun%1. (mk_fun (%%lambda%%5 (%Poly%lib!tokens.PageId. page_id!) (%I old_num_blocks!) (%I new_num_blocks!) (%I block_size!)))) (Poly%fun%1. (mk_fun (%%lambda%%6 $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (%Poly%lib!types.SegmentSharedAccess. (Poly%lib!types.SegmentSharedAccess. ssa$)) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))) (let ((tmp_assert$14 (and tmp_assert$ (vstd!set.impl&%0.disjoint.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. block_map$)))))) (let ((update_tmp_block$2 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. block_map$))))) (let ((tmp_assert$15 (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id! (Poly%lib!tokens.PageState. new_page$))))) (let ((tmp_assert$16 (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (let ((tmp_assert$17 (and tmp_assert$14 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$4)) thread_id!))))) (let ((update_tmp_thread_local_state$5 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$4) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (let ((tmp_assert$18 (and tmp_assert$17 (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$4)) thread_id!))))) (let ((update_tmp_thread_checked_state$5 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$4) thread_id! (Poly%lib!tokens.ThreadCheckedState. cs2$))))) tmp_assert$18))))))) tmp_assert$16)))) tmp_assert$15)))))) tmp_assert$13)))) tmp_assert$12)))) tmp_assert$11)))) tmp_assert$10))))) tmp_assert$9))))) (and (=> tmp_assert$8 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$8 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$8 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$8 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$8 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$8 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$8 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$8 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$8 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$8 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$8 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$8 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$8 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_mk_block_tokens.? pre! post! thread_id! page_id! old_num_blocks! new_num_blocks! block_size!))))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::len")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.len.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.len.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (= (vstd!map.impl&%0.len.? K&. K& V&. V& self!) (vstd!set.impl&%0.len.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!))) :pattern ((vstd!map.impl&%0.len.? K&. K& V&. V& self!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (<= 0 (vstd!map.impl&%0.len.? K&. K& V&. V& self!))) :pattern ((vstd!map.impl&%0.len.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::submap_of")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.submap_of.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.submap_of.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& self! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))) :pattern ((vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k$) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) k$))))) :pattern ((vstd!map_lib.impl&%0.submap_of.? K&. K& V&. V& self! m2!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_destroy_block_tokens")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_destroy_block_tokens.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_destroy_block_tokens.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (page_id! Poly) (blocks! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_destroy_block_tokens.? pre! post! thread_id! page_id! blocks!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) page_id!)) (and (=> tmp_assert$ (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!))) (and (=> tmp_assert$ (= (vstd!map.impl&%0.len.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!) (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))))) (and (=> tmp_assert$ (forall ((block_id$ Poly)) (! (=> (has_type block_id$ TYPE%lib!tokens.BlockId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!) block_id$) (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id$)) (%Poly%lib!tokens.PageId. page_id!)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!) block_id$))))) (and (=> tmp_assert$ (vstd!map_lib.impl&%0.submap_of.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks! (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$))) (let ((update_tmp_block$1 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map_lib.impl&%0.remove_keys.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!))))) (and (let ((new_page$ (let ((tmp%%$ (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!)))) (lib!tokens.PageState./PageState (%I (I (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I (I 0)) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%B (B (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))))))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id! (Poly%lib!tokens.PageState. new_page$))))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!))))) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2))))))) (let ((tmp_assert$2 (let ((new_page$ (let ((tmp%%$ (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!)))) (lib!tokens.PageState./PageState (%I (I (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I (I 0)) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%B (B (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))))))) (let ((tmp_assert$3 (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id! (Poly%lib!tokens.PageState. new_page$))))) (let ((tmp_assert$4 (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (let ((tmp_assert$5 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!))))) (let ((update_tmp_thread_local_state$3 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) tmp_assert$5))))) tmp_assert$4)))) tmp_assert$3)))) (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$1)))))))))))) (let ((tmp_assert$6 (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$4 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_block$2 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map_lib.impl&%0.remove_keys.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!))))) (let ((tmp_assert$7 (let ((new_page$ (let ((tmp%%$ (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!)))) (lib!tokens.PageState./PageState (%I (I (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I (I 0)) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%B (B (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))))))) (let ((tmp_assert$8 (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id! (Poly%lib!tokens.PageState. new_page$))))) (let ((tmp_assert$9 (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (let ((tmp_assert$10 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$4)) thread_id!))))) (let ((update_tmp_thread_local_state$5 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$4) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) tmp_assert$10))))) tmp_assert$9)))) tmp_assert$8)))) tmp_assert$7)))))) (and (=> tmp_assert$6 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$6 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$6 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$6 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$6 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$6 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$6 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$6 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$6 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$6 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$6 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$6 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$6 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$6 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_destroy_block_tokens.? pre! post! thread_id! page_id! blocks!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_check_delay_state")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_check_delay_state.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_check_delay_state.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (page_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_check_delay_state.? pre! post! thread_id! page_id!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$)) thread_id!)) (let ((cs$ (%Poly%lib!tokens.ThreadCheckedState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (let ((update_tmp_thread_checked_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) page_id!)) (and (=> tmp_assert$ (= (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) 0)) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$)) page_id!)) (let ((delay_state$ (%Poly%lib!tokens.DelayState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (and (=> tmp_assert$ (not (= delay_state$ lib!tokens.DelayState./Freeing))) (let ((cs2$ (lib!tokens.ThreadCheckedState./ThreadCheckedState (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (%Poly%lib!tokens.ThreadCheckedState. (Poly%lib!tokens.ThreadCheckedState. cs$)))) page_id!))))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$1)) thread_id!))))) (let ((update_tmp_thread_checked_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$1) thread_id! (Poly%lib!tokens.ThreadCheckedState. cs2$))))) (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$2)))))))))))))) (let ((tmp_assert$2 (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((tmp_assert$3 (let ((cs$ (%Poly%lib!tokens.ThreadCheckedState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (let ((update_tmp_thread_checked_state$3 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (let ((tmp_assert$4 (let ((delay_state$ (%Poly%lib!tokens.DelayState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (let ((tmp_assert$5 (let ((cs2$ (lib!tokens.ThreadCheckedState./ThreadCheckedState (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (%Poly%lib!tokens.ThreadCheckedState. (Poly%lib!tokens.ThreadCheckedState. cs$)))) page_id!))))) (let ((tmp_assert$6 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$3)) thread_id!))))) (let ((update_tmp_thread_checked_state$4 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$3) thread_id! (Poly%lib!tokens.ThreadCheckedState. cs2$))))) tmp_assert$6))))) tmp_assert$5)))) tmp_assert$4))))) tmp_assert$3)))) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_check_delay_state.? pre! post! thread_id! page_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::PageId::range_from")
(assert (fuel_bool_default fuel%lib!tokens.impl&%0.range_from.))
(declare-fun %%lambda%%7 (lib!tokens.SegmentId. Int Int) %%Function%%)
(assert (forall ((%%hole%%0 lib!tokens.SegmentId.) (%%hole%%1 Int) (%%hole%%2 Int) (page_id$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2) page_id$) (B (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)) %%hole%%0) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id$)))) (and (<= %%hole%%1 tmp%%$) (< tmp%%$ %%hole%%2)))))) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2) page_id$)))))
(assert (=> (fuel_bool fuel%lib!tokens.impl&%0.range_from.) (forall ((self! Poly) (lo! Poly) (hi! Poly)) (! (= (lib!tokens.impl&%0.range_from.? self! lo! hi!) (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%7 (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. self!)) (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. self!)) (%I lo!)) (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. self!)) (%I hi!)))))))) :pattern ((lib!tokens.impl&%0.range_from.? self! lo! hi!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_disable")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_disable.))
(declare-fun %%lambda%%8 (Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (pid$ Poly)) (! (= (%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2) pid$) (B (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 pid$))) :pattern ((%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2) pid$)))))
(declare-fun %%lambda%%9 (Dcr Type Dcr Type Poly Bool) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Bool) (pid$ Poly)) (! (= (%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) pid$) (Poly%lib!tokens.PageState. (let ((tmp%%$ (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 pid$)))) (lib!tokens.PageState./PageState (%I (I (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I (I (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) %%hole%%5)))) :pattern ((%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) pid$)))))
(declare-fun %%lambda%%10 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (pid$ Poly)) (! (= (%%apply%%0 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) pid$) (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 pid$))))) :pattern ((%%apply%%0 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) pid$)))))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_disable.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (page_id! Poly) (n_slices! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_disable.? pre! post! thread_id! page_id! n_slices!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$)) thread_id!)) (let ((cs$ (%Poly%lib!tokens.ThreadCheckedState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) page_id!)) (and (=> tmp_assert$ (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (%Poly%lib!tokens.ThreadCheckedState. (Poly%lib!tokens.ThreadCheckedState. cs$)))) page_id!)) (and (=> tmp_assert$ (= (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) 0)) (and (=> tmp_assert$ (vstd!set.impl&%0.subset_of.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) pid$) (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))) (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$))) (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) pid$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)) :pattern ((lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))) :pattern ((lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))) :pattern ((lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))))) (let ((new_pages0$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.) (Poly%fun%1. (mk_fun (%%lambda%%8 $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!))))) (Poly%fun%1. (mk_fun (%%lambda%%9 $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (%B (B false))))))))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages0$))))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!))))) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (and (let ((psa_map$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess.) (Poly%fun%1. (mk_fun (%%lambda%%8 $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!))))) (Poly%fun%1. (mk_fun (%%lambda%%10 $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))))))))) (let ((tmp_assert$2 (and tmp_assert$1 (vstd!map_lib.impl&%0.submap_of.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. psa_map$) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. update_tmp_page_shared_access$))))) (let ((update_tmp_page_shared_access$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (vstd!map_lib.impl&%0.remove_keys.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. update_tmp_page_shared_access$) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. psa_map$)))))) (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$1))))) (let ((tmp_assert$3 (let ((psa_map$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess.) (Poly%fun%1. (mk_fun (%%lambda%%8 $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!))))) (Poly%fun%1. (mk_fun (%%lambda%%10 $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))))))))) (let ((tmp_assert$4 (and tmp_assert$1 (vstd!map_lib.impl&%0.submap_of.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. psa_map$) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. update_tmp_page_shared_access$))))) (let ((update_tmp_page_shared_access$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (vstd!map_lib.impl&%0.remove_keys.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. update_tmp_page_shared_access$) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. psa_map$)))))) tmp_assert$4))))) (=> tmp_assert$3 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2))))))))))))))))))) (let ((tmp_assert$5 (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$3 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((tmp_assert$6 (let ((cs$ (%Poly%lib!tokens.ThreadCheckedState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (let ((tmp_assert$7 (let ((new_pages0$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.) (Poly%fun%1. (mk_fun (%%lambda%%8 $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!))))) (Poly%fun%1. (mk_fun (%%lambda%%9 $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (%B (B false))))))))) (let ((tmp_assert$8 (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages0$))))) (let ((tmp_assert$9 (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (let ((tmp_assert$10 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$3)) thread_id!))))) (let ((update_tmp_thread_local_state$4 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$3) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (let ((tmp_assert$11 (let ((psa_map$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess.) (Poly%fun%1. (mk_fun (%%lambda%%8 $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!))))) (Poly%fun%1. (mk_fun (%%lambda%%10 $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))))))))) (let ((tmp_assert$12 (and tmp_assert$10 (vstd!map_lib.impl&%0.submap_of.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. psa_map$) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. update_tmp_page_shared_access$))))) (let ((update_tmp_page_shared_access$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (vstd!map_lib.impl&%0.remove_keys.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. update_tmp_page_shared_access$) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. psa_map$)))))) tmp_assert$12))))) tmp_assert$11)))))) tmp_assert$9)))) tmp_assert$8)))) tmp_assert$7)))) tmp_assert$6))))) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$5 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_disable.? pre! post! thread_id! page_id! n_slices!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_destroy_tokens")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_destroy_tokens.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_destroy_tokens.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (page_id! Poly) (n_slices! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_destroy_tokens.? pre! post! thread_id! page_id! n_slices!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$)) page_id!) (let ((update_tmp_heap_of_page$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$) page_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$)) page_id!) (let ((update_tmp_delay$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.subset_of.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))))) (and (=> tmp_assert$ (>= (%I n_slices!) 1)) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$) (not (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$) (=> (not (= page_id! pid$)) (not (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$))) 0))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$))))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map_lib.impl&%0.remove_keys.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)))))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!))))) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2)))))))))))) (let ((tmp_assert$2 (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$3 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((tmp_assert$3 (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map_lib.impl&%0.remove_keys.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)))))) (let ((tmp_assert$4 (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (let ((tmp_assert$5 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$3)) thread_id!))))) (let ((update_tmp_thread_local_state$4 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$3) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) tmp_assert$5))))) tmp_assert$4)))) tmp_assert$3))))) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$1)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$1)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$2 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_destroy_tokens.? pre! post! thread_id! page_id! n_slices!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::block_tokens_distinct")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.block_tokens_distinct.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.block_tokens_distinct.) (forall ((pre! Poly) (post! Poly) (block_id1! Poly) (block_id2! Poly)) (! (= (lib!tokens.Mim.impl&%21.block_tokens_distinct.? pre! post! block_id1! block_id2!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id1!)) (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id2!))) (and (= (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. block_id1!)) (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. block_id2!))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id1!) (let ((update_tmp_block$1 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) block_id1!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$1)) block_id2!) (let ((update_tmp_block$2 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$1) block_id2!)))) (let ((tmp_assert$1 false)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$2)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.block_tokens_distinct.? pre! post! block_id1! block_id2!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::block_in_range")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.block_in_range.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.block_in_range.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (block_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.block_in_range.? pre! post! thread_id! block_id!) (let ((tmp_assert$ true)) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id!)) (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (let ((tmp_assert$1 (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((tmp_assert$2 (and tmp_assert$ (let ((tmp%%$ (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. block_id!)))) (and (<= 0 tmp%%$) (< tmp%%$ (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))))))))))) tmp_assert$2)))) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$)) (and (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$)) (=> tmp_assert$1 (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.block_in_range.? pre! post! thread_id! block_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::next_by")
(define-fun is-lib!tokens.Mim.Step./set_inst_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./set_inst) c))
(define-fun is-lib!tokens.Mim.Step./actor_make_idle_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./actor_make_idle) c))
(define-fun is-lib!tokens.Mim.Step./actor_abandon_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./actor_abandon) c))
(define-fun is-lib!tokens.Mim.Step./set_use_delayed_free_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./set_use_delayed_free) c))
(define-fun is-lib!tokens.Mim.Step./delay_enter_freeing_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./delay_enter_freeing) c))
(define-fun is-lib!tokens.Mim.Step./delay_leave_freeing_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./delay_leave_freeing) c))
(define-fun is-lib!tokens.Mim.Step./delay_lookup_heap_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./delay_lookup_heap) c))
(define-fun is-lib!tokens.Mim.Step./block_set_heap_id_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./block_set_heap_id) c))
(define-fun is-lib!tokens.Mim.Step./reserve_uniq_identifier_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./reserve_uniq_identifier) c))
(define-fun is-lib!tokens.Mim.Step./create_thread_mk_tokens_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./create_thread_mk_tokens) c))
(define-fun is-lib!tokens.Mim.Step./create_segment_mk_tokens_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./create_segment_mk_tokens) c))
(define-fun is-lib!tokens.Mim.Step./segment_enable_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./segment_enable) c))
(define-fun is-lib!tokens.Mim.Step./create_page_mk_tokens_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./create_page_mk_tokens) c))
(define-fun is-lib!tokens.Mim.Step./page_enable_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./page_enable) c))
(define-fun is-lib!tokens.Mim.Step./page_mk_block_tokens_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./page_mk_block_tokens) c))
(define-fun is-lib!tokens.Mim.Step./page_destroy_block_tokens_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./page_destroy_block_tokens) c))
(define-fun is-lib!tokens.Mim.Step./page_check_delay_state_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./page_check_delay_state) c))
(define-fun is-lib!tokens.Mim.Step./page_disable_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./page_disable) c))
(define-fun is-lib!tokens.Mim.Step./page_destroy_tokens_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./page_destroy_tokens) c))
(define-fun is-lib!tokens.Mim.Step./block_tokens_distinct_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./block_tokens_distinct) c))
(define-fun is-lib!tokens.Mim.Step./block_in_range_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./block_in_range) c))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.next_by.) (forall ((pre! Poly) (post! Poly) (step! Poly)) (! (= (lib!tokens.Mim.impl&%21.next_by.? pre! post! step!) (ite (is-lib!tokens.Mim.Step./set_inst_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((inst$ (lib!tokens.Mim.Step./set_inst/0 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.set_inst.? pre! post! (Poly%lib!tokens.Mim.Instance. inst$))) (ite (is-lib!tokens.Mim.Step./actor_make_idle_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./actor_make_idle/0 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.actor_make_idle.? pre! post! (Poly%lib!thread.ThreadId. thread_id$))) (ite (is-lib!tokens.Mim.Step./actor_abandon_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./actor_abandon/0 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.actor_abandon.? pre! post! (Poly%lib!thread.ThreadId. thread_id$))) (ite (is-lib!tokens.Mim.Step./set_use_delayed_free_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((page_id$ (lib!tokens.Mim.Step./set_use_delayed_free/0 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.set_use_delayed_free.? pre! post! (Poly%lib!tokens.PageId. page_id$))) (ite (is-lib!tokens.Mim.Step./delay_enter_freeing_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((page_id$ (lib!tokens.Mim.Step./delay_enter_freeing/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((block_id$ (lib!tokens.Mim.Step./delay_enter_freeing/1 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.delay_enter_freeing.? pre! post! (Poly%lib!tokens.PageId. page_id$) (Poly%lib!tokens.BlockId. block_id$)))) (ite (is-lib!tokens.Mim.Step./delay_leave_freeing_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((page_id$ (lib!tokens.Mim.Step./delay_leave_freeing/0 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.delay_leave_freeing.? pre! post! (Poly%lib!tokens.PageId. page_id$))) (ite (is-lib!tokens.Mim.Step./delay_lookup_heap_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((block_id$ (lib!tokens.Mim.Step./delay_lookup_heap/0 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.delay_lookup_heap.? pre! post! (Poly%lib!tokens.BlockId. block_id$))) (ite (is-lib!tokens.Mim.Step./block_set_heap_id_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((block_id$ (lib!tokens.Mim.Step./block_set_heap_id/0 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.block_set_heap_id.? pre! post! (Poly%lib!tokens.BlockId. block_id$))) (ite (is-lib!tokens.Mim.Step./reserve_uniq_identifier_ (%Poly%lib!tokens.Mim.Step. step!)) (lib!tokens.Mim.impl&%21.reserve_uniq_identifier.? pre! post!) (ite (is-lib!tokens.Mim.Step./create_thread_mk_tokens_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./create_thread_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((thread_state$ (lib!tokens.Mim.Step./create_thread_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.create_thread_mk_tokens.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.ThreadState. thread_state$)))) (ite (is-lib!tokens.Mim.Step./create_segment_mk_tokens_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./create_segment_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((pre_segment_id$ (lib!tokens.Mim.Step./create_segment_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((segment_state$ (lib!tokens.Mim.Step./create_segment_mk_tokens/2 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.create_segment_mk_tokens.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.SegmentId. pre_segment_id$) (Poly%lib!tokens.SegmentState. segment_state$))))) (ite (is-lib!tokens.Mim.Step./segment_enable_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./segment_enable/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((segment_id$ (lib!tokens.Mim.Step./segment_enable/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((shared_access$ (lib!tokens.Mim.Step./segment_enable/2 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.segment_enable.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.SegmentId. segment_id$) (Poly%lib!types.SegmentSharedAccess. shared_access$))))) (ite (is-lib!tokens.Mim.Step./create_page_mk_tokens_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./create_page_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_id$ (lib!tokens.Mim.Step./create_page_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((n_slices$ (lib!tokens.Mim.Step./create_page_mk_tokens/2 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((block_size$ (lib!tokens.Mim.Step./create_page_mk_tokens/3 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_map$ (lib!tokens.Mim.Step./create_page_mk_tokens/4 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.create_page_mk_tokens.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.PageId. page_id$) (I n_slices$) (I block_size$) (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. page_map$))))))) (ite (is-lib!tokens.Mim.Step./page_enable_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./page_enable/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_id$ (lib!tokens.Mim.Step./page_enable/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((n_slices$ (lib!tokens.Mim.Step./page_enable/2 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_map$ (lib!tokens.Mim.Step./page_enable/3 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((psa_map$ (lib!tokens.Mim.Step./page_enable/4 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.page_enable.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.PageId. page_id$) (I n_slices$) (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. page_map$) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. psa_map$))))))) (ite (is-lib!tokens.Mim.Step./page_mk_block_tokens_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./page_mk_block_tokens/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_id$ (lib!tokens.Mim.Step./page_mk_block_tokens/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((old_num_blocks$ (lib!tokens.Mim.Step./page_mk_block_tokens/2 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((new_num_blocks$ (lib!tokens.Mim.Step./page_mk_block_tokens/3 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((block_size$ (lib!tokens.Mim.Step./page_mk_block_tokens/4 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.page_mk_block_tokens.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.PageId. page_id$) (I old_num_blocks$) (I new_num_blocks$) (I block_size$))))))) (ite (is-lib!tokens.Mim.Step./page_destroy_block_tokens_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./page_destroy_block_tokens/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_id$ (lib!tokens.Mim.Step./page_destroy_block_tokens/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((blocks$ (lib!tokens.Mim.Step./page_destroy_block_tokens/2 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.page_destroy_block_tokens.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.PageId. page_id$) (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. blocks$))))) (ite (is-lib!tokens.Mim.Step./page_check_delay_state_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./page_check_delay_state/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_id$ (lib!tokens.Mim.Step./page_check_delay_state/1 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.page_check_delay_state.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.PageId. page_id$)))) (ite (is-lib!tokens.Mim.Step./page_disable_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./page_disable/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_id$ (lib!tokens.Mim.Step./page_disable/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((n_slices$ (lib!tokens.Mim.Step./page_disable/2 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.page_disable.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.PageId. page_id$) (I n_slices$))))) (ite (is-lib!tokens.Mim.Step./page_destroy_tokens_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./page_destroy_tokens/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_id$ (lib!tokens.Mim.Step./page_destroy_tokens/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((n_slices$ (lib!tokens.Mim.Step./page_destroy_tokens/2 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.page_destroy_tokens.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.PageId. page_id$) (I n_slices$))))) (ite (is-lib!tokens.Mim.Step./block_tokens_distinct_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((block_id1$ (lib!tokens.Mim.Step./block_tokens_distinct/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((block_id2$ (lib!tokens.Mim.Step./block_tokens_distinct/1 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.block_tokens_distinct.? pre! post! (Poly%lib!tokens.BlockId. block_id1$) (Poly%lib!tokens.BlockId. block_id2$)))) (and (is-lib!tokens.Mim.Step./block_in_range_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./block_in_range/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((block_id$ (lib!tokens.Mim.Step./block_in_range/1 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.block_in_range.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.BlockId. block_id$)))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.next_by.? pre! post! step!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::next")
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.next.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!tokens.Mim.impl&%21.next.? pre! post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!tokens.Mim.Step.) (lib!tokens.Mim.impl&%21.next_by.? pre! post! step$)) :pattern ((lib!tokens.Mim.impl&%21.next_by.? pre! post! step$))))) :pattern ((lib!tokens.Mim.impl&%21.next.? pre! post!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::full")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.full.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.full.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.full.? A&. A&) (vstd!set.impl&%0.complement.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((vstd!set.impl&%0.full.? A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.full.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.full.? A&. A&)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::initialize")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.initialize.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.initialize.) (forall ((post! Poly)) (! (= (lib!tokens.Mim.impl&%21.initialize.? post!) (let ((update_tmp_right_to_set_inst$ true)) (let ((update_tmp_my_inst$ core!option.Option./None)) (let ((update_tmp_right_to_use_thread$ (%Poly%vstd!set.Set<lib!thread.ThreadId.>. (vstd!set.impl&%0.full.? $ TYPE%lib!thread.ThreadId.)))) (let ((update_tmp_thread_local_state$ (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState.)))) (let ((update_tmp_thread_checked_state$ (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState.)))) (let ((update_tmp_block$ (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState.)))) (let ((update_tmp_thread_of_segment$ (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId.)))) (let ((update_tmp_delay$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState.)))) (let ((update_tmp_heap_of_page$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId.)))) (let ((update_tmp_actor$ (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor.)))) (let ((update_tmp_delay_actor$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor.)))) (let ((update_tmp_segment_shared_access$ (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess.)))) (let ((update_tmp_page_shared_access$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess.)))) (let ((update_tmp_heap_shared_access$ (%Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess.)))) (let ((update_tmp_heap_to_thread$ (%Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId.)))) (let ((update_tmp_reserved_uniq$ (%Poly%vstd!set.Set<lib!tokens.HeapId.>. (vstd!set.impl&%0.empty.? $ TYPE%lib!tokens.HeapId.)))) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.initialize.? post!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::init_by")
(define-fun is-lib!tokens.Mim.Config./initialize_ ((c lib!tokens.Mim.Config.)) Bool ((_ is lib!tokens.Mim.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.init_by.) (forall ((post! Poly) (step! Poly)) (! (= (lib!tokens.Mim.impl&%21.init_by.? post! step!) (and (is-lib!tokens.Mim.Config./initialize_ (%Poly%lib!tokens.Mim.Config. step!)) (lib!tokens.Mim.impl&%21.initialize.? post!))) :pattern ((lib!tokens.Mim.impl&%21.init_by.? post! step!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::init")
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.init.) (forall ((post! Poly)) (! (= (lib!tokens.Mim.impl&%21.init.? post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!tokens.Mim.Config.) (lib!tokens.Mim.impl&%21.init_by.? post! step$)) :pattern ((lib!tokens.Mim.impl&%21.init_by.? post! step$))))) :pattern ((lib!tokens.Mim.impl&%21.init.? post!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::right_to_set_inst::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.right_to_set_inst.) (has_type (Poly%lib!tokens.Mim.right_to_set_inst_token_data. (lib!tokens.Mim.impl&%4.view.? self!)) TYPE%lib!tokens.Mim.right_to_set_inst_token_data.)) :pattern ((lib!tokens.Mim.impl&%4.view.? self!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::right_to_set_inst::arbitrary")
(declare-fun ens%lib!tokens.Mim.impl&%4.arbitrary. (Int lib!tokens.Mim.right_to_set_inst.) Bool)
(assert (forall ((no%param Int) (%return! lib!tokens.Mim.right_to_set_inst.)) (! (= (ens%lib!tokens.Mim.impl&%4.arbitrary. no%param %return!) (has_type (Poly%lib!tokens.Mim.right_to_set_inst. %return!) TYPE%lib!tokens.Mim.right_to_set_inst.)) :pattern ((ens%lib!tokens.Mim.impl&%4.arbitrary. no%param %return!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::my_inst::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.my_inst.) (has_type (Poly%lib!tokens.Mim.my_inst_token_data. (lib!tokens.Mim.impl&%5.view.? self!)) TYPE%lib!tokens.Mim.my_inst_token_data.)) :pattern ((lib!tokens.Mim.impl&%5.view.? self!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::my_inst::arbitrary")
(declare-fun ens%lib!tokens.Mim.impl&%5.arbitrary. (Int lib!tokens.Mim.my_inst.) Bool)
(assert (forall ((no%param Int) (%return! lib!tokens.Mim.my_inst.)) (! (= (ens%lib!tokens.Mim.impl&%5.arbitrary. no%param %return!) (has_type (Poly%lib!tokens.Mim.my_inst. %return!) TYPE%lib!tokens.Mim.my_inst.)) :pattern ((ens%lib!tokens.Mim.impl&%5.arbitrary. no%param %return!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::my_inst::clone")
(declare-fun ens%lib!tokens.Mim.impl&%5.clone. (lib!tokens.Mim.my_inst. lib!tokens.Mim.my_inst.) Bool)
(assert (forall ((self! lib!tokens.Mim.my_inst.) (s! lib!tokens.Mim.my_inst.)) (! (= (ens%lib!tokens.Mim.impl&%5.clone. self! s!) (and (has_type (Poly%lib!tokens.Mim.my_inst. s!) TYPE%lib!tokens.Mim.my_inst.) (= self! s!))) :pattern ((ens%lib!tokens.Mim.impl&%5.clone. self! s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::thread_local_state::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.thread_local_state.) (has_type (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? self!)) TYPE%lib!tokens.Mim.thread_local_state_token_data.)) :pattern ((lib!tokens.Mim.impl&%8.view.? self!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::thread_local_state::arbitrary")
(declare-fun ens%lib!tokens.Mim.impl&%8.arbitrary. (Int lib!tokens.Mim.thread_local_state.) Bool)
(assert (forall ((no%param Int) (%return! lib!tokens.Mim.thread_local_state.)) (! (= (ens%lib!tokens.Mim.impl&%8.arbitrary. no%param %return!) (has_type (Poly%lib!tokens.Mim.thread_local_state. %return!) TYPE%lib!tokens.Mim.thread_local_state.)) :pattern ((ens%lib!tokens.Mim.impl&%8.arbitrary. no%param %return!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::right_to_use_thread::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.right_to_use_thread.) (has_type (Poly%lib!tokens.Mim.right_to_use_thread_token_data. (lib!tokens.Mim.impl&%9.view.? self!)) TYPE%lib!tokens.Mim.right_to_use_thread_token_data.)) :pattern ((lib!tokens.Mim.impl&%9.view.? self!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::right_to_use_thread::arbitrary")
(declare-fun ens%lib!tokens.Mim.impl&%9.arbitrary. (Int lib!tokens.Mim.right_to_use_thread.) Bool)
(assert (forall ((no%param Int) (%return! lib!tokens.Mim.right_to_use_thread.)) (! (= (ens%lib!tokens.Mim.impl&%9.arbitrary. no%param %return!) (has_type (Poly%lib!tokens.Mim.right_to_use_thread. %return!) TYPE%lib!tokens.Mim.right_to_use_thread.)) :pattern ((ens%lib!tokens.Mim.impl&%9.arbitrary. no%param %return!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::block::arbitrary")
(declare-fun ens%lib!tokens.Mim.impl&%10.arbitrary. (Int lib!tokens.Mim.block.) Bool)
(assert (forall ((no%param Int) (%return! lib!tokens.Mim.block.)) (! (= (ens%lib!tokens.Mim.impl&%10.arbitrary. no%param %return!) (has_type (Poly%lib!tokens.Mim.block. %return!) TYPE%lib!tokens.Mim.block.)) :pattern ((ens%lib!tokens.Mim.impl&%10.arbitrary. no%param %return!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::thread_of_segment::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.thread_of_segment.) (has_type (Poly%lib!tokens.Mim.thread_of_segment_token_data. (lib!tokens.Mim.impl&%11.view.? self!)) TYPE%lib!tokens.Mim.thread_of_segment_token_data.)) :pattern ((lib!tokens.Mim.impl&%11.view.? self!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::thread_of_segment::arbitrary")
(declare-fun ens%lib!tokens.Mim.impl&%11.arbitrary. (Int lib!tokens.Mim.thread_of_segment.) Bool)
(assert (forall ((no%param Int) (%return! lib!tokens.Mim.thread_of_segment.)) (! (= (ens%lib!tokens.Mim.impl&%11.arbitrary. no%param %return!) (has_type (Poly%lib!tokens.Mim.thread_of_segment. %return!) TYPE%lib!tokens.Mim.thread_of_segment.)) :pattern ((ens%lib!tokens.Mim.impl&%11.arbitrary. no%param %return!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::delay::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.delay.) (has_type (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? self!)) TYPE%lib!tokens.Mim.delay_token_data.)) :pattern ((lib!tokens.Mim.impl&%12.view.? self!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::delay::arbitrary")
(declare-fun ens%lib!tokens.Mim.impl&%12.arbitrary. (Int lib!tokens.Mim.delay.) Bool)
(assert (forall ((no%param Int) (%return! lib!tokens.Mim.delay.)) (! (= (ens%lib!tokens.Mim.impl&%12.arbitrary. no%param %return!) (has_type (Poly%lib!tokens.Mim.delay. %return!) TYPE%lib!tokens.Mim.delay.)) :pattern ((ens%lib!tokens.Mim.impl&%12.arbitrary. no%param %return!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::heap_of_page::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.heap_of_page.) (has_type (Poly%lib!tokens.Mim.heap_of_page_token_data. (lib!tokens.Mim.impl&%13.view.? self!)) TYPE%lib!tokens.Mim.heap_of_page_token_data.)) :pattern ((lib!tokens.Mim.impl&%13.view.? self!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::heap_of_page::arbitrary")
(declare-fun ens%lib!tokens.Mim.impl&%13.arbitrary. (Int lib!tokens.Mim.heap_of_page.) Bool)
(assert (forall ((no%param Int) (%return! lib!tokens.Mim.heap_of_page.)) (! (= (ens%lib!tokens.Mim.impl&%13.arbitrary. no%param %return!) (has_type (Poly%lib!tokens.Mim.heap_of_page. %return!) TYPE%lib!tokens.Mim.heap_of_page.)) :pattern ((ens%lib!tokens.Mim.impl&%13.arbitrary. no%param %return!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::actor::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.actor.) (has_type (Poly%lib!tokens.Mim.actor_token_data. (lib!tokens.Mim.impl&%14.view.? self!)) TYPE%lib!tokens.Mim.actor_token_data.)) :pattern ((lib!tokens.Mim.impl&%14.view.? self!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::actor::arbitrary")
(declare-fun ens%lib!tokens.Mim.impl&%14.arbitrary. (Int lib!tokens.Mim.actor.) Bool)
(assert (forall ((no%param Int) (%return! lib!tokens.Mim.actor.)) (! (= (ens%lib!tokens.Mim.impl&%14.arbitrary. no%param %return!) (has_type (Poly%lib!tokens.Mim.actor. %return!) TYPE%lib!tokens.Mim.actor.)) :pattern ((ens%lib!tokens.Mim.impl&%14.arbitrary. no%param %return!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::delay_actor::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.delay_actor.) (has_type (Poly%lib!tokens.Mim.delay_actor_token_data. (lib!tokens.Mim.impl&%15.view.? self!)) TYPE%lib!tokens.Mim.delay_actor_token_data.)) :pattern ((lib!tokens.Mim.impl&%15.view.? self!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::delay_actor::arbitrary")
(declare-fun ens%lib!tokens.Mim.impl&%15.arbitrary. (Int lib!tokens.Mim.delay_actor.) Bool)
(assert (forall ((no%param Int) (%return! lib!tokens.Mim.delay_actor.)) (! (= (ens%lib!tokens.Mim.impl&%15.arbitrary. no%param %return!) (has_type (Poly%lib!tokens.Mim.delay_actor. %return!) TYPE%lib!tokens.Mim.delay_actor.)) :pattern ((ens%lib!tokens.Mim.impl&%15.arbitrary. no%param %return!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::reserved_uniq::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.reserved_uniq.) (has_type (Poly%lib!tokens.Mim.reserved_uniq_token_data. (lib!tokens.Mim.impl&%16.view.? self!)) TYPE%lib!tokens.Mim.reserved_uniq_token_data.)) :pattern ((lib!tokens.Mim.impl&%16.view.? self!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::reserved_uniq::arbitrary")
(declare-fun ens%lib!tokens.Mim.impl&%16.arbitrary. (Int lib!tokens.Mim.reserved_uniq.) Bool)
(assert (forall ((no%param Int) (%return! lib!tokens.Mim.reserved_uniq.)) (! (= (ens%lib!tokens.Mim.impl&%16.arbitrary. no%param %return!) (has_type (Poly%lib!tokens.Mim.reserved_uniq. %return!) TYPE%lib!tokens.Mim.reserved_uniq.)) :pattern ((ens%lib!tokens.Mim.impl&%16.arbitrary. no%param %return!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::thread_checked_state::view")
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.thread_checked_state.) (has_type (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? self!)) TYPE%lib!tokens.Mim.thread_checked_state_token_data.)) :pattern ((lib!tokens.Mim.impl&%17.view.? self!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::thread_checked_state::arbitrary")
(declare-fun ens%lib!tokens.Mim.impl&%17.arbitrary. (Int lib!tokens.Mim.thread_checked_state.) Bool)
(assert (forall ((no%param Int) (%return! lib!tokens.Mim.thread_checked_state.)) (! (= (ens%lib!tokens.Mim.impl&%17.arbitrary. no%param %return!) (has_type (Poly%lib!tokens.Mim.thread_checked_state. %return!) TYPE%lib!tokens.Mim.thread_checked_state.)) :pattern ((ens%lib!tokens.Mim.impl&%17.arbitrary. no%param %return!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::Instance::clone")
(declare-fun ens%lib!tokens.Mim.impl&%18.clone. (lib!tokens.Mim.Instance. lib!tokens.Mim.Instance.) Bool)
(assert (forall ((self! lib!tokens.Mim.Instance.) (s! lib!tokens.Mim.Instance.)) (! (= (ens%lib!tokens.Mim.impl&%18.clone. self! s!) (and (has_type (Poly%lib!tokens.Mim.Instance. s!) TYPE%lib!tokens.Mim.Instance.) (= self! s!))) :pattern ((ens%lib!tokens.Mim.impl&%18.clone. self! s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_finite")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_finite.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_finite.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_finite.? self!) (and (and (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))))) (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. self!)))))) (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. self!)))))) :pattern ((lib!tokens.Mim.impl&%21.inv_finite.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_finite")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_finite. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_finite. s!) (lib!tokens.Mim.impl&%21.inv_finite.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_finite. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_finite. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_finite. s!) (lib!tokens.Mim.impl&%21.inv_finite.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_finite. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_reserved")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_reserved.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_reserved.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_reserved.? self!) (forall ((heap_id$ Poly)) (! (=> (has_type heap_id$ TYPE%lib!tokens.HeapId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. self!))) heap_id$) (and (= (lib!tokens.HeapId./HeapId/id (%Poly%lib!tokens.HeapId. heap_id$)) 0) (= (lib!tokens.HeapId./HeapId/provenance (%Poly%lib!tokens.HeapId. heap_id$)) (vstd!raw_ptr.impl&%0.null.? (I 0)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. self!))) heap_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_reserved.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_reserved")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved. s!) (lib!tokens.Mim.impl&%21.inv_reserved.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved. s!) (lib!tokens.Mim.impl&%21.inv_reserved.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_reserved2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_reserved2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_reserved2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_reserved2.? self!) (forall ((hid1$ Poly) (hid2$ Poly)) (! (=> (and (has_type hid1$ TYPE%lib!tokens.HeapId.) (has_type hid2$ TYPE%lib!tokens.HeapId.)) (=> (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. self!))) hid1$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. self!)))) hid2$)) (not (= (lib!tokens.HeapId./HeapId/uniq (%Poly%lib!tokens.HeapId. hid1$)) (lib!tokens.HeapId./HeapId/uniq (%Poly%lib!tokens.HeapId. hid2$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. self!))) hid1$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. self!)))) hid2$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_reserved2.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_reserved2")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved2. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved2. s!) (lib!tokens.Mim.impl&%21.inv_reserved2.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved2. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved2. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved2. s!) (lib!tokens.Mim.impl&%21.inv_reserved2.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved2. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_right_to_set_inst")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_right_to_set_inst.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_right_to_set_inst.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_right_to_set_inst.? self!) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. self!)) (is-core!option.Option./None_ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. self!))))) :pattern ((lib!tokens.Mim.impl&%21.inv_right_to_set_inst.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_right_to_set_inst")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_right_to_set_inst. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_right_to_set_inst. s!) (lib!tokens.Mim.impl&%21.inv_right_to_set_inst.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_right_to_set_inst. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_right_to_set_inst. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_right_to_set_inst. s!) (lib!tokens.Mim.impl&%21.inv_right_to_set_inst.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_right_to_set_inst. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_heap_of_page_delay")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_heap_of_page_delay.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_heap_of_page_delay.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_heap_of_page_delay.? self!) (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. self!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. self!)))))) :pattern ((lib!tokens.Mim.impl&%21.inv_heap_of_page_delay.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_heap_of_page_delay")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_of_page_delay. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_of_page_delay. s!) (lib!tokens.Mim.impl&%21.inv_heap_of_page_delay.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_of_page_delay. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_of_page_delay. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_of_page_delay. s!) (lib!tokens.Mim.impl&%21.inv_heap_of_page_delay.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_of_page_delay. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_delay_state_for_page")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_delay_state_for_page.))
(define-fun is-lib!tokens.DelayState./UseDelayedFree_ ((c lib!tokens.DelayState.)) Bool ((_ is lib!tokens.DelayState./UseDelayedFree) c))
(define-fun is-lib!tokens.DelayState./Freeing_ ((c lib!tokens.DelayState.)) Bool ((_ is lib!tokens.DelayState./Freeing) c))
(define-fun is-lib!tokens.DelayState./NoDelayedFree_ ((c lib!tokens.DelayState.)) Bool ((_ is lib!tokens.DelayState./NoDelayedFree) c))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_delay_state_for_page.) (forall ((self! Poly) (page_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_delay_state_for_page.? self! page_id!) (let ((tmp%%$ (%Poly%lib!tokens.DelayState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. self!))) page_id!)))) (ite (is-lib!tokens.DelayState./UseDelayedFree_ tmp%%$) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. self!)))) page_id!)) (ite (is-lib!tokens.DelayState./Freeing_ tmp%%$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. self!)))) page_id!) (and (is-lib!tokens.DelayState./NoDelayedFree_ tmp%%$) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. self!)))) page_id!))))))) :pattern ((lib!tokens.Mim.impl&%21.inv_delay_state_for_page.? self! page_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_delay_state")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_delay_state.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_delay_state.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_delay_state.? self!) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. self!)))) page_id$) (lib!tokens.Mim.impl&%21.inv_delay_state_for_page.? self! page_id$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. self!)))) page_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_delay_state.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_delay_state")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_state. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_state. s!) (lib!tokens.Mim.impl&%21.inv_delay_state.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_state. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_state. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_state. s!) (lib!tokens.Mim.impl&%21.inv_delay_state.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_state. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_delay_actor_for_page")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_delay_actor_for_page.))
(define-fun is-lib!tokens.DelayFreeingActor./HeapUnknown_ ((c lib!tokens.DelayFreeingActor.)) Bool ((_ is lib!tokens.DelayFreeingActor./HeapUnknown) c))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_delay_actor_for_page.) (forall ((self! Poly) (page_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_delay_actor_for_page.? self! page_id!) (let ((tmp%%$ (%Poly%lib!tokens.DelayFreeingActor. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. self!))) page_id!)))) (ite (is-lib!tokens.DelayFreeingActor./HeapUnknown_ tmp%%$) (let ((thread_id$ (%Poly%lib!thread.ThreadId. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))))))) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) (Poly%lib!thread.ThreadId. thread_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!thread.ThreadId. thread_id$)))))) page_id!)) (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!thread.ThreadId. thread_id$))))) page_id!))))) (let ((heap_id$ (lib!tokens.DelayFreeingActor./Heap/0 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$))))) (let ((hsa$ (lib!tokens.DelayFreeingActor./Heap/1 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$))))) (let ((psa$ (lib!tokens.DelayFreeingActor./Heap/2 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$))))) (let ((thread_id$ (%Poly%lib!thread.ThreadId. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!tokens.HeapId. heap_id$))))) (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. self!)))) (Poly%lib!tokens.HeapId. heap_id$)) (= (%Poly%lib!types.HeapSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!tokens.HeapId. heap_id$))) hsa$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. self!)))) (Poly%lib!tokens.HeapId. heap_id$))) (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) (Poly%lib!thread.ThreadId. thread_id$))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!thread.ThreadId. thread_id$)))))) page_id!)) (= (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!thread.ThreadId. thread_id$))))) page_id!))) psa$)) (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!thread.ThreadId. thread_id$))))) page_id!))))))))))) :pattern ((lib!tokens.Mim.impl&%21.inv_delay_actor_for_page.? self! page_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_delay_actor")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_delay_actor.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_delay_actor.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_delay_actor.? self!) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. self!)))) page_id$) (lib!tokens.Mim.impl&%21.inv_delay_actor_for_page.? self! page_id$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. self!)))) page_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_delay_actor.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_delay_actor")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor. s!) (lib!tokens.Mim.impl&%21.inv_delay_actor.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor. s!) (lib!tokens.Mim.impl&%21.inv_delay_actor.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor. s!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::spec_le")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.spec_le.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.spec_le.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.spec_le.? A&. A& self! s2!) (vstd!set.impl&%0.subset_of.? A&. A& self! s2!)) :pattern ((vstd!set.impl&%0.spec_le.? A&. A& self! s2!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_delay_actor_sub")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_delay_actor_sub.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_delay_actor_sub.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_delay_actor_sub.? self!) (vstd!set.impl&%0.subset_of.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. self!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. self!)))))) :pattern ((lib!tokens.Mim.impl&%21.inv_delay_actor_sub.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_delay_actor_sub")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor_sub. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor_sub. s!) (lib!tokens.Mim.impl&%21.inv_delay_actor_sub.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor_sub. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor_sub. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor_sub. s!) (lib!tokens.Mim.impl&%21.inv_delay_actor_sub.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor_sub. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_checked_threads")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_checked_threads.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_checked_threads.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_checked_threads.? self!) (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!thread.ThreadId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. self!)))))) :pattern ((lib!tokens.Mim.impl&%21.inv_checked_threads.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_checked_threads")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_checked_threads. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_checked_threads. s!) (lib!tokens.Mim.impl&%21.inv_checked_threads.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_checked_threads. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_checked_threads. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_checked_threads. s!) (lib!tokens.Mim.impl&%21.inv_checked_threads.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_checked_threads. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_no_delay_actor_for_checked")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_no_delay_actor_for_checked.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_no_delay_actor_for_checked.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_no_delay_actor_for_checked.? self!) (forall ((thread_id$ Poly) (page_id$ Poly)) (! (=> (and (has_type thread_id$ TYPE%lib!thread.ThreadId.) (has_type page_id$ TYPE%lib!tokens.PageId.)) (=> (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (%Poly%lib!tokens.ThreadCheckedState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$)))) page_id$)) (and (= (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$)))) page_id$))) 0) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. self!)))) page_id$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) page_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_no_delay_actor_for_checked.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_no_delay_actor_for_checked")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_no_delay_actor_for_checked. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_no_delay_actor_for_checked. s!) (lib!tokens.Mim.impl&%21.inv_no_delay_actor_for_checked.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_no_delay_actor_for_checked. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_no_delay_actor_for_checked. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_no_delay_actor_for_checked. s!) (lib!tokens.Mim.impl&%21.inv_no_delay_actor_for_checked.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_no_delay_actor_for_checked. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::right_to_use_thread_complement")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.right_to_use_thread_complement.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.right_to_use_thread_complement.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.right_to_use_thread_complement.? self!) (forall ((thread_id$ Poly)) (! (=> (has_type thread_id$ TYPE%lib!thread.ThreadId.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (Poly%vstd!set.Set<lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. self!))) thread_id$) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (Poly%vstd!set.Set<lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. self!))) thread_id$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$))))) :pattern ((lib!tokens.Mim.impl&%21.right_to_use_thread_complement.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_right_to_use_thread_complement")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_right_to_use_thread_complement. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_right_to_use_thread_complement. s!) (lib!tokens.Mim.impl&%21.right_to_use_thread_complement.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_right_to_use_thread_complement. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_right_to_use_thread_complement. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_right_to_use_thread_complement. s!) (lib!tokens.Mim.impl&%21.right_to_use_thread_complement.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_right_to_use_thread_complement. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::heap_of_thread_is_valid")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.heap_of_thread_is_valid.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.heap_of_thread_is_valid.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.heap_of_thread_is_valid.? self!) (forall ((thread_id$ Poly)) (! (=> (has_type thread_id$ TYPE%lib!thread.ThreadId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. self!)))) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$))))) :pattern ((lib!tokens.Mim.impl&%21.heap_of_thread_is_valid.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_heap_of_thread_is_valid")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_thread_is_valid. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_thread_is_valid. s!) (lib!tokens.Mim.impl&%21.heap_of_thread_is_valid.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_thread_is_valid. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_thread_is_valid. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_thread_is_valid. s!) (lib!tokens.Mim.impl&%21.heap_of_thread_is_valid.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_thread_is_valid. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::wf_heap_shared_access_requires_inst")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.wf_heap_shared_access_requires_inst.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.wf_heap_shared_access_requires_inst.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.wf_heap_shared_access_requires_inst.? self!) (=> (is-core!option.Option./None_ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. self!))) (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.HeapId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. self!)))) (vstd!set.impl&%0.empty.? $ TYPE%lib!tokens.HeapId.)))) :pattern ((lib!tokens.Mim.impl&%21.wf_heap_shared_access_requires_inst.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_wf_heap_shared_access_requires_inst")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access_requires_inst. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access_requires_inst. s!) (lib!tokens.Mim.impl&%21.wf_heap_shared_access_requires_inst.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access_requires_inst. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access_requires_inst. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access_requires_inst. s!) (lib!tokens.Mim.impl&%21.wf_heap_shared_access_requires_inst.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access_requires_inst. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::wf_heap_shared_access")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.wf_heap_shared_access.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.wf_heap_shared_access.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.wf_heap_shared_access.? self!) (forall ((heap_id$ Poly)) (! (=> (has_type heap_id$ TYPE%lib!tokens.HeapId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. self!)))) heap_id$) (lib!types.impl&%17.wf2.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. self!))) heap_id$) heap_id$ (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. self!)))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. self!)))) heap_id$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. self!))) heap_id$))))) :pattern ((lib!tokens.Mim.impl&%21.wf_heap_shared_access.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_wf_heap_shared_access")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access. s!) (lib!tokens.Mim.impl&%21.wf_heap_shared_access.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access. s!) (lib!tokens.Mim.impl&%21.wf_heap_shared_access.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_thread_of_segment1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_thread_of_segment1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_thread_of_segment1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_thread_of_segment1.? self!) (forall ((thread_id$ Poly) (segment_id$ Poly)) (! (=> (and (has_type thread_id$ TYPE%lib!thread.ThreadId.) (has_type segment_id$ TYPE%lib!tokens.SegmentId.)) (=> (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) segment_id$)) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!)))) segment_id$) (= (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) segment_id$) thread_id$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!)))) segment_id$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) segment_id$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!)))) segment_id$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) segment_id$)) :pattern ((lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!)))) segment_id$)) :pattern ((lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) segment_id$)) :pattern ((vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!)))) segment_id$)) :pattern ((vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) segment_id$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) segment_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_thread_of_segment1.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_thread_of_segment1")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment1. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment1. s!) (lib!tokens.Mim.impl&%21.inv_thread_of_segment1.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment1. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment1. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment1. s!) (lib!tokens.Mim.impl&%21.inv_thread_of_segment1.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment1. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_thread_of_segment2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_thread_of_segment2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_thread_of_segment2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_thread_of_segment2.? self!) (forall ((segment_id$ Poly)) (! (=> (has_type segment_id$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!)))) segment_id$) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) segment_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) segment_id$)))))) segment_id$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!)))) segment_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_thread_of_segment2.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_thread_of_segment2")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment2. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment2. s!) (lib!tokens.Mim.impl&%21.inv_thread_of_segment2.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment2. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment2. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment2. s!) (lib!tokens.Mim.impl&%21.inv_thread_of_segment2.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment2. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_thread_has_segment_for_page")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_thread_has_segment_for_page.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_thread_has_segment_for_page.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_thread_has_segment_for_page.? self!) (forall ((thread_id$ Poly) (page_id$ Poly)) (! (=> (and (has_type thread_id$ TYPE%lib!thread.ThreadId.) (has_type page_id$ TYPE%lib!tokens.PageId.)) (=> (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) page_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_thread_has_segment_for_page.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_thread_has_segment_for_page")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_has_segment_for_page. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_has_segment_for_page. s!) (lib!tokens.Mim.impl&%21.inv_thread_has_segment_for_page.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_has_segment_for_page. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_has_segment_for_page. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_has_segment_for_page. s!) (lib!tokens.Mim.impl&%21.inv_thread_has_segment_for_page.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_has_segment_for_page. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_thread_of_page1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_thread_of_page1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_thread_of_page1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_thread_of_page1.? self!) (forall ((thread_id$ Poly) (page_id$ Poly)) (! (=> (and (has_type thread_id$ TYPE%lib!thread.ThreadId.) (has_type page_id$ TYPE%lib!tokens.PageId.)) (=> (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) page_id$)) (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$)))) page_id$))) 0)) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. self!)))) page_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) page_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_thread_of_page1.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_thread_of_page1")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page1. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page1. s!) (lib!tokens.Mim.impl&%21.inv_thread_of_page1.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page1. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page1. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page1. s!) (lib!tokens.Mim.impl&%21.inv_thread_of_page1.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page1. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_thread_of_page2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_thread_of_page2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_thread_of_page2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_thread_of_page2.? self!) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. self!)))) page_id$) (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!)))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$))))))))) page_id$)) (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)))))))) page_id$))) 0)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. self!)))) page_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_thread_of_page2.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_thread_of_page2")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page2. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page2. s!) (lib!tokens.Mim.impl&%21.inv_thread_of_page2.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page2. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page2. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page2. s!) (lib!tokens.Mim.impl&%21.inv_thread_of_page2.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page2. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::heap_of_page_is_correct")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.heap_of_page_is_correct.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.heap_of_page_is_correct.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.heap_of_page_is_correct.? self!) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. self!)))) page_id$) (= (%Poly%lib!tokens.HeapId. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. self!))) page_id$)) (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. self!)))) page_id$))))) :pattern ((lib!tokens.Mim.impl&%21.heap_of_page_is_correct.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_heap_of_page_is_correct")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_page_is_correct. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_page_is_correct. s!) (lib!tokens.Mim.impl&%21.heap_of_page_is_correct.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_page_is_correct. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_page_is_correct. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_page_is_correct. s!) (lib!tokens.Mim.impl&%21.heap_of_page_is_correct.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_page_is_correct. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_page_shared_access_dom")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_page_shared_access_dom.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_page_shared_access_dom.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_page_shared_access_dom.? self!) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. self!)))) page_id$) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!)))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$))))))))) page_id$)) (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)))))))) page_id$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. self!)))) page_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_page_shared_access_dom.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_page_shared_access_dom")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_dom. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_dom. s!) (lib!tokens.Mim.impl&%21.inv_page_shared_access_dom.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_dom. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_dom. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_dom. s!) (lib!tokens.Mim.impl&%21.inv_page_shared_access_dom.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_dom. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_page_shared_access_eq")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_page_shared_access_eq.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_page_shared_access_eq.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_page_shared_access_eq.? self!) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. self!)))) page_id$) (= (%Poly%lib!types.PageSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. self!))) page_id$)) (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)))))))) page_id$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. self!)))) page_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_page_shared_access_eq.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_page_shared_access_eq")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_eq. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_eq. s!) (lib!tokens.Mim.impl&%21.inv_page_shared_access_eq.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_eq. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_eq. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_eq. s!) (lib!tokens.Mim.impl&%21.inv_page_shared_access_eq.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_eq. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_segment_shared_access_dom")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_segment_shared_access_dom.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_segment_shared_access_dom.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_segment_shared_access_dom.? self!) (forall ((segment_id$ Poly)) (! (=> (has_type segment_id$ TYPE%lib!tokens.SegmentId.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. self!)))) segment_id$) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!)))) segment_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) segment_id$)))))) segment_id$)) (lib!tokens.SegmentState./SegmentState/is_enabled (%Poly%lib!tokens.SegmentState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) segment_id$))))) segment_id$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. self!)))) segment_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_segment_shared_access_dom.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_segment_shared_access_dom")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_dom. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_dom. s!) (lib!tokens.Mim.impl&%21.inv_segment_shared_access_dom.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_dom. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_dom. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_dom. s!) (lib!tokens.Mim.impl&%21.inv_segment_shared_access_dom.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_dom. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_segment_shared_access_eq")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_segment_shared_access_eq.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_segment_shared_access_eq.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_segment_shared_access_eq.? self!) (forall ((segment_id$ Poly)) (! (=> (has_type segment_id$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. self!)))) segment_id$) (= (%Poly%lib!types.SegmentSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. self!))) segment_id$)) (lib!tokens.SegmentState./SegmentState/shared_access (%Poly%lib!tokens.SegmentState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) segment_id$))))) segment_id$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. self!)))) segment_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_segment_shared_access_eq.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_segment_shared_access_eq")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_eq. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_eq. s!) (lib!tokens.Mim.impl&%21.inv_segment_shared_access_eq.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_eq. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_eq. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_eq. s!) (lib!tokens.Mim.impl&%21.inv_segment_shared_access_eq.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_eq. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::block_properties")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.block_properties.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.block_properties.) (forall ((ts! Poly) (block_id! Poly) (block_state! Poly)) (! (= (lib!tokens.Mim.impl&%21.block_properties.? ts! block_id! block_state!) (let ((slice_id$ (lib!tokens.impl&%1.page_id_for_slice.? block_id!))) (and (and (and (and (and (and (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. ts!)))) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))) (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. ts!))) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. ts!))) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))))) 0)) (= (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. ts!))) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))))) (lib!tokens.BlockId./BlockId/block_size (%Poly%lib!tokens.BlockId. block_id!)))) (= (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. ts!))) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))))) (lib!tokens.BlockState./BlockState/page_shared_access (%Poly%lib!tokens.BlockState. block_state!)))) (let ((tmp%%$ (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. block_id!)))) (and (<= 0 tmp%%$) (< tmp%%$ (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. ts!))) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))))))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. ts!)))) (Poly%lib!tokens.PageId. slice_id$))) (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. ts!))) (Poly%lib!tokens.PageId. slice_id$))))) (= (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. ts!))) (Poly%lib!tokens.PageId. slice_id$)))) (lib!tokens.BlockState./BlockState/page_slice_shared_access (%Poly%lib!tokens.BlockState. block_state!)))) (= (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. slice_id$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))))) (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. ts!))) (Poly%lib!tokens.PageId. slice_id$)))))) (lib!tokens.SegmentState./SegmentState/is_enabled (%Poly%lib!tokens.SegmentState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. ts!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))))))))) (= (lib!tokens.SegmentState./SegmentState/shared_access (%Poly%lib!tokens.SegmentState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. ts!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))))) (lib!tokens.BlockState./BlockState/segment_shared_access (%Poly%lib!tokens.BlockState. block_state!)))) (let ((tmp%%$ (lib!tokens.BlockState./BlockState/heap_id (%Poly%lib!tokens.BlockState. block_state!)))) (=> (not (is-core!option.Option./None_ tmp%%$)) (let ((heap_id$ (%Poly%lib!tokens.HeapId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (= heap_id$ (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. ts!))))))))) :pattern ((lib!tokens.Mim.impl&%21.block_properties.? ts! block_id! block_state!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_block_id_valid_for_block")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_block_id_valid_for_block.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_block_id_valid_for_block.) (forall ((self! Poly) (block_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_block_id_valid_for_block.? self! block_id!) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!)))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (lib!tokens.Mim.impl&%21.block_properties.? (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))))))) block_id! (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. self!))) block_id!)))) :pattern ((lib!tokens.Mim.impl&%21.inv_block_id_valid_for_block.? self! block_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_block_id_valid")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_block_id_valid.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_block_id_valid.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_block_id_valid.? self!) (forall ((block_id$ Poly)) (! (=> (has_type block_id$ TYPE%lib!tokens.BlockId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. self!)))) block_id$) (lib!tokens.Mim.impl&%21.inv_block_id_valid_for_block.? self! block_id$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. self!)))) block_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_block_id_valid.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_block_id_valid")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_valid. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_valid. s!) (lib!tokens.Mim.impl&%21.inv_block_id_valid.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_valid. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_valid. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_valid. s!) (lib!tokens.Mim.impl&%21.inv_block_id_valid.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_valid. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_block_id_at_idx_uniq")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_block_id_at_idx_uniq.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_block_id_at_idx_uniq.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_block_id_at_idx_uniq.? self!) (forall ((bid1$ Poly) (bid2$ Poly)) (! (=> (and (has_type bid1$ TYPE%lib!tokens.BlockId.) (has_type bid2$ TYPE%lib!tokens.BlockId.)) (=> (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. self!)))) bid1$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. self!)))) bid2$)) (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. bid1$)) (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. bid2$)))) (= (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. bid1$)) (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. bid2$)))) (= bid1$ bid2$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. self!)))) bid1$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. self!)))) bid2$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_block_id_at_idx_uniq.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_block_id_at_idx_uniq")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_at_idx_uniq. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_at_idx_uniq. s!) (lib!tokens.Mim.impl&%21.inv_block_id_at_idx_uniq.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_at_idx_uniq. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_at_idx_uniq. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_at_idx_uniq. s!) (lib!tokens.Mim.impl&%21.inv_block_id_at_idx_uniq.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_at_idx_uniq. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::heap_ids_thread_id1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.heap_ids_thread_id1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.heap_ids_thread_id1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.heap_ids_thread_id1.? self!) (forall ((thread_id$ Poly)) (! (=> (has_type thread_id$ TYPE%lib!thread.ThreadId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. self!)))) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) (= (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) thread_id$)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$))))) :pattern ((lib!tokens.Mim.impl&%21.heap_ids_thread_id1.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_heap_ids_thread_id1")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id1. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id1. s!) (lib!tokens.Mim.impl&%21.heap_ids_thread_id1.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id1. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id1. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id1. s!) (lib!tokens.Mim.impl&%21.heap_ids_thread_id1.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id1. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::heap_ids_thread_id2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.heap_ids_thread_id2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.heap_ids_thread_id2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.heap_ids_thread_id2.? self!) (forall ((heap_id$ Poly)) (! (=> (has_type heap_id$ TYPE%lib!tokens.HeapId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. self!)))) heap_id$) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. self!))) heap_id$)) (= (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. self!))) heap_id$)))) (%Poly%lib!tokens.HeapId. heap_id$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. self!)))) heap_id$))))) :pattern ((lib!tokens.Mim.impl&%21.heap_ids_thread_id2.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_heap_ids_thread_id2")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id2. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id2. s!) (lib!tokens.Mim.impl&%21.heap_ids_thread_id2.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id2. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id2. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id2. s!) (lib!tokens.Mim.impl&%21.heap_ids_thread_id2.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id2. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::inv_heap_shared_access")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.inv_heap_shared_access.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.inv_heap_shared_access.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.inv_heap_shared_access.? self!) (forall ((thread_id$ Poly)) (! (=> (has_type thread_id$ TYPE%lib!thread.ThreadId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. self!)))) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) (= (%Poly%lib!types.HeapSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. self!))) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$)))))) (lib!tokens.HeapState./HeapState/shared_access (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$))))) :pattern ((lib!tokens.Mim.impl&%21.inv_heap_shared_access.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_inv_heap_shared_access")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_shared_access. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_shared_access. s!) (lib!tokens.Mim.impl&%21.inv_heap_shared_access.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_shared_access. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_shared_access. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_shared_access. s!) (lib!tokens.Mim.impl&%21.inv_heap_shared_access.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_shared_access. s!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_implies_segment_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_implies_segment_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_implies_segment_enabled.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_implies_segment_enabled.? self!) (forall ((thread_id$ Poly) (page_id$ Poly)) (! (=> (and (has_type thread_id$ TYPE%lib!thread.ThreadId.) (has_type page_id$ TYPE%lib!tokens.PageId.)) (=> (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!)))) thread_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) page_id$)) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)))) (lib!tokens.SegmentState./SegmentState/is_enabled (%Poly%lib!tokens.SegmentState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$)))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. self!))) thread_id$))))) page_id$))))) :pattern ((lib!tokens.Mim.impl&%21.page_implies_segment_enabled.? self!))))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::lemma_msg_page_implies_segment_enabled")
(declare-fun req%lib!tokens.Mim.impl&%21.lemma_msg_page_implies_segment_enabled. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.lemma_msg_page_implies_segment_enabled. s!) (lib!tokens.Mim.impl&%21.page_implies_segment_enabled.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((req%lib!tokens.Mim.impl&%21.lemma_msg_page_implies_segment_enabled. s!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.lemma_msg_page_implies_segment_enabled. (lib!tokens.Mim.State.) Bool)
(assert (forall ((s! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.lemma_msg_page_implies_segment_enabled. s!) (lib!tokens.Mim.impl&%21.page_implies_segment_enabled.? (Poly%lib!tokens.Mim.State. s!))) :pattern ((ens%lib!tokens.Mim.impl&%21.lemma_msg_page_implies_segment_enabled. s!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::raw_ptr::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!raw_ptr.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!raw_ptr.impl&%4.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!) (vstd!view.View.view.? $ (PTR T&. T&) self!)) :pattern ((vstd!view.View.view.? (CONST_PTR $) (PTR T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%0::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%0.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%0.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (REF A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (REF A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%2::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%2.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%2.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (BOX $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%4::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%4.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%4.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (RC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%6::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%6.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%6.view.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A&. A&) (= (vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!) (vstd!view.View.view.? A&. A& self!))) :pattern ((vstd!view.View.view.? (ARC $ ALLOCATOR_GLOBAL A&.) A& self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%10::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%10.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%10.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ TYPE%tuple%0. self!) self!) :pattern ((vstd!view.View.view.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%12::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%12.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%12.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ BOOL self!) self!) :pattern ((vstd!view.View.view.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%14::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%14.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%14.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 8) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%16::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%16.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%16.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 16) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%18::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%18.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%18.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 32) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%20::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%20.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%20.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%24::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%24.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%24.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (UINT SZ) self!) self!) :pattern ((vstd!view.View.view.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%32::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%32.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%32.view.) (forall ((self! Poly)) (! (= (vstd!view.View.view.? $ (SINT 64) self!) self!) :pattern ((vstd!view.View.view.? $ (SINT 64) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%40::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%40.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%40.view.) (forall ((A0&. Dcr) (A0& Type) (self! Poly)) (! (=> (tr_bound%vstd!view.View. A0&. A0&) (= (vstd!view.View.view.? $ (TYPE%tuple%1. A0&. A0&) self!) (Poly%tuple%1. (tuple%1./tuple%1 (vstd!view.View.view.? A0&. A0& (tuple%1./tuple%1/0 (%Poly%tuple%1. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%1. A0&. A0&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%42::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%42.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%42.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (= (vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!) (Poly%tuple%2. (tuple%2./tuple%2 (vstd!view.View.view.? A0&. A0& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (vstd!view.View.view.? A1&. A1& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%2. A0&. A0& A1&. A1&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%44::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%44.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%44.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (= (vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!) (Poly%tuple%3. (tuple%3./tuple%3 (vstd!view.View.view.? A0&. A0& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A1&. A1& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))) (vstd!view.View.view.? A2&. A2& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&) self!))))))
(set-info :comment ";; Function-Axioms vstd::view::impl&%46::view")
(assert (fuel_bool_default fuel%vstd!view.impl&%46.view.))
(assert (=> (fuel_bool fuel%vstd!view.impl&%46.view.) (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type) (self! Poly)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (= (vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!) (Poly%tuple%4. (tuple%4./tuple%4 (vstd!view.View.view.? A0&. A0& (tuple%4./tuple%4/0 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A1&. A1& (tuple%4./tuple%4/1 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A2&. A2& (tuple%4./tuple%4/2 (%Poly%tuple%4. self!))) (vstd!view.View.view.? A3&. A3& (tuple%4./tuple%4/3 (%Poly%tuple%4. self!))))))) :pattern ((vstd!view.View.view.? $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&) self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_4")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_4.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_4.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_4.? self!) (lib!tokens.Mim.Step./page_mk_block_tokens/4 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_4.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%0.arrow_4.? self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_4.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_1.? self!) (lib!tokens.Mim.Step./block_in_range/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.impl&%0.arrow_1.? self!)) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_3")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_3.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_3.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_3.? self!) (lib!tokens.Mim.Step./page_mk_block_tokens/3 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_3.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%0.arrow_3.? self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_3.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_set_inst_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_set_inst_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_set_inst_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_set_inst_0.? self!) (lib!tokens.Mim.Step./set_inst/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_set_inst_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.impl&%0.arrow_set_inst_0.? self!)) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_set_inst_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_actor_make_idle_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_actor_make_idle_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_actor_make_idle_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_actor_make_idle_0.? self!) (lib!tokens.Mim.Step./actor_make_idle/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_actor_make_idle_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%0.arrow_actor_make_idle_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_actor_make_idle_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_actor_abandon_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_actor_abandon_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_actor_abandon_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_actor_abandon_0.? self!) (lib!tokens.Mim.Step./actor_abandon/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_actor_abandon_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%0.arrow_actor_abandon_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_actor_abandon_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_set_use_delayed_free_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_set_use_delayed_free_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_set_use_delayed_free_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_set_use_delayed_free_0.? self!) (lib!tokens.Mim.Step./set_use_delayed_free/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_set_use_delayed_free_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%0.arrow_set_use_delayed_free_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_set_use_delayed_free_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_delay_enter_freeing_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_0.? self!) (lib!tokens.Mim.Step./delay_enter_freeing/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_delay_enter_freeing_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_1.? self!) (lib!tokens.Mim.Step./delay_enter_freeing/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_1.? self!)) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_delay_enter_freeing_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_delay_leave_freeing_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_delay_leave_freeing_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_delay_leave_freeing_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_delay_leave_freeing_0.? self!) (lib!tokens.Mim.Step./delay_leave_freeing/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_delay_leave_freeing_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%0.arrow_delay_leave_freeing_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_delay_leave_freeing_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_delay_lookup_heap_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_delay_lookup_heap_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_delay_lookup_heap_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_delay_lookup_heap_0.? self!) (lib!tokens.Mim.Step./delay_lookup_heap/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_delay_lookup_heap_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.impl&%0.arrow_delay_lookup_heap_0.? self!)) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_delay_lookup_heap_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_block_set_heap_id_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_block_set_heap_id_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_block_set_heap_id_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_block_set_heap_id_0.? self!) (lib!tokens.Mim.Step./block_set_heap_id/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_block_set_heap_id_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.impl&%0.arrow_block_set_heap_id_0.? self!)) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_block_set_heap_id_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_create_thread_mk_tokens_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_0.? self!) (lib!tokens.Mim.Step./create_thread_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_create_thread_mk_tokens_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_1.? self!) (lib!tokens.Mim.Step./create_thread_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_1.? self!)) TYPE%lib!tokens.ThreadState.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_thread_mk_tokens_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_create_segment_mk_tokens_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_0.? self!) (lib!tokens.Mim.Step./create_segment_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_create_segment_mk_tokens_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_1.? self!) (lib!tokens.Mim.Step./create_segment_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_1.? self!)) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_create_segment_mk_tokens_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_2.? self!) (lib!tokens.Mim.Step./create_segment_mk_tokens/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_segment_mk_tokens_2.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_segment_enable_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_segment_enable_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_segment_enable_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_segment_enable_0.? self!) (lib!tokens.Mim.Step./segment_enable/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_segment_enable_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%0.arrow_segment_enable_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_segment_enable_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_segment_enable_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_segment_enable_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_segment_enable_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_segment_enable_1.? self!) (lib!tokens.Mim.Step./segment_enable/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_segment_enable_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.Mim.impl&%0.arrow_segment_enable_1.? self!)) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_segment_enable_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_segment_enable_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_segment_enable_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_segment_enable_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_segment_enable_2.? self!) (lib!tokens.Mim.Step./segment_enable/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_segment_enable_2.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_create_page_mk_tokens_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_0.? self!) (lib!tokens.Mim.Step./create_page_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_create_page_mk_tokens_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_1.? self!) (lib!tokens.Mim.Step./create_page_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_1.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_create_page_mk_tokens_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_2.? self!) (lib!tokens.Mim.Step./create_page_mk_tokens/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_2.? self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_2.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_create_page_mk_tokens_3")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_3.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_3.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_3.? self!) (lib!tokens.Mim.Step./create_page_mk_tokens/3 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_3.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_3.? self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_3.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_create_page_mk_tokens_4")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_4.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_4.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_4.? self!) (lib!tokens.Mim.Step./create_page_mk_tokens/4 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_create_page_mk_tokens_4.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_enable_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_enable_0.? self!) (lib!tokens.Mim.Step./page_enable/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_enable_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%0.arrow_page_enable_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_enable_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_enable_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_enable_1.? self!) (lib!tokens.Mim.Step./page_enable/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_enable_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%0.arrow_page_enable_1.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_enable_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_enable_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_enable_2.? self!) (lib!tokens.Mim.Step./page_enable/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_enable_2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%0.arrow_page_enable_2.? self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_enable_2.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_enable_3")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_3.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_3.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_enable_3.? self!) (lib!tokens.Mim.Step./page_enable/3 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_enable_3.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_enable_4")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_4.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_enable_4.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_enable_4.? self!) (lib!tokens.Mim.Step./page_enable/4 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_enable_4.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_mk_block_tokens_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_0.? self!) (lib!tokens.Mim.Step./page_mk_block_tokens/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_mk_block_tokens_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_1.? self!) (lib!tokens.Mim.Step./page_mk_block_tokens/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_1.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_mk_block_tokens_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_2.? self!) (lib!tokens.Mim.Step./page_mk_block_tokens/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_2.? self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_2.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_mk_block_tokens_3")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_3.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_3.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_3.? self!) (lib!tokens.Mim.Step./page_mk_block_tokens/3 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_3.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_3.? self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_3.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_mk_block_tokens_4")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_4.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_4.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_4.? self!) (lib!tokens.Mim.Step./page_mk_block_tokens/4 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_4.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_4.? self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_mk_block_tokens_4.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_destroy_block_tokens_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_0.? self!) (lib!tokens.Mim.Step./page_destroy_block_tokens/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_destroy_block_tokens_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_1.? self!) (lib!tokens.Mim.Step./page_destroy_block_tokens/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_1.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_destroy_block_tokens_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_2.? self!) (lib!tokens.Mim.Step./page_destroy_block_tokens/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_destroy_block_tokens_2.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_check_delay_state_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_0.? self!) (lib!tokens.Mim.Step./page_check_delay_state/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_check_delay_state_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_1.? self!) (lib!tokens.Mim.Step./page_check_delay_state/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_1.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_check_delay_state_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_disable_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_disable_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_disable_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_disable_0.? self!) (lib!tokens.Mim.Step./page_disable/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_disable_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%0.arrow_page_disable_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_disable_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_disable_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_disable_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_disable_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_disable_1.? self!) (lib!tokens.Mim.Step./page_disable/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_disable_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%0.arrow_page_disable_1.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_disable_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_disable_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_disable_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_disable_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_disable_2.? self!) (lib!tokens.Mim.Step./page_disable/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_disable_2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%0.arrow_page_disable_2.? self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_disable_2.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_destroy_tokens_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_0.? self!) (lib!tokens.Mim.Step./page_destroy_tokens/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_destroy_tokens_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_1.? self!) (lib!tokens.Mim.Step./page_destroy_tokens/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_1.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_page_destroy_tokens_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_2.? self!) (lib!tokens.Mim.Step./page_destroy_tokens/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_2.? self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_page_destroy_tokens_2.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_block_tokens_distinct_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_0.? self!) (lib!tokens.Mim.Step./block_tokens_distinct/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_0.? self!)) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_block_tokens_distinct_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_1.? self!) (lib!tokens.Mim.Step./block_tokens_distinct/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_1.? self!)) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_block_tokens_distinct_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_block_in_range_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_block_in_range_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_block_in_range_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_block_in_range_0.? self!) (lib!tokens.Mim.Step./block_in_range/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_block_in_range_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%0.arrow_block_in_range_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_block_in_range_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_block_in_range_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_block_in_range_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_block_in_range_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_block_in_range_1.? self!) (lib!tokens.Mim.Step./block_in_range/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_block_in_range_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.impl&%0.arrow_block_in_range_1.? self!)) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_block_in_range_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%0.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%0.arrow_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%0.arrow_dummy_to_use_type_params_0.? self!) (lib!tokens.Mim.Step./dummy_to_use_type_params/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%0.arrow_dummy_to_use_type_params_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.Mim.State. (lib!tokens.Mim.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) TYPE%lib!tokens.Mim.State.)) :pattern ((lib!tokens.Mim.impl&%0.arrow_dummy_to_use_type_params_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_set_inst")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_set_inst.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_set_inst.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_set_inst.? self!) (is-lib!tokens.Mim.Step./set_inst_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_set_inst.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_set_inst_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_set_inst_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_set_inst_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_set_inst_0.? self!) (lib!tokens.Mim.Step./set_inst/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_set_inst_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.Mim.Instance. (lib!tokens.Mim.impl&%1.get_set_inst_0.? self!)) TYPE%lib!tokens.Mim.Instance.)) :pattern ((lib!tokens.Mim.impl&%1.get_set_inst_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_actor_make_idle")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_actor_make_idle.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_actor_make_idle.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_actor_make_idle.? self!) (is-lib!tokens.Mim.Step./actor_make_idle_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_actor_make_idle.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_actor_make_idle_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_actor_make_idle_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_actor_make_idle_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_actor_make_idle_0.? self!) (lib!tokens.Mim.Step./actor_make_idle/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_actor_make_idle_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%1.get_actor_make_idle_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%1.get_actor_make_idle_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_actor_abandon")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_actor_abandon.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_actor_abandon.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_actor_abandon.? self!) (is-lib!tokens.Mim.Step./actor_abandon_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_actor_abandon.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_actor_abandon_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_actor_abandon_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_actor_abandon_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_actor_abandon_0.? self!) (lib!tokens.Mim.Step./actor_abandon/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_actor_abandon_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%1.get_actor_abandon_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%1.get_actor_abandon_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_set_use_delayed_free")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_set_use_delayed_free.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_set_use_delayed_free.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_set_use_delayed_free.? self!) (is-lib!tokens.Mim.Step./set_use_delayed_free_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_set_use_delayed_free.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_set_use_delayed_free_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_set_use_delayed_free_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_set_use_delayed_free_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_set_use_delayed_free_0.? self!) (lib!tokens.Mim.Step./set_use_delayed_free/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_set_use_delayed_free_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%1.get_set_use_delayed_free_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%1.get_set_use_delayed_free_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_delay_enter_freeing")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_delay_enter_freeing.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_delay_enter_freeing.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_delay_enter_freeing.? self!) (is-lib!tokens.Mim.Step./delay_enter_freeing_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_delay_enter_freeing.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_delay_enter_freeing_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_delay_enter_freeing_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_delay_enter_freeing_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_delay_enter_freeing_0.? self!) (lib!tokens.Mim.Step./delay_enter_freeing/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_delay_enter_freeing_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%1.get_delay_enter_freeing_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%1.get_delay_enter_freeing_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_delay_enter_freeing_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_delay_enter_freeing_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_delay_enter_freeing_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_delay_enter_freeing_1.? self!) (lib!tokens.Mim.Step./delay_enter_freeing/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_delay_enter_freeing_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.impl&%1.get_delay_enter_freeing_1.? self!)) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.impl&%1.get_delay_enter_freeing_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_delay_leave_freeing")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_delay_leave_freeing.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_delay_leave_freeing.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_delay_leave_freeing.? self!) (is-lib!tokens.Mim.Step./delay_leave_freeing_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_delay_leave_freeing.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_delay_leave_freeing_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_delay_leave_freeing_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_delay_leave_freeing_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_delay_leave_freeing_0.? self!) (lib!tokens.Mim.Step./delay_leave_freeing/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_delay_leave_freeing_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%1.get_delay_leave_freeing_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%1.get_delay_leave_freeing_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_delay_lookup_heap")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_delay_lookup_heap.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_delay_lookup_heap.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_delay_lookup_heap.? self!) (is-lib!tokens.Mim.Step./delay_lookup_heap_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_delay_lookup_heap.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_delay_lookup_heap_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_delay_lookup_heap_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_delay_lookup_heap_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_delay_lookup_heap_0.? self!) (lib!tokens.Mim.Step./delay_lookup_heap/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_delay_lookup_heap_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.impl&%1.get_delay_lookup_heap_0.? self!)) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.impl&%1.get_delay_lookup_heap_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_block_set_heap_id")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_block_set_heap_id.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_block_set_heap_id.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_block_set_heap_id.? self!) (is-lib!tokens.Mim.Step./block_set_heap_id_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_block_set_heap_id.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_block_set_heap_id_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_block_set_heap_id_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_block_set_heap_id_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_block_set_heap_id_0.? self!) (lib!tokens.Mim.Step./block_set_heap_id/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_block_set_heap_id_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.impl&%1.get_block_set_heap_id_0.? self!)) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.impl&%1.get_block_set_heap_id_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_reserve_uniq_identifier")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_reserve_uniq_identifier.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_reserve_uniq_identifier.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_reserve_uniq_identifier.? self!) (is-lib!tokens.Mim.Step./reserve_uniq_identifier_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_reserve_uniq_identifier.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_create_thread_mk_tokens")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_create_thread_mk_tokens.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_create_thread_mk_tokens.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_create_thread_mk_tokens.? self!) (is-lib!tokens.Mim.Step./create_thread_mk_tokens_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_create_thread_mk_tokens.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_create_thread_mk_tokens_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_0.? self!) (lib!tokens.Mim.Step./create_thread_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_create_thread_mk_tokens_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_1.? self!) (lib!tokens.Mim.Step./create_thread_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.ThreadState. (lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_1.? self!)) TYPE%lib!tokens.ThreadState.)) :pattern ((lib!tokens.Mim.impl&%1.get_create_thread_mk_tokens_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_create_segment_mk_tokens")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_create_segment_mk_tokens.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_create_segment_mk_tokens.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_create_segment_mk_tokens.? self!) (is-lib!tokens.Mim.Step./create_segment_mk_tokens_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_create_segment_mk_tokens.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_create_segment_mk_tokens_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_0.? self!) (lib!tokens.Mim.Step./create_segment_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_create_segment_mk_tokens_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_1.? self!) (lib!tokens.Mim.Step./create_segment_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_1.? self!)) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_create_segment_mk_tokens_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_2.? self!) (lib!tokens.Mim.Step./create_segment_mk_tokens/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_create_segment_mk_tokens_2.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_segment_enable")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_segment_enable.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_segment_enable.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_segment_enable.? self!) (is-lib!tokens.Mim.Step./segment_enable_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_segment_enable.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_segment_enable_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_segment_enable_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_segment_enable_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_segment_enable_0.? self!) (lib!tokens.Mim.Step./segment_enable/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_segment_enable_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%1.get_segment_enable_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%1.get_segment_enable_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_segment_enable_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_segment_enable_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_segment_enable_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_segment_enable_1.? self!) (lib!tokens.Mim.Step./segment_enable/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_segment_enable_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.Mim.impl&%1.get_segment_enable_1.? self!)) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.Mim.impl&%1.get_segment_enable_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_segment_enable_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_segment_enable_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_segment_enable_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_segment_enable_2.? self!) (lib!tokens.Mim.Step./segment_enable/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_segment_enable_2.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_create_page_mk_tokens")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_create_page_mk_tokens.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_create_page_mk_tokens.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_create_page_mk_tokens.? self!) (is-lib!tokens.Mim.Step./create_page_mk_tokens_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_create_page_mk_tokens.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_create_page_mk_tokens_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_0.? self!) (lib!tokens.Mim.Step./create_page_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_create_page_mk_tokens_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_1.? self!) (lib!tokens.Mim.Step./create_page_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_1.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_create_page_mk_tokens_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_2.? self!) (lib!tokens.Mim.Step./create_page_mk_tokens/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_2.? self!))) :pattern ((lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_2.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_create_page_mk_tokens_3")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_3.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_3.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_3.? self!) (lib!tokens.Mim.Step./create_page_mk_tokens/3 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_3.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_3.? self!))) :pattern ((lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_3.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_create_page_mk_tokens_4")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_4.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_4.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_4.? self!) (lib!tokens.Mim.Step./create_page_mk_tokens/4 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_create_page_mk_tokens_4.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_page_enable")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_page_enable.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_page_enable.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_page_enable.? self!) (is-lib!tokens.Mim.Step./page_enable_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_page_enable.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_enable_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_enable_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_enable_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_enable_0.? self!) (lib!tokens.Mim.Step./page_enable/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_enable_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%1.get_page_enable_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%1.get_page_enable_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_enable_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_enable_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_enable_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_enable_1.? self!) (lib!tokens.Mim.Step./page_enable/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_enable_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%1.get_page_enable_1.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%1.get_page_enable_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_enable_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_enable_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_enable_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_enable_2.? self!) (lib!tokens.Mim.Step./page_enable/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_enable_2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%1.get_page_enable_2.? self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_enable_2.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_enable_3")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_enable_3.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_enable_3.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_enable_3.? self!) (lib!tokens.Mim.Step./page_enable/3 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_enable_3.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_enable_4")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_enable_4.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_enable_4.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_enable_4.? self!) (lib!tokens.Mim.Step./page_enable/4 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_enable_4.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_page_mk_block_tokens")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_page_mk_block_tokens.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_page_mk_block_tokens.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_page_mk_block_tokens.? self!) (is-lib!tokens.Mim.Step./page_mk_block_tokens_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_page_mk_block_tokens.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_mk_block_tokens_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_0.? self!) (lib!tokens.Mim.Step./page_mk_block_tokens/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_mk_block_tokens_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_1.? self!) (lib!tokens.Mim.Step./page_mk_block_tokens/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_1.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_mk_block_tokens_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_2.? self!) (lib!tokens.Mim.Step./page_mk_block_tokens/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_2.? self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_2.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_mk_block_tokens_3")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_3.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_3.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_3.? self!) (lib!tokens.Mim.Step./page_mk_block_tokens/3 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_3.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_3.? self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_3.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_mk_block_tokens_4")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_4.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_4.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_4.? self!) (lib!tokens.Mim.Step./page_mk_block_tokens/4 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_4.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_4.? self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_mk_block_tokens_4.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_page_destroy_block_tokens")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_page_destroy_block_tokens.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_page_destroy_block_tokens.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_page_destroy_block_tokens.? self!) (is-lib!tokens.Mim.Step./page_destroy_block_tokens_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_page_destroy_block_tokens.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_destroy_block_tokens_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_0.? self!) (lib!tokens.Mim.Step./page_destroy_block_tokens/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_destroy_block_tokens_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_1.? self!) (lib!tokens.Mim.Step./page_destroy_block_tokens/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_1.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_destroy_block_tokens_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_2.? self!) (lib!tokens.Mim.Step./page_destroy_block_tokens/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_destroy_block_tokens_2.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_page_check_delay_state")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_page_check_delay_state.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_page_check_delay_state.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_page_check_delay_state.? self!) (is-lib!tokens.Mim.Step./page_check_delay_state_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_page_check_delay_state.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_check_delay_state_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_check_delay_state_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_check_delay_state_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_check_delay_state_0.? self!) (lib!tokens.Mim.Step./page_check_delay_state/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_check_delay_state_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%1.get_page_check_delay_state_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%1.get_page_check_delay_state_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_check_delay_state_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_check_delay_state_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_check_delay_state_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_check_delay_state_1.? self!) (lib!tokens.Mim.Step./page_check_delay_state/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_check_delay_state_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%1.get_page_check_delay_state_1.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%1.get_page_check_delay_state_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_page_disable")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_page_disable.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_page_disable.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_page_disable.? self!) (is-lib!tokens.Mim.Step./page_disable_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_page_disable.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_disable_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_disable_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_disable_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_disable_0.? self!) (lib!tokens.Mim.Step./page_disable/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_disable_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%1.get_page_disable_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%1.get_page_disable_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_disable_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_disable_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_disable_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_disable_1.? self!) (lib!tokens.Mim.Step./page_disable/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_disable_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%1.get_page_disable_1.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%1.get_page_disable_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_disable_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_disable_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_disable_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_disable_2.? self!) (lib!tokens.Mim.Step./page_disable/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_disable_2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%1.get_page_disable_2.? self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_disable_2.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_page_destroy_tokens")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_page_destroy_tokens.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_page_destroy_tokens.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_page_destroy_tokens.? self!) (is-lib!tokens.Mim.Step./page_destroy_tokens_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_page_destroy_tokens.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_destroy_tokens_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_destroy_tokens_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_destroy_tokens_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_destroy_tokens_0.? self!) (lib!tokens.Mim.Step./page_destroy_tokens/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_destroy_tokens_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%1.get_page_destroy_tokens_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%1.get_page_destroy_tokens_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_destroy_tokens_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_destroy_tokens_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_destroy_tokens_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_destroy_tokens_1.? self!) (lib!tokens.Mim.Step./page_destroy_tokens/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_destroy_tokens_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.PageId. (lib!tokens.Mim.impl&%1.get_page_destroy_tokens_1.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!tokens.Mim.impl&%1.get_page_destroy_tokens_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_page_destroy_tokens_2")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_page_destroy_tokens_2.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_page_destroy_tokens_2.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_page_destroy_tokens_2.? self!) (lib!tokens.Mim.Step./page_destroy_tokens/2 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_destroy_tokens_2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (<= 0 (lib!tokens.Mim.impl&%1.get_page_destroy_tokens_2.? self!))) :pattern ((lib!tokens.Mim.impl&%1.get_page_destroy_tokens_2.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_block_tokens_distinct")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_block_tokens_distinct.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_block_tokens_distinct.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_block_tokens_distinct.? self!) (is-lib!tokens.Mim.Step./block_tokens_distinct_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_block_tokens_distinct.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_block_tokens_distinct_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_block_tokens_distinct_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_block_tokens_distinct_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_block_tokens_distinct_0.? self!) (lib!tokens.Mim.Step./block_tokens_distinct/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_block_tokens_distinct_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.impl&%1.get_block_tokens_distinct_0.? self!)) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.impl&%1.get_block_tokens_distinct_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_block_tokens_distinct_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_block_tokens_distinct_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_block_tokens_distinct_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_block_tokens_distinct_1.? self!) (lib!tokens.Mim.Step./block_tokens_distinct/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_block_tokens_distinct_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.impl&%1.get_block_tokens_distinct_1.? self!)) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.impl&%1.get_block_tokens_distinct_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_block_in_range")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_block_in_range.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_block_in_range.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_block_in_range.? self!) (is-lib!tokens.Mim.Step./block_in_range_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_block_in_range.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_block_in_range_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_block_in_range_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_block_in_range_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_block_in_range_0.? self!) (lib!tokens.Mim.Step./block_in_range/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_block_in_range_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!thread.ThreadId. (lib!tokens.Mim.impl&%1.get_block_in_range_0.? self!)) TYPE%lib!thread.ThreadId.)) :pattern ((lib!tokens.Mim.impl&%1.get_block_in_range_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_block_in_range_1")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_block_in_range_1.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_block_in_range_1.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_block_in_range_1.? self!) (lib!tokens.Mim.Step./block_in_range/1 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_block_in_range_1.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.BlockId. (lib!tokens.Mim.impl&%1.get_block_in_range_1.? self!)) TYPE%lib!tokens.BlockId.)) :pattern ((lib!tokens.Mim.impl&%1.get_block_in_range_1.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.is_dummy_to_use_type_params.))
(define-fun is-lib!tokens.Mim.Step./dummy_to_use_type_params_ ((c lib!tokens.Mim.Step.)) Bool ((_ is lib!tokens.Mim.Step./dummy_to_use_type_params) c))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.is_dummy_to_use_type_params.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.is_dummy_to_use_type_params.? self!) (is-lib!tokens.Mim.Step./dummy_to_use_type_params_ (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.is_dummy_to_use_type_params.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Step::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%1.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%1.get_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%1.get_dummy_to_use_type_params_0.? self!) (lib!tokens.Mim.Step./dummy_to_use_type_params/0 (%Poly%lib!tokens.Mim.Step. self!))) :pattern ((lib!tokens.Mim.impl&%1.get_dummy_to_use_type_params_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Step.) (has_type (Poly%lib!tokens.Mim.State. (lib!tokens.Mim.impl&%1.get_dummy_to_use_type_params_0.? self!)) TYPE%lib!tokens.Mim.State.)) :pattern ((lib!tokens.Mim.impl&%1.get_dummy_to_use_type_params_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Config::arrow_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%2.arrow_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%2.arrow_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%2.arrow_0.? self!) (lib!tokens.Mim.Config./dummy_to_use_type_params/0 (%Poly%lib!tokens.Mim.Config. self!))) :pattern ((lib!tokens.Mim.impl&%2.arrow_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Config.) (has_type (Poly%lib!tokens.Mim.State. (lib!tokens.Mim.impl&%2.arrow_0.? self!)) TYPE%lib!tokens.Mim.State.)) :pattern ((lib!tokens.Mim.impl&%2.arrow_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Config::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%2.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%2.arrow_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%2.arrow_dummy_to_use_type_params_0.? self!) (lib!tokens.Mim.Config./dummy_to_use_type_params/0 (%Poly%lib!tokens.Mim.Config. self!))) :pattern ((lib!tokens.Mim.impl&%2.arrow_dummy_to_use_type_params_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Config.) (has_type (Poly%lib!tokens.Mim.State. (lib!tokens.Mim.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) TYPE%lib!tokens.Mim.State.)) :pattern ((lib!tokens.Mim.impl&%2.arrow_dummy_to_use_type_params_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Config::is_initialize")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%3.is_initialize.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%3.is_initialize.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%3.is_initialize.? self!) (is-lib!tokens.Mim.Config./initialize_ (%Poly%lib!tokens.Mim.Config. self!))) :pattern ((lib!tokens.Mim.impl&%3.is_initialize.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Config::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%3.is_dummy_to_use_type_params.))
(define-fun is-lib!tokens.Mim.Config./dummy_to_use_type_params_ ((c lib!tokens.Mim.Config.)) Bool ((_ is lib!tokens.Mim.Config./dummy_to_use_type_params) c))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%3.is_dummy_to_use_type_params.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%3.is_dummy_to_use_type_params.? self!) (is-lib!tokens.Mim.Config./dummy_to_use_type_params_ (%Poly%lib!tokens.Mim.Config. self!))) :pattern ((lib!tokens.Mim.impl&%3.is_dummy_to_use_type_params.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::Config::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%3.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%3.get_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%3.get_dummy_to_use_type_params_0.? self!) (lib!tokens.Mim.Config./dummy_to_use_type_params/0 (%Poly%lib!tokens.Mim.Config. self!))) :pattern ((lib!tokens.Mim.impl&%3.get_dummy_to_use_type_params_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!tokens.Mim.Config.) (has_type (Poly%lib!tokens.Mim.State. (lib!tokens.Mim.impl&%3.get_dummy_to_use_type_params_0.? self!)) TYPE%lib!tokens.Mim.State.)) :pattern ((lib!tokens.Mim.impl&%3.get_dummy_to_use_type_params_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::right_to_set_inst::bool_agree")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%4.bool_agree.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%4.bool_agree.) (forall ((token_opt! Poly) (b! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%4.bool_agree.? token_opt! b! instance!) (=> (%B b!) (and (is-core!option.Option./Some_ (%Poly%core!option.Option. token_opt!)) (= (lib!tokens.Mim.right_to_set_inst_token_data./right_to_set_inst_token_data/instance (%Poly%lib!tokens.Mim.right_to_set_inst_token_data. (Poly%lib!tokens.Mim.right_to_set_inst_token_data. (lib!tokens.Mim.impl&%4.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. token_opt!)))))) (%Poly%lib!tokens.Mim.Instance. instance!))))) :pattern ((lib!tokens.Mim.impl&%4.bool_agree.? token_opt! b! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::right_to_set_inst::bool_agree_strict")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%4.bool_agree_strict.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%4.bool_agree_strict.) (forall ((token_opt! Poly) (b! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%4.bool_agree_strict.? token_opt! b! instance!) (and (lib!tokens.Mim.impl&%4.bool_agree.? token_opt! b! instance!) (=> (not (%B b!)) (is-core!option.Option./None_ (%Poly%core!option.Option. token_opt!))))) :pattern ((lib!tokens.Mim.impl&%4.bool_agree_strict.? token_opt! b! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::my_inst::option_agree")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%5.option_agree.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%5.option_agree.) (forall ((token_opt! Poly) (opt! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%5.option_agree.? token_opt! opt! instance!) (=> (is-core!option.Option./Some_ (%Poly%core!option.Option. opt!)) (and (and (is-core!option.Option./Some_ (%Poly%core!option.Option. token_opt!)) (= (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/value (%Poly%lib!tokens.Mim.my_inst_token_data. (Poly%lib!tokens.Mim.my_inst_token_data. (lib!tokens.Mim.impl&%5.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. token_opt!)))))) (%Poly%lib!tokens.Mim.Instance. (core!option.Option./Some/0 (%Poly%core!option.Option. opt!))))) (= (lib!tokens.Mim.my_inst_token_data./my_inst_token_data/instance (%Poly%lib!tokens.Mim.my_inst_token_data. (Poly%lib!tokens.Mim.my_inst_token_data. (lib!tokens.Mim.impl&%5.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. token_opt!)))))) (%Poly%lib!tokens.Mim.Instance. instance!))))) :pattern ((lib!tokens.Mim.impl&%5.option_agree.? token_opt! opt! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::my_inst::option_agree_strict")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%5.option_agree_strict.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%5.option_agree_strict.) (forall ((token_opt! Poly) (opt! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%5.option_agree_strict.? token_opt! opt! instance!) (and (lib!tokens.Mim.impl&%5.option_agree.? token_opt! opt! instance!) (=> (is-core!option.Option./None_ (%Poly%core!option.Option. opt!)) (is-core!option.Option./None_ (%Poly%core!option.Option. token_opt!))))) :pattern ((lib!tokens.Mim.impl&%5.option_agree_strict.? token_opt! opt! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::thread_local_state::map_agree")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%8.map_agree.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%8.map_agree.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%8.map_agree.? token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ TYPE%lib!thread.ThreadId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_local_state. token_map!) key$) (and (and (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/instance (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_local_state. token_map! key$))))) (%Poly%lib!tokens.Mim.Instance. instance!)) (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/key (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_local_state. token_map! key$))))) (%Poly%lib!thread.ThreadId. key$))) (= (lib!tokens.Mim.thread_local_state_token_data./thread_local_state_token_data/value (%Poly%lib!tokens.Mim.thread_local_state_token_data. (Poly%lib!tokens.Mim.thread_local_state_token_data. (lib!tokens.Mim.impl&%8.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_local_state. token_map! key$))))) (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_local_state. token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_local_state. token_map! key$))))) :pattern ((lib!tokens.Mim.impl&%8.map_agree.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::thread_local_state::map_agree_strict")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%8.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%8.map_agree_strict.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%8.map_agree_strict.? token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_local_state. token_map!) (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. m!)) (lib!tokens.Mim.impl&%8.map_agree.? token_map! m! instance!))) :pattern ((lib!tokens.Mim.impl&%8.map_agree_strict.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::right_to_use_thread::set_agree")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%9.set_agree.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%9.set_agree.) (forall ((token_map! Poly) (set! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%9.set_agree.? token_map! set! instance!) (forall ((elem$ Poly)) (! (=> (has_type elem$ TYPE%lib!thread.ThreadId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. set! elem$) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.right_to_use_thread. token_map!) elem$) (= (lib!tokens.Mim.impl&%9.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.right_to_use_thread. token_map! elem$)) (lib!tokens.Mim.right_to_use_thread_token_data./right_to_use_thread_token_data (%Poly%lib!tokens.Mim.Instance. instance!) (%Poly%lib!thread.ThreadId. elem$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.right_to_use_thread. token_map!) elem$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.right_to_use_thread. token_map!) elem$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.right_to_use_thread. token_map! elem$))))) :pattern ((lib!tokens.Mim.impl&%9.set_agree.? token_map! set! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::right_to_use_thread::set_agree_strict")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%9.set_agree_strict.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%9.set_agree_strict.) (forall ((token_map! Poly) (set! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%9.set_agree_strict.? token_map! set! instance!) (and (= (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.right_to_use_thread. token_map!) set!) (lib!tokens.Mim.impl&%9.set_agree.? token_map! set! instance!))) :pattern ((lib!tokens.Mim.impl&%9.set_agree_strict.? token_map! set! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::block::map_agree")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%10.map_agree.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%10.map_agree.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%10.map_agree.? token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ TYPE%lib!tokens.BlockId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. token_map!) key$) (and (and (= (lib!tokens.Mim.block_token_data./block_token_data/instance (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. token_map! key$))))) (%Poly%lib!tokens.Mim.Instance. instance!)) (= (lib!tokens.Mim.block_token_data./block_token_data/key (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. token_map! key$))))) (%Poly%lib!tokens.BlockId. key$))) (= (lib!tokens.Mim.block_token_data./block_token_data/value (%Poly%lib!tokens.Mim.block_token_data. (Poly%lib!tokens.Mim.block_token_data. (lib!tokens.Mim.impl&%10.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. token_map! key$))))) (%Poly%lib!tokens.BlockState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. token_map! key$))))) :pattern ((lib!tokens.Mim.impl&%10.map_agree.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::block::map_agree_strict")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%10.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%10.map_agree_strict.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%10.map_agree_strict.? token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.Mim.block. token_map!) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. m!)) (lib!tokens.Mim.impl&%10.map_agree.? token_map! m! instance!))) :pattern ((lib!tokens.Mim.impl&%10.map_agree_strict.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::thread_of_segment::map_agree")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%11.map_agree.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%11.map_agree.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%11.map_agree.? token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.Mim.thread_of_segment. token_map!) key$) (and (and (= (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/instance (%Poly%lib!tokens.Mim.thread_of_segment_token_data. (Poly%lib!tokens.Mim.thread_of_segment_token_data. (lib!tokens.Mim.impl&%11.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.Mim.thread_of_segment. token_map! key$))))) (%Poly%lib!tokens.Mim.Instance. instance!)) (= (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/key (%Poly%lib!tokens.Mim.thread_of_segment_token_data. (Poly%lib!tokens.Mim.thread_of_segment_token_data. (lib!tokens.Mim.impl&%11.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.Mim.thread_of_segment. token_map! key$))))) (%Poly%lib!tokens.SegmentId. key$))) (= (lib!tokens.Mim.thread_of_segment_token_data./thread_of_segment_token_data/value (%Poly%lib!tokens.Mim.thread_of_segment_token_data. (Poly%lib!tokens.Mim.thread_of_segment_token_data. (lib!tokens.Mim.impl&%11.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.Mim.thread_of_segment. token_map! key$))))) (%Poly%lib!thread.ThreadId. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.Mim.thread_of_segment. token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.Mim.thread_of_segment. token_map! key$))))) :pattern ((lib!tokens.Mim.impl&%11.map_agree.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::thread_of_segment::map_agree_strict")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%11.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%11.map_agree_strict.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%11.map_agree_strict.? token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.Mim.thread_of_segment. token_map!) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. m!)) (lib!tokens.Mim.impl&%11.map_agree.? token_map! m! instance!))) :pattern ((lib!tokens.Mim.impl&%11.map_agree_strict.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::delay::map_agree")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%12.map_agree.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%12.map_agree.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%12.map_agree.? token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay. token_map!) key$) (and (and (= (lib!tokens.Mim.delay_token_data./delay_token_data/instance (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay. token_map! key$))))) (%Poly%lib!tokens.Mim.Instance. instance!)) (= (lib!tokens.Mim.delay_token_data./delay_token_data/key (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay. token_map! key$))))) (%Poly%lib!tokens.PageId. key$))) (= (lib!tokens.Mim.delay_token_data./delay_token_data/value (%Poly%lib!tokens.Mim.delay_token_data. (Poly%lib!tokens.Mim.delay_token_data. (lib!tokens.Mim.impl&%12.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay. token_map! key$))))) (%Poly%lib!tokens.DelayState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay. token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay. token_map! key$))))) :pattern ((lib!tokens.Mim.impl&%12.map_agree.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::delay::map_agree_strict")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%12.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%12.map_agree_strict.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%12.map_agree_strict.? token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay. token_map!) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. m!)) (lib!tokens.Mim.impl&%12.map_agree.? token_map! m! instance!))) :pattern ((lib!tokens.Mim.impl&%12.map_agree_strict.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::heap_of_page::map_agree")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%13.map_agree.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%13.map_agree.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%13.map_agree.? token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.heap_of_page. token_map!) key$) (and (and (= (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/instance (%Poly%lib!tokens.Mim.heap_of_page_token_data. (Poly%lib!tokens.Mim.heap_of_page_token_data. (lib!tokens.Mim.impl&%13.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.heap_of_page. token_map! key$))))) (%Poly%lib!tokens.Mim.Instance. instance!)) (= (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/key (%Poly%lib!tokens.Mim.heap_of_page_token_data. (Poly%lib!tokens.Mim.heap_of_page_token_data. (lib!tokens.Mim.impl&%13.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.heap_of_page. token_map! key$))))) (%Poly%lib!tokens.PageId. key$))) (= (lib!tokens.Mim.heap_of_page_token_data./heap_of_page_token_data/value (%Poly%lib!tokens.Mim.heap_of_page_token_data. (Poly%lib!tokens.Mim.heap_of_page_token_data. (lib!tokens.Mim.impl&%13.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.heap_of_page. token_map! key$))))) (%Poly%lib!tokens.HeapId. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.heap_of_page. token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.heap_of_page. token_map! key$))))) :pattern ((lib!tokens.Mim.impl&%13.map_agree.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::heap_of_page::map_agree_strict")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%13.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%13.map_agree_strict.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%13.map_agree_strict.? token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.heap_of_page. token_map!) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. m!)) (lib!tokens.Mim.impl&%13.map_agree.? token_map! m! instance!))) :pattern ((lib!tokens.Mim.impl&%13.map_agree_strict.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::actor::map_agree")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%14.map_agree.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%14.map_agree.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%14.map_agree.? token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ TYPE%lib!thread.ThreadId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.actor. token_map!) key$) (and (and (= (lib!tokens.Mim.actor_token_data./actor_token_data/instance (%Poly%lib!tokens.Mim.actor_token_data. (Poly%lib!tokens.Mim.actor_token_data. (lib!tokens.Mim.impl&%14.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.actor. token_map! key$))))) (%Poly%lib!tokens.Mim.Instance. instance!)) (= (lib!tokens.Mim.actor_token_data./actor_token_data/key (%Poly%lib!tokens.Mim.actor_token_data. (Poly%lib!tokens.Mim.actor_token_data. (lib!tokens.Mim.impl&%14.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.actor. token_map! key$))))) (%Poly%lib!thread.ThreadId. key$))) (= (lib!tokens.Mim.actor_token_data./actor_token_data/value (%Poly%lib!tokens.Mim.actor_token_data. (Poly%lib!tokens.Mim.actor_token_data. (lib!tokens.Mim.impl&%14.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.actor. token_map! key$))))) (%Poly%lib!tokens.Actor. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.actor. token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.actor. token_map! key$))))) :pattern ((lib!tokens.Mim.impl&%14.map_agree.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::actor::map_agree_strict")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%14.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%14.map_agree_strict.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%14.map_agree_strict.? token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.actor. token_map!) (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. m!)) (lib!tokens.Mim.impl&%14.map_agree.? token_map! m! instance!))) :pattern ((lib!tokens.Mim.impl&%14.map_agree_strict.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::delay_actor::map_agree")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%15.map_agree.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%15.map_agree.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%15.map_agree.? token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay_actor. token_map!) key$) (and (and (= (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/instance (%Poly%lib!tokens.Mim.delay_actor_token_data. (Poly%lib!tokens.Mim.delay_actor_token_data. (lib!tokens.Mim.impl&%15.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay_actor. token_map! key$))))) (%Poly%lib!tokens.Mim.Instance. instance!)) (= (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/key (%Poly%lib!tokens.Mim.delay_actor_token_data. (Poly%lib!tokens.Mim.delay_actor_token_data. (lib!tokens.Mim.impl&%15.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay_actor. token_map! key$))))) (%Poly%lib!tokens.PageId. key$))) (= (lib!tokens.Mim.delay_actor_token_data./delay_actor_token_data/value (%Poly%lib!tokens.Mim.delay_actor_token_data. (Poly%lib!tokens.Mim.delay_actor_token_data. (lib!tokens.Mim.impl&%15.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay_actor. token_map! key$))))) (%Poly%lib!tokens.DelayFreeingActor. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay_actor. token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay_actor. token_map! key$))))) :pattern ((lib!tokens.Mim.impl&%15.map_agree.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::delay_actor::map_agree_strict")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%15.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%15.map_agree_strict.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%15.map_agree_strict.? token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.Mim.delay_actor. token_map!) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. m!)) (lib!tokens.Mim.impl&%15.map_agree.? token_map! m! instance!))) :pattern ((lib!tokens.Mim.impl&%15.map_agree_strict.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::reserved_uniq::set_agree")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%16.set_agree.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%16.set_agree.) (forall ((token_map! Poly) (set! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%16.set_agree.? token_map! set! instance!) (forall ((elem$ Poly)) (! (=> (has_type elem$ TYPE%lib!tokens.HeapId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. set! elem$) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!tokens.Mim.reserved_uniq. token_map!) elem$) (= (lib!tokens.Mim.impl&%16.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!tokens.Mim.reserved_uniq. token_map! elem$)) (lib!tokens.Mim.reserved_uniq_token_data./reserved_uniq_token_data (%Poly%lib!tokens.Mim.Instance. instance!) (%Poly%lib!tokens.HeapId. elem$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!tokens.Mim.reserved_uniq. token_map!) elem$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!tokens.Mim.reserved_uniq. token_map!) elem$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!tokens.Mim.reserved_uniq. token_map! elem$))))) :pattern ((lib!tokens.Mim.impl&%16.set_agree.? token_map! set! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::reserved_uniq::set_agree_strict")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%16.set_agree_strict.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%16.set_agree_strict.) (forall ((token_map! Poly) (set! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%16.set_agree_strict.? token_map! set! instance!) (and (= (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!tokens.Mim.reserved_uniq. token_map!) set!) (lib!tokens.Mim.impl&%16.set_agree.? token_map! set! instance!))) :pattern ((lib!tokens.Mim.impl&%16.set_agree_strict.? token_map! set! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::thread_checked_state::map_agree")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%17.map_agree.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%17.map_agree.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%17.map_agree.? token_map! m! instance!) (forall ((key$ Poly)) (! (=> (has_type key$ TYPE%lib!thread.ThreadId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_checked_state. token_map!) key$) (and (and (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/instance (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_checked_state. token_map! key$))))) (%Poly%lib!tokens.Mim.Instance. instance!)) (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/key (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_checked_state. token_map! key$))))) (%Poly%lib!thread.ThreadId. key$))) (= (lib!tokens.Mim.thread_checked_state_token_data./thread_checked_state_token_data/value (%Poly%lib!tokens.Mim.thread_checked_state_token_data. (Poly%lib!tokens.Mim.thread_checked_state_token_data. (lib!tokens.Mim.impl&%17.view.? (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_checked_state. token_map! key$))))) (%Poly%lib!tokens.ThreadCheckedState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. m! key$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_checked_state. token_map!) key$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_checked_state. token_map! key$))))) :pattern ((lib!tokens.Mim.impl&%17.map_agree.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::thread_checked_state::map_agree_strict")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%17.map_agree_strict.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%17.map_agree_strict.) (forall ((token_map! Poly) (m! Poly) (instance! Poly)) (! (= (lib!tokens.Mim.impl&%17.map_agree_strict.? token_map! m! instance!) (and (= (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Mim.thread_checked_state. token_map!) (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. m!)) (lib!tokens.Mim.impl&%17.map_agree.? token_map! m! instance!))) :pattern ((lib!tokens.Mim.impl&%17.map_agree_strict.? token_map! m! instance!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::initialize_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.initialize_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.initialize_enabled.) (forall ((no%param Poly)) (! (= (lib!tokens.Mim.impl&%21.initialize_enabled.? no%param) true) :pattern ((lib!tokens.Mim.impl&%21.initialize_enabled.? no%param))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::set_inst_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.set_inst_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.set_inst_strong.) (forall ((pre! Poly) (post! Poly) (inst! Poly)) (! (= (lib!tokens.Mim.impl&%21.set_inst_strong.? pre! post! inst!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and update_tmp_right_to_set_inst$ (let ((update_tmp_right_to_set_inst$1 false)) (and (=> (is-core!option.Option./Some_ update_tmp_my_inst$) (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_my_inst$))) inst!)) (let ((update_tmp_my_inst$1 (core!option.Option./Some inst!))) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$1) (and (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$1) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.set_inst_strong.? pre! post! inst!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::set_inst_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.set_inst_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.set_inst_enabled.) (forall ((pre! Poly) (inst! Poly)) (! (= (lib!tokens.Mim.impl&%21.set_inst_enabled.? pre! inst!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) update_tmp_right_to_set_inst$)) :pattern ((lib!tokens.Mim.impl&%21.set_inst_enabled.? pre! inst!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::actor_make_idle_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.actor_make_idle_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.actor_make_idle_strong.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.actor_make_idle_strong.? pre! post! thread_id!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$)) thread_id!) (and (let ((actor$ (%Poly%lib!tokens.Actor. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$) thread_id!)))) (let ((update_tmp_actor$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$) thread_id!)))) (and (not (= actor$ lib!tokens.Actor./Abandoned)) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$1)) thread_id!)) (let ((update_tmp_actor$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$1) thread_id! (Poly%lib!tokens.Actor. lib!tokens.Actor./Idle))))) (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$2)))))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.actor_make_idle_strong.? pre! post! thread_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::actor_make_idle_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.actor_make_idle_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.actor_make_idle_enabled.) (forall ((pre! Poly) (thread_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.actor_make_idle_enabled.? pre! thread_id!) (let ((tmp_assert$ true)) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$)) thread_id!) (let ((actor$ (%Poly%lib!tokens.Actor. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$) thread_id!)))) (=> tmp_assert$ (not (= actor$ lib!tokens.Actor./Abandoned)))))))) :pattern ((lib!tokens.Mim.impl&%21.actor_make_idle_enabled.? pre! thread_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::actor_abandon_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.actor_abandon_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.actor_abandon_strong.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.actor_abandon_strong.? pre! post! thread_id!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$)) thread_id!) (let ((update_tmp_actor$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$) thread_id!)))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$1)) thread_id!)) (let ((update_tmp_actor$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$1) thread_id! (Poly%lib!tokens.Actor. lib!tokens.Actor./Abandoned))))) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$2) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.actor_abandon_strong.? pre! post! thread_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::actor_abandon_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.actor_abandon_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.actor_abandon_enabled.) (forall ((pre! Poly) (thread_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.actor_abandon_enabled.? pre! thread_id!) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.Actor. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.Actor.>. update_tmp_actor$)) thread_id!))) :pattern ((lib!tokens.Mim.impl&%21.actor_abandon_enabled.? pre! thread_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::set_use_delayed_free_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.set_use_delayed_free_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.set_use_delayed_free_strong.) (forall ((pre! Poly) (post! Poly) (page_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.set_use_delayed_free_strong.? pre! post! page_id!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!map_lib.impl&%0.contains_pair.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./NoDelayedFree)) (let ((update_tmp_delay$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$1)) page_id!)) (let ((update_tmp_delay$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$1) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./UseDelayedFree))))) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$2) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.set_use_delayed_free_strong.? pre! post! page_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::set_use_delayed_free_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.set_use_delayed_free_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.set_use_delayed_free_enabled.) (forall ((pre! Poly) (page_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.set_use_delayed_free_enabled.? pre! page_id!) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (vstd!map_lib.impl&%0.contains_pair.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./NoDelayedFree)))) :pattern ((lib!tokens.Mim.impl&%21.set_use_delayed_free_enabled.? pre! page_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::delay_enter_freeing_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.delay_enter_freeing_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.delay_enter_freeing_strong.) (forall ((pre! Poly) (post! Poly) (page_id! Poly) (block_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.delay_enter_freeing_strong.? pre! post! page_id! block_id!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!map_lib.impl&%0.contains_pair.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./UseDelayedFree)) (let ((update_tmp_delay$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$1)) page_id!)) (let ((update_tmp_delay$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$1) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./Freeing))))) (and (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)) (%Poly%lib!tokens.PageId. page_id!)) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id!) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$)) page_id!)) (let ((update_tmp_delay_actor$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) page_id! (Poly%lib!tokens.DelayFreeingActor. lib!tokens.DelayFreeingActor./HeapUnknown))))) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$1) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$2) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.delay_enter_freeing_strong.? pre! post! page_id! block_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::delay_enter_freeing_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.delay_enter_freeing_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.delay_enter_freeing_enabled.) (forall ((pre! Poly) (page_id! Poly) (block_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.delay_enter_freeing_enabled.? pre! page_id! block_id!) (let ((tmp_assert$ true)) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!map_lib.impl&%0.contains_pair.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./UseDelayedFree)) (let ((update_tmp_delay$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$1)) page_id!))))) (and (=> tmp_assert$1 (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)) (%Poly%lib!tokens.PageId. page_id!))) (=> tmp_assert$1 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id!)))))))))) :pattern ((lib!tokens.Mim.impl&%21.delay_enter_freeing_enabled.? pre! page_id! block_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::delay_leave_freeing_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.delay_leave_freeing_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.delay_leave_freeing_strong.) (forall ((pre! Poly) (post! Poly) (page_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.delay_leave_freeing_strong.? pre! post! page_id!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$)) page_id!) (and (let ((prev_state$ (%Poly%lib!tokens.DelayState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (let ((update_tmp_delay$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$1)) page_id!)) (let ((update_tmp_delay$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$1) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./NoDelayedFree))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$)) page_id!) (let ((update_tmp_delay_actor$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) page_id!)))) (and (= prev_state$ lib!tokens.DelayState./Freeing) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$1) (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$2))))))))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.delay_leave_freeing_strong.? pre! post! page_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::delay_leave_freeing_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.delay_leave_freeing_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.delay_leave_freeing_enabled.) (forall ((pre! Poly) (page_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.delay_leave_freeing_enabled.? pre! page_id!) (let ((tmp_assert$ true)) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$)) page_id!) (let ((prev_state$ (%Poly%lib!tokens.DelayState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (let ((update_tmp_delay$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (let ((tmp_assert$1 (and tmp_assert$ (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$1)) page_id!))))) (=> tmp_assert$1 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$)) page_id!)))))))))) :pattern ((lib!tokens.Mim.impl&%21.delay_leave_freeing_enabled.? pre! page_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::delay_lookup_heap_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.delay_lookup_heap_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.delay_lookup_heap_strong.) (forall ((pre! Poly) (post! Poly) (block_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.delay_lookup_heap_strong.? pre! post! block_id!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$)) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))) (and (let ((heap_id$ (%Poly%lib!tokens.HeapId. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id!) (let ((block_state$ (%Poly%lib!tokens.BlockState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) block_id!)))) (and (is-core!option.Option./Some_ update_tmp_my_inst$) (let ((inst$ (%Poly%lib!tokens.Mim.Instance. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_my_inst$)))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$)) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))) (let ((update_tmp_delay_actor$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (let ((hsa$ (%Poly%lib!types.HeapSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!))) (Poly%lib!tokens.HeapId. heap_id$))))) (let ((psa$ (lib!tokens.BlockState./BlockState/page_shared_access (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. block_state$))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$1)) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))) (let ((update_tmp_delay_actor$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$1) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))) (Poly%lib!tokens.DelayFreeingActor. (lib!tokens.DelayFreeingActor./Heap (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. heap_id$)) (%Poly%lib!types.HeapSharedAccess. (Poly%lib!types.HeapSharedAccess. hsa$)) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. psa$)))))))) (and (lib!types.impl&%17.wf2.? (Poly%lib!types.HeapSharedAccess. hsa$) (Poly%lib!tokens.HeapId. heap_id$) (Poly%lib!tokens.Mim.Instance. inst$)) (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$2))))))))))))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.delay_lookup_heap_strong.? pre! post! block_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::delay_lookup_heap_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.delay_lookup_heap_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.delay_lookup_heap_enabled.) (forall ((pre! Poly) (block_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.delay_lookup_heap_enabled.? pre! block_id!) (let ((tmp_assert$ true)) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$)) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))) (let ((heap_id$ (%Poly%lib!tokens.HeapId. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id!)) (let ((block_state$ (%Poly%lib!tokens.BlockState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) block_id!)))) (and (=> tmp_assert$ (is-core!option.Option./Some_ update_tmp_my_inst$)) (let ((inst$ (%Poly%lib!tokens.Mim.Instance. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_my_inst$)))))) (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$)) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.delay_lookup_heap_enabled.? pre! block_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::block_set_heap_id_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.block_set_heap_id_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.block_set_heap_id_strong.) (forall ((pre! Poly) (post! Poly) (block_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.block_set_heap_id_strong.? pre! post! block_id!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$)) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))) (let ((tmp%%$ (%Poly%lib!tokens.DelayFreeingActor. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (and (is-lib!tokens.DelayFreeingActor./Heap_ tmp%%$) (let ((heap_id$ (lib!tokens.DelayFreeingActor./Heap/0 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$))))) (let ((_hsa$ (lib!tokens.DelayFreeingActor./Heap/1 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$))))) (let ((_psa$ (lib!tokens.DelayFreeingActor./Heap/2 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$))))) true)))))) (and (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!tokens.DelayFreeingActor. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (ite (is-lib!tokens.DelayFreeingActor./Heap_ tmp%%$2) (let ((heap_id$ (lib!tokens.DelayFreeingActor./Heap/0 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$2))))) (let ((_hsa$ (lib!tokens.DelayFreeingActor./Heap/1 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$2))))) (let ((_psa$ (lib!tokens.DelayFreeingActor./Heap/2 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$2))))) (tuple%3./tuple%3 (Poly%lib!tokens.HeapId. heap_id$) (Poly%lib!types.HeapSharedAccess. _hsa$) (Poly%lib!types.PageSharedAccess. _psa$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. $ TYPE%lib!types.PageSharedAccess.))))))) (let ((heap_id$ (%Poly%lib!tokens.HeapId. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((_hsa$ (%Poly%lib!types.HeapSharedAccess. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((_psa$ (%Poly%lib!types.PageSharedAccess. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id!) (let ((block_state$ (%Poly%lib!tokens.BlockState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) block_id!)))) (let ((update_tmp_block$1 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) block_id!)))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$1)) block_id!)) (let ((update_tmp_block$2 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$1) block_id! (Poly%lib!tokens.BlockState. (lib!tokens.BlockState./BlockState (%Poly%lib!types.SegmentSharedAccess. (Poly%lib!types.SegmentSharedAccess. (lib!tokens.BlockState./BlockState/segment_shared_access (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. block_state$))))) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.BlockState./BlockState/page_shared_access (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. block_state$))))) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.BlockState./BlockState/page_slice_shared_access (%Poly%lib!tokens.BlockState. (Poly%lib!tokens.BlockState. block_state$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.HeapId. heap_id$)))))))))) (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$2)))))))))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.block_set_heap_id_strong.? pre! post! block_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::block_set_heap_id_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.block_set_heap_id_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.block_set_heap_id_enabled.) (forall ((pre! Poly) (block_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.block_set_heap_id_enabled.? pre! block_id!) (let ((tmp_assert$ true)) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$)) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))) (let ((tmp%%$ (%Poly%lib!tokens.DelayFreeingActor. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (and (is-lib!tokens.DelayFreeingActor./Heap_ tmp%%$) (let ((heap_id$ (lib!tokens.DelayFreeingActor./Heap/0 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$))))) (let ((_hsa$ (lib!tokens.DelayFreeingActor./Heap/1 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$))))) (let ((_psa$ (lib!tokens.DelayFreeingActor./Heap/2 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$))))) true)))))) (let ((tmp%%$ (let ((tmp%%$2 (%Poly%lib!tokens.DelayFreeingActor. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayFreeingActor. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayFreeingActor.>. update_tmp_delay_actor$) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!))))))) (ite (is-lib!tokens.DelayFreeingActor./Heap_ tmp%%$2) (let ((heap_id$ (lib!tokens.DelayFreeingActor./Heap/0 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$2))))) (let ((_hsa$ (lib!tokens.DelayFreeingActor./Heap/1 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$2))))) (let ((_psa$ (lib!tokens.DelayFreeingActor./Heap/2 (%Poly%lib!tokens.DelayFreeingActor. (Poly%lib!tokens.DelayFreeingActor. tmp%%$2))))) (tuple%3./tuple%3 (Poly%lib!tokens.HeapId. heap_id$) (Poly%lib!types.HeapSharedAccess. _hsa$) (Poly%lib!types.PageSharedAccess. _psa$))))) (%Poly%tuple%3. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%3. $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. $ TYPE%lib!types.PageSharedAccess.))))))) (let ((heap_id$ (%Poly%lib!tokens.HeapId. (tuple%3./tuple%3/0 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((_hsa$ (%Poly%lib!types.HeapSharedAccess. (tuple%3./tuple%3/1 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (let ((_psa$ (%Poly%lib!types.PageSharedAccess. (tuple%3./tuple%3/2 (%Poly%tuple%3. (Poly%tuple%3. tmp%%$)))))) (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id!))))))))))) :pattern ((lib!tokens.Mim.impl&%21.block_set_heap_id_enabled.? pre! block_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::reserve_uniq_identifier_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.reserve_uniq_identifier_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.reserve_uniq_identifier_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!tokens.Mim.impl&%21.reserve_uniq_identifier_strong.? pre! post!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (let ((u$ (lib!tokens.heap_get_unused_uniq_field.? (vstd!set.impl&%0.union.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (Poly%vstd!set.Set<lib!tokens.HeapId.>. (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!))))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. update_tmp_reserved_uniq$) (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%I (I u$)))))) (let ((update_tmp_reserved_uniq$1 (%Poly%vstd!set.Set<lib!tokens.HeapId.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. update_tmp_reserved_uniq$) (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%I (I u$)))))))) (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$1)))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.reserve_uniq_identifier_strong.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::reserve_uniq_identifier_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.reserve_uniq_identifier_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.reserve_uniq_identifier_enabled.) (forall ((pre! Poly)) (! (= (lib!tokens.Mim.impl&%21.reserve_uniq_identifier_enabled.? pre!) true) :pattern ((lib!tokens.Mim.impl&%21.reserve_uniq_identifier_enabled.? pre!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::create_thread_mk_tokens_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.create_thread_mk_tokens_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.create_thread_mk_tokens_strong.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (thread_state! Poly)) (! (= (lib!tokens.Mim.impl&%21.create_thread_mk_tokens_strong.? pre! post! thread_id! thread_state!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (Poly%vstd!set.Set<lib!thread.ThreadId.>. update_tmp_right_to_use_thread$) thread_id!) (let ((update_tmp_right_to_use_thread$1 (%Poly%vstd!set.Set<lib!thread.ThreadId.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. (Poly%vstd!set.Set<lib!thread.ThreadId.>. update_tmp_right_to_use_thread$) thread_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. update_tmp_reserved_uniq$) (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%I (I (lib!tokens.HeapId./HeapId/uniq (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!)))))))))) (let ((update_tmp_reserved_uniq$1 (%Poly%vstd!set.Set<lib!tokens.HeapId.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. update_tmp_reserved_uniq$) (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%I (I (lib!tokens.HeapId./HeapId/uniq (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!))))))))))))) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. thread_state!)))) (vstd!set.impl&%0.empty.? $ TYPE%lib!tokens.PageId.)) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. thread_state!)))) (vstd!set.impl&%0.empty.? $ TYPE%lib!tokens.SegmentId.)) (and (is-core!option.Option./Some_ update_tmp_my_inst$) (and (let ((inst$ (%Poly%lib!tokens.Mim.Instance. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_my_inst$)))))) (and (lib!types.impl&%17.wf2.? (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. thread_state!)))))) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!))) (Poly%lib!tokens.Mim.Instance. inst$)) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. update_tmp_heap_shared_access$)) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!))))) (let ((update_tmp_heap_shared_access$1 (%Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!types.HeapSharedAccess. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!types.HeapSharedAccess.>. update_tmp_heap_shared_access$) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!))) (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. thread_state!)))))))))) (let ((update_tmp_heap_to_thread$ (%Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.HeapId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.HeapId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!))) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!))) thread_id!)))) (and (let ((real_thread_state$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!)))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. thread_state!)))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. thread_state!)))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. thread_state!))))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!)) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id! (Poly%lib!tokens.ThreadState. real_thread_state$))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$)) thread_id!)) (let ((update_tmp_thread_checked_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id! (Poly%lib!tokens.ThreadCheckedState. (lib!tokens.ThreadCheckedState./ThreadCheckedState (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.empty.? $ TYPE%lib!tokens.PageId.)))))))) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$1) (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$1))))))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$1)))))))) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$1) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$1) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.create_thread_mk_tokens_strong.? pre! post! thread_id! thread_state!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::create_thread_mk_tokens_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.create_thread_mk_tokens_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.create_thread_mk_tokens_enabled.) (forall ((pre! Poly) (thread_id! Poly) (thread_state! Poly)) (! (= (lib!tokens.Mim.impl&%21.create_thread_mk_tokens_enabled.? pre! thread_id! thread_state!) (let ((tmp_assert$ true)) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (Poly%vstd!set.Set<lib!thread.ThreadId.>. update_tmp_right_to_use_thread$) thread_id!) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. update_tmp_reserved_uniq$) (Poly%lib!tokens.HeapId. (lib!tokens.HeapId./HeapId (%I (I 0)) (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.impl&%0.null.? (I 0)))) (%I (I (lib!tokens.HeapId./HeapId/uniq (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!)))))))))) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. thread_state!)))) (vstd!set.impl&%0.empty.? $ TYPE%lib!tokens.PageId.)) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. thread_state!)))) (vstd!set.impl&%0.empty.? $ TYPE%lib!tokens.SegmentId.)) (and (is-core!option.Option./Some_ update_tmp_my_inst$) (let ((inst$ (%Poly%lib!tokens.Mim.Instance. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. update_tmp_my_inst$)))))) (=> tmp_assert$ (lib!types.impl&%17.wf2.? (Poly%lib!types.HeapSharedAccess. (lib!tokens.HeapState./HeapState/shared_access (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. thread_state!)))))) (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. thread_state!))) (Poly%lib!tokens.Mim.Instance. inst$)))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.create_thread_mk_tokens_enabled.? pre! thread_id! thread_state!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::create_segment_mk_tokens_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.create_segment_mk_tokens_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.create_segment_mk_tokens_strong.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (pre_segment_id! Poly) (segment_state! Poly)) (! (= (lib!tokens.Mim.impl&%21.create_segment_mk_tokens_strong.? pre! post! thread_id! pre_segment_id! segment_state!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (not (lib!tokens.SegmentState./SegmentState/is_enabled (%Poly%lib!tokens.SegmentState. segment_state!))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((real_segment_id$ (lib!tokens.Mim.impl&%21.mk_fresh_segment_id.? (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!))) pre_segment_id!))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (Poly%lib!tokens.SegmentId. real_segment_id$))) (and (and (= (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. pre_segment_id!)) (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. real_segment_id$)))) (= (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. pre_segment_id!)) (lib!tokens.SegmentId./SegmentId/provenance (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. real_segment_id$))))) (let ((new_segments$ (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%lib!tokens.SegmentId. real_segment_id$) segment_state!)))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. new_segments$)) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!)) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. update_tmp_thread_of_segment$)) (Poly%lib!tokens.SegmentId. real_segment_id$))) (let ((update_tmp_thread_of_segment$1 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!thread.ThreadId. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!thread.ThreadId.>. update_tmp_thread_of_segment$) (Poly%lib!tokens.SegmentId. real_segment_id$) thread_id!)))) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$1) (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2))))))))))))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.create_segment_mk_tokens_strong.? pre! post! thread_id! pre_segment_id! segment_state!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::create_segment_mk_tokens_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.create_segment_mk_tokens_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.create_segment_mk_tokens_enabled.) (forall ((pre! Poly) (thread_id! Poly) (pre_segment_id! Poly) (segment_state! Poly)) (! (= (lib!tokens.Mim.impl&%21.create_segment_mk_tokens_enabled.? pre! thread_id! pre_segment_id! segment_state!) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (and (not (lib!tokens.SegmentState./SegmentState/is_enabled (%Poly%lib!tokens.SegmentState. segment_state!))) (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!)))) :pattern ((lib!tokens.Mim.impl&%21.create_segment_mk_tokens_enabled.? pre! thread_id! pre_segment_id! segment_state!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::segment_enable_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.segment_enable_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.segment_enable_strong.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (segment_id! Poly) (shared_access! Poly)) (! (= (lib!tokens.Mim.impl&%21.segment_enable_strong.? pre! post! thread_id! segment_id! shared_access!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) segment_id!) (and (not (lib!tokens.SegmentState./SegmentState/is_enabled (%Poly%lib!tokens.SegmentState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) segment_id!)))) (let ((segment_state$ (lib!tokens.SegmentState./SegmentState (%Poly%lib!types.SegmentSharedAccess. shared_access!) (%B (B true))))) (let ((new_segments$ (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) segment_id! (Poly%lib!tokens.SegmentState. segment_state$))))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. new_segments$)) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!)) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. update_tmp_segment_shared_access$)) segment_id!)) (let ((update_tmp_segment_shared_access$1 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. update_tmp_segment_shared_access$) segment_id! shared_access!)))) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$1) (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2))))))))))))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.segment_enable_strong.? pre! post! thread_id! segment_id! shared_access!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::segment_enable_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.segment_enable_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.segment_enable_enabled.) (forall ((pre! Poly) (thread_id! Poly) (segment_id! Poly) (shared_access! Poly)) (! (= (lib!tokens.Mim.impl&%21.segment_enable_enabled.? pre! thread_id! segment_id! shared_access!) (let ((tmp_assert$ true)) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) segment_id!)) (=> tmp_assert$ (not (lib!tokens.SegmentState./SegmentState/is_enabled (%Poly%lib!tokens.SegmentState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) segment_id!))))))))))) :pattern ((lib!tokens.Mim.impl&%21.segment_enable_enabled.? pre! thread_id! segment_id! shared_access!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::create_page_mk_tokens_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.create_page_mk_tokens_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.create_page_mk_tokens_strong.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (page_id! Poly) (n_slices! Poly) (block_size! Poly) (page_map! Poly)) (! (= (lib!tokens.Mim.impl&%21.create_page_mk_tokens_strong.? pre! post! thread_id! page_id! n_slices! block_size! page_map!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (and (lib!tokens.SegmentState./SegmentState/is_enabled (%Poly%lib!tokens.SegmentState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) tmp%%$) (< tmp%%$ (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) (%I n_slices!))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$)))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (Add (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$)))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (not (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$)))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$))) 0))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) page_id!) (and (= (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! page_id!))) (%I block_size!)) (and (vstd!set.impl&%0.disjoint.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!)) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_map!)))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!)) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$)) page_id!)) (let ((update_tmp_heap_of_page$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$) page_id! (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$)) page_id!)) (let ((update_tmp_delay$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id! (Poly%lib!tokens.DelayState. lib!tokens.DelayState./UseDelayedFree))))) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$1) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$1) (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2)))))))))))))))))))))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.create_page_mk_tokens_strong.? pre! post! thread_id! page_id! n_slices! block_size! page_map!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::create_page_mk_tokens_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.create_page_mk_tokens_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.create_page_mk_tokens_enabled.) (forall ((pre! Poly) (thread_id! Poly) (page_id! Poly) (n_slices! Poly) (block_size! Poly) (page_map! Poly)) (! (= (lib!tokens.Mim.impl&%21.create_page_mk_tokens_enabled.? pre! thread_id! page_id! n_slices! block_size! page_map!) (let ((tmp_assert$ true)) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))))) (and (=> tmp_assert$ (lib!tokens.SegmentState./SegmentState/is_enabled (%Poly%lib!tokens.SegmentState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!tokens.SegmentState. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) tmp%%$) (< tmp%%$ (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) (%I n_slices!))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (Add (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (not (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$))) 0))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$))))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) page_id!)) (and (=> tmp_assert$ (= (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! page_id!))) (%I block_size!))) (=> tmp_assert$ (vstd!set.impl&%0.disjoint.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!)))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.create_page_mk_tokens_enabled.? pre! thread_id! page_id! n_slices! block_size! page_map!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_enable_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_enable_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_enable_strong.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (page_id! Poly) (n_slices! Poly) (page_map! Poly) (psa_map! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_enable_strong.? pre! post! thread_id! page_id! n_slices! page_map! psa_map!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) tmp%%$) (< tmp%%$ (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) (%I n_slices!))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$)))) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map!)) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (%Poly%lib!types.PageSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map! pid$)) (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$)))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map! pid$)))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (Add (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$)))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) pid$) (not (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$)))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$)) (let ((tmp%%$ (%Poly%lib!types.PageSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map! pid$)))) (let ((tmp%%$2 (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))) (lib!tokens.PageState./PageState (%I (I (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$2))))) (%I (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$2))))) (%I (I (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$2))))) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. tmp%%$)) (%B (B true)))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$)))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_map!)))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!)) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (and (vstd!set.impl&%0.disjoint.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. update_tmp_page_shared_access$)) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map!)) (let ((update_tmp_page_shared_access$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. update_tmp_page_shared_access$) psa_map!)))) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$1) (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2)))))))))))))))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_enable_strong.? pre! post! thread_id! page_id! n_slices! page_map! psa_map!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_enable_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_enable_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_enable_enabled.) (forall ((pre! Poly) (thread_id! Poly) (page_id! Poly) (n_slices! Poly) (page_map! Poly) (psa_map! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_enable_enabled.? pre! thread_id! page_id! n_slices! page_map! psa_map!) (let ((tmp_assert$ true)) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) tmp%%$) (< tmp%%$ (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) (%I n_slices!))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$))))) (and (=> tmp_assert$ (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map!))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (%Poly%lib!types.PageSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map! pid$)) (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$)))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map! pid$))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (Add (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$))))) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) pid$) (not (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$))))) (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map!) pid$) (= (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$)) (let ((tmp%%$ (%Poly%lib!types.PageSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. psa_map! pid$)))) (let ((tmp%%$2 (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))) (lib!tokens.PageState./PageState (%I (I (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$2))))) (%I (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$2))))) (%I (I (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$2))))) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. tmp%%$)) (%B (B true)))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. page_map! pid$))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_enable_enabled.? pre! thread_id! page_id! n_slices! page_map! psa_map!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_mk_block_tokens_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_mk_block_tokens_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_mk_block_tokens_strong.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (page_id! Poly) (old_num_blocks! Poly) (new_num_blocks! Poly) (block_size! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_mk_block_tokens_strong.? pre! post! thread_id! page_id! old_num_blocks! new_num_blocks! block_size!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$)) thread_id!) (let ((cs$ (%Poly%lib!tokens.ThreadCheckedState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (let ((update_tmp_thread_checked_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) page_id!) (and (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) (and (= (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) (%I old_num_blocks!)) (and (= (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) (%I block_size!)) (and (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) 0) (and (<= (%I old_num_blocks!) (%I new_num_blocks!)) (let ((new_page$ (let ((tmp%%$ (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!)))) (lib!tokens.PageState./PageState (%I (I (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I new_num_blocks!) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%B (B (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))))))) (let ((cs2$ (lib!tokens.ThreadCheckedState./ThreadCheckedState (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (%Poly%lib!tokens.ThreadCheckedState. (Poly%lib!tokens.ThreadCheckedState. cs$)))) page_id!))))) (and (forall ((idx$ Poly)) (! (=> (has_type idx$ NAT) (=> (and (<= (%I old_num_blocks!) (%I idx$)) (< (%I idx$) (%I new_num_blocks!))) (lib!tokens.Mim.impl&%21.okay_to_add_block.? (Poly%lib!tokens.ThreadState. ts$) page_id! idx$ block_size!))) :pattern ((lib!tokens.Mim.impl&%21.okay_to_add_block.? (Poly%lib!tokens.ThreadState. ts$) page_id! idx$ block_size!)))) (let ((ssa$ (%Poly%lib!types.SegmentSharedAccess. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!types.SegmentSharedAccess. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!types.SegmentSharedAccess.>. (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))))))) (let ((block_map$ (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. $ (TYPE%fun%1. $ TYPE%lib!tokens.BlockId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState.) (Poly%fun%1. (mk_fun (%%lambda%%5 (%Poly%lib!tokens.PageId. page_id!) (%I old_num_blocks!) (%I new_num_blocks!) (%I block_size!)))) (Poly%fun%1. (mk_fun (%%lambda%%6 $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (%Poly%lib!types.SegmentSharedAccess. (Poly%lib!types.SegmentSharedAccess. ssa$)) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))) (and (vstd!set.impl&%0.disjoint.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. block_map$))) (let ((update_tmp_block$1 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. block_map$))))) (and (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id! (Poly%lib!tokens.PageState. new_page$))))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!)) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$1)) thread_id!)) (let ((update_tmp_thread_checked_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$1) thread_id! (Poly%lib!tokens.ThreadCheckedState. cs2$))))) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$2) (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2)))))))) (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$1)))))))))))))))))))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_mk_block_tokens_strong.? pre! post! thread_id! page_id! old_num_blocks! new_num_blocks! block_size!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_mk_block_tokens_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_mk_block_tokens_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_mk_block_tokens_enabled.) (forall ((pre! Poly) (thread_id! Poly) (page_id! Poly) (old_num_blocks! Poly) (new_num_blocks! Poly) (block_size! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_mk_block_tokens_enabled.? pre! thread_id! page_id! old_num_blocks! new_num_blocks! block_size!) (let ((tmp_assert$ true)) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$)) thread_id!)) (let ((cs$ (%Poly%lib!tokens.ThreadCheckedState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) page_id!)) (and (=> tmp_assert$ (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!)))) (and (=> tmp_assert$ (= (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) (%I old_num_blocks!))) (and (=> tmp_assert$ (= (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) (%I block_size!))) (and (=> tmp_assert$ (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) 0)) (and (=> tmp_assert$ (<= (%I old_num_blocks!) (%I new_num_blocks!))) (let ((new_page$ (let ((tmp%%$ (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!)))) (lib!tokens.PageState./PageState (%I (I (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I new_num_blocks!) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%B (B (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))))))) (let ((cs2$ (lib!tokens.ThreadCheckedState./ThreadCheckedState (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (%Poly%lib!tokens.ThreadCheckedState. (Poly%lib!tokens.ThreadCheckedState. cs$)))) page_id!))))) (=> tmp_assert$ (forall ((idx$ Poly)) (! (=> (has_type idx$ NAT) (=> (and (<= (%I old_num_blocks!) (%I idx$)) (< (%I idx$) (%I new_num_blocks!))) (lib!tokens.Mim.impl&%21.okay_to_add_block.? (Poly%lib!tokens.ThreadState. ts$) page_id! idx$ block_size!))) :pattern ((lib!tokens.Mim.impl&%21.okay_to_add_block.? (Poly%lib!tokens.ThreadState. ts$) page_id! idx$ block_size!))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_mk_block_tokens_enabled.? pre! thread_id! page_id! old_num_blocks! new_num_blocks! block_size!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_destroy_block_tokens_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_destroy_block_tokens_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_destroy_block_tokens_strong.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (page_id! Poly) (blocks! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_destroy_block_tokens_strong.? pre! post! thread_id! page_id! blocks!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) page_id!) (and (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!)) (and (= (vstd!map.impl&%0.len.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!) (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!)))) (and (forall ((block_id$ Poly)) (! (=> (has_type block_id$ TYPE%lib!tokens.BlockId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!) block_id$) (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id$)) (%Poly%lib!tokens.PageId. page_id!)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!) block_id$)))) (and (vstd!map_lib.impl&%0.submap_of.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks! (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) (let ((update_tmp_block$1 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map_lib.impl&%0.remove_keys.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!))))) (and (let ((new_page$ (let ((tmp%%$ (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!)))) (lib!tokens.PageState./PageState (%I (I (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I (I (lib!tokens.PageState./PageState/block_size (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%I (I 0)) (%Poly%lib!types.PageSharedAccess. (Poly%lib!types.PageSharedAccess. (lib!tokens.PageState./PageState/shared_access (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))) (%B (B (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (Poly%lib!tokens.PageState. tmp%%$))))))))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id! (Poly%lib!tokens.PageState. new_page$))))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!)) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2)))))) (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$1)))))))))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_destroy_block_tokens_strong.? pre! post! thread_id! page_id! blocks!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_destroy_block_tokens_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_destroy_block_tokens_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_destroy_block_tokens_enabled.) (forall ((pre! Poly) (thread_id! Poly) (page_id! Poly) (blocks! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_destroy_block_tokens_enabled.? pre! thread_id! page_id! blocks!) (let ((tmp_assert$ true)) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) page_id!)) (and (=> tmp_assert$ (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!))) (and (=> tmp_assert$ (= (vstd!map.impl&%0.len.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!) (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))))) (and (=> tmp_assert$ (forall ((block_id$ Poly)) (! (=> (has_type block_id$ TYPE%lib!tokens.BlockId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!) block_id$) (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id$)) (%Poly%lib!tokens.PageId. page_id!)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!) block_id$))))) (=> tmp_assert$ (vstd!map_lib.impl&%0.submap_of.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks! (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_destroy_block_tokens_enabled.? pre! thread_id! page_id! blocks!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_check_delay_state_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_check_delay_state_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_check_delay_state_strong.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (page_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_check_delay_state_strong.? pre! post! thread_id! page_id!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$)) thread_id!) (let ((cs$ (%Poly%lib!tokens.ThreadCheckedState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (let ((update_tmp_thread_checked_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) page_id!) (and (= (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) 0) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$)) page_id!) (let ((delay_state$ (%Poly%lib!tokens.DelayState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (and (not (= delay_state$ lib!tokens.DelayState./Freeing)) (let ((cs2$ (lib!tokens.ThreadCheckedState./ThreadCheckedState (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.insert.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (%Poly%lib!tokens.ThreadCheckedState. (Poly%lib!tokens.ThreadCheckedState. cs$)))) page_id!))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$1)) thread_id!)) (let ((update_tmp_thread_checked_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$1) thread_id! (Poly%lib!tokens.ThreadCheckedState. cs2$))))) (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$2))))))))))))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_check_delay_state_strong.? pre! post! thread_id! page_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_check_delay_state_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_check_delay_state_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_check_delay_state_enabled.) (forall ((pre! Poly) (thread_id! Poly) (page_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_check_delay_state_enabled.? pre! thread_id! page_id!) (let ((tmp_assert$ true)) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$)) thread_id!)) (let ((cs$ (%Poly%lib!tokens.ThreadCheckedState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) page_id!)) (and (=> tmp_assert$ (= (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) 0)) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$)) page_id!)) (let ((delay_state$ (%Poly%lib!tokens.DelayState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (=> tmp_assert$ (not (= delay_state$ lib!tokens.DelayState./Freeing)))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_check_delay_state_enabled.? pre! thread_id! page_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_disable_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_disable_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_disable_strong.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (page_id! Poly) (n_slices! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_disable_strong.? pre! post! thread_id! page_id! n_slices!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$)) thread_id!) (let ((cs$ (%Poly%lib!tokens.ThreadCheckedState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) page_id!) (and (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (%Poly%lib!tokens.ThreadCheckedState. (Poly%lib!tokens.ThreadCheckedState. cs$)))) page_id!) (and (= (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) 0) (and (vstd!set.impl&%0.subset_of.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) pid$) (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))) (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$))) (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) pid$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)) :pattern ((lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))) :pattern ((lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))) :pattern ((lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$))))) (let ((new_pages0$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState.) (Poly%fun%1. (mk_fun (%%lambda%%8 $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!))))) (Poly%fun%1. (mk_fun (%%lambda%%9 $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (%B (B false))))))))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages0$))))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!)) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (and (let ((psa_map$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess.) (Poly%fun%1. (mk_fun (%%lambda%%8 $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!))))) (Poly%fun%1. (mk_fun (%%lambda%%10 $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))))))))) (and (vstd!map_lib.impl&%0.submap_of.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. psa_map$) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. update_tmp_page_shared_access$)) (let ((update_tmp_page_shared_access$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. (vstd!map_lib.impl&%0.remove_keys.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. update_tmp_page_shared_access$) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!types.PageSharedAccess. (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. psa_map$)))))) (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$1)))) (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2))))))))))))))))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_disable_strong.? pre! post! thread_id! page_id! n_slices!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_disable_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_disable_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_disable_enabled.) (forall ((pre! Poly) (thread_id! Poly) (page_id! Poly) (n_slices! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_disable_enabled.? pre! thread_id! page_id! n_slices!) (let ((tmp_assert$ true)) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$)) thread_id!)) (let ((cs$ (%Poly%lib!tokens.ThreadCheckedState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadCheckedState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadCheckedState.>. update_tmp_thread_checked_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) page_id!)) (and (=> tmp_assert$ (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.ThreadCheckedState./ThreadCheckedState/pages (%Poly%lib!tokens.ThreadCheckedState. (Poly%lib!tokens.ThreadCheckedState. cs$)))) page_id!)) (and (=> tmp_assert$ (= (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) page_id!))) 0)) (and (=> tmp_assert$ (vstd!set.impl&%0.subset_of.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))))) (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) pid$) (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))) (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$))) (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) pid$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)) :pattern ((lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))) :pattern ((lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))) :pattern ((lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_disable_enabled.? pre! thread_id! page_id! n_slices!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_destroy_tokens_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_destroy_tokens_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_destroy_tokens_strong.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (page_id! Poly) (n_slices! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_destroy_tokens_strong.? pre! post! thread_id! page_id! n_slices!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$)) page_id!) (let ((update_tmp_heap_of_page$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$) page_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$)) page_id!) (let ((update_tmp_delay$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$) page_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (let ((update_tmp_thread_local_state$1 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (vstd!set.impl&%0.subset_of.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))))) (and (>= (%I n_slices!) 1) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$) (not (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$)))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$) (=> (not (= page_id! pid$)) (not (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$))) 0))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$)))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (vstd!map_lib.impl&%0.remove_keys.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)))))) (let ((ts2$ (lib!tokens.ThreadState./ThreadState (%Poly%lib!tokens.HeapId. (Poly%lib!tokens.HeapId. (lib!tokens.ThreadState./ThreadState/heap_id (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%lib!tokens.HeapState. (Poly%lib!tokens.HeapState. (lib!tokens.ThreadState./ThreadState/heap (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!tokens.SegmentState.>. (lib!tokens.ThreadState./ThreadState/segments (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (%Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. new_pages$))))) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1)) thread_id!)) (let ((update_tmp_thread_local_state$2 (%Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$1) thread_id! (Poly%lib!tokens.ThreadState. ts2$))))) (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$2))))))))))) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$1) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$1) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$)))))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_destroy_tokens_strong.? pre! post! thread_id! page_id! n_slices!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::page_destroy_tokens_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.page_destroy_tokens_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.page_destroy_tokens_enabled.) (forall ((pre! Poly) (thread_id! Poly) (page_id! Poly) (n_slices! Poly)) (! (= (lib!tokens.Mim.impl&%21.page_destroy_tokens_enabled.? pre! thread_id! page_id! n_slices!) (let ((tmp_assert$ true)) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.HeapId. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.HeapId.>. update_tmp_heap_of_page$)) page_id!) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.DelayState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.DelayState.>. update_tmp_delay$)) page_id!) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.subset_of.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))))) (and (=> tmp_assert$ (>= (%I n_slices!) 1)) (and (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$) (not (lib!tokens.PageState./PageState/is_enabled (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$))))) (=> tmp_assert$ (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$) (=> (not (= page_id! pid$)) (not (= (lib!tokens.PageState./PageState/offset (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) pid$))) 0))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (Poly%vstd!set.Set<lib!tokens.PageId.>. (lib!tokens.impl&%0.range_from.? page_id! (I 0) n_slices!)) pid$))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.page_destroy_tokens_enabled.? pre! thread_id! page_id! n_slices!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::block_tokens_distinct_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.block_tokens_distinct_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.block_tokens_distinct_strong.) (forall ((pre! Poly) (post! Poly) (block_id1! Poly) (block_id2! Poly)) (! (= (lib!tokens.Mim.impl&%21.block_tokens_distinct_strong.? pre! post! block_id1! block_id2!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id1!)) (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id2!))) (and (= (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. block_id1!)) (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. block_id2!))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id1!) (let ((update_tmp_block$1 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) block_id1!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$1)) block_id2!) (let ((update_tmp_block$2 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$1) block_id2!)))) false))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.block_tokens_distinct_strong.? pre! post! block_id1! block_id2!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::block_tokens_distinct_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.block_tokens_distinct_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.block_tokens_distinct_enabled.) (forall ((pre! Poly) (block_id1! Poly) (block_id2! Poly)) (! (= (lib!tokens.Mim.impl&%21.block_tokens_distinct_enabled.? pre! block_id1! block_id2!) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (and (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id1!)) (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id2!))) (and (= (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. block_id1!)) (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. block_id2!))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id1!) (let ((update_tmp_block$1 (%Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$) block_id1!)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$1)) block_id2!))))))) :pattern ((lib!tokens.Mim.impl&%21.block_tokens_distinct_enabled.? pre! block_id1! block_id2!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::block_in_range_strong")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.block_in_range_strong.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.block_in_range_strong.) (forall ((pre! Poly) (post! Poly) (thread_id! Poly) (block_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.block_in_range_strong.? pre! post! thread_id! block_id!) (let ((update_tmp_right_to_set_inst$ (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_my_inst$ (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_right_to_use_thread$ (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_of_segment$ (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay$ (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_of_page$ (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_actor$ (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_delay_actor$ (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_segment_shared_access$ (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_page_shared_access$ (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_shared_access$ (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_reserved_uniq$ (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_thread_checked_state$ (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_heap_to_thread$ (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (and (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id!) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))) (let ((tmp%%$ (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. block_id!)))) (and (<= 0 tmp%%$) (< tmp%%$ (lib!tokens.PageState./PageState/num_blocks (%Poly%lib!tokens.PageState. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$)))) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))))))))))) (and (= (lib!tokens.Mim.State./State/heap_to_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_to_thread$) (and (= (lib!tokens.Mim.State./State/thread_checked_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_checked_state$) (and (= (lib!tokens.Mim.State./State/reserved_uniq (%Poly%lib!tokens.Mim.State. post!)) update_tmp_reserved_uniq$) (and (= (lib!tokens.Mim.State./State/heap_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_shared_access$) (and (= (lib!tokens.Mim.State./State/page_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_page_shared_access$) (and (= (lib!tokens.Mim.State./State/segment_shared_access (%Poly%lib!tokens.Mim.State. post!)) update_tmp_segment_shared_access$) (and (= (lib!tokens.Mim.State./State/delay_actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay_actor$) (and (= (lib!tokens.Mim.State./State/actor (%Poly%lib!tokens.Mim.State. post!)) update_tmp_actor$) (and (= (lib!tokens.Mim.State./State/heap_of_page (%Poly%lib!tokens.Mim.State. post!)) update_tmp_heap_of_page$) (and (= (lib!tokens.Mim.State./State/delay (%Poly%lib!tokens.Mim.State. post!)) update_tmp_delay$) (and (= (lib!tokens.Mim.State./State/thread_of_segment (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_of_segment$) (and (= (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. post!)) update_tmp_block$) (and (= (lib!tokens.Mim.State./State/right_to_use_thread (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_use_thread$) (and (= (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. post!)) update_tmp_thread_local_state$) (and (= (lib!tokens.Mim.State./State/my_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_my_inst$) (= (lib!tokens.Mim.State./State/right_to_set_inst (%Poly%lib!tokens.Mim.State. post!)) update_tmp_right_to_set_inst$))))))))))))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.block_in_range_strong.? pre! post! thread_id! block_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::block_in_range_enabled")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.block_in_range_enabled.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.block_in_range_enabled.) (forall ((pre! Poly) (thread_id! Poly) (block_id! Poly)) (! (= (lib!tokens.Mim.impl&%21.block_in_range_enabled.? pre! thread_id! block_id!) (let ((tmp_assert$ true)) (let ((update_tmp_thread_local_state$ (lib!tokens.Mim.State./State/thread_local_state (%Poly%lib!tokens.Mim.State. pre!)))) (let ((update_tmp_block$ (lib!tokens.Mim.State./State/block (%Poly%lib!tokens.Mim.State. pre!)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!thread.ThreadId. (vstd!map.impl&%0.dom.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$)) thread_id!) (let ((ts$ (%Poly%lib!tokens.ThreadState. (vstd!map.impl&%0.index.? $ TYPE%lib!thread.ThreadId. $ TYPE%lib!tokens.ThreadState. (Poly%vstd!map.Map<lib!thread.ThreadId./lib!tokens.ThreadState.>. update_tmp_thread_local_state$) thread_id!)))) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. update_tmp_block$)) block_id!)) (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!tokens.PageState. (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. (lib!tokens.ThreadState./ThreadState/pages (%Poly%lib!tokens.ThreadState. (Poly%lib!tokens.ThreadState. ts$))))) (Poly%lib!tokens.PageId. (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id!)))))))))))) :pattern ((lib!tokens.Mim.impl&%21.block_in_range_enabled.? pre! thread_id! block_id!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::next_strong_by")
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.next_strong_by.) (forall ((pre! Poly) (post! Poly) (step! Poly)) (! (= (lib!tokens.Mim.impl&%21.next_strong_by.? pre! post! step!) (ite (is-lib!tokens.Mim.Step./set_inst_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((inst$ (lib!tokens.Mim.Step./set_inst/0 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.set_inst_strong.? pre! post! (Poly%lib!tokens.Mim.Instance. inst$))) (ite (is-lib!tokens.Mim.Step./actor_make_idle_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./actor_make_idle/0 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.actor_make_idle_strong.? pre! post! (Poly%lib!thread.ThreadId. thread_id$))) (ite (is-lib!tokens.Mim.Step./actor_abandon_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./actor_abandon/0 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.actor_abandon_strong.? pre! post! (Poly%lib!thread.ThreadId. thread_id$))) (ite (is-lib!tokens.Mim.Step./set_use_delayed_free_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((page_id$ (lib!tokens.Mim.Step./set_use_delayed_free/0 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.set_use_delayed_free_strong.? pre! post! (Poly%lib!tokens.PageId. page_id$))) (ite (is-lib!tokens.Mim.Step./delay_enter_freeing_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((page_id$ (lib!tokens.Mim.Step./delay_enter_freeing/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((block_id$ (lib!tokens.Mim.Step./delay_enter_freeing/1 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.delay_enter_freeing_strong.? pre! post! (Poly%lib!tokens.PageId. page_id$) (Poly%lib!tokens.BlockId. block_id$)))) (ite (is-lib!tokens.Mim.Step./delay_leave_freeing_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((page_id$ (lib!tokens.Mim.Step./delay_leave_freeing/0 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.delay_leave_freeing_strong.? pre! post! (Poly%lib!tokens.PageId. page_id$))) (ite (is-lib!tokens.Mim.Step./delay_lookup_heap_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((block_id$ (lib!tokens.Mim.Step./delay_lookup_heap/0 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.delay_lookup_heap_strong.? pre! post! (Poly%lib!tokens.BlockId. block_id$))) (ite (is-lib!tokens.Mim.Step./block_set_heap_id_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((block_id$ (lib!tokens.Mim.Step./block_set_heap_id/0 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.block_set_heap_id_strong.? pre! post! (Poly%lib!tokens.BlockId. block_id$))) (ite (is-lib!tokens.Mim.Step./reserve_uniq_identifier_ (%Poly%lib!tokens.Mim.Step. step!)) (lib!tokens.Mim.impl&%21.reserve_uniq_identifier_strong.? pre! post!) (ite (is-lib!tokens.Mim.Step./create_thread_mk_tokens_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./create_thread_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((thread_state$ (lib!tokens.Mim.Step./create_thread_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.create_thread_mk_tokens_strong.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.ThreadState. thread_state$)))) (ite (is-lib!tokens.Mim.Step./create_segment_mk_tokens_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./create_segment_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((pre_segment_id$ (lib!tokens.Mim.Step./create_segment_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((segment_state$ (lib!tokens.Mim.Step./create_segment_mk_tokens/2 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.create_segment_mk_tokens_strong.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.SegmentId. pre_segment_id$) (Poly%lib!tokens.SegmentState. segment_state$))))) (ite (is-lib!tokens.Mim.Step./segment_enable_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./segment_enable/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((segment_id$ (lib!tokens.Mim.Step./segment_enable/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((shared_access$ (lib!tokens.Mim.Step./segment_enable/2 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.segment_enable_strong.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.SegmentId. segment_id$) (Poly%lib!types.SegmentSharedAccess. shared_access$))))) (ite (is-lib!tokens.Mim.Step./create_page_mk_tokens_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./create_page_mk_tokens/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_id$ (lib!tokens.Mim.Step./create_page_mk_tokens/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((n_slices$ (lib!tokens.Mim.Step./create_page_mk_tokens/2 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((block_size$ (lib!tokens.Mim.Step./create_page_mk_tokens/3 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_map$ (lib!tokens.Mim.Step./create_page_mk_tokens/4 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.create_page_mk_tokens_strong.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.PageId. page_id$) (I n_slices$) (I block_size$) (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. page_map$))))))) (ite (is-lib!tokens.Mim.Step./page_enable_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./page_enable/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_id$ (lib!tokens.Mim.Step./page_enable/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((n_slices$ (lib!tokens.Mim.Step./page_enable/2 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_map$ (lib!tokens.Mim.Step./page_enable/3 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((psa_map$ (lib!tokens.Mim.Step./page_enable/4 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.page_enable_strong.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.PageId. page_id$) (I n_slices$) (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. page_map$) (Poly%vstd!map.Map<lib!tokens.PageId./lib!types.PageSharedAccess.>. psa_map$))))))) (ite (is-lib!tokens.Mim.Step./page_mk_block_tokens_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./page_mk_block_tokens/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_id$ (lib!tokens.Mim.Step./page_mk_block_tokens/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((old_num_blocks$ (lib!tokens.Mim.Step./page_mk_block_tokens/2 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((new_num_blocks$ (lib!tokens.Mim.Step./page_mk_block_tokens/3 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((block_size$ (lib!tokens.Mim.Step./page_mk_block_tokens/4 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.page_mk_block_tokens_strong.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.PageId. page_id$) (I old_num_blocks$) (I new_num_blocks$) (I block_size$))))))) (ite (is-lib!tokens.Mim.Step./page_destroy_block_tokens_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./page_destroy_block_tokens/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_id$ (lib!tokens.Mim.Step./page_destroy_block_tokens/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((blocks$ (lib!tokens.Mim.Step./page_destroy_block_tokens/2 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.page_destroy_block_tokens_strong.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.PageId. page_id$) (Poly%vstd!map.Map<lib!tokens.BlockId./lib!tokens.BlockState.>. blocks$))))) (ite (is-lib!tokens.Mim.Step./page_check_delay_state_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./page_check_delay_state/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_id$ (lib!tokens.Mim.Step./page_check_delay_state/1 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.page_check_delay_state_strong.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.PageId. page_id$)))) (ite (is-lib!tokens.Mim.Step./page_disable_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./page_disable/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_id$ (lib!tokens.Mim.Step./page_disable/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((n_slices$ (lib!tokens.Mim.Step./page_disable/2 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.page_disable_strong.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.PageId. page_id$) (I n_slices$))))) (ite (is-lib!tokens.Mim.Step./page_destroy_tokens_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./page_destroy_tokens/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((page_id$ (lib!tokens.Mim.Step./page_destroy_tokens/1 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((n_slices$ (lib!tokens.Mim.Step./page_destroy_tokens/2 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.page_destroy_tokens_strong.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.PageId. page_id$) (I n_slices$))))) (ite (is-lib!tokens.Mim.Step./block_tokens_distinct_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((block_id1$ (lib!tokens.Mim.Step./block_tokens_distinct/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((block_id2$ (lib!tokens.Mim.Step./block_tokens_distinct/1 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.block_tokens_distinct_strong.? pre! post! (Poly%lib!tokens.BlockId. block_id1$) (Poly%lib!tokens.BlockId. block_id2$)))) (and (is-lib!tokens.Mim.Step./block_in_range_ (%Poly%lib!tokens.Mim.Step. step!)) (let ((thread_id$ (lib!tokens.Mim.Step./block_in_range/0 (%Poly%lib!tokens.Mim.Step. step!)))) (let ((block_id$ (lib!tokens.Mim.Step./block_in_range/1 (%Poly%lib!tokens.Mim.Step. step!)))) (lib!tokens.Mim.impl&%21.block_in_range_strong.? pre! post! (Poly%lib!thread.ThreadId. thread_id$) (Poly%lib!tokens.BlockId. block_id$)))))))))))))))))))))))))) :pattern ((lib!tokens.Mim.impl&%21.next_strong_by.? pre! post! step!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::next_strong")
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.next_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!tokens.Mim.impl&%21.next_strong.? pre! post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!tokens.Mim.Step.) (lib!tokens.Mim.impl&%21.next_strong_by.? pre! post! step$)) :pattern ((lib!tokens.Mim.impl&%21.next_strong_by.? pre! post! step$))))) :pattern ((lib!tokens.Mim.impl&%21.next_strong.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::invariant")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.invariant.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.invariant.) (forall ((self! Poly)) (! (= (lib!tokens.Mim.impl&%21.invariant.? self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (lib!tokens.Mim.impl&%21.inv_finite.? self!) (lib!tokens.Mim.impl&%21.inv_reserved.? self!)) (lib!tokens.Mim.impl&%21.inv_reserved2.? self!)) (lib!tokens.Mim.impl&%21.inv_right_to_set_inst.? self!)) (lib!tokens.Mim.impl&%21.inv_heap_of_page_delay.? self!)) (lib!tokens.Mim.impl&%21.inv_delay_state.? self!)) (lib!tokens.Mim.impl&%21.inv_delay_actor.? self!)) (lib!tokens.Mim.impl&%21.inv_delay_actor_sub.? self!)) (lib!tokens.Mim.impl&%21.inv_checked_threads.? self!)) (lib!tokens.Mim.impl&%21.inv_no_delay_actor_for_checked.? self!)) (lib!tokens.Mim.impl&%21.right_to_use_thread_complement.? self!)) (lib!tokens.Mim.impl&%21.heap_of_thread_is_valid.? self!)) (lib!tokens.Mim.impl&%21.wf_heap_shared_access_requires_inst.? self!)) (lib!tokens.Mim.impl&%21.wf_heap_shared_access.? self!)) (lib!tokens.Mim.impl&%21.inv_thread_of_segment1.? self!)) (lib!tokens.Mim.impl&%21.inv_thread_of_segment2.? self!)) (lib!tokens.Mim.impl&%21.inv_thread_has_segment_for_page.? self!)) (lib!tokens.Mim.impl&%21.inv_thread_of_page1.? self!)) (lib!tokens.Mim.impl&%21.inv_thread_of_page2.? self!)) (lib!tokens.Mim.impl&%21.heap_of_page_is_correct.? self!)) (lib!tokens.Mim.impl&%21.inv_page_shared_access_dom.? self!)) (lib!tokens.Mim.impl&%21.inv_page_shared_access_eq.? self!)) (lib!tokens.Mim.impl&%21.inv_segment_shared_access_dom.? self!)) (lib!tokens.Mim.impl&%21.inv_segment_shared_access_eq.? self!)) (lib!tokens.Mim.impl&%21.inv_block_id_valid.? self!)) (lib!tokens.Mim.impl&%21.inv_block_id_at_idx_uniq.? self!)) (lib!tokens.Mim.impl&%21.heap_ids_thread_id1.? self!)) (lib!tokens.Mim.impl&%21.heap_ids_thread_id2.? self!)) (lib!tokens.Mim.impl&%21.inv_heap_shared_access.? self!)) (lib!tokens.Mim.impl&%21.page_implies_segment_enabled.? self!))) :pattern ((lib!tokens.Mim.impl&%21.invariant.? self!))))))
(set-info :comment ";; Function-Axioms lib::tokens::Mim::State::blocks_has")
(assert (fuel_bool_default fuel%lib!tokens.Mim.impl&%21.blocks_has.))
(assert (=> (fuel_bool fuel%lib!tokens.Mim.impl&%21.blocks_has.) (forall ((blocks! Poly) (page_id! Poly) (i! Poly)) (! (= (lib!tokens.Mim.impl&%21.blocks_has.? blocks! page_id! i!) (exists ((block_id$ Poly)) (! (and (has_type block_id$ TYPE%lib!tokens.BlockId.) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!) block_id$) (= (lib!tokens.BlockId./BlockId/page_id (%Poly%lib!tokens.BlockId. block_id$)) (%Poly%lib!tokens.PageId. page_id!))) (= (lib!tokens.BlockId./BlockId/idx (%Poly%lib!tokens.BlockId. block_id$)) (%I i!)))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.BlockId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.BlockId. $ TYPE%lib!tokens.BlockState. blocks!) block_id$))))) :pattern ((lib!tokens.Mim.impl&%21.blocks_has.? blocks! page_id! i!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%vstd!view.View. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (uInv SZ (const_int N&)) (tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)) :pattern ((tr_bound%vstd!array.ArrayAdditionalSpecFns. $ (ARRAY T&. T& N&. N&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%vstd!view.View. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (TYPE%vstd!raw_ptr.PointsTo. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%vstd!raw_ptr.IsExposed.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!view.View. $ (SLICE T&. T&)) :pattern ((tr_bound%vstd!view.View. $ (SLICE T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (REF A&.) A&)) :pattern ((tr_bound%vstd!view.View. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (BOX $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (RC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%vstd!view.View. A&. A&) (tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)) :pattern ((tr_bound%vstd!view.View. (ARC $ ALLOCATOR_GLOBAL A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%vstd!view.View. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type)) (! (=> (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. $ (TYPE%tuple%1. A0&. A0&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%1. A0&. A0&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%2. A0&. A0& A1&. A1&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%3. A0&. A0& A1&. A1& A2&. A2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A0&. Dcr) (A0& Type) (A1&. Dcr) (A1& Type) (A2&. Dcr) (A2& Type) (A3&. Dcr) (A3& Type)) (! (=> (and (tr_bound%vstd!view.View. A0&. A0&) (tr_bound%vstd!view.View. A1&. A1&) (tr_bound%vstd!view.View. A2&. A2&) (tr_bound%vstd!view.View. A3&. A3&)) (tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))) :pattern ((tr_bound%vstd!view.View. $ (TYPE%tuple%4. A0&. A0& A1&. A1& A2&. A2& A3&. A3&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (=> (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!alloc.Allocator. (REF A&.) A&)) :pattern ((tr_bound%core!alloc.Allocator. (REF A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!alloc.Allocator. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (SINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (uInv SZ (const_int N&)) (tr_bound%core!clone.Clone. T&. T&)) (tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))) :pattern ((tr_bound%core!clone.Clone. $ (ARRAY T&. T& N&. N&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. (CONST_PTR $) (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. (REF T&.) T&) :pattern ((tr_bound%core!clone.Clone. (REF T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (PTR T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (PTR T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ ALLOCATOR_GLOBAL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%core!clone.Clone. $ (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. T&. T&)) :pattern ((tr_bound%core!clone.Clone. $ (TYPE%vstd!state_machine_internal.SyncSendIfSyncSend. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (TRACKED A&.) A&) :pattern ((tr_bound%core!clone.Clone. (TRACKED A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((A&. Dcr) (A& Type)) (! (tr_bound%core!clone.Clone. (GHOST A&.) A&) :pattern ((tr_bound%core!clone.Clone. (GHOST A&.) A&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (A&. Dcr) (A& Type)) (! (=> (and (tr_bound%core!clone.Clone. T&. T&) (tr_bound%core!alloc.Allocator. A&. A&) (tr_bound%core!clone.Clone. A&. A&)) (tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)) :pattern ((tr_bound%core!clone.Clone. (BOX A&. A& T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!tokens.Mim.my_inst.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!tokens.Mim.Instance.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.BoolAgree.Instance.))
(set-info :comment ";; Function-Specs lib::types::PageQueue::clone")
(declare-fun ens%lib!types.impl&%14.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (s! Poly)) (! (= (ens%lib!types.impl&%14.clone. self! s!) (and (ens%core!clone.Clone.clone. $ TYPE%lib!types.PageQueue. self! s!) (= s! self!))) :pattern ((ens%lib!types.impl&%14.clone. self! s!)))))
(assert (forall ((tmp%%$ Poly) (s$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%lib!types.PageQueue.)) (has_type s$ TYPE%lib!types.PageQueue.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%lib!types.PageQueue.) $ (TYPE%tuple%1. (REF $) TYPE%lib!types.PageQueue.) (F fndef_singleton) tmp%%$ s$) (let ((self$ (%Poly%lib!types.PageQueue. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%lib!types.PageQueue. s$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%lib!types.PageQueue.) $ (TYPE%tuple%1. (REF $) TYPE%lib!types.PageQueue.) (F fndef_singleton) tmp%%$ s$)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.PageQueue.))
(set-info :comment ";; Function-Specs lib::types::SpanQueueHeader::clone")
(declare-fun ens%lib!types.impl&%19.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (s! Poly)) (! (= (ens%lib!types.impl&%19.clone. self! s!) (and (ens%core!clone.Clone.clone. $ TYPE%lib!types.SpanQueueHeader. self! s!) (= s! self!))) :pattern ((ens%lib!types.impl&%19.clone. self! s!)))))
(assert (forall ((tmp%%$ Poly) (s$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%lib!types.SpanQueueHeader.)) (has_type s$ TYPE%lib!types.SpanQueueHeader.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%lib!types.SpanQueueHeader.) $ (TYPE%tuple%1. (REF $) TYPE%lib!types.SpanQueueHeader.) (F fndef_singleton) tmp%%$ s$) (let ((self$ (%Poly%lib!types.SpanQueueHeader. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%Poly%lib!types.SpanQueueHeader. s$) self$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%lib!types.SpanQueueHeader.) $ (TYPE%tuple%1. (REF $) TYPE%lib!types.SpanQueueHeader.) (F fndef_singleton) tmp%%$ s$)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.SpanQueueHeader.))
(set-info :comment ";; Function-Specs lib::types::TldPtr::clone")
(declare-fun ens%lib!types.impl&%25.clone. (Poly Poly) Bool)
(assert (forall ((self! Poly) (s! Poly)) (! (= (ens%lib!types.impl&%25.clone. self! s!) (and (ens%core!clone.Clone.clone. $ TYPE%lib!types.TldPtr. self! s!) (= self! s!))) :pattern ((ens%lib!types.impl&%25.clone. self! s!)))))
(assert (forall ((tmp%%$ Poly) (s$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) TYPE%lib!types.TldPtr.)) (has_type s$ TYPE%lib!types.TldPtr.)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%lib!types.TldPtr.) $ (TYPE%tuple%1. (REF $) TYPE%lib!types.TldPtr.) (F fndef_singleton) tmp%%$ s$) (let ((self$ (%Poly%lib!types.TldPtr. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= self$ (%Poly%lib!types.TldPtr. s$))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ TYPE%lib!types.TldPtr.) $ (TYPE%tuple%1. (REF $) TYPE%lib!types.TldPtr.) (F fndef_singleton) tmp%%$ s$)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.TldPtr.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!linked_list.Node.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!linked_list.StuffAgree.Instance.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%core!clone.Clone. $ TYPE%lib!types.SegmentKind.))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::initialize_inductive")
(declare-fun req%lib!tokens.Mim.impl&%21.initialize_inductive. (lib!tokens.Mim.State.) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((post! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.initialize_inductive. post!) (=> %%global_location_label%%9 (lib!tokens.Mim.impl&%21.initialize.? (Poly%lib!tokens.Mim.State. post!)))) :pattern ((req%lib!tokens.Mim.impl&%21.initialize_inductive. post!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.initialize_inductive. (lib!tokens.Mim.State.) Bool)
(assert (forall ((post! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.initialize_inductive. post!) (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!))) :pattern ((ens%lib!tokens.Mim.impl&%21.initialize_inductive. post!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::initialize_inductive")
(set-info :comment ";; tokens.rs:1397:5: 1397:40 (#0)")
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::set_inst_inductive")
(declare-fun req%lib!tokens.Mim.impl&%21.set_inst_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!tokens.Mim.Instance.) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (inst! lib!tokens.Mim.Instance.)) (! (= (req%lib!tokens.Mim.impl&%21.set_inst_inductive. pre! post! inst!) (=> %%global_location_label%%10 (and (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. pre!)) (lib!tokens.Mim.impl&%21.set_inst_strong.? (Poly%lib!tokens.Mim.State. pre!) (Poly%lib!tokens.Mim.State. post!) (Poly%lib!tokens.Mim.Instance. inst!))))) :pattern ((req%lib!tokens.Mim.impl&%21.set_inst_inductive. pre! post! inst!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.set_inst_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!tokens.Mim.Instance.) Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (inst! lib!tokens.Mim.Instance.)) (! (= (ens%lib!tokens.Mim.impl&%21.set_inst_inductive. pre! post! inst!) (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!))) :pattern ((ens%lib!tokens.Mim.impl&%21.set_inst_inductive. pre! post! inst!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::set_inst_inductive")
(set-info :comment ";; tokens.rs:1400:5: 1400:70 (#0)")
(set-info :comment ";; Function-Def lib::tokens::Mim::State::set_inst_asserts")
(set-info :comment ";; tokens.rs:286:1: 1666:3 (#81)")
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::actor_make_idle_inductive")
(declare-fun req%lib!tokens.Mim.impl&%21.actor_make_idle_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!thread.ThreadId.) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (thread_id! lib!thread.ThreadId.)) (! (= (req%lib!tokens.Mim.impl&%21.actor_make_idle_inductive. pre! post! thread_id!) (=> %%global_location_label%%11 (and (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. pre!)) (lib!tokens.Mim.impl&%21.actor_make_idle_strong.? (Poly%lib!tokens.Mim.State. pre!) (Poly%lib!tokens.Mim.State. post!) (Poly%lib!thread.ThreadId. thread_id!))))) :pattern ((req%lib!tokens.Mim.impl&%21.actor_make_idle_inductive. pre! post! thread_id!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.actor_make_idle_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!thread.ThreadId.) Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (thread_id! lib!thread.ThreadId.)) (! (= (ens%lib!tokens.Mim.impl&%21.actor_make_idle_inductive. pre! post! thread_id!) (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!))) :pattern ((ens%lib!tokens.Mim.impl&%21.actor_make_idle_inductive. pre! post! thread_id!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::actor_make_idle_inductive")
(set-info :comment ";; tokens.rs:1403:5: 1403:77 (#0)")
(set-info :comment ";; Function-Def lib::tokens::Mim::State::actor_make_idle_asserts")
(set-info :comment ";; tokens.rs:286:1: 1666:3 (#81)")
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::actor_abandon_inductive")
(declare-fun req%lib!tokens.Mim.impl&%21.actor_abandon_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!thread.ThreadId.) Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (thread_id! lib!thread.ThreadId.)) (! (= (req%lib!tokens.Mim.impl&%21.actor_abandon_inductive. pre! post! thread_id!) (=> %%global_location_label%%12 (and (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. pre!)) (lib!tokens.Mim.impl&%21.actor_abandon_strong.? (Poly%lib!tokens.Mim.State. pre!) (Poly%lib!tokens.Mim.State. post!) (Poly%lib!thread.ThreadId. thread_id!))))) :pattern ((req%lib!tokens.Mim.impl&%21.actor_abandon_inductive. pre! post! thread_id!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.actor_abandon_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!thread.ThreadId.) Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (thread_id! lib!thread.ThreadId.)) (! (= (ens%lib!tokens.Mim.impl&%21.actor_abandon_inductive. pre! post! thread_id!) (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!))) :pattern ((ens%lib!tokens.Mim.impl&%21.actor_abandon_inductive. pre! post! thread_id!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::actor_abandon_inductive")
(set-info :comment ";; tokens.rs:1406:5: 1406:75 (#0)")
(set-info :comment ";; Function-Def lib::tokens::Mim::State::actor_abandon_asserts")
(set-info :comment ";; tokens.rs:286:1: 1666:3 (#81)")
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::set_use_delayed_free_inductive")
(declare-fun req%lib!tokens.Mim.impl&%21.set_use_delayed_free_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!tokens.PageId.) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (page_id! lib!tokens.PageId.)) (! (= (req%lib!tokens.Mim.impl&%21.set_use_delayed_free_inductive. pre! post! page_id!) (=> %%global_location_label%%13 (and (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. pre!)) (lib!tokens.Mim.impl&%21.set_use_delayed_free_strong.? (Poly%lib!tokens.Mim.State. pre!) (Poly%lib!tokens.Mim.State. post!) (Poly%lib!tokens.PageId. page_id!))))) :pattern ((req%lib!tokens.Mim.impl&%21.set_use_delayed_free_inductive. pre! post! page_id!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.set_use_delayed_free_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!tokens.PageId.) Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (page_id! lib!tokens.PageId.)) (! (= (ens%lib!tokens.Mim.impl&%21.set_use_delayed_free_inductive. pre! post! page_id!) (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!))) :pattern ((ens%lib!tokens.Mim.impl&%21.set_use_delayed_free_inductive. pre! post! page_id!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::set_use_delayed_free_inductive")
(set-info :comment ";; tokens.rs:1409:5: 1409:78 (#0)")
(set-info :comment ";; Function-Def lib::tokens::Mim::State::set_use_delayed_free_asserts")
(set-info :comment ";; tokens.rs:286:1: 1666:3 (#81)")
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::delay_enter_freeing_inductive")
(declare-fun req%lib!tokens.Mim.impl&%21.delay_enter_freeing_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!tokens.PageId. lib!tokens.BlockId.) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (page_id! lib!tokens.PageId.) (block_id! lib!tokens.BlockId.)) (! (= (req%lib!tokens.Mim.impl&%21.delay_enter_freeing_inductive. pre! post! page_id! block_id!) (=> %%global_location_label%%14 (and (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. pre!)) (lib!tokens.Mim.impl&%21.delay_enter_freeing_strong.? (Poly%lib!tokens.Mim.State. pre!) (Poly%lib!tokens.Mim.State. post!) (Poly%lib!tokens.PageId. page_id!) (Poly%lib!tokens.BlockId. block_id!))))) :pattern ((req%lib!tokens.Mim.impl&%21.delay_enter_freeing_inductive. pre! post! page_id! block_id!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.delay_enter_freeing_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!tokens.PageId. lib!tokens.BlockId.) Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (page_id! lib!tokens.PageId.) (block_id! lib!tokens.BlockId.)) (! (= (ens%lib!tokens.Mim.impl&%21.delay_enter_freeing_inductive. pre! post! page_id! block_id!) (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!))) :pattern ((ens%lib!tokens.Mim.impl&%21.delay_enter_freeing_inductive. pre! post! page_id! block_id!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::delay_enter_freeing_inductive")
(set-info :comment ";; tokens.rs:1412:5: 1412:96 (#0)")
(set-info :comment ";; Function-Def lib::tokens::Mim::State::delay_enter_freeing_asserts")
(set-info :comment ";; tokens.rs:286:1: 1666:3 (#81)")
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::delay_leave_freeing_inductive")
(declare-fun req%lib!tokens.Mim.impl&%21.delay_leave_freeing_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!tokens.PageId.) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (page_id! lib!tokens.PageId.)) (! (= (req%lib!tokens.Mim.impl&%21.delay_leave_freeing_inductive. pre! post! page_id!) (=> %%global_location_label%%15 (and (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. pre!)) (lib!tokens.Mim.impl&%21.delay_leave_freeing_strong.? (Poly%lib!tokens.Mim.State. pre!) (Poly%lib!tokens.Mim.State. post!) (Poly%lib!tokens.PageId. page_id!))))) :pattern ((req%lib!tokens.Mim.impl&%21.delay_leave_freeing_inductive. pre! post! page_id!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.delay_leave_freeing_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!tokens.PageId.) Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (page_id! lib!tokens.PageId.)) (! (= (ens%lib!tokens.Mim.impl&%21.delay_leave_freeing_inductive. pre! post! page_id!) (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!))) :pattern ((ens%lib!tokens.Mim.impl&%21.delay_leave_freeing_inductive. pre! post! page_id!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::delay_leave_freeing_inductive")
(set-info :comment ";; tokens.rs:1415:5: 1415:77 (#0)")
(set-info :comment ";; Function-Def lib::tokens::Mim::State::delay_leave_freeing_asserts")
(set-info :comment ";; tokens.rs:286:1: 1666:3 (#81)")
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::delay_lookup_heap_inductive")
(declare-fun req%lib!tokens.Mim.impl&%21.delay_lookup_heap_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!tokens.BlockId.) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (block_id! lib!tokens.BlockId.)) (! (= (req%lib!tokens.Mim.impl&%21.delay_lookup_heap_inductive. pre! post! block_id!) (=> %%global_location_label%%16 (and (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. pre!)) (lib!tokens.Mim.impl&%21.delay_lookup_heap_strong.? (Poly%lib!tokens.Mim.State. pre!) (Poly%lib!tokens.Mim.State. post!) (Poly%lib!tokens.BlockId. block_id!))))) :pattern ((req%lib!tokens.Mim.impl&%21.delay_lookup_heap_inductive. pre! post! block_id!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.delay_lookup_heap_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!tokens.BlockId.) Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (block_id! lib!tokens.BlockId.)) (! (= (ens%lib!tokens.Mim.impl&%21.delay_lookup_heap_inductive. pre! post! block_id!) (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!))) :pattern ((ens%lib!tokens.Mim.impl&%21.delay_lookup_heap_inductive. pre! post! block_id!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::delay_lookup_heap_inductive")
(set-info :comment ";; tokens.rs:1418:5: 1418:77 (#0)")
(set-info :comment ";; Function-Def lib::tokens::Mim::State::delay_lookup_heap_asserts")
(set-info :comment ";; tokens.rs:286:1: 1666:3 (#81)")
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::block_set_heap_id_inductive")
(declare-fun req%lib!tokens.Mim.impl&%21.block_set_heap_id_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!tokens.BlockId.) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (block_id! lib!tokens.BlockId.)) (! (= (req%lib!tokens.Mim.impl&%21.block_set_heap_id_inductive. pre! post! block_id!) (=> %%global_location_label%%17 (and (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. pre!)) (lib!tokens.Mim.impl&%21.block_set_heap_id_strong.? (Poly%lib!tokens.Mim.State. pre!) (Poly%lib!tokens.Mim.State. post!) (Poly%lib!tokens.BlockId. block_id!))))) :pattern ((req%lib!tokens.Mim.impl&%21.block_set_heap_id_inductive. pre! post! block_id!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.block_set_heap_id_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!tokens.BlockId.) Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (block_id! lib!tokens.BlockId.)) (! (= (ens%lib!tokens.Mim.impl&%21.block_set_heap_id_inductive. pre! post! block_id!) (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!))) :pattern ((ens%lib!tokens.Mim.impl&%21.block_set_heap_id_inductive. pre! post! block_id!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::block_set_heap_id_inductive")
(set-info :comment ";; tokens.rs:1421:5: 1421:77 (#0)")
(set-info :comment ";; Function-Def lib::tokens::Mim::State::block_set_heap_id_asserts")
(set-info :comment ";; tokens.rs:286:1: 1666:3 (#81)")
(set-info :comment ";; Function-Specs lib::tokens::lemma_heap_get_unused_uniq_field")
(declare-fun req%lib!tokens.lemma_heap_get_unused_uniq_field. (vstd!set.Set<lib!tokens.HeapId.>.) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((s! vstd!set.Set<lib!tokens.HeapId.>.)) (! (= (req%lib!tokens.lemma_heap_get_unused_uniq_field. s!) (=> %%global_location_label%%18 (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. s!)))) :pattern ((req%lib!tokens.lemma_heap_get_unused_uniq_field. s!)))))
(declare-fun ens%lib!tokens.lemma_heap_get_unused_uniq_field. (vstd!set.Set<lib!tokens.HeapId.>.) Bool)
(assert (forall ((s! vstd!set.Set<lib!tokens.HeapId.>.)) (! (= (ens%lib!tokens.lemma_heap_get_unused_uniq_field. s!) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%lib!tokens.HeapId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. s!) id$) (not (= (lib!tokens.HeapId./HeapId/uniq (%Poly%lib!tokens.HeapId. id$)) (lib!tokens.heap_get_unused_uniq_field.? (Poly%vstd!set.Set<lib!tokens.HeapId.>. s!)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.HeapId. (Poly%vstd!set.Set<lib!tokens.HeapId.>. s!) id$))))) :pattern ((ens%lib!tokens.lemma_heap_get_unused_uniq_field. s!)))))
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::reserve_uniq_identifier_inductive")
(declare-fun req%lib!tokens.Mim.impl&%21.reserve_uniq_identifier_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State.) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.)) (! (= (req%lib!tokens.Mim.impl&%21.reserve_uniq_identifier_inductive. pre! post!) (=> %%global_location_label%%19 (and (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. pre!)) (lib!tokens.Mim.impl&%21.reserve_uniq_identifier_strong.? (Poly%lib!tokens.Mim.State. pre!) (Poly%lib!tokens.Mim.State. post!))))) :pattern ((req%lib!tokens.Mim.impl&%21.reserve_uniq_identifier_inductive. pre! post!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.reserve_uniq_identifier_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State.) Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.)) (! (= (ens%lib!tokens.Mim.impl&%21.reserve_uniq_identifier_inductive. pre! post!) (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!))) :pattern ((ens%lib!tokens.Mim.impl&%21.reserve_uniq_identifier_inductive. pre! post!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::reserve_uniq_identifier_inductive")
(set-info :comment ";; tokens.rs:1648:5: 1648:64 (#0)")
(set-info :comment ";; Function-Def lib::tokens::Mim::State::reserve_uniq_identifier_asserts")
(set-info :comment ";; tokens.rs:286:1: 1666:3 (#81)")
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::create_thread_mk_tokens_inductive")
(declare-fun req%lib!tokens.Mim.impl&%21.create_thread_mk_tokens_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!thread.ThreadId. lib!tokens.ThreadState.) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (thread_id! lib!thread.ThreadId.) (thread_state! lib!tokens.ThreadState.)) (! (= (req%lib!tokens.Mim.impl&%21.create_thread_mk_tokens_inductive. pre! post! thread_id! thread_state!) (=> %%global_location_label%%20 (and (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. pre!)) (lib!tokens.Mim.impl&%21.create_thread_mk_tokens_strong.? (Poly%lib!tokens.Mim.State. pre!) (Poly%lib!tokens.Mim.State. post!) (Poly%lib!thread.ThreadId. thread_id!) (Poly%lib!tokens.ThreadState. thread_state!))))) :pattern ((req%lib!tokens.Mim.impl&%21.create_thread_mk_tokens_inductive. pre! post! thread_id! thread_state!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.create_thread_mk_tokens_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!thread.ThreadId. lib!tokens.ThreadState.) Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (thread_id! lib!thread.ThreadId.) (thread_state! lib!tokens.ThreadState.)) (! (= (ens%lib!tokens.Mim.impl&%21.create_thread_mk_tokens_inductive. pre! post! thread_id! thread_state!) (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!))) :pattern ((ens%lib!tokens.Mim.impl&%21.create_thread_mk_tokens_inductive. pre! post! thread_id! thread_state!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::create_thread_mk_tokens_inductive")
(set-info :comment ";; tokens.rs:1435:5: 1435:112 (#0)")
(set-info :comment ";; Function-Def lib::tokens::Mim::State::create_thread_mk_tokens_asserts")
(set-info :comment ";; tokens.rs:286:1: 1666:3 (#81)")
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::create_segment_mk_tokens_inductive")
(declare-fun req%lib!tokens.Mim.impl&%21.create_segment_mk_tokens_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!thread.ThreadId. lib!tokens.SegmentId. lib!tokens.SegmentState.) Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (thread_id! lib!thread.ThreadId.) (pre_segment_id! lib!tokens.SegmentId.) (segment_state! lib!tokens.SegmentState.)) (! (= (req%lib!tokens.Mim.impl&%21.create_segment_mk_tokens_inductive. pre! post! thread_id! pre_segment_id! segment_state!) (=> %%global_location_label%%21 (and (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. pre!)) (lib!tokens.Mim.impl&%21.create_segment_mk_tokens_strong.? (Poly%lib!tokens.Mim.State. pre!) (Poly%lib!tokens.Mim.State. post!) (Poly%lib!thread.ThreadId. thread_id!) (Poly%lib!tokens.SegmentId. pre_segment_id!) (Poly%lib!tokens.SegmentState. segment_state!))))) :pattern ((req%lib!tokens.Mim.impl&%21.create_segment_mk_tokens_inductive. pre! post! thread_id! pre_segment_id! segment_state!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.create_segment_mk_tokens_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!thread.ThreadId. lib!tokens.SegmentId. lib!tokens.SegmentState.) Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (thread_id! lib!thread.ThreadId.) (pre_segment_id! lib!tokens.SegmentId.) (segment_state! lib!tokens.SegmentState.)) (! (= (ens%lib!tokens.Mim.impl&%21.create_segment_mk_tokens_inductive. pre! post! thread_id! pre_segment_id! segment_state!) (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!))) :pattern ((ens%lib!tokens.Mim.impl&%21.create_segment_mk_tokens_inductive. pre! post! thread_id! pre_segment_id! segment_state!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::create_segment_mk_tokens_inductive")
(set-info :comment ";; tokens.rs:1451:5: 1451:142 (#0)")
(set-info :comment ";; Function-Specs lib::tokens::lemma_segment_get_unused_uniq_field")
(declare-fun req%lib!tokens.lemma_segment_get_unused_uniq_field. (vstd!set.Set<lib!tokens.SegmentId.>.) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((s! vstd!set.Set<lib!tokens.SegmentId.>.)) (! (= (req%lib!tokens.lemma_segment_get_unused_uniq_field. s!) (=> %%global_location_label%%22 (vstd!set.impl&%0.finite.? $ TYPE%lib!tokens.SegmentId. (Poly%vstd!set.Set<lib!tokens.SegmentId.>. s!)))) :pattern ((req%lib!tokens.lemma_segment_get_unused_uniq_field. s!)))))
(declare-fun ens%lib!tokens.lemma_segment_get_unused_uniq_field. (vstd!set.Set<lib!tokens.SegmentId.>.) Bool)
(assert (forall ((s! vstd!set.Set<lib!tokens.SegmentId.>.)) (! (= (ens%lib!tokens.lemma_segment_get_unused_uniq_field. s!) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (Poly%vstd!set.Set<lib!tokens.SegmentId.>. s!) id$) (not (= (lib!tokens.SegmentId./SegmentId/uniq (%Poly%lib!tokens.SegmentId. id$)) (lib!tokens.segment_get_unused_uniq_field.? (Poly%vstd!set.Set<lib!tokens.SegmentId.>. s!)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (Poly%vstd!set.Set<lib!tokens.SegmentId.>. s!) id$))))) :pattern ((ens%lib!tokens.lemma_segment_get_unused_uniq_field. s!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::create_segment_mk_tokens_asserts")
(set-info :comment ";; tokens.rs:286:1: 1666:3 (#81)")
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::segment_enable_inductive")
(declare-fun req%lib!tokens.Mim.impl&%21.segment_enable_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!thread.ThreadId. lib!tokens.SegmentId. lib!types.SegmentSharedAccess.) Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (thread_id! lib!thread.ThreadId.) (segment_id! lib!tokens.SegmentId.) (shared_access! lib!types.SegmentSharedAccess.)) (! (= (req%lib!tokens.Mim.impl&%21.segment_enable_inductive. pre! post! thread_id! segment_id! shared_access!) (=> %%global_location_label%%23 (and (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. pre!)) (lib!tokens.Mim.impl&%21.segment_enable_strong.? (Poly%lib!tokens.Mim.State. pre!) (Poly%lib!tokens.Mim.State. post!) (Poly%lib!thread.ThreadId. thread_id!) (Poly%lib!tokens.SegmentId. segment_id!) (Poly%lib!types.SegmentSharedAccess. shared_access!))))) :pattern ((req%lib!tokens.Mim.impl&%21.segment_enable_inductive. pre! post! thread_id! segment_id! shared_access!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.segment_enable_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!thread.ThreadId. lib!tokens.SegmentId. lib!types.SegmentSharedAccess.) Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (thread_id! lib!thread.ThreadId.) (segment_id! lib!tokens.SegmentId.) (shared_access! lib!types.SegmentSharedAccess.)) (! (= (ens%lib!tokens.Mim.impl&%21.segment_enable_inductive. pre! post! thread_id! segment_id! shared_access!) (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!))) :pattern ((ens%lib!tokens.Mim.impl&%21.segment_enable_inductive. pre! post! thread_id! segment_id! shared_access!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::segment_enable_inductive")
(set-info :comment ";; tokens.rs:1454:5: 1454:135 (#0)")
(set-info :comment ";; Function-Def lib::tokens::Mim::State::segment_enable_asserts")
(set-info :comment ";; tokens.rs:286:1: 1666:3 (#81)")
(set-info :comment ";; Function-Specs lib::tokens::Mim::State::create_page_mk_tokens_inductive")
(declare-fun req%lib!tokens.Mim.impl&%21.create_page_mk_tokens_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!thread.ThreadId. lib!tokens.PageId. Int Int vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (thread_id! lib!thread.ThreadId.) (page_id! lib!tokens.PageId.) (n_slices! Int) (block_size! Int) (page_map! vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)) (! (= (req%lib!tokens.Mim.impl&%21.create_page_mk_tokens_inductive. pre! post! thread_id! page_id! n_slices! block_size! page_map!) (=> %%global_location_label%%24 (and (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. pre!)) (lib!tokens.Mim.impl&%21.create_page_mk_tokens_strong.? (Poly%lib!tokens.Mim.State. pre!) (Poly%lib!tokens.Mim.State. post!) (Poly%lib!thread.ThreadId. thread_id!) (Poly%lib!tokens.PageId. page_id!) (I n_slices!) (I block_size!) (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. page_map!))))) :pattern ((req%lib!tokens.Mim.impl&%21.create_page_mk_tokens_inductive. pre! post! thread_id! page_id! n_slices! block_size! page_map!)))))
(declare-fun ens%lib!tokens.Mim.impl&%21.create_page_mk_tokens_inductive. (lib!tokens.Mim.State. lib!tokens.Mim.State. lib!thread.ThreadId. lib!tokens.PageId. Int Int vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.) Bool)
(assert (forall ((pre! lib!tokens.Mim.State.) (post! lib!tokens.Mim.State.) (thread_id! lib!thread.ThreadId.) (page_id! lib!tokens.PageId.) (n_slices! Int) (block_size! Int) (page_map! vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)) (! (= (ens%lib!tokens.Mim.impl&%21.create_page_mk_tokens_inductive. pre! post! thread_id! page_id! n_slices! block_size! page_map!) (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!))) :pattern ((ens%lib!tokens.Mim.impl&%21.create_page_mk_tokens_inductive. pre! post! thread_id! page_id! n_slices! block_size! page_map!)))))
(set-info :comment ";; Function-Def lib::tokens::Mim::State::create_page_mk_tokens_inductive")
(set-info :comment ";; tokens.rs:1457:5: 1457:166 (#0)")
(declare-const pre! lib!tokens.Mim.State.)
(declare-const post! lib!tokens.Mim.State.)
(declare-const thread_id! lib!thread.ThreadId.)
(declare-const page_id! lib!tokens.PageId.)
(declare-const n_slices! Int)
(declare-const block_size! Int)
(declare-const page_map! vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!tokens.Mim.State. pre!) TYPE%lib!tokens.Mim.State.))
(assert (has_type (Poly%lib!tokens.Mim.State. post!) TYPE%lib!tokens.Mim.State.))
(assert (has_type (Poly%lib!thread.ThreadId. thread_id!) TYPE%lib!thread.ThreadId.))
(assert (has_type (Poly%lib!tokens.PageId. page_id!) TYPE%lib!tokens.PageId.))
(assert (<= 0 n_slices!))
(assert (<= 0 block_size!))
(assert (and (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. pre!)) (lib!tokens.Mim.impl&%21.create_page_mk_tokens_strong.? (Poly%lib!tokens.Mim.State. pre!) (Poly%lib!tokens.Mim.State. post!) (Poly%lib!thread.ThreadId. thread_id!) (Poly%lib!tokens.PageId. page_id!) (I n_slices!) (I block_size!) (Poly%vstd!map.Map<lib!tokens.PageId./lib!tokens.PageState.>. page_map!))))
(set-info :comment ";; could not show invariant `inv_finite` on the `post` state")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; could not show invariant `inv_reserved` on the `post` state")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; could not show invariant `inv_reserved2` on the `post` state")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; could not show invariant `inv_right_to_set_inst` on the `post` state")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; could not show invariant `inv_heap_of_page_delay` on the `post` state")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; could not show invariant `inv_delay_state` on the `post` state")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; could not show invariant `inv_delay_actor` on the `post` state")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; could not show invariant `inv_delay_actor_sub` on the `post` state")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; could not show invariant `inv_checked_threads` on the `post` state")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; could not show invariant `inv_no_delay_actor_for_checked` on the `post` state")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; could not show invariant `right_to_use_thread_complement` on the `post` state")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; could not show invariant `heap_of_thread_is_valid` on the `post` state")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; could not show invariant `wf_heap_shared_access_requires_inst` on the `post` state")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; could not show invariant `wf_heap_shared_access` on the `post` state")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; could not show invariant `inv_thread_of_segment1` on the `post` state")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; could not show invariant `inv_thread_of_segment2` on the `post` state")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; could not show invariant `inv_thread_has_segment_for_page` on the `post` state")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; could not show invariant `inv_thread_of_page1` on the `post` state")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; could not show invariant `inv_thread_of_page2` on the `post` state")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; could not show invariant `heap_of_page_is_correct` on the `post` state")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; could not show invariant `inv_page_shared_access_dom` on the `post` state")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; could not show invariant `inv_page_shared_access_eq` on the `post` state")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; could not show invariant `inv_segment_shared_access_dom` on the `post` state")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; could not show invariant `inv_segment_shared_access_eq` on the `post` state")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; could not show invariant `inv_block_id_valid` on the `post` state")
(declare-const %%location_label%%24 Bool)
(set-info :comment ";; could not show invariant `inv_block_id_at_idx_uniq` on the `post` state")
(declare-const %%location_label%%25 Bool)
(set-info :comment ";; could not show invariant `heap_ids_thread_id1` on the `post` state")
(declare-const %%location_label%%26 Bool)
(set-info :comment ";; could not show invariant `heap_ids_thread_id2` on the `post` state")
(declare-const %%location_label%%27 Bool)
(set-info :comment ";; could not show invariant `inv_heap_shared_access` on the `post` state")
(declare-const %%location_label%%28 Bool)
(set-info :comment ";; could not show invariant `page_implies_segment_enabled` on the `post` state")
(declare-const %%location_label%%29 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%30 Bool)
(assert (not (and (=> %%location_label%%0 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_finite. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_finite. post!) (and (=> %%location_label%%1 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved. post!) (and (=> %%location_label%%2 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved2. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_reserved2. post!) (and (=> %%location_label%%3 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_right_to_set_inst. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_right_to_set_inst. post!) (and (=> %%location_label%%4 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_of_page_delay. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_of_page_delay. post!) (and (=> %%location_label%%5 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_state. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_state. post!) (and (=> %%location_label%%6 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor. post!) (and (=> %%location_label%%7 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor_sub. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_delay_actor_sub. post!) (and (=> %%location_label%%8 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_checked_threads. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_checked_threads. post!) (and (=> %%location_label%%9 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_no_delay_actor_for_checked. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_no_delay_actor_for_checked. post!) (and (=> %%location_label%%10 (req%lib!tokens.Mim.impl&%21.lemma_msg_right_to_use_thread_complement. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_right_to_use_thread_complement. post!) (and (=> %%location_label%%11 (req%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_thread_is_valid. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_thread_is_valid. post!) (and (=> %%location_label%%12 (req%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access_requires_inst. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access_requires_inst. post!) (and (=> %%location_label%%13 (req%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_wf_heap_shared_access. post!) (and (=> %%location_label%%14 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment1. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment1. post!) (and (=> %%location_label%%15 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment2. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_segment2. post!) (and (=> %%location_label%%16 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_has_segment_for_page. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_has_segment_for_page. post!) (and (=> %%location_label%%17 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page1. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page1. post!) (and (=> %%location_label%%18 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page2. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_thread_of_page2. post!) (and (=> %%location_label%%19 (req%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_page_is_correct. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_of_page_is_correct. post!) (and (=> %%location_label%%20 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_dom. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_dom. post!) (and (=> %%location_label%%21 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_eq. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_page_shared_access_eq. post!) (and (=> %%location_label%%22 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_dom. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_dom. post!) (and (=> %%location_label%%23 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_eq. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_segment_shared_access_eq. post!) (and (=> %%location_label%%24 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_valid. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_valid. post!) (and (=> %%location_label%%25 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_at_idx_uniq. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_block_id_at_idx_uniq. post!) (and (=> %%location_label%%26 (req%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id1. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id1. post!) (and (=> %%location_label%%27 (req%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id2. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_heap_ids_thread_id2. post!) (and (=> %%location_label%%28 (req%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_shared_access. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_inv_heap_shared_access. post!) (and (=> %%location_label%%29 (req%lib!tokens.Mim.impl&%21.lemma_msg_page_implies_segment_enabled. post!)) (=> (ens%lib!tokens.Mim.impl&%21.lemma_msg_page_implies_segment_enabled. post!) (=> %%location_label%%30 (lib!tokens.Mim.impl&%21.invariant.? (Poly%lib!tokens.Mim.State. post!)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
