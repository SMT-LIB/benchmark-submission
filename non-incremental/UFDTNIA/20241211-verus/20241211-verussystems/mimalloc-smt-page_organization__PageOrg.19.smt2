(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verus Systems (https://dl.acm.org/doi/10.1145/3694715.3695952) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr Type Dcr) Dcr)
(declare-fun RC (Dcr Type Dcr) Dcr)
(declare-fun ARC (Dcr Type Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun CONST_PTR (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-const STRSLICE Type)
(declare-const ALLOCATOR_GLOBAL Type)
(declare-fun PTR (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (I (%I x)))) :pattern ((has_type x CHAR)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(declare-fun charClip (Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(assert (forall ((i Int)) (! (and (or (and (<= 0 (charClip i)) (<= (charClip i) 55295)) (and (<= 57344 (charClip i)) (<= (charClip i) 1114111))) (=> (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111))) (= i (charClip i)))) :pattern ((charClip i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(declare-fun charInv (Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((i Int)) (! (= (charInv i) (or (and (<= 0 i) (<= i 55295)) (and (<= 57344 i) (<= i 1114111)))) :pattern ((charInv i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Int)) (! (=> (charInv x) (has_type (I x) CHAR)) :pattern ((has_type (I x) CHAR)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(declare-fun bitxor (Poly Poly) Int)
(declare-fun bitand (Poly Poly) Int)
(declare-fun bitor (Poly Poly) Int)
(declare-fun bitshr (Poly Poly) Int)
(declare-fun bitshl (Poly Poly) Int)
(declare-fun bitnot (Poly) Int)
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitxor x y))) :pattern ((uClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitxor x y))) :pattern ((iClip bits (bitxor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitor x y))) :pattern ((uClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitor x y))) :pattern ((iClip bits (bitor x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (uInv bits (%I y))) (uInv bits (bitand x y))) :pattern ((uClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (iInv bits (%I y))) (iInv bits (bitand x y))) :pattern ((iClip bits (bitand x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (uInv bits (%I x)) (<= 0 (%I y))) (uInv bits (bitshr x y))) :pattern ((uClip bits (bitshr x y))))))
(assert (forall ((x Poly) (y Poly) (bits Int)) (! (=> (and (iInv bits (%I x)) (<= 0 (%I y))) (iInv bits (bitshr x y))) :pattern ((iClip bits (bitshr x y))))))
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(set-info :comment ";; MODULE 'module page_organization::PageOrg'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.bits.axiom_u64_leading_zeros. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.is_some. FuelId)
(declare-const fuel%vstd!std_specs.option.is_none. FuelId)
(declare-const fuel%vstd!std_specs.option.spec_unwrap. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_finite. FuelId)
(declare-const fuel%vstd!map.axiom_map_index_decreases_infinite. FuelId)
(declare-const fuel%vstd!map.axiom_map_empty. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_same. FuelId)
(declare-const fuel%vstd!map.axiom_map_insert_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_domain. FuelId)
(declare-const fuel%vstd!map.axiom_map_remove_different. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal. FuelId)
(declare-const fuel%vstd!map.axiom_map_ext_equal_deep. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.remove_keys. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_index_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_decreases. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_empty. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_new_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_push_index_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_same. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_update_different. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_ext_equal_deep. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_subrange_index. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_len. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index1. FuelId)
(declare-const fuel%vstd!seq.axiom_seq_add_index2. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_left. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.add_empty_right. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.insert. FuelId)
(declare-const fuel%vstd!seq_lib.impl&%0.remove. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty. FuelId)
(declare-const fuel%vstd!set.axiom_set_new. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_same. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_insert. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_different. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal. FuelId)
(declare-const fuel%vstd!set.axiom_set_ext_equal_deep. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_domain. FuelId)
(declare-const fuel%vstd!set.axiom_mk_map_index. FuelId)
(declare-const fuel%vstd!set.axiom_set_empty_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_insert_finite. FuelId)
(declare-const fuel%vstd!set.axiom_set_remove_finite. FuelId)
(declare-const fuel%vstd!state_machine_internal.impl&%2.update_at_index. FuelId)
(declare-const fuel%vstd!state_machine_internal.impl&%3.update_at_index. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_3. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_1. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_2. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_1. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_2. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_3. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_create_segment_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_forget_about_first_page_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_free_to_unused_queue_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_set_range_to_used_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_into_used_list_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_into_used_list_back_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_1. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_2. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_segment_freeing_start_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%0.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_take_page_from_unused_queue. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_1. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_2. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_split_page. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_1. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_2. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_3. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_create_segment. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_create_segment_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_allocate_popped. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_forget_about_first_page. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_forget_about_first_page_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_forget_about_first_page2. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_clear_ec. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_free_to_unused_queue. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_free_to_unused_queue_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_set_range_to_used. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_set_range_to_used_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_set_range_to_not_used. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_into_used_list. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_into_used_list_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_into_used_list_back. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_into_used_list_back_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_out_of_used_list. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_1. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_2. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_segment_freeing_start. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_segment_freeing_start_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_segment_freeing_finish. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_merge_with_after. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_merge_with_before. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%1.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%2.arrow_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%2.arrow_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%3.is_initialize. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%3.is_dummy_to_use_type_params. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%3.get_dummy_to_use_type_params_0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.initialize. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.initialize_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.split_page. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.split_page_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.split_page_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.create_segment. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.create_segment_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.create_segment_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.allocate_popped. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.allocate_popped_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.allocate_popped_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page2. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.clear_ec. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.clear_ec_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.clear_ec_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.free_to_unused_queue. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_used. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_used_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_used_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_not_used. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.into_used_list. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.out_of_used_list. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.out_of_used_list_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.out_of_used_list_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_start. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_start_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_start_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_finish. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.merge_with_after. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.merge_with_after_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.merge_with_after_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.merge_with_before. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.merge_with_before_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.merge_with_before_enabled. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.next_by. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.next. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.next_strong_by. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.next_strong. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.init_by. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.init. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.invariant. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.public_invariant. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.ll_basics. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.page_id_domain. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.count_off0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.end_is_unused. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.count_is_right. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.popped_basics. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.data_for_used_header. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.inv_segment_creating. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.inv_very_unready. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.inv_ready. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.inv_used. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.data_for_unused_header. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_exists_in_some_list. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.attached_ranges. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.attached_ranges_segment. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.seg_free_prefix. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.attached_rec0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.attached_rec. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.popped_ranges_match. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.popped_ranges_match_for_sid. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.popped_for_seg. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.is_any_the_popped. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.is_the_popped. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.popped_len. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.valid_unused_page. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.get_list_idx. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.valid_used_page. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.page_id_of_popped. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.popped_page_id. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.expect_out_of_lists. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.ec_of_popped. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.popped_ec. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.ucount. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.ucount_sum. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.good_range_very_unready. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.good_range0. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.good_range_unused. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.good_range_used. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.one_count. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.does_count. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.in_popped_range. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.if_popped_or_other_then_for. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.insert_front. FuelId)
(declare-const fuel%lib!page_organization.PageOrg.impl&%4.insert_back. FuelId)
(declare-const fuel%lib!config.INTPTR_SHIFT. FuelId)
(declare-const fuel%lib!config.SLICE_SHIFT. FuelId)
(declare-const fuel%lib!config.SLICE_SIZE. FuelId)
(declare-const fuel%lib!config.SEGMENT_SHIFT. FuelId)
(declare-const fuel%lib!config.SEGMENT_SIZE. FuelId)
(declare-const fuel%lib!config.SLICES_PER_SEGMENT. FuelId)
(declare-const fuel%lib!config.BIN_HUGE. FuelId)
(declare-const fuel%lib!config.BIN_FULL. FuelId)
(declare-const fuel%lib!config.SMALL_PAGE_SHIFT. FuelId)
(declare-const fuel%lib!config.MEDIUM_PAGE_SHIFT. FuelId)
(declare-const fuel%lib!config.MEDIUM_PAGE_SIZE. FuelId)
(declare-const fuel%lib!config.MEDIUM_OBJ_SIZE_MAX. FuelId)
(declare-const fuel%lib!config.SEGMENT_BIN_MAX. FuelId)
(declare-const fuel%lib!bin_sizes.valid_bin_idx. FuelId)
(declare-const fuel%lib!bin_sizes.smallest_bin_fitting_size. FuelId)
(declare-const fuel%lib!bin_sizes.valid_sbin_idx. FuelId)
(declare-const fuel%lib!bin_sizes.smallest_sbin_fitting_size. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.is_No. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.is_Ready. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.get_Ready_0. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.is_Used. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.get_Used_0. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.is_SegmentCreating. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.get_SegmentCreating_0. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.is_VeryUnready. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.get_VeryUnready_0. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.get_VeryUnready_1. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.get_VeryUnready_2. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.is_SegmentFreeing. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.get_SegmentFreeing_0. FuelId)
(declare-const fuel%lib!page_organization.impl&%2.get_SegmentFreeing_1. FuelId)
(declare-const fuel%lib!page_organization.is_unused_header. FuelId)
(declare-const fuel%lib!page_organization.is_used_header. FuelId)
(declare-const fuel%lib!page_organization.get_next. FuelId)
(declare-const fuel%lib!page_organization.get_prev. FuelId)
(declare-const fuel%lib!page_organization.valid_ll_i. FuelId)
(declare-const fuel%lib!page_organization.valid_ll. FuelId)
(declare-const fuel%lib!page_organization.is_in_lls. FuelId)
(declare-const fuel%vstd!array.group_array_axioms. FuelId)
(declare-const fuel%vstd!map.group_map_axioms. FuelId)
(declare-const fuel%vstd!multiset.group_multiset_axioms. FuelId)
(declare-const fuel%vstd!raw_ptr.group_raw_ptr_axioms. FuelId)
(declare-const fuel%vstd!seq.group_seq_axioms. FuelId)
(declare-const fuel%vstd!seq_lib.group_seq_lib_default. FuelId)
(declare-const fuel%vstd!set.group_set_axioms. FuelId)
(declare-const fuel%vstd!set_lib.group_set_lib_axioms. FuelId)
(declare-const fuel%vstd!slice.group_slice_axioms. FuelId)
(declare-const fuel%vstd!string.group_string_axioms. FuelId)
(declare-const fuel%vstd!std_specs.bits.group_bits_axioms. FuelId)
(declare-const fuel%vstd!std_specs.control_flow.group_control_flow_axioms. FuelId)
(declare-const fuel%vstd!std_specs.range.group_range_axioms. FuelId)
(declare-const fuel%vstd!std_specs.vec.group_vec_axioms. FuelId)
(declare-const fuel%vstd!group_vstd_default. FuelId)
(assert (distinct fuel%vstd!std_specs.bits.axiom_u64_leading_zeros. fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.is_some. fuel%vstd!std_specs.option.is_none. fuel%vstd!std_specs.option.spec_unwrap. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map.axiom_map_index_decreases_finite. fuel%vstd!map.axiom_map_index_decreases_infinite. fuel%vstd!map.axiom_map_empty. fuel%vstd!map.axiom_map_insert_domain. fuel%vstd!map.axiom_map_insert_same. fuel%vstd!map.axiom_map_insert_different. fuel%vstd!map.axiom_map_remove_domain. fuel%vstd!map.axiom_map_remove_different. fuel%vstd!map.axiom_map_ext_equal. fuel%vstd!map.axiom_map_ext_equal_deep. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!map_lib.impl&%0.remove_keys. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.axiom_seq_index_decreases. fuel%vstd!seq.axiom_seq_subrange_decreases. fuel%vstd!seq.axiom_seq_empty. fuel%vstd!seq.axiom_seq_new_len. fuel%vstd!seq.axiom_seq_new_index. fuel%vstd!seq.axiom_seq_push_len. fuel%vstd!seq.axiom_seq_push_index_same. fuel%vstd!seq.axiom_seq_push_index_different. fuel%vstd!seq.axiom_seq_update_len. fuel%vstd!seq.axiom_seq_update_same. fuel%vstd!seq.axiom_seq_update_different. fuel%vstd!seq.axiom_seq_ext_equal. fuel%vstd!seq.axiom_seq_ext_equal_deep. fuel%vstd!seq.axiom_seq_subrange_len. fuel%vstd!seq.axiom_seq_subrange_index. fuel%vstd!seq.axiom_seq_add_len. fuel%vstd!seq.axiom_seq_add_index1. fuel%vstd!seq.axiom_seq_add_index2. fuel%vstd!seq_lib.impl&%0.add_empty_left. fuel%vstd!seq_lib.impl&%0.add_empty_right. fuel%vstd!seq_lib.impl&%0.push_distributes_over_add. fuel%vstd!seq_lib.impl&%0.insert. fuel%vstd!seq_lib.impl&%0.remove. fuel%vstd!set.axiom_set_empty. fuel%vstd!set.axiom_set_new. fuel%vstd!set.axiom_set_insert_same. fuel%vstd!set.axiom_set_insert_different. fuel%vstd!set.axiom_set_remove_same. fuel%vstd!set.axiom_set_remove_insert. fuel%vstd!set.axiom_set_remove_different. fuel%vstd!set.axiom_set_ext_equal. fuel%vstd!set.axiom_set_ext_equal_deep. fuel%vstd!set.axiom_mk_map_domain. fuel%vstd!set.axiom_mk_map_index. fuel%vstd!set.axiom_set_empty_finite. fuel%vstd!set.axiom_set_insert_finite. fuel%vstd!set.axiom_set_remove_finite. fuel%vstd!state_machine_internal.impl&%2.update_at_index. fuel%vstd!state_machine_internal.impl&%3.update_at_index. fuel%lib!page_organization.PageOrg.impl&%0.arrow_3. fuel%lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_0. fuel%lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_1. fuel%lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_2. fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_0. fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_1. fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_2. fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_3. fuel%lib!page_organization.PageOrg.impl&%0.arrow_create_segment_0. fuel%lib!page_organization.PageOrg.impl&%0.arrow_forget_about_first_page_0. fuel%lib!page_organization.PageOrg.impl&%0.arrow_free_to_unused_queue_0. fuel%lib!page_organization.PageOrg.impl&%0.arrow_set_range_to_used_0. fuel%lib!page_organization.PageOrg.impl&%0.arrow_into_used_list_0. fuel%lib!page_organization.PageOrg.impl&%0.arrow_into_used_list_back_0. fuel%lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_0. fuel%lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_1. fuel%lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_2. fuel%lib!page_organization.PageOrg.impl&%0.arrow_segment_freeing_start_0. fuel%lib!page_organization.PageOrg.impl&%0.arrow_dummy_to_use_type_params_0. fuel%lib!page_organization.PageOrg.impl&%1.is_take_page_from_unused_queue. fuel%lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_0. fuel%lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_1. fuel%lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_2. fuel%lib!page_organization.PageOrg.impl&%1.is_split_page. fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_0. fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_1. fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_2. fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_3. fuel%lib!page_organization.PageOrg.impl&%1.is_create_segment. fuel%lib!page_organization.PageOrg.impl&%1.get_create_segment_0. fuel%lib!page_organization.PageOrg.impl&%1.is_allocate_popped. fuel%lib!page_organization.PageOrg.impl&%1.is_forget_about_first_page. fuel%lib!page_organization.PageOrg.impl&%1.get_forget_about_first_page_0. fuel%lib!page_organization.PageOrg.impl&%1.is_forget_about_first_page2. fuel%lib!page_organization.PageOrg.impl&%1.is_clear_ec. fuel%lib!page_organization.PageOrg.impl&%1.is_free_to_unused_queue. fuel%lib!page_organization.PageOrg.impl&%1.get_free_to_unused_queue_0. fuel%lib!page_organization.PageOrg.impl&%1.is_set_range_to_used. fuel%lib!page_organization.PageOrg.impl&%1.get_set_range_to_used_0. fuel%lib!page_organization.PageOrg.impl&%1.is_set_range_to_not_used. fuel%lib!page_organization.PageOrg.impl&%1.is_into_used_list. fuel%lib!page_organization.PageOrg.impl&%1.get_into_used_list_0. fuel%lib!page_organization.PageOrg.impl&%1.is_into_used_list_back. fuel%lib!page_organization.PageOrg.impl&%1.get_into_used_list_back_0. fuel%lib!page_organization.PageOrg.impl&%1.is_out_of_used_list. fuel%lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_0. fuel%lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_1. fuel%lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_2. fuel%lib!page_organization.PageOrg.impl&%1.is_segment_freeing_start. fuel%lib!page_organization.PageOrg.impl&%1.get_segment_freeing_start_0. fuel%lib!page_organization.PageOrg.impl&%1.is_segment_freeing_finish. fuel%lib!page_organization.PageOrg.impl&%1.is_merge_with_after. fuel%lib!page_organization.PageOrg.impl&%1.is_merge_with_before. fuel%lib!page_organization.PageOrg.impl&%1.is_dummy_to_use_type_params. fuel%lib!page_organization.PageOrg.impl&%1.get_dummy_to_use_type_params_0. fuel%lib!page_organization.PageOrg.impl&%2.arrow_0. fuel%lib!page_organization.PageOrg.impl&%2.arrow_dummy_to_use_type_params_0. fuel%lib!page_organization.PageOrg.impl&%3.is_initialize. fuel%lib!page_organization.PageOrg.impl&%3.is_dummy_to_use_type_params. fuel%lib!page_organization.PageOrg.impl&%3.get_dummy_to_use_type_params_0. fuel%lib!page_organization.PageOrg.impl&%4.initialize. fuel%lib!page_organization.PageOrg.impl&%4.initialize_enabled. fuel%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue. fuel%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_strong. fuel%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_enabled. fuel%lib!page_organization.PageOrg.impl&%4.split_page. fuel%lib!page_organization.PageOrg.impl&%4.split_page_strong. fuel%lib!page_organization.PageOrg.impl&%4.split_page_enabled. fuel%lib!page_organization.PageOrg.impl&%4.create_segment. fuel%lib!page_organization.PageOrg.impl&%4.create_segment_strong. fuel%lib!page_organization.PageOrg.impl&%4.create_segment_enabled. fuel%lib!page_organization.PageOrg.impl&%4.allocate_popped. fuel%lib!page_organization.PageOrg.impl&%4.allocate_popped_strong. fuel%lib!page_organization.PageOrg.impl&%4.allocate_popped_enabled. fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page. fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page_strong. fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page_enabled. fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page2. fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_strong. fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_enabled. fuel%lib!page_organization.PageOrg.impl&%4.clear_ec. fuel%lib!page_organization.PageOrg.impl&%4.clear_ec_strong. fuel%lib!page_organization.PageOrg.impl&%4.clear_ec_enabled. fuel%lib!page_organization.PageOrg.impl&%4.free_to_unused_queue. fuel%lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_strong. fuel%lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_enabled. fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_used. fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_used_strong. fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_used_enabled. fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_not_used. fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_strong. fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_enabled. fuel%lib!page_organization.PageOrg.impl&%4.into_used_list. fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_strong. fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_enabled. fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back. fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong. fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled. fuel%lib!page_organization.PageOrg.impl&%4.out_of_used_list. fuel%lib!page_organization.PageOrg.impl&%4.out_of_used_list_strong. fuel%lib!page_organization.PageOrg.impl&%4.out_of_used_list_enabled. fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_start. fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_start_strong. fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_start_enabled. fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_finish. fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_strong. fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_enabled. fuel%lib!page_organization.PageOrg.impl&%4.merge_with_after. fuel%lib!page_organization.PageOrg.impl&%4.merge_with_after_strong. fuel%lib!page_organization.PageOrg.impl&%4.merge_with_after_enabled. fuel%lib!page_organization.PageOrg.impl&%4.merge_with_before. fuel%lib!page_organization.PageOrg.impl&%4.merge_with_before_strong. fuel%lib!page_organization.PageOrg.impl&%4.merge_with_before_enabled. fuel%lib!page_organization.PageOrg.impl&%4.next_by. fuel%lib!page_organization.PageOrg.impl&%4.next. fuel%lib!page_organization.PageOrg.impl&%4.next_strong_by. fuel%lib!page_organization.PageOrg.impl&%4.next_strong. fuel%lib!page_organization.PageOrg.impl&%4.init_by. fuel%lib!page_organization.PageOrg.impl&%4.init. fuel%lib!page_organization.PageOrg.impl&%4.invariant. fuel%lib!page_organization.PageOrg.impl&%4.public_invariant. fuel%lib!page_organization.PageOrg.impl&%4.ll_basics. fuel%lib!page_organization.PageOrg.impl&%4.page_id_domain. fuel%lib!page_organization.PageOrg.impl&%4.count_off0. fuel%lib!page_organization.PageOrg.impl&%4.end_is_unused. fuel%lib!page_organization.PageOrg.impl&%4.count_is_right. fuel%lib!page_organization.PageOrg.impl&%4.popped_basics. fuel%lib!page_organization.PageOrg.impl&%4.data_for_used_header. fuel%lib!page_organization.PageOrg.impl&%4.inv_segment_creating. fuel%lib!page_organization.PageOrg.impl&%4.inv_very_unready. fuel%lib!page_organization.PageOrg.impl&%4.inv_ready. fuel%lib!page_organization.PageOrg.impl&%4.inv_used. fuel%lib!page_organization.PageOrg.impl&%4.data_for_unused_header. fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused. fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used. fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2. fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2. fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_exists_in_some_list. fuel%lib!page_organization.PageOrg.impl&%4.attached_ranges. fuel%lib!page_organization.PageOrg.impl&%4.attached_ranges_segment. fuel%lib!page_organization.PageOrg.impl&%4.seg_free_prefix. fuel%lib!page_organization.PageOrg.impl&%4.attached_rec0. fuel%lib!page_organization.PageOrg.impl&%4.attached_rec. fuel%lib!page_organization.PageOrg.impl&%4.popped_ranges_match. fuel%lib!page_organization.PageOrg.impl&%4.popped_ranges_match_for_sid. fuel%lib!page_organization.PageOrg.impl&%4.popped_for_seg. fuel%lib!page_organization.PageOrg.impl&%4.is_any_the_popped. fuel%lib!page_organization.PageOrg.impl&%4.is_the_popped. fuel%lib!page_organization.PageOrg.impl&%4.popped_len. fuel%lib!page_organization.PageOrg.impl&%4.valid_unused_page. fuel%lib!page_organization.PageOrg.impl&%4.get_list_idx. fuel%lib!page_organization.PageOrg.impl&%4.valid_used_page. fuel%lib!page_organization.PageOrg.impl&%4.page_id_of_popped. fuel%lib!page_organization.PageOrg.impl&%4.popped_page_id. fuel%lib!page_organization.PageOrg.impl&%4.expect_out_of_lists. fuel%lib!page_organization.PageOrg.impl&%4.ec_of_popped. fuel%lib!page_organization.PageOrg.impl&%4.popped_ec. fuel%lib!page_organization.PageOrg.impl&%4.ucount. fuel%lib!page_organization.PageOrg.impl&%4.ucount_sum. fuel%lib!page_organization.PageOrg.impl&%4.good_range_very_unready. fuel%lib!page_organization.PageOrg.impl&%4.good_range0. fuel%lib!page_organization.PageOrg.impl&%4.good_range_unused. fuel%lib!page_organization.PageOrg.impl&%4.good_range_used. fuel%lib!page_organization.PageOrg.impl&%4.one_count. fuel%lib!page_organization.PageOrg.impl&%4.does_count. fuel%lib!page_organization.PageOrg.impl&%4.in_popped_range. fuel%lib!page_organization.PageOrg.impl&%4.if_popped_or_other_then_for. fuel%lib!page_organization.PageOrg.impl&%4.insert_front. fuel%lib!page_organization.PageOrg.impl&%4.insert_back. fuel%lib!config.INTPTR_SHIFT. fuel%lib!config.SLICE_SHIFT. fuel%lib!config.SLICE_SIZE. fuel%lib!config.SEGMENT_SHIFT. fuel%lib!config.SEGMENT_SIZE. fuel%lib!config.SLICES_PER_SEGMENT. fuel%lib!config.BIN_HUGE. fuel%lib!config.BIN_FULL. fuel%lib!config.SMALL_PAGE_SHIFT. fuel%lib!config.MEDIUM_PAGE_SHIFT. fuel%lib!config.MEDIUM_PAGE_SIZE. fuel%lib!config.MEDIUM_OBJ_SIZE_MAX. fuel%lib!config.SEGMENT_BIN_MAX. fuel%lib!bin_sizes.valid_bin_idx. fuel%lib!bin_sizes.smallest_bin_fitting_size. fuel%lib!bin_sizes.valid_sbin_idx. fuel%lib!bin_sizes.smallest_sbin_fitting_size. fuel%lib!page_organization.impl&%2.is_No. fuel%lib!page_organization.impl&%2.is_Ready. fuel%lib!page_organization.impl&%2.get_Ready_0. fuel%lib!page_organization.impl&%2.is_Used. fuel%lib!page_organization.impl&%2.get_Used_0. fuel%lib!page_organization.impl&%2.is_SegmentCreating. fuel%lib!page_organization.impl&%2.get_SegmentCreating_0. fuel%lib!page_organization.impl&%2.is_VeryUnready. fuel%lib!page_organization.impl&%2.get_VeryUnready_0. fuel%lib!page_organization.impl&%2.get_VeryUnready_1. fuel%lib!page_organization.impl&%2.get_VeryUnready_2. fuel%lib!page_organization.impl&%2.is_SegmentFreeing. fuel%lib!page_organization.impl&%2.get_SegmentFreeing_0. fuel%lib!page_organization.impl&%2.get_SegmentFreeing_1. fuel%lib!page_organization.is_unused_header. fuel%lib!page_organization.is_used_header. fuel%lib!page_organization.get_next. fuel%lib!page_organization.get_prev. fuel%lib!page_organization.valid_ll_i. fuel%lib!page_organization.valid_ll. fuel%lib!page_organization.is_in_lls. fuel%vstd!array.group_array_axioms. fuel%vstd!map.group_map_axioms. fuel%vstd!multiset.group_multiset_axioms. fuel%vstd!raw_ptr.group_raw_ptr_axioms. fuel%vstd!seq.group_seq_axioms. fuel%vstd!seq_lib.group_seq_lib_default. fuel%vstd!set.group_set_axioms. fuel%vstd!set_lib.group_set_lib_axioms. fuel%vstd!slice.group_slice_axioms. fuel%vstd!string.group_string_axioms. fuel%vstd!std_specs.bits.group_bits_axioms. fuel%vstd!std_specs.control_flow.group_control_flow_axioms. fuel%vstd!std_specs.range.group_range_axioms. fuel%vstd!std_specs.vec.group_vec_axioms. fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!map.group_map_axioms.) (and (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_finite.) (fuel_bool_default fuel%vstd!map.axiom_map_index_decreases_infinite.) (fuel_bool_default fuel%vstd!map.axiom_map_empty.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_same.) (fuel_bool_default fuel%vstd!map.axiom_map_insert_different.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_domain.) (fuel_bool_default fuel%vstd!map.axiom_map_remove_different.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal.) (fuel_bool_default fuel%vstd!map.axiom_map_ext_equal_deep.))))
(assert (=> (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (and (fuel_bool_default fuel%vstd!seq.axiom_seq_index_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_decreases.) (fuel_bool_default fuel%vstd!seq.axiom_seq_empty.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_new_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_push_index_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_same.) (fuel_bool_default fuel%vstd!seq.axiom_seq_update_different.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal.) (fuel_bool_default fuel%vstd!seq.axiom_seq_ext_equal_deep.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_subrange_index.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_len.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index1.) (fuel_bool_default fuel%vstd!seq.axiom_seq_add_index2.))))
(assert (=> (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (and (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_left.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.add_empty_right.) (fuel_bool_default fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.))))
(assert (=> (fuel_bool_default fuel%vstd!set.group_set_axioms.) (and (fuel_bool_default fuel%vstd!set.axiom_set_empty.) (fuel_bool_default fuel%vstd!set.axiom_set_new.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_same.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_different.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_same.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_insert.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_different.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal.) (fuel_bool_default fuel%vstd!set.axiom_set_ext_equal_deep.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_domain.) (fuel_bool_default fuel%vstd!set.axiom_mk_map_index.) (fuel_bool_default fuel%vstd!set.axiom_set_empty_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_insert_finite.) (fuel_bool_default fuel%vstd!set.axiom_set_remove_finite.))))
(assert (=> (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.axiom_u64_leading_zeros.)))
(assert (fuel_bool_default fuel%vstd!group_vstd_default.))
(assert (=> (fuel_bool_default fuel%vstd!group_vstd_default.) (and (fuel_bool_default fuel%vstd!seq.group_seq_axioms.) (fuel_bool_default fuel%vstd!seq_lib.group_seq_lib_default.) (fuel_bool_default fuel%vstd!map.group_map_axioms.) (fuel_bool_default fuel%vstd!set.group_set_axioms.) (fuel_bool_default fuel%vstd!set_lib.group_set_lib_axioms.) (fuel_bool_default fuel%vstd!std_specs.bits.group_bits_axioms.) (fuel_bool_default fuel%vstd!std_specs.control_flow.group_control_flow_axioms.) (fuel_bool_default fuel%vstd!std_specs.vec.group_vec_axioms.) (fuel_bool_default fuel%vstd!slice.group_slice_axioms.) (fuel_bool_default fuel%vstd!array.group_array_axioms.) (fuel_bool_default fuel%vstd!multiset.group_multiset_axioms.) (fuel_bool_default fuel%vstd!string.group_string_axioms.) (fuel_bool_default fuel%vstd!std_specs.range.group_range_axioms.) (fuel_bool_default fuel%vstd!raw_ptr.group_raw_ptr_axioms.))))
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. 0)
(declare-sort vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. 0)
(declare-sort vstd!raw_ptr.Provenance. 0)
(declare-sort vstd!seq.Seq<lib!page_organization.DlistHeader.>. 0)
(declare-sort vstd!seq.Seq<lib!tokens.PageId.>. 0)
(declare-sort vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. 0)
(declare-sort vstd!set.Set<lib!tokens.PageId.>. 0)
(declare-sort vstd!set.Set<lib!tokens.SegmentId.>. 0)
(declare-datatypes ((core!option.Option. 0) (lib!page_organization.PageOrg.State. 0) (lib!page_organization.PageOrg.Step. 0) (lib!page_organization.PageOrg.Config. 0) (lib!tokens.SegmentId. 0) (lib!tokens.PageId. 0) (lib!page_organization.DlistHeader. 0) (lib!page_organization.DlistEntry. 0) (lib!page_organization.PageHeaderKind. 0) (lib!page_organization.PageData. 0) (lib!page_organization.SegmentData. 0) (lib!page_organization.Popped. 0) (tuple%0. 0) (tuple%2. 0) (tuple%4. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((lib!page_organization.PageOrg.State./State (lib!page_organization.PageOrg.State./State/?unused_dlist_headers vstd!seq.Seq<lib!page_organization.DlistHeader.>.) (lib!page_organization.PageOrg.State./State/?used_dlist_headers vstd!seq.Seq<lib!page_organization.DlistHeader.>.) (lib!page_organization.PageOrg.State./State/?pages vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>.) (lib!page_organization.PageOrg.State./State/?segments vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>.) (lib!page_organization.PageOrg.State./State/?popped lib!page_organization.Popped.) (lib!page_organization.PageOrg.State./State/?unused_lists vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.) (lib!page_organization.PageOrg.State./State/?used_lists vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.))) ((lib!page_organization.PageOrg.Step./take_page_from_unused_queue (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/?0 lib!tokens.PageId.) (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/?1 Int) (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/?2 Int)) (lib!page_organization.PageOrg.Step./split_page (lib!page_organization.PageOrg.Step./split_page/?0 lib!tokens.PageId.) (lib!page_organization.PageOrg.Step./split_page/?1 Int) (lib!page_organization.PageOrg.Step./split_page/?2 Int) (lib!page_organization.PageOrg.Step./split_page/?3 Int)) (lib!page_organization.PageOrg.Step./create_segment (lib!page_organization.PageOrg.Step./create_segment/?0 lib!tokens.SegmentId.)) (lib!page_organization.PageOrg.Step./allocate_popped ) (lib!page_organization.PageOrg.Step./forget_about_first_page (lib!page_organization.PageOrg.Step./forget_about_first_page/?0 Int)) (lib!page_organization.PageOrg.Step./forget_about_first_page2 ) (lib!page_organization.PageOrg.Step./clear_ec ) (lib!page_organization.PageOrg.Step./free_to_unused_queue (lib!page_organization.PageOrg.Step./free_to_unused_queue/?0 Int)) (lib!page_organization.PageOrg.Step./set_range_to_used (lib!page_organization.PageOrg.Step./set_range_to_used/?0 lib!page_organization.PageHeaderKind.)) (lib!page_organization.PageOrg.Step./set_range_to_not_used ) (lib!page_organization.PageOrg.Step./into_used_list (lib!page_organization.PageOrg.Step./into_used_list/?0 Int)) (lib!page_organization.PageOrg.Step./into_used_list_back (lib!page_organization.PageOrg.Step./into_used_list_back/?0 Int)) (lib!page_organization.PageOrg.Step./out_of_used_list (lib!page_organization.PageOrg.Step./out_of_used_list/?0 lib!tokens.PageId.) (lib!page_organization.PageOrg.Step./out_of_used_list/?1 Int) (lib!page_organization.PageOrg.Step./out_of_used_list/?2 Int)) (lib!page_organization.PageOrg.Step./segment_freeing_start (lib!page_organization.PageOrg.Step./segment_freeing_start/?0 lib!tokens.SegmentId.)) (lib!page_organization.PageOrg.Step./segment_freeing_finish ) (lib!page_organization.PageOrg.Step./merge_with_after ) (lib!page_organization.PageOrg.Step./merge_with_before ) (lib!page_organization.PageOrg.Step./dummy_to_use_type_params (lib!page_organization.PageOrg.Step./dummy_to_use_type_params/?0 lib!page_organization.PageOrg.State.))) ((lib!page_organization.PageOrg.Config./initialize ) (lib!page_organization.PageOrg.Config./dummy_to_use_type_params (lib!page_organization.PageOrg.Config./dummy_to_use_type_params/?0 lib!page_organization.PageOrg.State.))) ((lib!tokens.SegmentId./SegmentId (lib!tokens.SegmentId./SegmentId/?id Int) (lib!tokens.SegmentId./SegmentId/?provenance vstd!raw_ptr.Provenance.) (lib!tokens.SegmentId./SegmentId/?uniq Int))) ((lib!tokens.PageId./PageId (lib!tokens.PageId./PageId/?segment_id lib!tokens.SegmentId.) (lib!tokens.PageId./PageId/?idx Int))) ((lib!page_organization.DlistHeader./DlistHeader (lib!page_organization.DlistHeader./DlistHeader/?first core!option.Option.) (lib!page_organization.DlistHeader./DlistHeader/?last core!option.Option.))) ((lib!page_organization.DlistEntry./DlistEntry (lib!page_organization.DlistEntry./DlistEntry/?prev core!option.Option.) (lib!page_organization.DlistEntry./DlistEntry/?next core!option.Option.))) ((lib!page_organization.PageHeaderKind./Normal (lib!page_organization.PageHeaderKind./Normal/?0 Int) (lib!page_organization.PageHeaderKind./Normal/?1 Int))) ((lib!page_organization.PageData./PageData (lib!page_organization.PageData./PageData/?dlist_entry core!option.Option.) (lib!page_organization.PageData./PageData/?count core!option.Option.) (lib!page_organization.PageData./PageData/?offset core!option.Option.) (lib!page_organization.PageData./PageData/?is_used Bool) (lib!page_organization.PageData./PageData/?full core!option.Option.) (lib!page_organization.PageData./PageData/?page_header_kind core!option.Option.))) ((lib!page_organization.SegmentData./SegmentData (lib!page_organization.SegmentData./SegmentData/?used Int))) ((lib!page_organization.Popped./No ) (lib!page_organization.Popped./Ready (lib!page_organization.Popped./Ready/?0 lib!tokens.PageId.) (lib!page_organization.Popped./Ready/?1 Bool)) (lib!page_organization.Popped./Used (lib!page_organization.Popped./Used/?0 lib!tokens.PageId.) (lib!page_organization.Popped./Used/?1 Bool)) (lib!page_organization.Popped./SegmentCreating (lib!page_organization.Popped./SegmentCreating/?0 lib!tokens.SegmentId.)) (lib!page_organization.Popped./VeryUnready (lib!page_organization.Popped./VeryUnready/?0 lib!tokens.SegmentId.) (lib!page_organization.Popped./VeryUnready/?1 Int) (lib!page_organization.Popped./VeryUnready/?2 Int) (lib!page_organization.Popped./VeryUnready/?3 Bool)) (lib!page_organization.Popped./SegmentFreeing (lib!page_organization.Popped./SegmentFreeing/?0 lib!tokens.SegmentId.) (lib!page_organization.Popped./SegmentFreeing/?1 Int)) (lib!page_organization.Popped./ExtraCount (lib!page_organization.Popped./ExtraCount/?0 lib!tokens.SegmentId.))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%4./tuple%4 (tuple%4./tuple%4/?0 Poly) (tuple%4./tuple%4/?1 Poly) (tuple%4./tuple%4/?2 Poly) (tuple%4./tuple%4/?3 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun lib!page_organization.PageOrg.State./State/unused_dlist_headers (lib!page_organization.PageOrg.State.) vstd!seq.Seq<lib!page_organization.DlistHeader.>.)
(declare-fun lib!page_organization.PageOrg.State./State/used_dlist_headers (lib!page_organization.PageOrg.State.) vstd!seq.Seq<lib!page_organization.DlistHeader.>.)
(declare-fun lib!page_organization.PageOrg.State./State/pages (lib!page_organization.PageOrg.State.) vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>.)
(declare-fun lib!page_organization.PageOrg.State./State/segments (lib!page_organization.PageOrg.State.) vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>.)
(declare-fun lib!page_organization.PageOrg.State./State/popped (lib!page_organization.PageOrg.State.) lib!page_organization.Popped.)
(declare-fun lib!page_organization.PageOrg.State./State/unused_lists (lib!page_organization.PageOrg.State.) vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)
(declare-fun lib!page_organization.PageOrg.State./State/used_lists (lib!page_organization.PageOrg.State.) vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)
(declare-fun lib!page_organization.PageOrg.Step./take_page_from_unused_queue/0 (lib!page_organization.PageOrg.Step.) lib!tokens.PageId.)
(declare-fun lib!page_organization.PageOrg.Step./take_page_from_unused_queue/1 (lib!page_organization.PageOrg.Step.) Int)
(declare-fun lib!page_organization.PageOrg.Step./take_page_from_unused_queue/2 (lib!page_organization.PageOrg.Step.) Int)
(declare-fun lib!page_organization.PageOrg.Step./split_page/0 (lib!page_organization.PageOrg.Step.) lib!tokens.PageId.)
(declare-fun lib!page_organization.PageOrg.Step./split_page/1 (lib!page_organization.PageOrg.Step.) Int)
(declare-fun lib!page_organization.PageOrg.Step./split_page/2 (lib!page_organization.PageOrg.Step.) Int)
(declare-fun lib!page_organization.PageOrg.Step./split_page/3 (lib!page_organization.PageOrg.Step.) Int)
(declare-fun lib!page_organization.PageOrg.Step./create_segment/0 (lib!page_organization.PageOrg.Step.) lib!tokens.SegmentId.)
(declare-fun lib!page_organization.PageOrg.Step./forget_about_first_page/0 (lib!page_organization.PageOrg.Step.) Int)
(declare-fun lib!page_organization.PageOrg.Step./free_to_unused_queue/0 (lib!page_organization.PageOrg.Step.) Int)
(declare-fun lib!page_organization.PageOrg.Step./set_range_to_used/0 (lib!page_organization.PageOrg.Step.) lib!page_organization.PageHeaderKind.)
(declare-fun lib!page_organization.PageOrg.Step./into_used_list/0 (lib!page_organization.PageOrg.Step.) Int)
(declare-fun lib!page_organization.PageOrg.Step./into_used_list_back/0 (lib!page_organization.PageOrg.Step.) Int)
(declare-fun lib!page_organization.PageOrg.Step./out_of_used_list/0 (lib!page_organization.PageOrg.Step.) lib!tokens.PageId.)
(declare-fun lib!page_organization.PageOrg.Step./out_of_used_list/1 (lib!page_organization.PageOrg.Step.) Int)
(declare-fun lib!page_organization.PageOrg.Step./out_of_used_list/2 (lib!page_organization.PageOrg.Step.) Int)
(declare-fun lib!page_organization.PageOrg.Step./segment_freeing_start/0 (lib!page_organization.PageOrg.Step.) lib!tokens.SegmentId.)
(declare-fun lib!page_organization.PageOrg.Step./dummy_to_use_type_params/0 (lib!page_organization.PageOrg.Step.) lib!page_organization.PageOrg.State.)
(declare-fun lib!page_organization.PageOrg.Config./dummy_to_use_type_params/0 (lib!page_organization.PageOrg.Config.) lib!page_organization.PageOrg.State.)
(declare-fun lib!tokens.SegmentId./SegmentId/id (lib!tokens.SegmentId.) Int)
(declare-fun lib!tokens.SegmentId./SegmentId/provenance (lib!tokens.SegmentId.) vstd!raw_ptr.Provenance.)
(declare-fun lib!tokens.SegmentId./SegmentId/uniq (lib!tokens.SegmentId.) Int)
(declare-fun lib!tokens.PageId./PageId/segment_id (lib!tokens.PageId.) lib!tokens.SegmentId.)
(declare-fun lib!tokens.PageId./PageId/idx (lib!tokens.PageId.) Int)
(declare-fun lib!page_organization.DlistHeader./DlistHeader/first (lib!page_organization.DlistHeader.) core!option.Option.)
(declare-fun lib!page_organization.DlistHeader./DlistHeader/last (lib!page_organization.DlistHeader.) core!option.Option.)
(declare-fun lib!page_organization.DlistEntry./DlistEntry/prev (lib!page_organization.DlistEntry.) core!option.Option.)
(declare-fun lib!page_organization.DlistEntry./DlistEntry/next (lib!page_organization.DlistEntry.) core!option.Option.)
(declare-fun lib!page_organization.PageHeaderKind./Normal/0 (lib!page_organization.PageHeaderKind.) Int)
(declare-fun lib!page_organization.PageHeaderKind./Normal/1 (lib!page_organization.PageHeaderKind.) Int)
(declare-fun lib!page_organization.PageData./PageData/dlist_entry (lib!page_organization.PageData.) core!option.Option.)
(declare-fun lib!page_organization.PageData./PageData/count (lib!page_organization.PageData.) core!option.Option.)
(declare-fun lib!page_organization.PageData./PageData/offset (lib!page_organization.PageData.) core!option.Option.)
(declare-fun lib!page_organization.PageData./PageData/is_used (lib!page_organization.PageData.) Bool)
(declare-fun lib!page_organization.PageData./PageData/full (lib!page_organization.PageData.) core!option.Option.)
(declare-fun lib!page_organization.PageData./PageData/page_header_kind (lib!page_organization.PageData.) core!option.Option.)
(declare-fun lib!page_organization.SegmentData./SegmentData/used (lib!page_organization.SegmentData.) Int)
(declare-fun lib!page_organization.Popped./Ready/0 (lib!page_organization.Popped.) lib!tokens.PageId.)
(declare-fun lib!page_organization.Popped./Ready/1 (lib!page_organization.Popped.) Bool)
(declare-fun lib!page_organization.Popped./Used/0 (lib!page_organization.Popped.) lib!tokens.PageId.)
(declare-fun lib!page_organization.Popped./Used/1 (lib!page_organization.Popped.) Bool)
(declare-fun lib!page_organization.Popped./SegmentCreating/0 (lib!page_organization.Popped.) lib!tokens.SegmentId.)
(declare-fun lib!page_organization.Popped./VeryUnready/0 (lib!page_organization.Popped.) lib!tokens.SegmentId.)
(declare-fun lib!page_organization.Popped./VeryUnready/1 (lib!page_organization.Popped.) Int)
(declare-fun lib!page_organization.Popped./VeryUnready/2 (lib!page_organization.Popped.) Int)
(declare-fun lib!page_organization.Popped./VeryUnready/3 (lib!page_organization.Popped.) Bool)
(declare-fun lib!page_organization.Popped./SegmentFreeing/0 (lib!page_organization.Popped.) lib!tokens.SegmentId.)
(declare-fun lib!page_organization.Popped./SegmentFreeing/1 (lib!page_organization.Popped.) Int)
(declare-fun lib!page_organization.Popped./ExtraCount/0 (lib!page_organization.Popped.) lib!tokens.SegmentId.)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%4./tuple%4/0 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/1 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/2 (tuple%4.) Poly)
(declare-fun tuple%4./tuple%4/3 (tuple%4.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-const TYPE%vstd!raw_ptr.Provenance. Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-const TYPE%lib!page_organization.PageOrg.State. Type)
(declare-const TYPE%lib!page_organization.PageOrg.Step. Type)
(declare-const TYPE%lib!page_organization.PageOrg.Config. Type)
(declare-const TYPE%lib!tokens.SegmentId. Type)
(declare-const TYPE%lib!tokens.PageId. Type)
(declare-const TYPE%lib!page_organization.DlistHeader. Type)
(declare-const TYPE%lib!page_organization.DlistEntry. Type)
(declare-const TYPE%lib!page_organization.PageHeaderKind. Type)
(declare-const TYPE%lib!page_organization.PageData. Type)
(declare-const TYPE%lib!page_organization.SegmentData. Type)
(declare-const TYPE%lib!page_organization.Popped. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%4. (Dcr Type Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (Poly) vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>.)
(declare-fun Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>.) Poly)
(declare-fun %Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (Poly) vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>.)
(declare-fun Poly%vstd!raw_ptr.Provenance. (vstd!raw_ptr.Provenance.) Poly)
(declare-fun %Poly%vstd!raw_ptr.Provenance. (Poly) vstd!raw_ptr.Provenance.)
(declare-fun Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq<lib!page_organization.DlistHeader.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (Poly) vstd!seq.Seq<lib!page_organization.DlistHeader.>.)
(declare-fun Poly%vstd!seq.Seq<lib!tokens.PageId.>. (vstd!seq.Seq<lib!tokens.PageId.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<lib!tokens.PageId.>. (Poly) vstd!seq.Seq<lib!tokens.PageId.>.)
(declare-fun Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (Poly) vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)
(declare-fun Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.Set<lib!tokens.PageId.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!tokens.PageId.>. (Poly) vstd!set.Set<lib!tokens.PageId.>.)
(declare-fun Poly%vstd!set.Set<lib!tokens.SegmentId.>. (vstd!set.Set<lib!tokens.SegmentId.>.) Poly)
(declare-fun %Poly%vstd!set.Set<lib!tokens.SegmentId.>. (Poly) vstd!set.Set<lib!tokens.SegmentId.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%lib!page_organization.PageOrg.State. (lib!page_organization.PageOrg.State.) Poly)
(declare-fun %Poly%lib!page_organization.PageOrg.State. (Poly) lib!page_organization.PageOrg.State.)
(declare-fun Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step.) Poly)
(declare-fun %Poly%lib!page_organization.PageOrg.Step. (Poly) lib!page_organization.PageOrg.Step.)
(declare-fun Poly%lib!page_organization.PageOrg.Config. (lib!page_organization.PageOrg.Config.) Poly)
(declare-fun %Poly%lib!page_organization.PageOrg.Config. (Poly) lib!page_organization.PageOrg.Config.)
(declare-fun Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId.) Poly)
(declare-fun %Poly%lib!tokens.SegmentId. (Poly) lib!tokens.SegmentId.)
(declare-fun Poly%lib!tokens.PageId. (lib!tokens.PageId.) Poly)
(declare-fun %Poly%lib!tokens.PageId. (Poly) lib!tokens.PageId.)
(declare-fun Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader.) Poly)
(declare-fun %Poly%lib!page_organization.DlistHeader. (Poly) lib!page_organization.DlistHeader.)
(declare-fun Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry.) Poly)
(declare-fun %Poly%lib!page_organization.DlistEntry. (Poly) lib!page_organization.DlistEntry.)
(declare-fun Poly%lib!page_organization.PageHeaderKind. (lib!page_organization.PageHeaderKind.) Poly)
(declare-fun %Poly%lib!page_organization.PageHeaderKind. (Poly) lib!page_organization.PageHeaderKind.)
(declare-fun Poly%lib!page_organization.PageData. (lib!page_organization.PageData.) Poly)
(declare-fun %Poly%lib!page_organization.PageData. (Poly) lib!page_organization.PageData.)
(declare-fun Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData.) Poly)
(declare-fun %Poly%lib!page_organization.SegmentData. (Poly) lib!page_organization.SegmentData.)
(declare-fun Poly%lib!page_organization.Popped. (lib!page_organization.Popped.) Poly)
(declare-fun %Poly%lib!page_organization.Popped. (Poly) lib!page_organization.Popped.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%4. (tuple%4.) Poly)
(declare-fun %Poly%tuple%4. (Poly) tuple%4.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.)) (= x (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>.)) (! (= x (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. x))) :pattern ((Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData.)) (= x (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData.))))))
(assert (forall ((x vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>.)) (! (has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData.)) :pattern ((has_type (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. x) (TYPE%vstd!map.Map. $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData.))))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (= x (%Poly%vstd!raw_ptr.Provenance. (Poly%vstd!raw_ptr.Provenance. x))) :pattern ((Poly%vstd!raw_ptr.Provenance. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%vstd!raw_ptr.Provenance.) (= x (Poly%vstd!raw_ptr.Provenance. (%Poly%vstd!raw_ptr.Provenance. x)))) :pattern ((has_type x TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!raw_ptr.Provenance.)) (! (has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.) :pattern ((has_type (Poly%vstd!raw_ptr.Provenance. x) TYPE%vstd!raw_ptr.Provenance.)))))
(assert (forall ((x vstd!seq.Seq<lib!page_organization.DlistHeader.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!page_organization.DlistHeader.)) (= x (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!page_organization.DlistHeader.))))))
(assert (forall ((x vstd!seq.Seq<lib!page_organization.DlistHeader.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!page_organization.DlistHeader.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!page_organization.DlistHeader.))))))
(assert (forall ((x vstd!seq.Seq<lib!tokens.PageId.>.)) (! (= x (%Poly%vstd!seq.Seq<lib!tokens.PageId.>. (Poly%vstd!seq.Seq<lib!tokens.PageId.>. x))) :pattern ((Poly%vstd!seq.Seq<lib!tokens.PageId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)) (= x (Poly%vstd!seq.Seq<lib!tokens.PageId.>. (%Poly%vstd!seq.Seq<lib!tokens.PageId.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.))))))
(assert (forall ((x vstd!seq.Seq<lib!tokens.PageId.>.)) (! (has_type (Poly%vstd!seq.Seq<lib!tokens.PageId.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)) :pattern ((has_type (Poly%vstd!seq.Seq<lib!tokens.PageId.>. x) (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.))))))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)) (! (= x (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. x))) :pattern ((Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.))) (= x (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)))))))
(assert (forall ((x vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)) (! (has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.))) :pattern ((has_type (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)))))))
(assert (forall ((x vstd!set.Set<lib!tokens.PageId.>.)) (! (= x (%Poly%vstd!set.Set<lib!tokens.PageId.>. (Poly%vstd!set.Set<lib!tokens.PageId.>. x))) :pattern ((Poly%vstd!set.Set<lib!tokens.PageId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.)) (= x (Poly%vstd!set.Set<lib!tokens.PageId.>. (%Poly%vstd!set.Set<lib!tokens.PageId.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.PageId.>.)) (! (has_type (Poly%vstd!set.Set<lib!tokens.PageId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.)) :pattern ((has_type (Poly%vstd!set.Set<lib!tokens.PageId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.SegmentId.>.)) (! (= x (%Poly%vstd!set.Set<lib!tokens.SegmentId.>. (Poly%vstd!set.Set<lib!tokens.SegmentId.>. x))) :pattern ((Poly%vstd!set.Set<lib!tokens.SegmentId.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.)) (= x (Poly%vstd!set.Set<lib!tokens.SegmentId.>. (%Poly%vstd!set.Set<lib!tokens.SegmentId.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.))))))
(assert (forall ((x vstd!set.Set<lib!tokens.SegmentId.>.)) (! (has_type (Poly%vstd!set.Set<lib!tokens.SegmentId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.)) :pattern ((has_type (Poly%vstd!set.Set<lib!tokens.SegmentId.>. x) (TYPE%vstd!set.Set. $ TYPE%lib!tokens.SegmentId.))))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= x (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. x))) :pattern ((Poly%lib!page_organization.PageOrg.State. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageOrg.State.) (= x (Poly%lib!page_organization.PageOrg.State. (%Poly%lib!page_organization.PageOrg.State. x)))) :pattern ((has_type x TYPE%lib!page_organization.PageOrg.State.)))))
(assert (forall ((_unused_dlist_headers! vstd!seq.Seq<lib!page_organization.DlistHeader.>.) (_used_dlist_headers! vstd!seq.Seq<lib!page_organization.DlistHeader.>.) (_pages! vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>.) (_segments! vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>.) (_popped! lib!page_organization.Popped.) (_unused_lists! vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.) (_used_lists! vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)) (! (=> (has_type (Poly%lib!page_organization.Popped. _popped!) TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!page_organization.PageOrg.State. (lib!page_organization.PageOrg.State./State _unused_dlist_headers! _used_dlist_headers! _pages! _segments! _popped! _unused_lists! _used_lists!)) TYPE%lib!page_organization.PageOrg.State.)) :pattern ((has_type (Poly%lib!page_organization.PageOrg.State. (lib!page_organization.PageOrg.State./State _unused_dlist_headers! _used_dlist_headers! _pages! _segments! _popped! _unused_lists! _used_lists!)) TYPE%lib!page_organization.PageOrg.State.)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers x) (lib!page_organization.PageOrg.State./State/?unused_dlist_headers x)) :pattern ((lib!page_organization.PageOrg.State./State/unused_dlist_headers x)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= (lib!page_organization.PageOrg.State./State/used_dlist_headers x) (lib!page_organization.PageOrg.State./State/?used_dlist_headers x)) :pattern ((lib!page_organization.PageOrg.State./State/used_dlist_headers x)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= (lib!page_organization.PageOrg.State./State/pages x) (lib!page_organization.PageOrg.State./State/?pages x)) :pattern ((lib!page_organization.PageOrg.State./State/pages x)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= (lib!page_organization.PageOrg.State./State/segments x) (lib!page_organization.PageOrg.State./State/?segments x)) :pattern ((lib!page_organization.PageOrg.State./State/segments x)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= (lib!page_organization.PageOrg.State./State/popped x) (lib!page_organization.PageOrg.State./State/?popped x)) :pattern ((lib!page_organization.PageOrg.State./State/popped x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageOrg.State.) (has_type (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. x))) TYPE%lib!page_organization.Popped.)) :pattern ((lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. x)) (has_type x TYPE%lib!page_organization.PageOrg.State.)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= (lib!page_organization.PageOrg.State./State/unused_lists x) (lib!page_organization.PageOrg.State./State/?unused_lists x)) :pattern ((lib!page_organization.PageOrg.State./State/unused_lists x)))))
(assert (forall ((x lib!page_organization.PageOrg.State.)) (! (= (lib!page_organization.PageOrg.State./State/used_lists x) (lib!page_organization.PageOrg.State./State/?used_lists x)) :pattern ((lib!page_organization.PageOrg.State./State/used_lists x)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= x (%Poly%lib!page_organization.PageOrg.Step. (Poly%lib!page_organization.PageOrg.Step. x))) :pattern ((Poly%lib!page_organization.PageOrg.Step. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageOrg.Step.) (= x (Poly%lib!page_organization.PageOrg.Step. (%Poly%lib!page_organization.PageOrg.Step. x)))) :pattern ((has_type x TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((_0! lib!tokens.PageId.) (_1! Int) (_2! Int)) (! (=> (has_type (Poly%lib!tokens.PageId. _0!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./take_page_from_unused_queue _0! _1! _2!)) TYPE%lib!page_organization.PageOrg.Step.)) :pattern ((has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./take_page_from_unused_queue _0! _1! _2!)) TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/0 x) (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/?0 x)) :pattern ((lib!page_organization.PageOrg.Step./take_page_from_unused_queue/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/0 (%Poly%lib!page_organization.PageOrg.Step. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.PageOrg.Step./take_page_from_unused_queue/0 (%Poly%lib!page_organization.PageOrg.Step. x)) (has_type x TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/1 x) (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/?1 x)) :pattern ((lib!page_organization.PageOrg.Step./take_page_from_unused_queue/1 x)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/2 x) (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/?2 x)) :pattern ((lib!page_organization.PageOrg.Step./take_page_from_unused_queue/2 x)))))
(assert (forall ((_0! lib!tokens.PageId.) (_1! Int) (_2! Int) (_3! Int)) (! (=> (has_type (Poly%lib!tokens.PageId. _0!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./split_page _0! _1! _2! _3!)) TYPE%lib!page_organization.PageOrg.Step.)) :pattern ((has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./split_page _0! _1! _2! _3!)) TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./split_page/0 x) (lib!page_organization.PageOrg.Step./split_page/?0 x)) :pattern ((lib!page_organization.PageOrg.Step./split_page/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.Step./split_page/0 (%Poly%lib!page_organization.PageOrg.Step. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.PageOrg.Step./split_page/0 (%Poly%lib!page_organization.PageOrg.Step. x)) (has_type x TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./split_page/1 x) (lib!page_organization.PageOrg.Step./split_page/?1 x)) :pattern ((lib!page_organization.PageOrg.Step./split_page/1 x)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./split_page/2 x) (lib!page_organization.PageOrg.Step./split_page/?2 x)) :pattern ((lib!page_organization.PageOrg.Step./split_page/2 x)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./split_page/3 x) (lib!page_organization.PageOrg.Step./split_page/?3 x)) :pattern ((lib!page_organization.PageOrg.Step./split_page/3 x)))))
(assert (forall ((_0! lib!tokens.SegmentId.)) (! (=> (has_type (Poly%lib!tokens.SegmentId. _0!) TYPE%lib!tokens.SegmentId.) (has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./create_segment _0!)) TYPE%lib!page_organization.PageOrg.Step.)) :pattern ((has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./create_segment _0!)) TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./create_segment/0 x) (lib!page_organization.PageOrg.Step./create_segment/?0 x)) :pattern ((lib!page_organization.PageOrg.Step./create_segment/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.PageOrg.Step./create_segment/0 (%Poly%lib!page_organization.PageOrg.Step. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.PageOrg.Step./create_segment/0 (%Poly%lib!page_organization.PageOrg.Step. x)) (has_type x TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (has_type (Poly%lib!page_organization.PageOrg.Step. lib!page_organization.PageOrg.Step./allocate_popped) TYPE%lib!page_organization.PageOrg.Step.))
(assert (forall ((_0! Int)) (! (has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./forget_about_first_page _0!)) TYPE%lib!page_organization.PageOrg.Step.) :pattern ((has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./forget_about_first_page _0!)) TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./forget_about_first_page/0 x) (lib!page_organization.PageOrg.Step./forget_about_first_page/?0 x)) :pattern ((lib!page_organization.PageOrg.Step./forget_about_first_page/0 x)))))
(assert (has_type (Poly%lib!page_organization.PageOrg.Step. lib!page_organization.PageOrg.Step./forget_about_first_page2) TYPE%lib!page_organization.PageOrg.Step.))
(assert (has_type (Poly%lib!page_organization.PageOrg.Step. lib!page_organization.PageOrg.Step./clear_ec) TYPE%lib!page_organization.PageOrg.Step.))
(assert (forall ((_0! Int)) (! (has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./free_to_unused_queue _0!)) TYPE%lib!page_organization.PageOrg.Step.) :pattern ((has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./free_to_unused_queue _0!)) TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./free_to_unused_queue/0 x) (lib!page_organization.PageOrg.Step./free_to_unused_queue/?0 x)) :pattern ((lib!page_organization.PageOrg.Step./free_to_unused_queue/0 x)))))
(assert (forall ((_0! lib!page_organization.PageHeaderKind.)) (! (has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./set_range_to_used _0!)) TYPE%lib!page_organization.PageOrg.Step.) :pattern ((has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./set_range_to_used _0!)) TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./set_range_to_used/0 x) (lib!page_organization.PageOrg.Step./set_range_to_used/?0 x)) :pattern ((lib!page_organization.PageOrg.Step./set_range_to_used/0 x)))))
(assert (has_type (Poly%lib!page_organization.PageOrg.Step. lib!page_organization.PageOrg.Step./set_range_to_not_used) TYPE%lib!page_organization.PageOrg.Step.))
(assert (forall ((_0! Int)) (! (has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./into_used_list _0!)) TYPE%lib!page_organization.PageOrg.Step.) :pattern ((has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./into_used_list _0!)) TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./into_used_list/0 x) (lib!page_organization.PageOrg.Step./into_used_list/?0 x)) :pattern ((lib!page_organization.PageOrg.Step./into_used_list/0 x)))))
(assert (forall ((_0! Int)) (! (has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./into_used_list_back _0!)) TYPE%lib!page_organization.PageOrg.Step.) :pattern ((has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./into_used_list_back _0!)) TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./into_used_list_back/0 x) (lib!page_organization.PageOrg.Step./into_used_list_back/?0 x)) :pattern ((lib!page_organization.PageOrg.Step./into_used_list_back/0 x)))))
(assert (forall ((_0! lib!tokens.PageId.) (_1! Int) (_2! Int)) (! (=> (has_type (Poly%lib!tokens.PageId. _0!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./out_of_used_list _0! _1! _2!)) TYPE%lib!page_organization.PageOrg.Step.)) :pattern ((has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./out_of_used_list _0! _1! _2!)) TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./out_of_used_list/0 x) (lib!page_organization.PageOrg.Step./out_of_used_list/?0 x)) :pattern ((lib!page_organization.PageOrg.Step./out_of_used_list/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.Step./out_of_used_list/0 (%Poly%lib!page_organization.PageOrg.Step. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.PageOrg.Step./out_of_used_list/0 (%Poly%lib!page_organization.PageOrg.Step. x)) (has_type x TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./out_of_used_list/1 x) (lib!page_organization.PageOrg.Step./out_of_used_list/?1 x)) :pattern ((lib!page_organization.PageOrg.Step./out_of_used_list/1 x)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./out_of_used_list/2 x) (lib!page_organization.PageOrg.Step./out_of_used_list/?2 x)) :pattern ((lib!page_organization.PageOrg.Step./out_of_used_list/2 x)))))
(assert (forall ((_0! lib!tokens.SegmentId.)) (! (=> (has_type (Poly%lib!tokens.SegmentId. _0!) TYPE%lib!tokens.SegmentId.) (has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./segment_freeing_start _0!)) TYPE%lib!page_organization.PageOrg.Step.)) :pattern ((has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./segment_freeing_start _0!)) TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./segment_freeing_start/0 x) (lib!page_organization.PageOrg.Step./segment_freeing_start/?0 x)) :pattern ((lib!page_organization.PageOrg.Step./segment_freeing_start/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.PageOrg.Step./segment_freeing_start/0 (%Poly%lib!page_organization.PageOrg.Step. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.PageOrg.Step./segment_freeing_start/0 (%Poly%lib!page_organization.PageOrg.Step. x)) (has_type x TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (has_type (Poly%lib!page_organization.PageOrg.Step. lib!page_organization.PageOrg.Step./segment_freeing_finish) TYPE%lib!page_organization.PageOrg.Step.))
(assert (has_type (Poly%lib!page_organization.PageOrg.Step. lib!page_organization.PageOrg.Step./merge_with_after) TYPE%lib!page_organization.PageOrg.Step.))
(assert (has_type (Poly%lib!page_organization.PageOrg.Step. lib!page_organization.PageOrg.Step./merge_with_before) TYPE%lib!page_organization.PageOrg.Step.))
(assert (forall ((_0! lib!page_organization.PageOrg.State.)) (! (=> (has_type (Poly%lib!page_organization.PageOrg.State. _0!) TYPE%lib!page_organization.PageOrg.State.) (has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./dummy_to_use_type_params _0!)) TYPE%lib!page_organization.PageOrg.Step.)) :pattern ((has_type (Poly%lib!page_organization.PageOrg.Step. (lib!page_organization.PageOrg.Step./dummy_to_use_type_params _0!)) TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Step.)) (! (= (lib!page_organization.PageOrg.Step./dummy_to_use_type_params/0 x) (lib!page_organization.PageOrg.Step./dummy_to_use_type_params/?0 x)) :pattern ((lib!page_organization.PageOrg.Step./dummy_to_use_type_params/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!page_organization.PageOrg.State. (lib!page_organization.PageOrg.Step./dummy_to_use_type_params/0 (%Poly%lib!page_organization.PageOrg.Step. x))) TYPE%lib!page_organization.PageOrg.State.)) :pattern ((lib!page_organization.PageOrg.Step./dummy_to_use_type_params/0 (%Poly%lib!page_organization.PageOrg.Step. x)) (has_type x TYPE%lib!page_organization.PageOrg.Step.)))))
(assert (forall ((x lib!page_organization.PageOrg.Config.)) (! (= x (%Poly%lib!page_organization.PageOrg.Config. (Poly%lib!page_organization.PageOrg.Config. x))) :pattern ((Poly%lib!page_organization.PageOrg.Config. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageOrg.Config.) (= x (Poly%lib!page_organization.PageOrg.Config. (%Poly%lib!page_organization.PageOrg.Config. x)))) :pattern ((has_type x TYPE%lib!page_organization.PageOrg.Config.)))))
(assert (has_type (Poly%lib!page_organization.PageOrg.Config. lib!page_organization.PageOrg.Config./initialize) TYPE%lib!page_organization.PageOrg.Config.))
(assert (forall ((_0! lib!page_organization.PageOrg.State.)) (! (=> (has_type (Poly%lib!page_organization.PageOrg.State. _0!) TYPE%lib!page_organization.PageOrg.State.) (has_type (Poly%lib!page_organization.PageOrg.Config. (lib!page_organization.PageOrg.Config./dummy_to_use_type_params _0!)) TYPE%lib!page_organization.PageOrg.Config.)) :pattern ((has_type (Poly%lib!page_organization.PageOrg.Config. (lib!page_organization.PageOrg.Config./dummy_to_use_type_params _0!)) TYPE%lib!page_organization.PageOrg.Config.)))))
(assert (forall ((x lib!page_organization.PageOrg.Config.)) (! (= (lib!page_organization.PageOrg.Config./dummy_to_use_type_params/0 x) (lib!page_organization.PageOrg.Config./dummy_to_use_type_params/?0 x)) :pattern ((lib!page_organization.PageOrg.Config./dummy_to_use_type_params/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageOrg.Config.) (has_type (Poly%lib!page_organization.PageOrg.State. (lib!page_organization.PageOrg.Config./dummy_to_use_type_params/0 (%Poly%lib!page_organization.PageOrg.Config. x))) TYPE%lib!page_organization.PageOrg.State.)) :pattern ((lib!page_organization.PageOrg.Config./dummy_to_use_type_params/0 (%Poly%lib!page_organization.PageOrg.Config. x)) (has_type x TYPE%lib!page_organization.PageOrg.Config.)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= x (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. x))) :pattern ((Poly%lib!tokens.SegmentId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentId.) (= x (Poly%lib!tokens.SegmentId. (%Poly%lib!tokens.SegmentId. x)))) :pattern ((has_type x TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((_id! Int) (_provenance! vstd!raw_ptr.Provenance.) (_uniq! Int)) (! (=> (<= 0 _id!) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId./SegmentId _id! _provenance! _uniq!)) TYPE%lib!tokens.SegmentId.)) :pattern ((has_type (Poly%lib!tokens.SegmentId. (lib!tokens.SegmentId./SegmentId _id! _provenance! _uniq!)) TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/id x) (lib!tokens.SegmentId./SegmentId/?id x)) :pattern ((lib!tokens.SegmentId./SegmentId/id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.SegmentId.) (<= 0 (lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. x)))) :pattern ((lib!tokens.SegmentId./SegmentId/id (%Poly%lib!tokens.SegmentId. x)) (has_type x TYPE%lib!tokens.SegmentId.)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/provenance x) (lib!tokens.SegmentId./SegmentId/?provenance x)) :pattern ((lib!tokens.SegmentId./SegmentId/provenance x)))))
(assert (forall ((x lib!tokens.SegmentId.)) (! (= (lib!tokens.SegmentId./SegmentId/uniq x) (lib!tokens.SegmentId./SegmentId/?uniq x)) :pattern ((lib!tokens.SegmentId./SegmentId/uniq x)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= x (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. x))) :pattern ((Poly%lib!tokens.PageId. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (= x (Poly%lib!tokens.PageId. (%Poly%lib!tokens.PageId. x)))) :pattern ((has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((_segment_id! lib!tokens.SegmentId.) (_idx! Int)) (! (=> (and (has_type (Poly%lib!tokens.SegmentId. _segment_id!) TYPE%lib!tokens.SegmentId.) (<= 0 _idx!)) (has_type (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId _segment_id! _idx!)) TYPE%lib!tokens.PageId.)) :pattern ((has_type (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId _segment_id! _idx!)) TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= (lib!tokens.PageId./PageId/segment_id x) (lib!tokens.PageId./PageId/?segment_id x)) :pattern ((lib!tokens.PageId./PageId/segment_id x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (has_type (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. x)) (has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!tokens.PageId.)) (! (= (lib!tokens.PageId./PageId/idx x) (lib!tokens.PageId./PageId/?idx x)) :pattern ((lib!tokens.PageId./PageId/idx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!tokens.PageId.) (<= 0 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. x)))) :pattern ((lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. x)) (has_type x TYPE%lib!tokens.PageId.)))))
(assert (forall ((x lib!page_organization.DlistHeader.)) (! (= x (%Poly%lib!page_organization.DlistHeader. (Poly%lib!page_organization.DlistHeader. x))) :pattern ((Poly%lib!page_organization.DlistHeader. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.DlistHeader.) (= x (Poly%lib!page_organization.DlistHeader. (%Poly%lib!page_organization.DlistHeader. x)))) :pattern ((has_type x TYPE%lib!page_organization.DlistHeader.)))))
(assert (forall ((_first! core!option.Option.) (_last! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _first!) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.)) (has_type (Poly%core!option.Option. _last!) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) (has_type (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader _first! _last!)) TYPE%lib!page_organization.DlistHeader.)) :pattern ((has_type (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader _first! _last!)) TYPE%lib!page_organization.DlistHeader.)))))
(assert (forall ((x lib!page_organization.DlistHeader.)) (! (= (lib!page_organization.DlistHeader./DlistHeader/first x) (lib!page_organization.DlistHeader./DlistHeader/?first x)) :pattern ((lib!page_organization.DlistHeader./DlistHeader/first x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.DlistHeader.) (has_type (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. x))) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) :pattern ((lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. x)) (has_type x TYPE%lib!page_organization.DlistHeader.)))))
(assert (forall ((x lib!page_organization.DlistHeader.)) (! (= (lib!page_organization.DlistHeader./DlistHeader/last x) (lib!page_organization.DlistHeader./DlistHeader/?last x)) :pattern ((lib!page_organization.DlistHeader./DlistHeader/last x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.DlistHeader.) (has_type (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. x))) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) :pattern ((lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. x)) (has_type x TYPE%lib!page_organization.DlistHeader.)))))
(assert (forall ((x lib!page_organization.DlistEntry.)) (! (= x (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. x))) :pattern ((Poly%lib!page_organization.DlistEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.DlistEntry.) (= x (Poly%lib!page_organization.DlistEntry. (%Poly%lib!page_organization.DlistEntry. x)))) :pattern ((has_type x TYPE%lib!page_organization.DlistEntry.)))))
(assert (forall ((_prev! core!option.Option.) (_next! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _prev!) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.)) (has_type (Poly%core!option.Option. _next!) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) (has_type (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry _prev! _next!)) TYPE%lib!page_organization.DlistEntry.)) :pattern ((has_type (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry _prev! _next!)) TYPE%lib!page_organization.DlistEntry.)))))
(assert (forall ((x lib!page_organization.DlistEntry.)) (! (= (lib!page_organization.DlistEntry./DlistEntry/prev x) (lib!page_organization.DlistEntry./DlistEntry/?prev x)) :pattern ((lib!page_organization.DlistEntry./DlistEntry/prev x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.DlistEntry.) (has_type (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. x))) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) :pattern ((lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. x)) (has_type x TYPE%lib!page_organization.DlistEntry.)))))
(assert (forall ((x lib!page_organization.DlistEntry.)) (! (= (lib!page_organization.DlistEntry./DlistEntry/next x) (lib!page_organization.DlistEntry./DlistEntry/?next x)) :pattern ((lib!page_organization.DlistEntry./DlistEntry/next x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.DlistEntry.) (has_type (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. x))) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) :pattern ((lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. x)) (has_type x TYPE%lib!page_organization.DlistEntry.)))))
(assert (forall ((x lib!page_organization.PageHeaderKind.)) (! (= x (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. x))) :pattern ((Poly%lib!page_organization.PageHeaderKind. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageHeaderKind.) (= x (Poly%lib!page_organization.PageHeaderKind. (%Poly%lib!page_organization.PageHeaderKind. x)))) :pattern ((has_type x TYPE%lib!page_organization.PageHeaderKind.)))))
(assert (forall ((x lib!page_organization.PageHeaderKind.)) (! (= (lib!page_organization.PageHeaderKind./Normal/0 x) (lib!page_organization.PageHeaderKind./Normal/?0 x)) :pattern ((lib!page_organization.PageHeaderKind./Normal/0 x)))))
(assert (forall ((x lib!page_organization.PageHeaderKind.)) (! (= (lib!page_organization.PageHeaderKind./Normal/1 x) (lib!page_organization.PageHeaderKind./Normal/?1 x)) :pattern ((lib!page_organization.PageHeaderKind./Normal/1 x)))))
(assert (forall ((x lib!page_organization.PageHeaderKind.)) (! (has_type (Poly%lib!page_organization.PageHeaderKind. x) TYPE%lib!page_organization.PageHeaderKind.) :pattern ((has_type (Poly%lib!page_organization.PageHeaderKind. x) TYPE%lib!page_organization.PageHeaderKind.)))))
(assert (forall ((x lib!page_organization.PageData.)) (! (= x (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. x))) :pattern ((Poly%lib!page_organization.PageData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageData.) (= x (Poly%lib!page_organization.PageData. (%Poly%lib!page_organization.PageData. x)))) :pattern ((has_type x TYPE%lib!page_organization.PageData.)))))
(assert (forall ((_dlist_entry! core!option.Option.) (_count! core!option.Option.) (_offset! core!option.Option.) (_is_used! Bool) (_full! core!option.Option.) (_page_header_kind! core!option.Option.)) (! (=> (and (has_type (Poly%core!option.Option. _dlist_entry!) (TYPE%core!option.Option. $ TYPE%lib!page_organization.DlistEntry.)) (has_type (Poly%core!option.Option. _count!) (TYPE%core!option.Option. $ NAT)) (has_type (Poly%core!option.Option. _offset!) (TYPE%core!option.Option. $ NAT)) (has_type (Poly%core!option.Option. _full!) (TYPE%core!option.Option. $ BOOL)) (has_type (Poly%core!option.Option. _page_header_kind!) (TYPE%core!option.Option. $ TYPE%lib!page_organization.PageHeaderKind.))) (has_type (Poly%lib!page_organization.PageData. (lib!page_organization.PageData./PageData _dlist_entry! _count! _offset! _is_used! _full! _page_header_kind!)) TYPE%lib!page_organization.PageData.)) :pattern ((has_type (Poly%lib!page_organization.PageData. (lib!page_organization.PageData./PageData _dlist_entry! _count! _offset! _is_used! _full! _page_header_kind!)) TYPE%lib!page_organization.PageData.)))))
(assert (forall ((x lib!page_organization.PageData.)) (! (= (lib!page_organization.PageData./PageData/dlist_entry x) (lib!page_organization.PageData./PageData/?dlist_entry x)) :pattern ((lib!page_organization.PageData./PageData/dlist_entry x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageData.) (has_type (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. x))) (TYPE%core!option.Option. $ TYPE%lib!page_organization.DlistEntry.))) :pattern ((lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. x)) (has_type x TYPE%lib!page_organization.PageData.)))))
(assert (forall ((x lib!page_organization.PageData.)) (! (= (lib!page_organization.PageData./PageData/count x) (lib!page_organization.PageData./PageData/?count x)) :pattern ((lib!page_organization.PageData./PageData/count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageData.) (has_type (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. x))) (TYPE%core!option.Option. $ NAT))) :pattern ((lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. x)) (has_type x TYPE%lib!page_organization.PageData.)))))
(assert (forall ((x lib!page_organization.PageData.)) (! (= (lib!page_organization.PageData./PageData/offset x) (lib!page_organization.PageData./PageData/?offset x)) :pattern ((lib!page_organization.PageData./PageData/offset x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageData.) (has_type (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. x))) (TYPE%core!option.Option. $ NAT))) :pattern ((lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. x)) (has_type x TYPE%lib!page_organization.PageData.)))))
(assert (forall ((x lib!page_organization.PageData.)) (! (= (lib!page_organization.PageData./PageData/is_used x) (lib!page_organization.PageData./PageData/?is_used x)) :pattern ((lib!page_organization.PageData./PageData/is_used x)))))
(assert (forall ((x lib!page_organization.PageData.)) (! (= (lib!page_organization.PageData./PageData/full x) (lib!page_organization.PageData./PageData/?full x)) :pattern ((lib!page_organization.PageData./PageData/full x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageData.) (has_type (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. x))) (TYPE%core!option.Option. $ BOOL))) :pattern ((lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. x)) (has_type x TYPE%lib!page_organization.PageData.)))))
(assert (forall ((x lib!page_organization.PageData.)) (! (= (lib!page_organization.PageData./PageData/page_header_kind x) (lib!page_organization.PageData./PageData/?page_header_kind x)) :pattern ((lib!page_organization.PageData./PageData/page_header_kind x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.PageData.) (has_type (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. x))) (TYPE%core!option.Option. $ TYPE%lib!page_organization.PageHeaderKind.))) :pattern ((lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. x)) (has_type x TYPE%lib!page_organization.PageData.)))))
(assert (forall ((x lib!page_organization.SegmentData.)) (! (= x (%Poly%lib!page_organization.SegmentData. (Poly%lib!page_organization.SegmentData. x))) :pattern ((Poly%lib!page_organization.SegmentData. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.SegmentData.) (= x (Poly%lib!page_organization.SegmentData. (%Poly%lib!page_organization.SegmentData. x)))) :pattern ((has_type x TYPE%lib!page_organization.SegmentData.)))))
(assert (forall ((x lib!page_organization.SegmentData.)) (! (= (lib!page_organization.SegmentData./SegmentData/used x) (lib!page_organization.SegmentData./SegmentData/?used x)) :pattern ((lib!page_organization.SegmentData./SegmentData/used x)))))
(assert (forall ((x lib!page_organization.SegmentData.)) (! (has_type (Poly%lib!page_organization.SegmentData. x) TYPE%lib!page_organization.SegmentData.) :pattern ((has_type (Poly%lib!page_organization.SegmentData. x) TYPE%lib!page_organization.SegmentData.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= x (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. x))) :pattern ((Poly%lib!page_organization.Popped. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.Popped.) (= x (Poly%lib!page_organization.Popped. (%Poly%lib!page_organization.Popped. x)))) :pattern ((has_type x TYPE%lib!page_organization.Popped.)))))
(assert (has_type (Poly%lib!page_organization.Popped. lib!page_organization.Popped./No) TYPE%lib!page_organization.Popped.))
(assert (forall ((_0! lib!tokens.PageId.) (_1! Bool)) (! (=> (has_type (Poly%lib!tokens.PageId. _0!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./Ready _0! _1!)) TYPE%lib!page_organization.Popped.)) :pattern ((has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./Ready _0! _1!)) TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./Ready/0 x) (lib!page_organization.Popped./Ready/?0 x)) :pattern ((lib!page_organization.Popped./Ready/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. x)) (has_type x TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./Ready/1 x) (lib!page_organization.Popped./Ready/?1 x)) :pattern ((lib!page_organization.Popped./Ready/1 x)))))
(assert (forall ((_0! lib!tokens.PageId.) (_1! Bool)) (! (=> (has_type (Poly%lib!tokens.PageId. _0!) TYPE%lib!tokens.PageId.) (has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./Used _0! _1!)) TYPE%lib!page_organization.Popped.)) :pattern ((has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./Used _0! _1!)) TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./Used/0 x) (lib!page_organization.Popped./Used/?0 x)) :pattern ((lib!page_organization.Popped./Used/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. x))) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. x)) (has_type x TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./Used/1 x) (lib!page_organization.Popped./Used/?1 x)) :pattern ((lib!page_organization.Popped./Used/1 x)))))
(assert (forall ((_0! lib!tokens.SegmentId.)) (! (=> (has_type (Poly%lib!tokens.SegmentId. _0!) TYPE%lib!tokens.SegmentId.) (has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./SegmentCreating _0!)) TYPE%lib!page_organization.Popped.)) :pattern ((has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./SegmentCreating _0!)) TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./SegmentCreating/0 x) (lib!page_organization.Popped./SegmentCreating/?0 x)) :pattern ((lib!page_organization.Popped./SegmentCreating/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. x)) (has_type x TYPE%lib!page_organization.Popped.)))))
(assert (forall ((_0! lib!tokens.SegmentId.) (_1! Int) (_2! Int) (_3! Bool)) (! (=> (has_type (Poly%lib!tokens.SegmentId. _0!) TYPE%lib!tokens.SegmentId.) (has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./VeryUnready _0! _1! _2! _3!)) TYPE%lib!page_organization.Popped.)) :pattern ((has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./VeryUnready _0! _1! _2! _3!)) TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./VeryUnready/0 x) (lib!page_organization.Popped./VeryUnready/?0 x)) :pattern ((lib!page_organization.Popped./VeryUnready/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. x)) (has_type x TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./VeryUnready/1 x) (lib!page_organization.Popped./VeryUnready/?1 x)) :pattern ((lib!page_organization.Popped./VeryUnready/1 x)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./VeryUnready/2 x) (lib!page_organization.Popped./VeryUnready/?2 x)) :pattern ((lib!page_organization.Popped./VeryUnready/2 x)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./VeryUnready/3 x) (lib!page_organization.Popped./VeryUnready/?3 x)) :pattern ((lib!page_organization.Popped./VeryUnready/3 x)))))
(assert (forall ((_0! lib!tokens.SegmentId.) (_1! Int)) (! (=> (has_type (Poly%lib!tokens.SegmentId. _0!) TYPE%lib!tokens.SegmentId.) (has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./SegmentFreeing _0! _1!)) TYPE%lib!page_organization.Popped.)) :pattern ((has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./SegmentFreeing _0! _1!)) TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./SegmentFreeing/0 x) (lib!page_organization.Popped./SegmentFreeing/?0 x)) :pattern ((lib!page_organization.Popped./SegmentFreeing/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. x)) (has_type x TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./SegmentFreeing/1 x) (lib!page_organization.Popped./SegmentFreeing/?1 x)) :pattern ((lib!page_organization.Popped./SegmentFreeing/1 x)))))
(assert (forall ((_0! lib!tokens.SegmentId.)) (! (=> (has_type (Poly%lib!tokens.SegmentId. _0!) TYPE%lib!tokens.SegmentId.) (has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./ExtraCount _0!)) TYPE%lib!page_organization.Popped.)) :pattern ((has_type (Poly%lib!page_organization.Popped. (lib!page_organization.Popped./ExtraCount _0!)) TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x lib!page_organization.Popped.)) (! (= (lib!page_organization.Popped./ExtraCount/0 x) (lib!page_organization.Popped./ExtraCount/?0 x)) :pattern ((lib!page_organization.Popped./ExtraCount/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.Popped./ExtraCount/0 (%Poly%lib!page_organization.Popped. x))) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.Popped./ExtraCount/0 (%Poly%lib!page_organization.Popped. x)) (has_type x TYPE%lib!page_organization.Popped.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%4.)) (! (= x (%Poly%tuple%4. (Poly%tuple%4. x))) :pattern ((Poly%tuple%4. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (= x (Poly%tuple%4. (%Poly%tuple%4. x)))) :pattern ((has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (_0! Poly) (_1! Poly) (_2! Poly) (_3! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&) (has_type _3! T%3&)) (has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))) :pattern ((has_type (Poly%tuple%4. (tuple%4./tuple%4 _0! _1! _2! _3!)) (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/0 x) (tuple%4./tuple%4/?0 x)) :pattern ((tuple%4./tuple%4/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) T%0&)) :pattern ((tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/1 x) (tuple%4./tuple%4/?1 x)) :pattern ((tuple%4./tuple%4/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) T%1&)) :pattern ((tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/2 x) (tuple%4./tuple%4/?2 x)) :pattern ((tuple%4./tuple%4/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) T%2&)) :pattern ((tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(assert (forall ((x tuple%4.)) (! (= (tuple%4./tuple%4/3 x) (tuple%4./tuple%4/?3 x)) :pattern ((tuple%4./tuple%4/3 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) T%3&)) :pattern ((tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&))))))
(define-fun is-tuple%4./tuple%4_ ((c tuple%4.)) Bool ((_ is tuple%4./tuple%4) c))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/0 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/0 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/1 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/1 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/2 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/2 x))))))
(assert (forall ((x tuple%4.)) (! (=> (is-tuple%4./tuple%4_ x) (height_lt (height (tuple%4./tuple%4/3 x)) (height (Poly%tuple%4. x)))) :pattern ((height (tuple%4./tuple%4/3 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%3&. Dcr) (T%3& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (has_type y (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&)) (ext_eq deep T%0& (tuple%4./tuple%4/0 (%Poly%tuple%4. x)) (tuple%4./tuple%4/0 (%Poly%tuple%4. y))) (ext_eq deep T%1& (tuple%4./tuple%4/1 (%Poly%tuple%4. x)) (tuple%4./tuple%4/1 (%Poly%tuple%4. y))) (ext_eq deep T%2& (tuple%4./tuple%4/2 (%Poly%tuple%4. x)) (tuple%4./tuple%4/2 (%Poly%tuple%4. y))) (ext_eq deep T%3& (tuple%4./tuple%4/3 (%Poly%tuple%4. x)) (tuple%4./tuple%4/3 (%Poly%tuple%4. y)))) (ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)) :pattern ((ext_eq deep (TYPE%tuple%4. T%0&. T%0& T%1&. T%1& T%2&. T%2& T%3&. T%3&) x y)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type)) (! true :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. Self%&. Self%& T&. T&)))))
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::std_specs::bits::u64_leading_zeros")
(declare-fun vstd!std_specs.bits.u64_leading_zeros.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_some")
(declare-fun vstd!std_specs.option.is_some.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::is_none")
(declare-fun vstd!std_specs.option.is_none.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::spec_unwrap")
(declare-fun vstd!std_specs.option.spec_unwrap.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::remove_keys")
(declare-fun vstd!map_lib.impl&%0.remove_keys.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::union_prefer_right")
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::config::INTPTR_SHIFT")
(declare-fun lib!config.INTPTR_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::SLICE_SHIFT")
(declare-fun lib!config.SLICE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::SEGMENT_SHIFT")
(declare-fun lib!config.SEGMENT_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::SEGMENT_SIZE")
(declare-fun lib!config.SEGMENT_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::config::SLICE_SIZE")
(declare-fun lib!config.SLICE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::config::SLICES_PER_SEGMENT")
(declare-fun lib!config.SLICES_PER_SEGMENT.? () Int)
(set-info :comment ";; Function-Decl lib::config::SEGMENT_BIN_MAX")
(declare-fun lib!config.SEGMENT_BIN_MAX.? () Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::valid_unused_page")
(declare-fun lib!page_organization.PageOrg.impl&%4.valid_unused_page.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::state_machine_internal::impl&%3::update_at_index")
(declare-fun vstd!state_machine_internal.impl&%3.update_at_index.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::state_machine_internal::impl&%2::update_at_index")
(declare-fun vstd!state_machine_internal.impl&%2.update_at_index.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::remove")
(declare-fun vstd!seq_lib.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::take_page_from_unused_queue")
(declare-fun lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::bin_sizes::smallest_sbin_fitting_size")
(declare-fun lib!bin_sizes.smallest_sbin_fitting_size.? (Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq_lib::impl&%0::insert")
(declare-fun vstd!seq_lib.impl&%0.insert.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::insert_front")
(declare-fun lib!page_organization.PageOrg.impl&%4.insert_front.? (Poly Poly Poly) vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::split_page")
(declare-fun lib!page_organization.PageOrg.impl&%4.split_page.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::create_segment")
(declare-fun lib!page_organization.PageOrg.impl&%4.create_segment.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::allocate_popped")
(declare-fun lib!page_organization.PageOrg.impl&%4.allocate_popped.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::forget_about_first_page")
(declare-fun lib!page_organization.PageOrg.impl&%4.forget_about_first_page.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::forget_about_first_page2")
(declare-fun lib!page_organization.PageOrg.impl&%4.forget_about_first_page2.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::clear_ec")
(declare-fun lib!page_organization.PageOrg.impl&%4.clear_ec.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::bin_sizes::valid_sbin_idx")
(declare-fun lib!bin_sizes.valid_sbin_idx.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::free_to_unused_queue")
(declare-fun lib!page_organization.PageOrg.impl&%4.free_to_unused_queue.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::set_range_to_used")
(declare-fun lib!page_organization.PageOrg.impl&%4.set_range_to_used.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::set_range_to_not_used")
(declare-fun lib!page_organization.PageOrg.impl&%4.set_range_to_not_used.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::config::BIN_HUGE")
(declare-fun lib!config.BIN_HUGE.? () Int)
(set-info :comment ";; Function-Decl lib::bin_sizes::valid_bin_idx")
(declare-fun lib!bin_sizes.valid_bin_idx.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::config::BIN_FULL")
(declare-fun lib!config.BIN_FULL.? () Int)
(set-info :comment ";; Function-Decl lib::bin_sizes::size_of_bin")
(declare-fun lib!bin_sizes.size_of_bin.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::config::SMALL_PAGE_SHIFT")
(declare-fun lib!config.SMALL_PAGE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::MEDIUM_PAGE_SHIFT")
(declare-fun lib!config.MEDIUM_PAGE_SHIFT.? () Int)
(set-info :comment ";; Function-Decl lib::config::MEDIUM_PAGE_SIZE")
(declare-fun lib!config.MEDIUM_PAGE_SIZE.? () Int)
(set-info :comment ";; Function-Decl lib::config::MEDIUM_OBJ_SIZE_MAX")
(declare-fun lib!config.MEDIUM_OBJ_SIZE_MAX.? () Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::into_used_list")
(declare-fun lib!page_organization.PageOrg.impl&%4.into_used_list.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::insert_back")
(declare-fun lib!page_organization.PageOrg.impl&%4.insert_back.? (Poly Poly Poly) vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::into_used_list_back")
(declare-fun lib!page_organization.PageOrg.impl&%4.into_used_list_back.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::valid_used_page")
(declare-fun lib!page_organization.PageOrg.impl&%4.valid_used_page.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::out_of_used_list")
(declare-fun lib!page_organization.PageOrg.impl&%4.out_of_used_list.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::segment_freeing_start")
(declare-fun lib!page_organization.PageOrg.impl&%4.segment_freeing_start.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::segment_freeing_finish")
(declare-fun lib!page_organization.PageOrg.impl&%4.segment_freeing_finish.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::get_list_idx")
(declare-fun lib!page_organization.PageOrg.impl&%4.get_list_idx.? (Poly Poly) tuple%2.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::merge_with_after")
(declare-fun lib!page_organization.PageOrg.impl&%4.merge_with_after.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::merge_with_before")
(declare-fun lib!page_organization.PageOrg.impl&%4.merge_with_before.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::next_by")
(declare-fun lib!page_organization.PageOrg.impl&%4.next_by.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::next")
(declare-fun lib!page_organization.PageOrg.impl&%4.next.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::initialize")
(declare-fun lib!page_organization.PageOrg.impl&%4.initialize.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::init_by")
(declare-fun lib!page_organization.PageOrg.impl&%4.init_by.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::init")
(declare-fun lib!page_organization.PageOrg.impl&%4.init.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::public_invariant")
(declare-fun lib!page_organization.PageOrg.impl&%4.public_invariant.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ll_basics")
(declare-fun lib!page_organization.PageOrg.impl&%4.ll_basics.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::page_id_domain")
(declare-fun lib!page_organization.PageOrg.impl&%4.page_id_domain.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::count_off0")
(declare-fun lib!page_organization.PageOrg.impl&%4.count_off0.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::end_is_unused")
(declare-fun lib!page_organization.PageOrg.impl&%4.end_is_unused.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::does_count")
(declare-fun lib!page_organization.PageOrg.impl&%4.does_count.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::one_count")
(declare-fun lib!page_organization.PageOrg.impl&%4.one_count.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ucount_sum")
(declare-fun lib!page_organization.PageOrg.impl&%4.ucount_sum.? (Poly Poly Poly) Int)
(declare-fun lib!page_organization.PageOrg.impl&%4.rec%ucount_sum.? (Poly Poly Poly Fuel) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ucount")
(declare-fun lib!page_organization.PageOrg.impl&%4.ucount.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ec_of_popped")
(declare-fun lib!page_organization.PageOrg.impl&%4.ec_of_popped.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::popped_ec")
(declare-fun lib!page_organization.PageOrg.impl&%4.popped_ec.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::count_is_right")
(declare-fun lib!page_organization.PageOrg.impl&%4.count_is_right.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::is_unused_header")
(declare-fun lib!page_organization.is_unused_header.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::is_in_lls")
(declare-fun lib!page_organization.is_in_lls.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::is_used_header")
(declare-fun lib!page_organization.is_used_header.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::seg_free_prefix")
(declare-fun lib!page_organization.PageOrg.impl&%4.seg_free_prefix.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::get_VeryUnready_2")
(declare-fun lib!page_organization.impl&%2.get_VeryUnready_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::good_range_very_unready")
(declare-fun lib!page_organization.PageOrg.impl&%4.good_range_very_unready.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::popped_basics")
(declare-fun lib!page_organization.PageOrg.impl&%4.popped_basics.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::data_for_used_header")
(declare-fun lib!page_organization.PageOrg.impl&%4.data_for_used_header.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::inv_segment_creating")
(declare-fun lib!page_organization.PageOrg.impl&%4.inv_segment_creating.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::inv_very_unready")
(declare-fun lib!page_organization.PageOrg.impl&%4.inv_very_unready.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::inv_ready")
(declare-fun lib!page_organization.PageOrg.impl&%4.inv_ready.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::inv_used")
(declare-fun lib!page_organization.PageOrg.impl&%4.inv_used.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::data_for_unused_header")
(declare-fun lib!page_organization.PageOrg.impl&%4.data_for_unused_header.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::get_prev")
(declare-fun lib!page_organization.get_prev.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::page_organization::get_next")
(declare-fun lib!page_organization.get_next.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl lib::page_organization::valid_ll_i")
(declare-fun lib!page_organization.valid_ll_i.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::valid_ll")
(declare-fun lib!page_organization.valid_ll.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ll_inv_valid_unused")
(declare-fun lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ll_inv_valid_used")
(declare-fun lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ll_inv_valid_unused2")
(declare-fun lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ll_inv_valid_used2")
(declare-fun lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::expect_out_of_lists")
(declare-fun lib!page_organization.PageOrg.impl&%4.expect_out_of_lists.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::ll_inv_exists_in_some_list")
(declare-fun lib!page_organization.PageOrg.impl&%4.ll_inv_exists_in_some_list.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::is_the_popped")
(declare-fun lib!page_organization.PageOrg.impl&%4.is_the_popped.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::popped_len")
(declare-fun lib!page_organization.PageOrg.impl&%4.popped_len.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::good_range_used")
(declare-fun lib!page_organization.PageOrg.impl&%4.good_range_used.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::good_range_unused")
(declare-fun lib!page_organization.PageOrg.impl&%4.good_range_unused.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::attached_rec")
(declare-fun lib!page_organization.PageOrg.impl&%4.attached_rec.? (Poly Poly Poly Poly) Bool)
(declare-fun lib!page_organization.PageOrg.impl&%4.rec%attached_rec.? (Poly Poly Poly Poly Fuel) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::good_range0")
(declare-fun lib!page_organization.PageOrg.impl&%4.good_range0.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::attached_rec0")
(declare-fun lib!page_organization.PageOrg.impl&%4.attached_rec0.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::popped_for_seg")
(declare-fun lib!page_organization.PageOrg.impl&%4.popped_for_seg.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::attached_ranges_segment")
(declare-fun lib!page_organization.PageOrg.impl&%4.attached_ranges_segment.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::attached_ranges")
(declare-fun lib!page_organization.PageOrg.impl&%4.attached_ranges.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_3")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_take_page_from_unused_queue_0")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_take_page_from_unused_queue_1")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_1.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_take_page_from_unused_queue_2")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_split_page_0")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_split_page_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_split_page_1")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_split_page_1.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_split_page_2")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_split_page_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_split_page_3")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_split_page_3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_create_segment_0")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_create_segment_0.? (Poly) lib!tokens.SegmentId.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_forget_about_first_page_0")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_forget_about_first_page_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_free_to_unused_queue_0")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_free_to_unused_queue_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_set_range_to_used_0")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_set_range_to_used_0.? (Poly) lib!page_organization.PageHeaderKind.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_into_used_list_0")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_into_used_list_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_into_used_list_back_0")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_into_used_list_back_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_out_of_used_list_0")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_out_of_used_list_1")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_1.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_out_of_used_list_2")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_segment_freeing_start_0")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_segment_freeing_start_0.? (Poly) lib!tokens.SegmentId.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::arrow_dummy_to_use_type_params_0")
(declare-fun lib!page_organization.PageOrg.impl&%0.arrow_dummy_to_use_type_params_0.? (Poly) lib!page_organization.PageOrg.State.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_take_page_from_unused_queue")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_take_page_from_unused_queue.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_take_page_from_unused_queue_0")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_take_page_from_unused_queue_1")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_1.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_take_page_from_unused_queue_2")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_split_page")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_split_page.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_split_page_0")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_split_page_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_split_page_1")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_split_page_1.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_split_page_2")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_split_page_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_split_page_3")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_split_page_3.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_create_segment")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_create_segment.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_create_segment_0")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_create_segment_0.? (Poly) lib!tokens.SegmentId.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_allocate_popped")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_allocate_popped.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_forget_about_first_page")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_forget_about_first_page.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_forget_about_first_page_0")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_forget_about_first_page_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_forget_about_first_page2")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_forget_about_first_page2.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_clear_ec")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_clear_ec.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_free_to_unused_queue")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_free_to_unused_queue.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_free_to_unused_queue_0")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_free_to_unused_queue_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_set_range_to_used")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_set_range_to_used.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_set_range_to_used_0")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_set_range_to_used_0.? (Poly) lib!page_organization.PageHeaderKind.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_set_range_to_not_used")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_set_range_to_not_used.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_into_used_list")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_into_used_list.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_into_used_list_0")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_into_used_list_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_into_used_list_back")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_into_used_list_back.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_into_used_list_back_0")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_into_used_list_back_0.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_out_of_used_list")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_out_of_used_list.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_out_of_used_list_0")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_out_of_used_list_1")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_1.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_out_of_used_list_2")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_2.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_segment_freeing_start")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_segment_freeing_start.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_segment_freeing_start_0")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_segment_freeing_start_0.? (Poly) lib!tokens.SegmentId.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_segment_freeing_finish")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_segment_freeing_finish.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_merge_with_after")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_merge_with_after.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_merge_with_before")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_merge_with_before.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::is_dummy_to_use_type_params")
(declare-fun lib!page_organization.PageOrg.impl&%1.is_dummy_to_use_type_params.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Step::get_dummy_to_use_type_params_0")
(declare-fun lib!page_organization.PageOrg.impl&%1.get_dummy_to_use_type_params_0.? (Poly) lib!page_organization.PageOrg.State.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Config::arrow_0")
(declare-fun lib!page_organization.PageOrg.impl&%2.arrow_0.? (Poly) lib!page_organization.PageOrg.State.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Config::arrow_dummy_to_use_type_params_0")
(declare-fun lib!page_organization.PageOrg.impl&%2.arrow_dummy_to_use_type_params_0.? (Poly) lib!page_organization.PageOrg.State.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Config::is_initialize")
(declare-fun lib!page_organization.PageOrg.impl&%3.is_initialize.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Config::is_dummy_to_use_type_params")
(declare-fun lib!page_organization.PageOrg.impl&%3.is_dummy_to_use_type_params.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::Config::get_dummy_to_use_type_params_0")
(declare-fun lib!page_organization.PageOrg.impl&%3.get_dummy_to_use_type_params_0.? (Poly) lib!page_organization.PageOrg.State.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::initialize_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.initialize_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::take_page_from_unused_queue_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_strong.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::take_page_from_unused_queue_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_enabled.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::split_page_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.split_page_strong.? (Poly Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::split_page_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.split_page_enabled.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::create_segment_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.create_segment_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::create_segment_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.create_segment_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::allocate_popped_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.allocate_popped_strong.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::allocate_popped_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.allocate_popped_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::forget_about_first_page_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.forget_about_first_page_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::forget_about_first_page_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.forget_about_first_page_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::forget_about_first_page2_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_strong.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::forget_about_first_page2_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::clear_ec_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.clear_ec_strong.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::clear_ec_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.clear_ec_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::free_to_unused_queue_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::free_to_unused_queue_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::set_range_to_used_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.set_range_to_used_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::set_range_to_used_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.set_range_to_used_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::set_range_to_not_used_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_strong.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::set_range_to_not_used_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::into_used_list_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.into_used_list_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::into_used_list_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.into_used_list_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::into_used_list_back_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::into_used_list_back_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::out_of_used_list_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.out_of_used_list_strong.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::out_of_used_list_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.out_of_used_list_enabled.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::segment_freeing_start_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.segment_freeing_start_strong.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::segment_freeing_start_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.segment_freeing_start_enabled.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::segment_freeing_finish_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_strong.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::segment_freeing_finish_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::merge_with_after_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.merge_with_after_strong.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::merge_with_after_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.merge_with_after_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::merge_with_before_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.merge_with_before_strong.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::merge_with_before_enabled")
(declare-fun lib!page_organization.PageOrg.impl&%4.merge_with_before_enabled.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::next_strong_by")
(declare-fun lib!page_organization.PageOrg.impl&%4.next_strong_by.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::next_strong")
(declare-fun lib!page_organization.PageOrg.impl&%4.next_strong.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::invariant")
(declare-fun lib!page_organization.PageOrg.impl&%4.invariant.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::is_any_the_popped")
(declare-fun lib!page_organization.PageOrg.impl&%4.is_any_the_popped.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::page_id_of_popped")
(declare-fun lib!page_organization.PageOrg.impl&%4.page_id_of_popped.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::popped_ranges_match")
(declare-fun lib!page_organization.PageOrg.impl&%4.popped_ranges_match.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::popped_ranges_match_for_sid")
(declare-fun lib!page_organization.PageOrg.impl&%4.popped_ranges_match_for_sid.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::popped_page_id")
(declare-fun lib!page_organization.PageOrg.impl&%4.popped_page_id.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::in_popped_range")
(declare-fun lib!page_organization.PageOrg.impl&%4.in_popped_range.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::PageOrg::State::if_popped_or_other_then_for")
(declare-fun lib!page_organization.PageOrg.impl&%4.if_popped_or_other_then_for.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl lib::bin_sizes::smallest_bin_fitting_size")
(declare-fun lib!bin_sizes.smallest_bin_fitting_size.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::is_SegmentCreating")
(declare-fun lib!page_organization.impl&%2.is_SegmentCreating.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::is_Ready")
(declare-fun lib!page_organization.impl&%2.is_Ready.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::get_Ready_0")
(declare-fun lib!page_organization.impl&%2.get_Ready_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::is_VeryUnready")
(declare-fun lib!page_organization.impl&%2.is_VeryUnready.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::get_VeryUnready_0")
(declare-fun lib!page_organization.impl&%2.get_VeryUnready_0.? (Poly) lib!tokens.SegmentId.)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::get_VeryUnready_1")
(declare-fun lib!page_organization.impl&%2.get_VeryUnready_1.? (Poly) Int)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::is_No")
(declare-fun lib!page_organization.impl&%2.is_No.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::is_Used")
(declare-fun lib!page_organization.impl&%2.is_Used.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::get_Used_0")
(declare-fun lib!page_organization.impl&%2.get_Used_0.? (Poly) lib!tokens.PageId.)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::get_SegmentCreating_0")
(declare-fun lib!page_organization.impl&%2.get_SegmentCreating_0.? (Poly) lib!tokens.SegmentId.)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::is_SegmentFreeing")
(declare-fun lib!page_organization.impl&%2.is_SegmentFreeing.? (Poly) Bool)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::get_SegmentFreeing_0")
(declare-fun lib!page_organization.impl&%2.get_SegmentFreeing_0.? (Poly) lib!tokens.SegmentId.)
(set-info :comment ";; Function-Decl lib::page_organization::Popped::get_SegmentFreeing_1")
(declare-fun lib!page_organization.impl&%2.get_SegmentFreeing_1.? (Poly) Int)
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Broadcast vstd::std_specs::bits::axiom_u64_leading_zeros")
(assert (=> (fuel_bool fuel%vstd!std_specs.bits.axiom_u64_leading_zeros.) (forall ((i! Poly)) (! (=> (has_type i! (UINT 64)) (and (and (and (and (let ((tmp%%$ (vstd!std_specs.bits.u64_leading_zeros.? i!))) (and (<= 0 tmp%%$) (<= tmp%%$ 64))) (= (= (%I i!) 0) (= (vstd!std_specs.bits.u64_leading_zeros.? i!) 64))) (=> (let ((tmp%%$ (vstd!std_specs.bits.u64_leading_zeros.? i!))) (and (<= 0 tmp%%$) (< tmp%%$ 64))) (not (= (uClip 64 (bitand (I (uClip 64 (bitshr (I (%I i!)) (I (uClip 64 (Sub 63 (uClip 64 (vstd!std_specs.bits.u64_leading_zeros.? i!)))))))) (I 1))) 0)))) (= (uClip 64 (bitshr (I (%I i!)) (I (uClip 64 (Sub 64 (uClip 64 (vstd!std_specs.bits.u64_leading_zeros.? i!))))))) 0)) (forall ((j$ Poly)) (! (=> (has_type j$ (UINT 64)) (=> (and (<= (Sub 64 (vstd!std_specs.bits.u64_leading_zeros.? i!)) (%I j$)) (< (%I j$) 64)) (= (uClip 64 (bitand (I (uClip 64 (bitshr (I (%I i!)) (I (%I j$))))) (I 1))) 0))) :pattern ((uClip 64 (bitshr (I (%I i!)) (I (%I j$))))))))) :pattern ((vstd!std_specs.bits.u64_leading_zeros.? i!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_some.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_some.? T&. T& option!) (is-core!option.Option./Some_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_some.? T&. T& option!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::is_none")
(assert (fuel_bool_default fuel%vstd!std_specs.option.is_none.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.is_none.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.is_none.? T&. T& option!) (is-core!option.Option./None_ (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.is_none.? T&. T& option!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Specs vstd::std_specs::option::spec_unwrap")
(declare-fun req%vstd!std_specs.option.spec_unwrap. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (req%vstd!std_specs.option.spec_unwrap. T&. T& option!) (=> %%global_location_label%%0 (is-core!option.Option./Some_ (%Poly%core!option.Option. option!)))) :pattern ((req%vstd!std_specs.option.spec_unwrap. T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::spec_unwrap")
(assert (fuel_bool_default fuel%vstd!std_specs.option.spec_unwrap.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.spec_unwrap.) (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (= (vstd!std_specs.option.spec_unwrap.? T&. T& option!) (core!option.Option./Some/0 (%Poly%core!option.Option. option!))) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!))))))
(assert (forall ((T&. Dcr) (T& Type) (option! Poly)) (! (=> (has_type option! (TYPE%core!option.Option. T&. T&)) (has_type (vstd!std_specs.option.spec_unwrap.? T&. T& option!) T&)) :pattern ((vstd!std_specs.option.spec_unwrap.? T&. T& option!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%2 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::remove_keys")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.remove_keys.))
(declare-fun %%lambda%%0 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (not (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$))))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%1 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.remove_keys.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%0 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!)))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::union_prefer_right")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%2 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%3 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%2 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%3 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_finite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_index_decreases_infinite.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_empty.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_same.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_insert_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_remove_different.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!map.axiom_map_ext_equal_deep.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!))))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%6 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_index_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_decreases")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_decreases.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (j! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type j! INT)) (=> (and (and (and (<= 0 (%I i!)) (<= (%I i!) (%I j!))) (<= (%I j!) (vstd!seq.Seq.len.? A&. A& s!))) (< (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)) (height s!)))) :pattern ((height (vstd!seq.Seq.subrange.? A&. A& s! i! j!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_empty.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_len.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_new_index.) (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_push_index_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_update_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_len.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_subrange_index.) (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_len.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index1.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!))))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (=> (fuel_bool fuel%vstd!seq.axiom_seq_add_index2.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!))))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_left")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_left.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& a!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) b!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::add_empty_right")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.add_empty_right.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&))) (=> (= (vstd!seq.Seq.len.? A&. A& b!) 0) (= (vstd!seq.Seq.add.? A&. A& a! b!) a!))) :pattern ((vstd!seq.Seq.add.? A&. A& a! b!))))))
(set-info :comment ";; Broadcast vstd::seq_lib::impl&%0::push_distributes_over_add")
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.push_distributes_over_add.) (forall ((A&. Dcr) (A& Type) (a! Poly) (b! Poly) (elt! Poly)) (! (=> (and (has_type a! (TYPE%vstd!seq.Seq. A&. A&)) (has_type b! (TYPE%vstd!seq.Seq. A&. A&)) (has_type elt! A&)) (= (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!) (vstd!seq.Seq.add.? A&. A& a! (vstd!seq.Seq.push.? A&. A& b! elt!)))) :pattern ((vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.add.? A&. A& a! b!) elt!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty.) (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_new.) (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_same.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_insert.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_different.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_ext_equal_deep.) (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_domain.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (=> (fuel_bool fuel%vstd!set.axiom_mk_map_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_empty_finite.) (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_insert_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (=> (fuel_bool fuel%vstd!set.axiom_set_remove_finite.) (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_safety")
(declare-fun req%vstd!state_machine_internal.assert_safety. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_safety. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_safety. b!)))))
(declare-fun ens%vstd!state_machine_internal.assert_safety. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_safety. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_safety. b!)))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::assert_let_pattern")
(declare-fun req%vstd!state_machine_internal.assert_let_pattern. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (req%vstd!state_machine_internal.assert_let_pattern. b!) b!) :pattern ((req%vstd!state_machine_internal.assert_let_pattern. b!)))))
(declare-fun ens%vstd!state_machine_internal.assert_let_pattern. (Bool) Bool)
(assert (forall ((b! Bool)) (! (= (ens%vstd!state_machine_internal.assert_let_pattern. b!) b!) :pattern ((ens%vstd!state_machine_internal.assert_let_pattern. b!)))))
(set-info :comment ";; Function-Axioms lib::config::INTPTR_SHIFT")
(assert (fuel_bool_default fuel%lib!config.INTPTR_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.INTPTR_SHIFT.) (= lib!config.INTPTR_SHIFT.? 3)))
(assert (uInv 64 lib!config.INTPTR_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::SLICE_SHIFT")
(assert (fuel_bool_default fuel%lib!config.SLICE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.SLICE_SHIFT.) (= lib!config.SLICE_SHIFT.? (uClip 64 (Add 13 lib!config.INTPTR_SHIFT.?)))))
(assert (uInv 64 lib!config.SLICE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::SEGMENT_SHIFT")
(assert (fuel_bool_default fuel%lib!config.SEGMENT_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.SEGMENT_SHIFT.) (= lib!config.SEGMENT_SHIFT.? (uClip 64 (Add 9 lib!config.SLICE_SHIFT.?)))))
(assert (uInv 64 lib!config.SEGMENT_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::SEGMENT_SIZE")
(assert (fuel_bool_default fuel%lib!config.SEGMENT_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.SEGMENT_SIZE.) (= lib!config.SEGMENT_SIZE.? (uClip 64 (bitshl (I 1) (I lib!config.SEGMENT_SHIFT.?))))))
(assert (uInv 64 lib!config.SEGMENT_SIZE.?))
(set-info :comment ";; Function-Axioms lib::config::SLICE_SIZE")
(assert (fuel_bool_default fuel%lib!config.SLICE_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.SLICE_SIZE.) (= lib!config.SLICE_SIZE.? 65536)))
(assert (uInv 64 lib!config.SLICE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::config::SLICES_PER_SEGMENT")
(assert (fuel_bool_default fuel%lib!config.SLICES_PER_SEGMENT.))
(assert (=> (fuel_bool fuel%lib!config.SLICES_PER_SEGMENT.) (= lib!config.SLICES_PER_SEGMENT.? (uClip 64 (EucDiv lib!config.SEGMENT_SIZE.? lib!config.SLICE_SIZE.?)))))
(assert (uInv 64 lib!config.SLICES_PER_SEGMENT.?))
(set-info :comment ";; Function-Axioms lib::config::SEGMENT_BIN_MAX")
(assert (fuel_bool_default fuel%lib!config.SEGMENT_BIN_MAX.))
(assert (=> (fuel_bool fuel%lib!config.SEGMENT_BIN_MAX.) (= lib!config.SEGMENT_BIN_MAX.? 31)))
(assert (uInv SZ lib!config.SEGMENT_BIN_MAX.?))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::valid_unused_page")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.valid_unused_page.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.valid_unused_page.) (forall ((self! Poly) (page_id! Poly) (sbin_idx! Poly) (list_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.valid_unused_page.? self! page_id! sbin_idx! list_idx!) (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id!) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))) false)) (let ((tmp%%$ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))))) (and (is-core!option.Option./Some_ tmp%%$) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (and (<= 0 count$) (<= count$ lib!config.SLICES_PER_SEGMENT.?)))))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))))) (and (<= 0 (%I sbin_idx!)) (<= (%I sbin_idx!) lib!config.SEGMENT_BIN_MAX.?))) (and (<= 0 (%I list_idx!)) (< (%I list_idx!) (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) sbin_idx!))))) (= (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) sbin_idx!) list_idx!) page_id!))) :pattern ((lib!page_organization.PageOrg.impl&%4.valid_unused_page.? self! page_id! sbin_idx! list_idx!))))))
(set-info :comment ";; Function-Axioms vstd::state_machine_internal::impl&%3::update_at_index")
(assert (fuel_bool_default fuel%vstd!state_machine_internal.impl&%3.update_at_index.))
(assert (=> (fuel_bool fuel%vstd!state_machine_internal.impl&%3.update_at_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (vstd!state_machine_internal.impl&%3.update_at_index.? K&. K& V&. V& self! k! v!) (vstd!map.impl&%0.insert.? K&. K& V&. V& self! k! v!)) :pattern ((vstd!state_machine_internal.impl&%3.update_at_index.? K&. K& V&. V& self! k! v!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type k! K&) (has_type v! V&)) (has_type (vstd!state_machine_internal.impl&%3.update_at_index.? K&. K& V&. V& self! k! v!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!state_machine_internal.impl&%3.update_at_index.? K&. K& V&. V& self! k! v!)))))
(set-info :comment ";; Function-Specs vstd::state_machine_internal::impl&%2::update_at_index")
(declare-fun req%vstd!state_machine_internal.impl&%2.update_at_index. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!state_machine_internal.impl&%2.update_at_index. A&. A& self! i! a!) (=> %%global_location_label%%7 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!state_machine_internal.impl&%2.update_at_index. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::state_machine_internal::impl&%2::update_at_index")
(assert (fuel_bool_default fuel%vstd!state_machine_internal.impl&%2.update_at_index.))
(assert (=> (fuel_bool fuel%vstd!state_machine_internal.impl&%2.update_at_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (vstd!state_machine_internal.impl&%2.update_at_index.? A&. A& self! i! a!) (vstd!seq.Seq.update.? A&. A& self! i! a!)) :pattern ((vstd!state_machine_internal.impl&%2.update_at_index.? A&. A& self! i! a!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!state_machine_internal.impl&%2.update_at_index.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!state_machine_internal.impl&%2.update_at_index.? A&. A& self! i! a!)))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::remove")
(declare-fun req%vstd!seq_lib.impl&%0.remove. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!) (=> %%global_location_label%%8 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.remove. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::remove")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.remove.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.remove.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) (vstd!seq.Seq.subrange.? A&. A& self! (I (Add (%I i!) 1)) (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq_lib.impl&%0.remove.? A&. A& self! i!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.remove.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::take_page_from_unused_queue")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue.))
(define-fun is-lib!page_organization.Popped./No_ ((c lib!page_organization.Popped.)) Bool ((_ is lib!page_organization.Popped./No) c))
(define-fun is-lib!page_organization.Popped./SegmentFreeing_ ((c lib!page_organization.Popped.)) Bool ((_ is lib!page_organization.Popped./SegmentFreeing) c))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue.) (forall ((pre! Poly) (post! Poly) (page_id! Poly) (sbin_idx! Poly) (list_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue.? pre! post! page_id! sbin_idx! list_idx!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_popped$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (lib!page_organization.PageOrg.impl&%4.valid_unused_page.? pre! page_id! sbin_idx! list_idx!) (and (or (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) lib!page_organization.Popped./No) (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) (lib!page_organization.Popped./SegmentFreeing (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))))))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!))))) (let ((tmp_assert$1 (and tmp_assert$ (and (is-core!option.Option./Some_ tmp_for_match_0$) (let ((dlist_entry$ (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_0$)))))) true))))) (let ((dlist_entry$ (ite (is-core!option.Option./Some_ tmp_for_match_0$) (let ((dlist_entry$2 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_0$)))))) dlist_entry$2) (%Poly%lib!page_organization.DlistEntry. (vstd!pervasive.arbitrary.? $ TYPE%lib!page_organization.DlistEntry.))))) (let ((tmp_assert$2 (and tmp_assert$1 (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!))) false)))) (let ((update_tmp_pages$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) page_id! (Poly%lib!page_organization.PageData. (let ((tmp%%$ core!option.Option./None)) (let ((tmp%%$1 core!option.Option./None)) (let ((tmp%%$2 core!option.Option./None)) (let ((tmp%%$3 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))))))))))))) (let ((tmp%%$ (let ((tmp%%$5 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$5) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5)))))) (let ((tmp_assert$3 (and tmp_assert$2 (and (and (and (not (= prev_page_id$ (%Poly%lib!tokens.PageId. page_id!))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. prev_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))) false))))) (let ((update_tmp_pages$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1) (Poly%lib!tokens.PageId. prev_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$6 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$7 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$8 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7))))))))) (let ((tmp%%$9 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$9))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$9))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$9))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$9))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$9))))))))))))) (tuple%2./tuple%2 (B tmp_assert$3) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2))))) (tuple%2./tuple%2 (B tmp_assert$2) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1)))))) (let ((tmp_assert$4 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp%%$10 (let ((tmp%%$11 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$11) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$11)))))) (let ((tmp_assert$5 (and tmp_assert$4 (and (and (and (not (= next_page_id$ (%Poly%lib!tokens.PageId. page_id!))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))) false))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$3) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$12 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$13 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$14 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$13)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$14)))))))))))) (let ((tmp%%$15 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$12)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$15))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$15))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$15))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$15))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$15))))))))))))) (tuple%2./tuple%2 (B tmp_assert$5) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$4))))) (tuple%2./tuple%2 (B tmp_assert$4) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$3)))))) (let ((tmp_assert$6 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$10)))))) (let ((update_tmp_pages$5 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$10)))))) (and (ite (and (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((update_tmp_unused_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) sbin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))))))))) (=> tmp_assert$6 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$1))) (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (let ((update_tmp_unused_dlist_headers$2 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) sbin_idx! (Poly%lib!page_organization.DlistHeader. (let ((tmp%%$16 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$17 (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$16)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (Poly%lib!page_organization.DlistHeader. tmp%%$17))))))))))))) (=> tmp_assert$6 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$2))) (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (let ((update_tmp_unused_dlist_headers$3 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) sbin_idx! (Poly%lib!page_organization.DlistHeader. (let ((tmp%%$18 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$19 (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (Poly%lib!page_organization.DlistHeader. tmp%%$19))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$18)))))))))) (=> tmp_assert$6 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$3))) (=> tmp_assert$6 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$))))) (let ((tmp_assert$7 (and tmp_assert$6 (=> (and (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (not (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))))))))) (let ((tmp_for_match_1$ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!))))) (let ((tmp_assert$8 (and tmp_assert$7 (and (is-core!option.Option./Some_ tmp_for_match_1$) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) true))))) (let ((count$ (ite (is-core!option.Option./Some_ tmp_for_match_1$) (let ((count$2 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) count$2) (%I (vstd!pervasive.arbitrary.? $ NAT))))) (let ((tmp_assert$9 (and tmp_assert$8 (>= count$ 1)))) (let ((last_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (nClip (Sub (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) count$)) 1))))))) (and (ite (not (= last_id$ (%Poly%lib!tokens.PageId. page_id!))) (let ((update_tmp_pages$6 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$5) (Poly%lib!tokens.PageId. last_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$20 core!option.Option./None)) (let ((tmp%%$21 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$20)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))))))))))) (let ((tmp_assert$10 (and tmp_assert$9 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_id$))))) (let ((tmp_assert$11 (and tmp_assert$10 (and (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))) false) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))))))) (=> tmp_assert$11 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$6))))) (=> tmp_assert$9 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$5))) (let ((tmp_assert$12 (ite (not (= last_id$ (%Poly%lib!tokens.PageId. page_id!))) (let ((update_tmp_pages$7 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$5) (Poly%lib!tokens.PageId. last_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$22 core!option.Option./None)) (let ((tmp%%$23 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$23))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$23))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$22)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$23))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$23))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$23))))))))))))) (let ((tmp_assert$13 (and tmp_assert$9 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_id$))))) (let ((tmp_assert$14 (and tmp_assert$13 (and (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))) false) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))))))) tmp_assert$14))) tmp_assert$9))) (let ((tmp_assert$15 (and tmp_assert$12 (and (not (= (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (core!option.Option./Some (Poly%lib!tokens.PageId. last_id$)))) (not (= (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (core!option.Option./Some (Poly%lib!tokens.PageId. last_id$)))))))) (and (let ((tmp%%$24 (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (ite (is-lib!page_organization.Popped./No_ tmp%%$24) (let ((update_tmp_popped$1 (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)))) (%I (I count$)) (%B (B false))))) (=> tmp_assert$15 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$1))) (ite (is-lib!page_organization.Popped./SegmentFreeing_ tmp%%$24) (let ((sid$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$24))))) (let ((i$ (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$24))))) (let ((update_tmp_popped$2 (lib!page_organization.Popped./SegmentFreeing (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. sid$)) (%I (I (Add i$ count$)))))) (=> tmp_assert$15 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$2))))) (=> tmp_assert$15 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$))))) (let ((update_tmp_unused_lists$1 (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq.update.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. update_tmp_unused_lists$) sbin_idx! (vstd!seq_lib.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!) list_idx!))))) (=> tmp_assert$15 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$1))))))))))))))))))))))))) (let ((tmp_assert$16 (let ((tmp_for_match_0$ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!))))) (let ((tmp_assert$17 (and tmp_assert$ (and (is-core!option.Option./Some_ tmp_for_match_0$) (let ((dlist_entry$ (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_0$)))))) true))))) (let ((tmp_assert$18 (let ((dlist_entry$ (ite (is-core!option.Option./Some_ tmp_for_match_0$) (let ((dlist_entry$5 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_0$)))))) dlist_entry$5) (%Poly%lib!page_organization.DlistEntry. (vstd!pervasive.arbitrary.? $ TYPE%lib!page_organization.DlistEntry.))))) (let ((tmp_assert$19 (and tmp_assert$17 (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!))) false)))) (let ((update_tmp_pages$8 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) page_id! (Poly%lib!page_organization.PageData. (let ((tmp%%$ core!option.Option./None)) (let ((tmp%%$26 core!option.Option./None)) (let ((tmp%%$27 core!option.Option./None)) (let ((tmp%%$28 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$26)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$27)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$28))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$28))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$28))))))))))))))) (let ((tmp%%$ (let ((tmp%%$30 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$30) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$30)))))) (let ((tmp_assert$20 (and tmp_assert$19 (and (and (and (not (= prev_page_id$ (%Poly%lib!tokens.PageId. page_id!))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. prev_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))) false))))) (let ((update_tmp_pages$9 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$8) (Poly%lib!tokens.PageId. prev_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$31 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$32 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$33 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$33))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$32))))))))) (let ((tmp%%$34 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$31)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$34))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$34))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$34))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$34))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$34))))))))))))) (tuple%2./tuple%2 (B tmp_assert$20) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$9))))) (tuple%2./tuple%2 (B tmp_assert$19) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$8)))))) (let ((tmp_assert$21 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_pages$10 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp%%$35 (let ((tmp%%$36 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$36) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$36)))))) (let ((tmp_assert$22 (and tmp_assert$21 (and (and (and (not (= next_page_id$ (%Poly%lib!tokens.PageId. page_id!))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))) false))))) (let ((update_tmp_pages$11 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$10) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$37 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$38 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$39 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$38)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$39)))))))))))) (let ((tmp%%$40 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$37)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$40))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$40))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$40))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$40))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$40))))))))))))) (tuple%2./tuple%2 (B tmp_assert$22) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$11))))) (tuple%2./tuple%2 (B tmp_assert$21) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$10)))))) (let ((tmp_assert$23 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$35)))))) (let ((update_tmp_pages$12 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$35)))))) (let ((tmp_assert$24 (and tmp_assert$23 (=> (and (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (not (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))))))))) (let ((tmp_assert$25 (let ((tmp_for_match_1$ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!))))) (let ((tmp_assert$26 (and tmp_assert$24 (and (is-core!option.Option./Some_ tmp_for_match_1$) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) true))))) (let ((tmp_assert$27 (let ((count$ (ite (is-core!option.Option./Some_ tmp_for_match_1$) (let ((count$5 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) count$5) (%I (vstd!pervasive.arbitrary.? $ NAT))))) (let ((tmp_assert$28 (and tmp_assert$26 (>= count$ 1)))) (let ((tmp_assert$29 (let ((last_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (nClip (Sub (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) count$)) 1))))))) (let ((tmp_assert$30 (ite (not (= last_id$ (%Poly%lib!tokens.PageId. page_id!))) (let ((update_tmp_pages$13 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$12) (Poly%lib!tokens.PageId. last_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$41 core!option.Option./None)) (let ((tmp%%$42 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$42))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$42))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$41)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$42))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$42))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$42))))))))))))) (let ((tmp_assert$31 (and tmp_assert$28 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_id$))))) (let ((tmp_assert$32 (and tmp_assert$31 (and (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))) false) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))))))) tmp_assert$32))) tmp_assert$28))) (let ((tmp_assert$33 (and tmp_assert$30 (and (not (= (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (core!option.Option./Some (Poly%lib!tokens.PageId. last_id$)))) (not (= (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (core!option.Option./Some (Poly%lib!tokens.PageId. last_id$)))))))) (let ((update_tmp_unused_lists$2 (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq.update.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. update_tmp_unused_lists$) sbin_idx! (vstd!seq_lib.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!) list_idx!))))) tmp_assert$33)))))) tmp_assert$29))))) tmp_assert$27))))) tmp_assert$25))))))))))))) tmp_assert$18))))) (and (=> tmp_assert$16 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$16 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$)) (=> tmp_assert$16 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$))))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue.? pre! post! page_id! sbin_idx! list_idx!))))))
(set-info :comment ";; Function-Axioms lib::bin_sizes::smallest_sbin_fitting_size")
(assert (fuel_bool_default fuel%lib!bin_sizes.smallest_sbin_fitting_size.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.smallest_sbin_fitting_size.) (forall ((i! Poly)) (! (= (lib!bin_sizes.smallest_sbin_fitting_size.? i!) (ite (<= (%I i!) 8) (%I i!) (let ((w$ (uClip 64 (Sub (%I i!) 1)))) (let ((lz$ (vstd!std_specs.bits.u64_leading_zeros.? (I w$)))) (let ((b$ (uClip 8 (Sub (Sub SZ 1) lz$)))) (let ((sbin_idx$ (Sub (uClip 64 (bitor (I (uClip 64 (uClip 8 (bitshl (I b$) (I 2))))) (I (uClip 64 (bitand (I (uClip 64 (bitshr (I w$) (I (uClip 64 (Sub (uClip 64 b$) 2)))))) (I 3)))))) 4))) sbin_idx$)))))) :pattern ((lib!bin_sizes.smallest_sbin_fitting_size.? i!))))))
(set-info :comment ";; Function-Specs vstd::seq_lib::impl&%0::insert")
(declare-fun req%vstd!seq_lib.impl&%0.insert. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!) (=> %%global_location_label%%9 (and (<= 0 (%I i!)) (<= (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq_lib.impl&%0.insert. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq_lib::impl&%0::insert")
(assert (fuel_bool_default fuel%vstd!seq_lib.impl&%0.insert.))
(assert (=> (fuel_bool fuel%vstd!seq_lib.impl&%0.insert.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (vstd!seq.Seq.add.? A&. A& (vstd!seq.Seq.push.? A&. A& (vstd!seq.Seq.subrange.? A&. A& self! (I 0) i!) a!) (vstd!seq.Seq.subrange.? A&. A& self! i! (I (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq_lib.impl&%0.insert.? A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::insert_front")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.insert_front.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.insert_front.) (forall ((ll! Poly) (i! Poly) (page_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.insert_front.? ll! i! page_id!) (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq.update.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) ll! i! (vstd!seq_lib.impl&%0.insert.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) ll! i!) (I 0) page_id!)))) :pattern ((lib!page_organization.PageOrg.impl&%4.insert_front.? ll! i! page_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::split_page")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.split_page.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.split_page.) (forall ((pre! Poly) (post! Poly) (page_id! Poly) (current_count! Poly) (target_count! Poly) (sbin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.split_page.? pre! post! page_id! current_count! target_count! sbin_idx!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)))) (%I current_count!) (%B (B false)))) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) page_id!)))) (let ((tmp_assert$2 (and tmp_assert$1 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!))))))) (and (=> tmp_assert$2 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!))))) (and (=> tmp_assert$2 (and (<= 1 (%I target_count!)) (< (%I target_count!) (%I current_count!)))) (and (=> tmp_assert$2 (and (<= 0 (%I sbin_idx!)) (<= (%I sbin_idx!) lib!config.SEGMENT_BIN_MAX.?))) (and (=> tmp_assert$2 (= (%I sbin_idx!) (lib!bin_sizes.smallest_sbin_fitting_size.? (I (Sub (%I current_count!) (%I target_count!)))))) (and (let ((next_page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) (%I target_count!)))))))) (let ((last_page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (nClip (Sub (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) (%I current_count!)) 1))))))) (let ((tmp_assert$3 (and tmp_assert$2 (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_page_id$))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))) false)) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page_id$)))) false))))) (let ((update_tmp_pages$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$ (core!option.Option./Some (I (nClip (Sub (%I current_count!) (%I target_count!))))))) (let ((tmp%%$1 (core!option.Option./Some (I 0)))) (let ((tmp%%$2 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))))))))) (let ((tmp%%$3 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))))))))))))) (let ((update_tmp_pages$2 (ite (> (Sub (%I current_count!) (%I target_count!)) 1) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1) (Poly%lib!tokens.PageId. last_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$ core!option.Option./None)) (let ((tmp%%$5 (core!option.Option./Some (I (nClip (Sub (Sub (%I current_count!) (%I target_count!)) 1)))))) (let ((tmp%%$6 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$6))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$6))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$6))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$6)))))))))))))) update_tmp_pages$3) update_tmp_pages$1))) (let ((update_tmp_unused_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) sbin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. next_page_id$)))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. next_page_id$))))))))))) (and (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (let ((first_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!))))))))) (let ((tmp_assert$4 (and tmp_assert$3 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. first_id$))))) (let ((tmp_assert$5 (and tmp_assert$4 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))) (let ((tmp_assert$6 (and tmp_assert$5 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))) (let ((tmp_assert$7 (and tmp_assert$6 (not (= first_id$ (%Poly%lib!tokens.PageId. page_id!)))))) (let ((tmp_assert$8 (and tmp_assert$7 (not (= first_id$ next_page_id$))))) (let ((tmp_assert$9 (and tmp_assert$8 (not (= first_id$ last_page_id$))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2) (Poly%lib!tokens.PageId. first_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$ (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$8 (core!option.Option./Some (Poly%lib!tokens.PageId. next_page_id$)))) (let ((tmp%%$9 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$8)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$9)))))))))))) (let ((tmp%%$10 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))))))))))) (=> tmp_assert$9 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$4)))))))))) (=> tmp_assert$3 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$2))) (let ((tmp_assert$10 (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (let ((tmp_assert$11 (let ((first_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!))))))))) (let ((tmp_assert$12 (and tmp_assert$3 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. first_id$))))) (let ((tmp_assert$13 (and tmp_assert$12 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))) (let ((tmp_assert$14 (and tmp_assert$13 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))) (let ((tmp_assert$15 (and tmp_assert$14 (not (= first_id$ (%Poly%lib!tokens.PageId. page_id!)))))) (let ((tmp_assert$16 (and tmp_assert$15 (not (= first_id$ next_page_id$))))) (let ((tmp_assert$17 (and tmp_assert$16 (not (= first_id$ last_page_id$))))) (let ((update_tmp_pages$5 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2) (Poly%lib!tokens.PageId. first_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$ (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$12 (core!option.Option./Some (Poly%lib!tokens.PageId. next_page_id$)))) (let ((tmp%%$13 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$12)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$13)))))))))))) (let ((tmp%%$14 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))))))))))) tmp_assert$17)))))))))) tmp_assert$11) tmp_assert$3))) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)))) (%I target_count!) (%B (B false))))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.impl&%4.insert_front.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx! (Poly%lib!tokens.PageId. next_page_id$)))) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$)) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$1)))))))))))))) (let ((tmp_assert$18 (let ((next_page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) (%I target_count!)))))))) (let ((tmp_assert$19 (let ((last_page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (nClip (Sub (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) (%I current_count!)) 1))))))) (let ((tmp_assert$20 (and tmp_assert$2 (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_page_id$))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))) false)) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page_id$)))) false))))) (let ((update_tmp_pages$6 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$ (core!option.Option./Some (I (nClip (Sub (%I current_count!) (%I target_count!))))))) (let ((tmp%%$16 (core!option.Option./Some (I 0)))) (let ((tmp%%$17 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))))))))) (let ((tmp%%$18 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$17)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$16)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$18))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$18))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$18))))))))))))))) (let ((update_tmp_pages$7 (ite (> (Sub (%I current_count!) (%I target_count!)) 1) (let ((update_tmp_pages$8 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$6) (Poly%lib!tokens.PageId. last_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$ core!option.Option./None)) (let ((tmp%%$20 (core!option.Option./Some (I (nClip (Sub (Sub (%I current_count!) (%I target_count!)) 1)))))) (let ((tmp%%$21 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$20)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21)))))))))))))) update_tmp_pages$8) update_tmp_pages$6))) (let ((update_tmp_unused_dlist_headers$2 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) sbin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. next_page_id$)))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. next_page_id$))))))))))) (let ((tmp_assert$21 (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (let ((tmp_assert$22 (let ((first_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!))))))))) (let ((tmp_assert$23 (and tmp_assert$20 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. first_id$))))) (let ((tmp_assert$24 (and tmp_assert$23 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))) (let ((tmp_assert$25 (and tmp_assert$24 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))) (let ((tmp_assert$26 (and tmp_assert$25 (not (= first_id$ (%Poly%lib!tokens.PageId. page_id!)))))) (let ((tmp_assert$27 (and tmp_assert$26 (not (= first_id$ next_page_id$))))) (let ((tmp_assert$28 (and tmp_assert$27 (not (= first_id$ last_page_id$))))) (let ((update_tmp_pages$9 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$7) (Poly%lib!tokens.PageId. first_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$ (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$23 (core!option.Option./Some (Poly%lib!tokens.PageId. next_page_id$)))) (let ((tmp%%$24 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$23)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$24)))))))))))) (let ((tmp%%$25 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$25))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$25))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$25))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$25))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$25))))))))))))) tmp_assert$28)))))))))) tmp_assert$22) tmp_assert$20))) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)))) (%I target_count!) (%B (B false))))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.impl&%4.insert_front.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx! (Poly%lib!tokens.PageId. next_page_id$)))) tmp_assert$21)))))))))) tmp_assert$19)))) (and (=> tmp_assert$18 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$18 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$)) (=> tmp_assert$18 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$)))))))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.split_page.? pre! post! page_id! current_count! target_count! sbin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::create_segment")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.create_segment.))
(declare-fun %%lambda%%4 (lib!tokens.SegmentId. Int Int) %%Function%%)
(assert (forall ((%%hole%%0 lib!tokens.SegmentId.) (%%hole%%1 Int) (%%hole%%2 Int) (page_id$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2) page_id$) (B (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)) %%hole%%0) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id$)))) (and (<= %%hole%%1 tmp%%$) (<= tmp%%$ %%hole%%2)))))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2) page_id$)))))
(declare-fun %%lambda%%5 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (page_id$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0) page_id$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0) page_id$)))))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.create_segment.) (forall ((pre! Poly) (post! Poly) (segment_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.create_segment.? pre! post! segment_id!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) lib!page_organization.Popped./No) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) segment_id!)) (and (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%4 (%Poly%lib!tokens.SegmentId. segment_id!) 0 lib!config.SLICES_PER_SEGMENT.?))) (Poly%fun%1. (mk_fun (%%lambda%%5 (Poly%lib!page_organization.PageData. (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%B (B false)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))))) (let ((update_tmp_segments$ (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) segment_id! (Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData./SegmentData (%I (I 0)))))))) (let ((update_tmp_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_pages$))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./SegmentCreating (%Poly%lib!tokens.SegmentId. segment_id!)))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (and (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$) (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.create_segment.? pre! post! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::allocate_popped")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.allocate_popped.))
(declare-fun %%lambda%%6 (lib!tokens.SegmentId. Int Int) %%Function%%)
(assert (forall ((%%hole%%0 lib!tokens.SegmentId.) (%%hole%%1 Int) (%%hole%%2 Int) (pid$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2) pid$) (B (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) %%hole%%0) (let ((tmp%%$3 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= %%hole%%1 tmp%%$3) (< tmp%%$3 %%hole%%2)))))) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2) pid$)))))
(declare-fun %%lambda%%7 (Dcr Type Dcr Type Poly lib!tokens.PageId. Dcr Type Dcr Type Poly core!option.Option. Int Bool core!option.Option. core!option.Option.) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 lib!tokens.PageId.) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Poly) (%%hole%%11 core!option.Option.) (%%hole%%12 Int) (%%hole%%13 Bool) (%%hole%%14 core!option.Option.) (%%hole%%15 core!option.Option.) (pid$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15) pid$) (Poly%lib!page_organization.PageData. (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 pid$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (= (%Poly%lib!tokens.PageId. pid$) %%hole%%5) %%hole%%11 (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 pid$)))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (I (nClip (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) %%hole%%12)))))) %%hole%%13 %%hole%%14 %%hole%%15))) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15) pid$)))))
(define-fun is-lib!page_organization.Popped./VeryUnready_ ((c lib!page_organization.Popped.)) Bool ((_ is lib!page_organization.Popped./VeryUnready) c))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.allocate_popped.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.allocate_popped.? pre! post!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((idx$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((fals$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((idx$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((fals$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I idx$) (I count$) (B fals$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((fals$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (=> tmp_assert$ (= fals$ false)) (let ((tmp_assert$1 (and tmp_assert$ (>= idx$ 0)))) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip idx$)))))) (let ((tmp_assert$2 (and tmp_assert$1 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$3 (and tmp_assert$2 (> count$ 0)))) (let ((tmp_assert$4 (and tmp_assert$3 (<= (Add count$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) lib!config.SLICES_PER_SEGMENT.?)))) (let ((tmp_assert$5 (and tmp_assert$4 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$1) (< tmp%%$1 (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))))))) (let ((tmp_assert$6 (and tmp_assert$5 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$2 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$2) (< tmp%%$2 (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$))))) (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (let ((changed_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%6 (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))) (Poly%fun%1. (mk_fun (%%lambda%%7 $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id$ $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (core!option.Option./Some (I (nClip count$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%B (B false)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. changed_pages$))))) (let ((tmp_assert$7 (and tmp_assert$6 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_pages$)))))) (let ((tmp_assert$8 (and tmp_assert$7 (<= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))) (Add lib!config.SLICES_PER_SEGMENT.? 1))))) (let ((update_tmp_segments$1 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. update_tmp_segments$) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData./SegmentData (%I (I (Add (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))) 1))))))))) (let ((update_tmp_pages$ new_pages$)) (let ((update_tmp_popped$ (lib!page_organization.Popped./Ready (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)) (%B (B true))))) (and (=> tmp_assert$8 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (and (=> tmp_assert$8 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$)) (=> tmp_assert$8 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$1)))))))))))))))))))))))))) (let ((tmp_assert$9 (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((tmp_assert$10 (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((idx$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((fals$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I idx$) (I count$) (B fals$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((fals$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tmp_assert$11 (and tmp_assert$ (>= idx$ 0)))) (let ((tmp_assert$12 (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip idx$)))))) (let ((tmp_assert$13 (and tmp_assert$11 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$14 (and tmp_assert$13 (> count$ 0)))) (let ((tmp_assert$15 (and tmp_assert$14 (<= (Add count$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) lib!config.SLICES_PER_SEGMENT.?)))) (let ((tmp_assert$16 (and tmp_assert$15 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$5 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$5) (< tmp%%$5 (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))))))) (let ((tmp_assert$17 (and tmp_assert$16 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$6 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$6) (< tmp%%$6 (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$))))) (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (let ((tmp_assert$18 (let ((changed_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%6 (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))) (Poly%fun%1. (mk_fun (%%lambda%%7 $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id$ $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (core!option.Option./Some (I (nClip count$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%B (B false)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))) (let ((tmp_assert$19 (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. changed_pages$))))) (let ((tmp_assert$20 (and tmp_assert$17 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_pages$)))))) (let ((tmp_assert$21 (and tmp_assert$20 (<= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))) (Add lib!config.SLICES_PER_SEGMENT.? 1))))) (let ((update_tmp_segments$2 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. update_tmp_segments$) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData./SegmentData (%I (I (Add (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))) 1))))))))) (let ((update_tmp_pages$ new_pages$)) (let ((update_tmp_popped$ (lib!page_organization.Popped./Ready (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)) (%B (B true))))) tmp_assert$21)))))))) tmp_assert$19)))) tmp_assert$18))))))))) tmp_assert$12))))))))) tmp_assert$10)))) (and (=> tmp_assert$9 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$9 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$)) (and (=> tmp_assert$9 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$)) (=> tmp_assert$9 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.allocate_popped.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::forget_about_first_page")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page.))
(define-fun is-lib!page_organization.Popped./SegmentCreating_ ((c lib!page_organization.Popped.)) Bool ((_ is lib!page_organization.Popped./SegmentCreating) c))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page.) (forall ((pre! Poly) (post! Poly) (count! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.forget_about_first_page.? pre! post! count!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (<= 1 (%I count!)) (< (%I count!) lib!config.SLICES_PER_SEGMENT.?)) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./SegmentCreating_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))) (let ((segment_id$ (ite (is-lib!page_organization.Popped./SegmentCreating_ tmp_for_match_0$) (let ((segment_id$2 (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) segment_id$2) (%Poly%lib!tokens.SegmentId. (vstd!pervasive.arbitrary.? $ TYPE%lib!tokens.SegmentId.))))) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.SegmentId. segment_id$))))) (let ((tmp_assert$2 (and tmp_assert$1 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) segment_id$) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= 0 tmp%%$) (< tmp%%$ (%I count!))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))))))) (let ((tmp_assert$3 (and tmp_assert$2 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) segment_id$) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= 0 tmp%%$) (< tmp%%$ (%I count!))))) (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I 0))))) (let ((tmp_assert$4 (and tmp_assert$3 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$5 (and tmp_assert$4 (<= (Add (%I count!) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) lib!config.SLICES_PER_SEGMENT.?)))) (let ((changed_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%6 segment_id$ 0 (%I count!)))) (Poly%fun%1. (mk_fun (%%lambda%%7 $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id$ $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (core!option.Option./Some (I (nClip (%I count!)))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%B (B false)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. changed_pages$))))) (let ((tmp_assert$6 (and tmp_assert$5 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_pages$)))))) (let ((update_tmp_pages$ new_pages$)) (let ((tmp_assert$7 (and tmp_assert$6 (<= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))) (Add lib!config.SLICES_PER_SEGMENT.? 1))))) (let ((update_tmp_segments$1 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. update_tmp_segments$) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData./SegmentData (%I (I (Add (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))) 1))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I count!) (%I (I (Sub lib!config.SLICES_PER_SEGMENT.? (%I count!)))) (%B (B true))))) (and (=> tmp_assert$7 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (and (=> tmp_assert$7 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$1)) (=> tmp_assert$7 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$)))))))))))))))))))) (let ((tmp_assert$8 (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((tmp_assert$9 (let ((segment_id$ (ite (is-lib!page_organization.Popped./SegmentCreating_ tmp_for_match_0$) (let ((segment_id$4 (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) segment_id$4) (%Poly%lib!tokens.SegmentId. (vstd!pervasive.arbitrary.? $ TYPE%lib!tokens.SegmentId.))))) (let ((tmp_assert$10 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.SegmentId. segment_id$))))) (let ((tmp_assert$11 (and tmp_assert$10 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) segment_id$) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= 0 tmp%%$) (< tmp%%$ (%I count!))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))))))) (let ((tmp_assert$12 (and tmp_assert$11 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) segment_id$) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= 0 tmp%%$) (< tmp%%$ (%I count!))))) (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (let ((tmp_assert$13 (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I 0))))) (let ((tmp_assert$14 (and tmp_assert$12 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$15 (and tmp_assert$14 (<= (Add (%I count!) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) lib!config.SLICES_PER_SEGMENT.?)))) (let ((tmp_assert$16 (let ((changed_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%6 segment_id$ 0 (%I count!)))) (Poly%fun%1. (mk_fun (%%lambda%%7 $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id$ $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (core!option.Option./Some (I (nClip (%I count!)))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%B (B false)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))) (let ((tmp_assert$17 (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. changed_pages$))))) (let ((tmp_assert$18 (and tmp_assert$15 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_pages$)))))) (let ((update_tmp_pages$ new_pages$)) (let ((tmp_assert$19 (and tmp_assert$18 (<= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))) (Add lib!config.SLICES_PER_SEGMENT.? 1))))) (let ((update_tmp_segments$2 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. update_tmp_segments$) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData./SegmentData (%I (I (Add (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))) 1))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I count!) (%I (I (Sub lib!config.SLICES_PER_SEGMENT.? (%I count!)))) (%B (B true))))) tmp_assert$19)))))))) tmp_assert$17)))) tmp_assert$16)))))) tmp_assert$13))))))) tmp_assert$9)))) (and (=> tmp_assert$8 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$8 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$)) (and (=> tmp_assert$8 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$)) (=> tmp_assert$8 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.forget_about_first_page.? pre! post! count!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::forget_about_first_page2")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page2.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page2.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.forget_about_first_page2.? pre! post!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I start$) (I count$) (B tru$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tru$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (=> tmp_assert$ (= tru$ true)) (let ((tmp_assert$1 (and tmp_assert$ (>= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$)))) 1)))) (let ((update_tmp_segments$1 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. update_tmp_segments$) (Poly%lib!tokens.SegmentId. segment_id$) (Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData./SegmentData (%I (I (Sub (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$)))) 1))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I start$)) (%I (I count$)) (%B (B false))))) (and (=> tmp_assert$1 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (=> tmp_assert$1 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$1)))))))))))))) (let ((tmp_assert$2 (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((tmp_assert$3 (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I start$) (I count$) (B tru$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tru$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tmp_assert$4 (and tmp_assert$ (>= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$)))) 1)))) (let ((update_tmp_segments$2 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. update_tmp_segments$) (Poly%lib!tokens.SegmentId. segment_id$) (Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData./SegmentData (%I (I (Sub (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$)))) 1))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I start$)) (%I (I count$)) (%B (B false))))) tmp_assert$4)))))))))) tmp_assert$3)))) (and (=> tmp_assert$2 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$2 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$)) (and (=> tmp_assert$2 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$)) (and (=> tmp_assert$2 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$)) (=> tmp_assert$2 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.forget_about_first_page2.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::clear_ec")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.clear_ec.))
(define-fun is-lib!page_organization.Popped./ExtraCount_ ((c lib!page_organization.Popped.)) Bool ((_ is lib!page_organization.Popped./ExtraCount) c))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.clear_ec.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.clear_ec.? pre! post!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./ExtraCount_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./ExtraCount/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))) (let ((segment_id$ (ite (is-lib!page_organization.Popped./ExtraCount_ tmp_for_match_0$) (let ((segment_id$2 (lib!page_organization.Popped./ExtraCount/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) segment_id$2) (%Poly%lib!tokens.SegmentId. (vstd!pervasive.arbitrary.? $ TYPE%lib!tokens.SegmentId.))))) (let ((tmp_assert$1 (and tmp_assert$ (>= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$)))) 1)))) (let ((update_tmp_segments$1 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. update_tmp_segments$) (Poly%lib!tokens.SegmentId. segment_id$) (Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData./SegmentData (%I (I (Sub (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$)))) 1))))))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) (and (=> tmp_assert$1 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (=> tmp_assert$1 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$1))))))))) (let ((tmp_assert$2 (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((tmp_assert$3 (let ((segment_id$ (ite (is-lib!page_organization.Popped./ExtraCount_ tmp_for_match_0$) (let ((segment_id$4 (lib!page_organization.Popped./ExtraCount/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) segment_id$4) (%Poly%lib!tokens.SegmentId. (vstd!pervasive.arbitrary.? $ TYPE%lib!tokens.SegmentId.))))) (let ((tmp_assert$4 (and tmp_assert$ (>= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$)))) 1)))) (let ((update_tmp_segments$2 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. update_tmp_segments$) (Poly%lib!tokens.SegmentId. segment_id$) (Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData./SegmentData (%I (I (Sub (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$)))) 1))))))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) tmp_assert$4)))))) tmp_assert$3)))) (and (=> tmp_assert$2 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$2 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$)) (and (=> tmp_assert$2 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$)) (and (=> tmp_assert$2 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$)) (=> tmp_assert$2 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.clear_ec.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::bin_sizes::valid_sbin_idx")
(assert (fuel_bool_default fuel%lib!bin_sizes.valid_sbin_idx.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.valid_sbin_idx.) (forall ((sbin_idx! Poly)) (! (= (lib!bin_sizes.valid_sbin_idx.? sbin_idx!) (and (<= 0 (%I sbin_idx!)) (<= (%I sbin_idx!) lib!config.SEGMENT_BIN_MAX.?))) :pattern ((lib!bin_sizes.valid_sbin_idx.? sbin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::free_to_unused_queue")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.free_to_unused_queue.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.free_to_unused_queue.) (forall ((pre! Poly) (post! Poly) (sbin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.free_to_unused_queue.? pre! post! sbin_idx!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (lib!bin_sizes.valid_sbin_idx.? sbin_idx!) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((ec$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((ec$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I start$) (I count$) (B ec$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((ec$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.SegmentId. segment_id$))))) (let ((tmp_assert$2 (and tmp_assert$1 (let ((tmp%%$1 (Add start$ count$))) (and (and (<= 1 start$) (< start$ tmp%%$1)) (<= tmp%%$1 lib!config.SLICES_PER_SEGMENT.?)))))) (and (=> tmp_assert$2 (= (%I sbin_idx!) (lib!bin_sizes.smallest_sbin_fitting_size.? (I count$)))) (let ((first_page$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip start$)))))) (let ((last_page$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Sub (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. first_page$))) count$) 1))))))) (let ((tmp_assert$3 (and tmp_assert$2 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. first_page$))))) (let ((tmp_assert$4 (and tmp_assert$3 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_page$)))))))) (let ((tmp_assert$5 (and tmp_assert$4 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_page$))))) (let ((tmp_assert$6 (and tmp_assert$5 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page$)))))))) (let ((tmp_assert$7 (and tmp_assert$6 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_page$)))))))) (let ((tmp_assert$8 (and tmp_assert$7 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_page$)))))))) (let ((tmp_assert$9 (and tmp_assert$8 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page$)))))))) (let ((update_tmp_pages$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. first_page$) (Poly%lib!page_organization.PageData. (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))))))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (I (nClip count$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (I 0)))) (%B (B false)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))) (let ((tmp%%$2 (ite (> count$ 1) (let ((tmp_assert$10 (and tmp_assert$9 (not (= last_page$ first_page$))))) (let ((update_tmp_pages$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1) (Poly%lib!tokens.PageId. last_page$) (Poly%lib!page_organization.PageData. (let ((tmp%%$3 (core!option.Option./Some (I (nClip (Sub count$ 1)))))) (let ((tmp%%$4 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$3)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))))))))))) (tuple%2./tuple%2 (B tmp_assert$10) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2)))) (tuple%2./tuple%2 (B tmp_assert$9) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1))))) (let ((tmp_assert$11 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2)))))) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2)))))) (let ((update_tmp_unused_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) sbin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. first_page$)))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. first_page$))))))))))) (and (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (let ((queue_first_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!))))))))) (let ((tmp_assert$12 (and tmp_assert$11 (not (= queue_first_page_id$ first_page$))))) (let ((tmp_assert$13 (and tmp_assert$12 (not (= queue_first_page_id$ last_page$))))) (let ((tmp_assert$14 (and tmp_assert$13 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. queue_first_page_id$))))) (let ((tmp_assert$15 (and tmp_assert$14 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$)))))))) (let ((tmp_assert$16 (and tmp_assert$15 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$)))))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$3) (Poly%lib!tokens.PageId. queue_first_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$5 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$6 (core!option.Option./Some (Poly%lib!tokens.PageId. first_page$)))) (let ((tmp%%$7 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$7)))))))))))) (let ((tmp%%$8 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))))))))))) (=> tmp_assert$16 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$4))))))))) (=> tmp_assert$11 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$3))) (let ((tmp_assert$17 (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (let ((tmp_assert$18 (let ((queue_first_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!))))))))) (let ((tmp_assert$19 (and tmp_assert$11 (not (= queue_first_page_id$ first_page$))))) (let ((tmp_assert$20 (and tmp_assert$19 (not (= queue_first_page_id$ last_page$))))) (let ((tmp_assert$21 (and tmp_assert$20 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. queue_first_page_id$))))) (let ((tmp_assert$22 (and tmp_assert$21 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$)))))))) (let ((tmp_assert$23 (and tmp_assert$22 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$)))))))) (let ((update_tmp_pages$5 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$3) (Poly%lib!tokens.PageId. queue_first_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$9 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$10 (core!option.Option./Some (Poly%lib!tokens.PageId. first_page$)))) (let ((tmp%%$11 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$10)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$11)))))))))))) (let ((tmp%%$12 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$9)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$12))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$12))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$12))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$12))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$12))))))))))))) tmp_assert$23))))))))) tmp_assert$18) tmp_assert$11))) (let ((update_tmp_popped$ (ite ec$ (lib!page_organization.Popped./ExtraCount (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$))) lib!page_organization.Popped./No))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.impl&%4.insert_front.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx! (Poly%lib!tokens.PageId. first_page$)))) (and (=> tmp_assert$17 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$)) (and (=> tmp_assert$17 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (=> tmp_assert$17 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$1)))))))))))))))))))))))))))))))) (let ((tmp_assert$24 (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((tmp_assert$25 (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((ec$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I start$) (I count$) (B ec$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((ec$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tmp_assert$26 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.SegmentId. segment_id$))))) (let ((tmp_assert$27 (and tmp_assert$26 (let ((tmp%%$14 (Add start$ count$))) (and (and (<= 1 start$) (< start$ tmp%%$14)) (<= tmp%%$14 lib!config.SLICES_PER_SEGMENT.?)))))) (let ((tmp_assert$28 (let ((first_page$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip start$)))))) (let ((tmp_assert$29 (let ((last_page$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Sub (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. first_page$))) count$) 1))))))) (let ((tmp_assert$30 (and tmp_assert$27 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. first_page$))))) (let ((tmp_assert$31 (and tmp_assert$30 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_page$)))))))) (let ((tmp_assert$32 (and tmp_assert$31 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_page$))))) (let ((tmp_assert$33 (and tmp_assert$32 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page$)))))))) (let ((tmp_assert$34 (and tmp_assert$33 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_page$)))))))) (let ((tmp_assert$35 (and tmp_assert$34 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_page$)))))))) (let ((tmp_assert$36 (and tmp_assert$35 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page$)))))))) (let ((update_tmp_pages$6 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. first_page$) (Poly%lib!page_organization.PageData. (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))))))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (I (nClip count$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (I 0)))) (%B (B false)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))) (let ((tmp%%$15 (ite (> count$ 1) (let ((tmp_assert$37 (and tmp_assert$36 (not (= last_page$ first_page$))))) (let ((update_tmp_pages$7 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$6) (Poly%lib!tokens.PageId. last_page$) (Poly%lib!page_organization.PageData. (let ((tmp%%$16 (core!option.Option./Some (I (nClip (Sub count$ 1)))))) (let ((tmp%%$17 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$16)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))))))))))) (tuple%2./tuple%2 (B tmp_assert$37) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$7)))) (tuple%2./tuple%2 (B tmp_assert$36) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$6))))) (let ((tmp_assert$38 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$15)))))) (let ((update_tmp_pages$8 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$15)))))) (let ((update_tmp_unused_dlist_headers$2 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) sbin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. first_page$)))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. first_page$))))))))))) (let ((tmp_assert$39 (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (let ((tmp_assert$40 (let ((queue_first_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!))))))))) (let ((tmp_assert$41 (and tmp_assert$38 (not (= queue_first_page_id$ first_page$))))) (let ((tmp_assert$42 (and tmp_assert$41 (not (= queue_first_page_id$ last_page$))))) (let ((tmp_assert$43 (and tmp_assert$42 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. queue_first_page_id$))))) (let ((tmp_assert$44 (and tmp_assert$43 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$)))))))) (let ((tmp_assert$45 (and tmp_assert$44 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$)))))))) (let ((update_tmp_pages$9 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$8) (Poly%lib!tokens.PageId. queue_first_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$18 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$19 (core!option.Option./Some (Poly%lib!tokens.PageId. first_page$)))) (let ((tmp%%$20 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$19)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$20)))))))))))) (let ((tmp%%$21 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$18)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))))))))))) tmp_assert$45))))))))) tmp_assert$40) tmp_assert$38))) (let ((update_tmp_popped$ (ite ec$ (lib!page_organization.Popped./ExtraCount (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$))) lib!page_organization.Popped./No))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.impl&%4.insert_front.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx! (Poly%lib!tokens.PageId. first_page$)))) tmp_assert$39)))))))))))))))))) tmp_assert$29)))) tmp_assert$28)))))))))) tmp_assert$25)))) (and (=> tmp_assert$24 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$24 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$)) (=> tmp_assert$24 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$)))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.free_to_unused_queue.? pre! post! sbin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::set_range_to_used")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_used.))
(declare-fun %%lambda%%8 (lib!tokens.PageId. core!option.Option. core!option.Option. Dcr Type Dcr Type Poly Bool) %%Function%%)
(assert (forall ((%%hole%%0 lib!tokens.PageId.) (%%hole%%1 core!option.Option.) (%%hole%%2 core!option.Option.) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Bool) (pid$ Poly)) (! (= (%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) pid$) (Poly%lib!page_organization.PageData. (let ((tmp%%$5 (ite (= (%Poly%lib!tokens.PageId. pid$) %%hole%%0) %%hole%%1 %%hole%%2))) (let ((tmp%%$6 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 pid$)))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$6))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$6))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$6))))) %%hole%%8 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$6))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5))))))) :pattern ((%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) pid$)))))
(define-fun is-lib!page_organization.Popped./Ready_ ((c lib!page_organization.Popped.)) Bool ((_ is lib!page_organization.Popped./Ready) c))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_used.) (forall ((pre! Poly) (post! Poly) (page_header_kind! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.set_range_to_used.? pre! post! page_header_kind!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./Ready_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./Ready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Ready_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./Ready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B b$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((b$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$2 (and tmp_assert$1 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((tmp_assert$3 (and tmp_assert$2 (> count$ 0)))) (let ((tmp_assert$4 (and tmp_assert$3 (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0)))))) (let ((tmp_assert$5 (and tmp_assert$4 (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) 0))))) (let ((tmp_assert$6 (and tmp_assert$5 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$1) (< tmp%%$1 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))))))) (let ((tmp_assert$7 (and tmp_assert$6 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$2 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$2) (< tmp%%$2 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (let ((tmp_assert$8 (and tmp_assert$7 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$3 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$3) (< tmp%%$3 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))) (= (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (let ((changed_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%6 (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$))))) (Poly%fun%1. (mk_fun (%%lambda%%8 page_id$ (core!option.Option./Some page_header_kind!) core!option.Option./None $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (%B (B true))))))))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. changed_pages$))))) (let ((tmp_assert$9 (and tmp_assert$8 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_pages$)))))) (let ((update_tmp_pages$ new_pages$)) (let ((update_tmp_popped$ (lib!page_organization.Popped./Used (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)) (%B (B b$))))) (and (=> tmp_assert$9 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (=> tmp_assert$9 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$)))))))))))))))))))))) (let ((tmp_assert$10 (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((tmp_assert$11 (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Ready_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./Ready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B b$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((b$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp_assert$12 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$13 (and tmp_assert$12 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp_assert$14 (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((tmp_assert$15 (and tmp_assert$13 (> count$ 0)))) (let ((tmp_assert$16 (and tmp_assert$15 (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0)))))) (let ((tmp_assert$17 (and tmp_assert$16 (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) 0))))) (let ((tmp_assert$18 (and tmp_assert$17 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$8 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$8) (< tmp%%$8 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))))))) (let ((tmp_assert$19 (and tmp_assert$18 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$9 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$9) (< tmp%%$9 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (let ((tmp_assert$20 (and tmp_assert$19 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$10 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$10) (< tmp%%$10 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))) (= (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (let ((tmp_assert$21 (let ((changed_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%6 (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$))))) (Poly%fun%1. (mk_fun (%%lambda%%8 page_id$ (core!option.Option./Some page_header_kind!) core!option.Option./None $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (%B (B true))))))))) (let ((tmp_assert$22 (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. changed_pages$))))) (let ((tmp_assert$23 (and tmp_assert$20 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_pages$)))))) (let ((update_tmp_pages$ new_pages$)) (let ((update_tmp_popped$ (lib!page_organization.Popped./Used (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)) (%B (B b$))))) tmp_assert$23)))))) tmp_assert$22)))) tmp_assert$21)))))))))) tmp_assert$14)))))))) tmp_assert$11)))) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$)) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$)) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$)) (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.set_range_to_used.? pre! post! page_header_kind!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::set_range_to_not_used")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_not_used.))
(declare-fun %%lambda%%9 (Dcr Type Dcr Type Poly Bool core!option.Option. core!option.Option. core!option.Option.) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Bool) (%%hole%%6 core!option.Option.) (%%hole%%7 core!option.Option.) (%%hole%%8 core!option.Option.) (pid$ Poly)) (! (= (%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) pid$) (Poly%lib!page_organization.PageData. (let ((tmp%%$5 %%hole%%8)) (let ((tmp%%$6 %%hole%%7)) (let ((tmp%%$7 %%hole%%6)) (let ((tmp%%$8 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 pid$)))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6)) %%hole%%5 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5))))))))) :pattern ((%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) pid$)))))
(define-fun is-lib!page_organization.Popped./Used_ ((c lib!page_organization.Popped.)) Bool ((_ is lib!page_organization.Popped./Used) c))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_not_used.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.set_range_to_not_used.? pre! post!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B b$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((b$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$2 (and tmp_assert$1 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((tmp_assert$3 (and tmp_assert$2 (> count$ 0)))) (let ((tmp_assert$4 (and tmp_assert$3 (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0)))))) (let ((tmp_assert$5 (and tmp_assert$4 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp_assert$6 (and tmp_assert$5 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$1) (< tmp%%$1 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))))))) (let ((tmp_assert$7 (and tmp_assert$6 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$2 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$2) (< tmp%%$2 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (let ((tmp_assert$8 (and tmp_assert$7 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$3 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$3) (< tmp%%$3 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))) (= (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (let ((changed_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%6 (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$))))) (Poly%fun%1. (mk_fun (%%lambda%%9 $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (%B (B false)) core!option.Option./None core!option.Option./None core!option.Option./None))))))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. changed_pages$))))) (let ((tmp_assert$9 (and tmp_assert$8 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_pages$)))))) (let ((update_tmp_pages$ new_pages$)) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))) (%I (I count$)) (%B (B b$))))) (and (=> tmp_assert$9 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (=> tmp_assert$9 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$)))))))))))))))))))))) (let ((tmp_assert$10 (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((tmp_assert$11 (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B b$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((b$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp_assert$12 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$13 (and tmp_assert$12 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp_assert$14 (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((tmp_assert$15 (and tmp_assert$13 (> count$ 0)))) (let ((tmp_assert$16 (and tmp_assert$15 (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0)))))) (let ((tmp_assert$17 (and tmp_assert$16 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp_assert$18 (and tmp_assert$17 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$10 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$10) (< tmp%%$10 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))))))) (let ((tmp_assert$19 (and tmp_assert$18 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$11 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$11) (< tmp%%$11 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (let ((tmp_assert$20 (and tmp_assert$19 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$12 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$12) (< tmp%%$12 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))) (= (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (let ((tmp_assert$21 (let ((changed_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%6 (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$))))) (Poly%fun%1. (mk_fun (%%lambda%%9 $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (%B (B false)) core!option.Option./None core!option.Option./None core!option.Option./None))))))) (let ((tmp_assert$22 (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. changed_pages$))))) (let ((tmp_assert$23 (and tmp_assert$20 (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_pages$)))))) (let ((update_tmp_pages$ new_pages$)) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))) (%I (I count$)) (%B (B b$))))) tmp_assert$23)))))) tmp_assert$22)))) tmp_assert$21)))))))))) tmp_assert$14)))))))) tmp_assert$11)))) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$)) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$)) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$)) (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.set_range_to_not_used.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::config::BIN_HUGE")
(assert (fuel_bool_default fuel%lib!config.BIN_HUGE.))
(assert (=> (fuel_bool fuel%lib!config.BIN_HUGE.) (= lib!config.BIN_HUGE.? 73)))
(assert (uInv 64 lib!config.BIN_HUGE.?))
(set-info :comment ";; Function-Axioms lib::bin_sizes::valid_bin_idx")
(assert (fuel_bool_default fuel%lib!bin_sizes.valid_bin_idx.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.valid_bin_idx.) (forall ((bin_idx! Poly)) (! (= (lib!bin_sizes.valid_bin_idx.? bin_idx!) (and (<= 1 (%I bin_idx!)) (<= (%I bin_idx!) lib!config.BIN_HUGE.?))) :pattern ((lib!bin_sizes.valid_bin_idx.? bin_idx!))))))
(set-info :comment ";; Function-Axioms lib::config::BIN_FULL")
(assert (fuel_bool_default fuel%lib!config.BIN_FULL.))
(assert (=> (fuel_bool fuel%lib!config.BIN_FULL.) (= lib!config.BIN_FULL.? (uClip 64 (Add lib!config.BIN_HUGE.? 1)))))
(assert (uInv 64 lib!config.BIN_FULL.?))
(set-info :comment ";; Function-Specs lib::bin_sizes::size_of_bin")
(declare-fun req%lib!bin_sizes.size_of_bin. (Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((bin_idx! Poly)) (! (= (req%lib!bin_sizes.size_of_bin. bin_idx!) (=> %%global_location_label%%10 (lib!bin_sizes.valid_bin_idx.? bin_idx!))) :pattern ((req%lib!bin_sizes.size_of_bin. bin_idx!)))))
(set-info :comment ";; Function-Axioms lib::bin_sizes::size_of_bin")
(assert (forall ((bin_idx! Poly)) (! (=> (has_type bin_idx! INT) (<= 0 (lib!bin_sizes.size_of_bin.? bin_idx!))) :pattern ((lib!bin_sizes.size_of_bin.? bin_idx!)))))
(set-info :comment ";; Function-Axioms lib::config::SMALL_PAGE_SHIFT")
(assert (fuel_bool_default fuel%lib!config.SMALL_PAGE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.SMALL_PAGE_SHIFT.) (= lib!config.SMALL_PAGE_SHIFT.? lib!config.SLICE_SHIFT.?)))
(assert (uInv 64 lib!config.SMALL_PAGE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::MEDIUM_PAGE_SHIFT")
(assert (fuel_bool_default fuel%lib!config.MEDIUM_PAGE_SHIFT.))
(assert (=> (fuel_bool fuel%lib!config.MEDIUM_PAGE_SHIFT.) (= lib!config.MEDIUM_PAGE_SHIFT.? (uClip 64 (Add 3 lib!config.SMALL_PAGE_SHIFT.?)))))
(assert (uInv 64 lib!config.MEDIUM_PAGE_SHIFT.?))
(set-info :comment ";; Function-Axioms lib::config::MEDIUM_PAGE_SIZE")
(assert (fuel_bool_default fuel%lib!config.MEDIUM_PAGE_SIZE.))
(assert (=> (fuel_bool fuel%lib!config.MEDIUM_PAGE_SIZE.) (= lib!config.MEDIUM_PAGE_SIZE.? (uClip 64 (bitshl (I 1) (I lib!config.MEDIUM_PAGE_SHIFT.?))))))
(assert (uInv 64 lib!config.MEDIUM_PAGE_SIZE.?))
(set-info :comment ";; Function-Axioms lib::config::MEDIUM_OBJ_SIZE_MAX")
(assert (fuel_bool_default fuel%lib!config.MEDIUM_OBJ_SIZE_MAX.))
(assert (=> (fuel_bool fuel%lib!config.MEDIUM_OBJ_SIZE_MAX.) (= lib!config.MEDIUM_OBJ_SIZE_MAX.? (uClip 64 (EucDiv lib!config.MEDIUM_PAGE_SIZE.? 4)))))
(assert (uInv 64 lib!config.MEDIUM_OBJ_SIZE_MAX.?))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::into_used_list")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.into_used_list.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.into_used_list.) (forall ((pre! Poly) (post! Poly) (bin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.into_used_list.? pre! post! bin_idx!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (or (lib!bin_sizes.valid_bin_idx.? bin_idx!) (= (%I bin_idx!) lib!config.BIN_FULL.?)) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B tru$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tru$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (=> tmp_assert$ (= tru$ true)) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$2 (and tmp_assert$1 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (and (let ((tmp%%$1 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((i$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (=> tmp_assert$2 (and (and (and (=> (not (= (%I bin_idx!) lib!config.BIN_FULL.?)) (= (%I bin_idx!) i$)) (lib!bin_sizes.valid_bin_idx.? (I i$))) (= bsize$ (lib!bin_sizes.size_of_bin.? (I i$)))) (<= bsize$ lib!config.MEDIUM_OBJ_SIZE_MAX.?)))))) (let ((update_tmp_used_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_used_dlist_headers$) bin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$))))))))))) (let ((tmp%%$2 (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (let ((tmp%%$3 (let ((first_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))))))) (let ((tmp_assert$3 (and tmp_assert$2 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. first_id$))))) (let ((tmp_assert$4 (and tmp_assert$3 (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$))))))) (let ((tmp_assert$5 (and tmp_assert$4 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))) (let ((tmp_assert$6 (and tmp_assert$5 (not (= first_id$ page_id$))))) (let ((update_tmp_pages$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. first_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$4 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$5 (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$6 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$6)))))))))))) (let ((tmp%%$7 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$4)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))))))))))) (tuple%2./tuple%2 (B tmp_assert$6) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1)))))))))) (let ((tmp_assert$7 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$3)))))) (let ((update_tmp_pages$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$3)))))) (tuple%2./tuple%2 (B tmp_assert$7) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2))))) (tuple%2./tuple%2 (B tmp_assert$2) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$))))) (let ((tmp_assert$8 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2)))))) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2)))))) (let ((tmp_assert$9 (and tmp_assert$8 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$10 (and tmp_assert$9 (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))))) (let ((tmp_assert$11 (and tmp_assert$10 (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0)))))) (let ((tmp_assert$12 (and tmp_assert$11 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$3) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$8 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))))))))) (let ((tmp%%$9 (core!option.Option./Some (B (= (%I bin_idx!) lib!config.BIN_FULL.?))))) (let ((tmp%%$10 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$8)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$9)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10)))))))))))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.impl&%4.insert_front.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx! (Poly%lib!tokens.PageId. page_id$)))) (and (=> tmp_assert$12 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$12 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (and (=> tmp_assert$12 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$4)) (=> tmp_assert$12 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$1))))))))))))))))))))))))) (let ((tmp_assert$13 (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((tmp_assert$14 (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B tru$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tru$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp_assert$15 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$16 (and tmp_assert$15 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((update_tmp_used_dlist_headers$2 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_used_dlist_headers$) bin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$))))))))))) (let ((tmp%%$12 (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (let ((tmp%%$13 (let ((first_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))))))) (let ((tmp_assert$17 (and tmp_assert$16 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. first_id$))))) (let ((tmp_assert$18 (and tmp_assert$17 (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$))))))) (let ((tmp_assert$19 (and tmp_assert$18 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))) (let ((tmp_assert$20 (and tmp_assert$19 (not (= first_id$ page_id$))))) (let ((update_tmp_pages$5 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. first_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$14 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$15 (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$16 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$15)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$16)))))))))))) (let ((tmp%%$17 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$14)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))))))))))) (tuple%2./tuple%2 (B tmp_assert$20) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$5)))))))))) (let ((tmp_assert$21 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$13)))))) (let ((update_tmp_pages$6 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$13)))))) (tuple%2./tuple%2 (B tmp_assert$21) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$6))))) (tuple%2./tuple%2 (B tmp_assert$16) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$))))) (let ((tmp_assert$22 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$12)))))) (let ((update_tmp_pages$7 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$12)))))) (let ((tmp_assert$23 (and tmp_assert$22 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$24 (and tmp_assert$23 (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))))) (let ((tmp_assert$25 (and tmp_assert$24 (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0)))))) (let ((tmp_assert$26 (and tmp_assert$25 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((update_tmp_pages$8 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$7) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$18 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))))))))) (let ((tmp%%$19 (core!option.Option./Some (B (= (%I bin_idx!) lib!config.BIN_FULL.?))))) (let ((tmp%%$20 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$18)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$20))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$20))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$20))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$19)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$20)))))))))))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.impl&%4.insert_front.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx! (Poly%lib!tokens.PageId. page_id$)))) tmp_assert$26)))))))))))))))))) tmp_assert$14)))) (and (=> tmp_assert$13 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$)) (and (=> tmp_assert$13 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$)) (=> tmp_assert$13 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.into_used_list.? pre! post! bin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::insert_back")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.insert_back.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.insert_back.) (forall ((ll! Poly) (i! Poly) (page_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.insert_back.? ll! i! page_id!) (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq.update.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) ll! i! (vstd!seq.Seq.push.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) ll! i!) page_id!)))) :pattern ((lib!page_organization.PageOrg.impl&%4.insert_back.? ll! i! page_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::into_used_list_back")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back.) (forall ((pre! Poly) (post! Poly) (bin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.into_used_list_back.? pre! post! bin_idx!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (or (lib!bin_sizes.valid_bin_idx.? bin_idx!) (= (%I bin_idx!) lib!config.BIN_FULL.?)) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B tru$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tru$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (=> tmp_assert$ (= tru$ true)) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$2 (and tmp_assert$1 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (and (let ((tmp%%$1 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((i$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (=> tmp_assert$2 (and (and (and (=> (not (= (%I bin_idx!) lib!config.BIN_FULL.?)) (= (%I bin_idx!) i$)) (lib!bin_sizes.valid_bin_idx.? (I i$))) (= bsize$ (lib!bin_sizes.size_of_bin.? (I i$)))) (<= bsize$ lib!config.MEDIUM_OBJ_SIZE_MAX.?)))))) (let ((tmp_assert$3 (and tmp_assert$2 (= (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))))))) (let ((update_tmp_used_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_used_dlist_headers$) bin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((tmp%%$2 (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (let ((tmp%%$3 (let ((last_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))))))) (let ((tmp_assert$4 (and tmp_assert$3 (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_id$)) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))) (not (= last_id$ page_id$)))))) (let ((update_tmp_pages$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. last_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$4 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$5 (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$6 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$6))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5))))))))) (let ((tmp%%$7 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$4)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))))))))))) (tuple%2./tuple%2 (B tmp_assert$4) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1))))))) (let ((tmp_assert$5 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$3)))))) (let ((update_tmp_pages$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$3)))))) (tuple%2./tuple%2 (B tmp_assert$5) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2))))) (tuple%2./tuple%2 (B tmp_assert$3) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$))))) (let ((tmp_assert$6 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2)))))) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$2)))))) (let ((tmp_assert$7 (and tmp_assert$6 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$8 (and tmp_assert$7 (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))))) (let ((tmp_assert$9 (and tmp_assert$8 (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0)))))) (let ((tmp_assert$10 (and tmp_assert$9 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$3) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$8 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))) (let ((tmp%%$9 (core!option.Option./Some (B (= (%I bin_idx!) lib!config.BIN_FULL.?))))) (let ((tmp%%$10 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$8)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$9)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10)))))))))))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.impl&%4.insert_back.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx! (Poly%lib!tokens.PageId. page_id$)))) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (and (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$4)) (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$1)))))))))))))))))))))))))) (let ((tmp_assert$11 (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((tmp_assert$12 (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B tru$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tru$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp_assert$13 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$14 (and tmp_assert$13 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp_assert$15 (and tmp_assert$14 (= (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))))))) (let ((update_tmp_used_dlist_headers$2 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_used_dlist_headers$) bin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((tmp%%$12 (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (let ((tmp%%$13 (let ((last_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))))))) (let ((tmp_assert$16 (and tmp_assert$15 (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_id$)) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))) (not (= last_id$ page_id$)))))) (let ((update_tmp_pages$5 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. last_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$14 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$15 (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$16 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$16))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$15))))))))) (let ((tmp%%$17 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$14)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$17))))))))))))) (tuple%2./tuple%2 (B tmp_assert$16) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$5))))))) (let ((tmp_assert$17 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$13)))))) (let ((update_tmp_pages$6 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$13)))))) (tuple%2./tuple%2 (B tmp_assert$17) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$6))))) (tuple%2./tuple%2 (B tmp_assert$15) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$))))) (let ((tmp_assert$18 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$12)))))) (let ((update_tmp_pages$7 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$12)))))) (let ((tmp_assert$19 (and tmp_assert$18 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$20 (and tmp_assert$19 (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))))) (let ((tmp_assert$21 (and tmp_assert$20 (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0)))))) (let ((tmp_assert$22 (and tmp_assert$21 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((update_tmp_pages$8 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$7) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$18 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))) (let ((tmp%%$19 (core!option.Option./Some (B (= (%I bin_idx!) lib!config.BIN_FULL.?))))) (let ((tmp%%$20 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$18)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$20))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$20))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$20))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$19)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$20)))))))))))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.impl&%4.insert_back.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx! (Poly%lib!tokens.PageId. page_id$)))) tmp_assert$22))))))))))))))))))) tmp_assert$12)))) (and (=> tmp_assert$11 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$)) (and (=> tmp_assert$11 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$)) (=> tmp_assert$11 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.into_used_list_back.? pre! post! bin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::valid_used_page")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.valid_used_page.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.valid_used_page.) (forall ((self! Poly) (page_id! Poly) (bin_idx! Poly) (list_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.valid_used_page.? self! page_id! bin_idx! list_idx!) (and (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id!) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))) true)) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))) (core!option.Option./Some (I 0)))) (or (lib!bin_sizes.valid_bin_idx.? bin_idx!) (= (%I bin_idx!) lib!config.BIN_FULL.?))) (and (<= 0 (%I list_idx!)) (< (%I list_idx!) (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) bin_idx!))))) (= (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) bin_idx!) list_idx!) page_id!)) (let ((tmp%%$ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))))) (and (not (is-core!option.Option./None_ tmp%%$)) (let ((bin$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$))))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$))))))) (and (and (lib!bin_sizes.valid_bin_idx.? (I bin$)) (= (lib!bin_sizes.size_of_bin.? (I bin$)) bsize$)) (=> (not (= (%I bin_idx!) lib!config.BIN_FULL.?)) (= (%I bin_idx!) bin$))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.valid_used_page.? self! page_id! bin_idx! list_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::out_of_used_list")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.out_of_used_list.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.out_of_used_list.) (forall ((pre! Poly) (post! Poly) (page_id! Poly) (bin_idx! Poly) (list_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.out_of_used_list.? pre! post! page_id! bin_idx! list_idx!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) lib!page_organization.Popped./No) (and (lib!page_organization.PageOrg.impl&%4.valid_used_page.? pre! page_id! bin_idx! list_idx!) (let ((tmp_assert$1 (and tmp_assert$ (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!))))))) (and (let ((prev_page_id_opt$ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))))))))) (let ((next_page_id_opt$ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))))))))) (let ((tmp_assert$2 (and tmp_assert$1 (=> (and (and (not (= prev_page_id_opt$ (core!option.Option./Some page_id!))) (not (= next_page_id_opt$ (core!option.Option./Some page_id!)))) (is-core!option.Option./Some_ prev_page_id_opt$)) (not (= prev_page_id_opt$ next_page_id_opt$)))))) (let ((tmp%%$ (ite (is-core!option.Option./Some_ prev_page_id_opt$) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. prev_page_id_opt$)))))) (let ((tmp_assert$3 (and tmp_assert$2 (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. prev_page_id$)) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))))) (let ((update_tmp_pages$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. prev_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$1 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$2 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$2))))) (%Poly%core!option.Option. (Poly%core!option.Option. next_page_id_opt$)))))))) (let ((tmp%%$3 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))))))))))) (tuple%2./tuple%2 (B tmp_assert$3) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1))))) (tuple%2./tuple%2 (B tmp_assert$2) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$))))) (let ((tmp_assert$4 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_pages$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp%%$4 (ite (is-core!option.Option./Some_ next_page_id_opt$) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. next_page_id_opt$)))))) (let ((tmp_assert$5 (and tmp_assert$4 (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$)) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$5 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$6 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. prev_page_id_opt$)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$6))))))))))) (let ((tmp%%$7 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))))))))))) (tuple%2./tuple%2 (B tmp_assert$5) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$3))))) (tuple%2./tuple%2 (B tmp_assert$4) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2))))) (let ((tmp_assert$6 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$4)))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$4)))))) (let ((update_tmp_used_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_used_dlist_headers$) bin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ prev_page_id_opt$) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) next_page_id_opt$))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ next_page_id_opt$) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) prev_page_id_opt$))))))))) (let ((update_tmp_pages$5 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$4) page_id! (Poly%lib!page_organization.PageData. (let ((tmp%%$8 core!option.Option./None)) (let ((tmp%%$9 core!option.Option./None)) (let ((tmp%%$10 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$9)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$8)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10)))))))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./Used (%Poly%lib!tokens.PageId. page_id!) (%B (B true))))) (let ((update_tmp_used_lists$1 (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq.update.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. update_tmp_used_lists$) bin_idx! (vstd!seq_lib.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!) list_idx!))))) (and (=> tmp_assert$6 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$1)) (and (=> tmp_assert$6 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (and (=> tmp_assert$6 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$5)) (=> tmp_assert$6 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$1)))))))))))))))))) (let ((tmp_assert$7 (let ((prev_page_id_opt$ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))))))))) (let ((tmp_assert$8 (let ((next_page_id_opt$ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))))))))) (let ((tmp_assert$9 (and tmp_assert$1 (=> (and (and (not (= prev_page_id_opt$ (core!option.Option./Some page_id!))) (not (= next_page_id_opt$ (core!option.Option./Some page_id!)))) (is-core!option.Option./Some_ prev_page_id_opt$)) (not (= prev_page_id_opt$ next_page_id_opt$)))))) (let ((tmp%%$ (ite (is-core!option.Option./Some_ prev_page_id_opt$) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. prev_page_id_opt$)))))) (let ((tmp_assert$10 (and tmp_assert$9 (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. prev_page_id$)) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))))) (let ((update_tmp_pages$6 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. prev_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$12 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$13 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$13))))) (%Poly%core!option.Option. (Poly%core!option.Option. next_page_id_opt$)))))))) (let ((tmp%%$14 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$12)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))))))))))) (tuple%2./tuple%2 (B tmp_assert$10) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$6))))) (tuple%2./tuple%2 (B tmp_assert$9) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$))))) (let ((tmp_assert$11 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((update_tmp_pages$7 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp%%$15 (ite (is-core!option.Option./Some_ next_page_id_opt$) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. next_page_id_opt$)))))) (let ((tmp_assert$12 (and tmp_assert$11 (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$)) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))) (let ((update_tmp_pages$8 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$7) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$16 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$17 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. prev_page_id_opt$)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$17))))))))))) (let ((tmp%%$18 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$16)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$18))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$18))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$18))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$18))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$18))))))))))))) (tuple%2./tuple%2 (B tmp_assert$12) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$8))))) (tuple%2./tuple%2 (B tmp_assert$11) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$7))))) (let ((tmp_assert$13 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$15)))))) (let ((update_tmp_pages$9 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$15)))))) (let ((update_tmp_used_dlist_headers$2 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_used_dlist_headers$) bin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ prev_page_id_opt$) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) next_page_id_opt$))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ next_page_id_opt$) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) prev_page_id_opt$))))))))) (let ((update_tmp_pages$10 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$9) page_id! (Poly%lib!page_organization.PageData. (let ((tmp%%$19 core!option.Option./None)) (let ((tmp%%$20 core!option.Option./None)) (let ((tmp%%$21 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$20)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$19)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21)))))))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./Used (%Poly%lib!tokens.PageId. page_id!) (%B (B true))))) (let ((update_tmp_used_lists$2 (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq.update.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. update_tmp_used_lists$) bin_idx! (vstd!seq_lib.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!) list_idx!))))) tmp_assert$13)))))))))))))) tmp_assert$8)))) (and (=> tmp_assert$7 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$)) (and (=> tmp_assert$7 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$)) (=> tmp_assert$7 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$))))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.out_of_used_list.? pre! post! page_id! bin_idx! list_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::segment_freeing_start")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_start.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_start.) (forall ((pre! Poly) (post! Poly) (segment_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.segment_freeing_start.? pre! post! segment_id!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (is-lib!page_organization.Popped./No_ tmp_for_match_0$)) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) segment_id!)) (and (=> tmp_assert$ (= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) segment_id!))) 0)) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. segment_id!) (%I (I 0))))) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$2 (and tmp_assert$1 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((tmp_assert$3 (and tmp_assert$2 (and (<= 1 count$) (<= count$ lib!config.SLICES_PER_SEGMENT.?))))) (let ((last_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. segment_id!) (%I (I (nClip (Sub count$ 1))))))) (let ((new_page_map$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%6 (%Poly%lib!tokens.SegmentId. segment_id!) 0 count$))) (Poly%fun%1. (mk_fun (%%lambda%%5 (Poly%lib!page_organization.PageData. (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%B (B false)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))))) (let ((update_tmp_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_page_map$))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./SegmentFreeing (%Poly%lib!tokens.SegmentId. segment_id!) (%I (I count$))))) (and (=> tmp_assert$3 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (=> tmp_assert$3 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$)))))))))))))))) (let ((tmp_assert$4 (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((tmp_assert$5 (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. segment_id!) (%I (I 0))))) (let ((tmp_assert$6 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$7 (and tmp_assert$6 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp_assert$8 (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((tmp_assert$9 (and tmp_assert$7 (and (<= 1 count$) (<= count$ lib!config.SLICES_PER_SEGMENT.?))))) tmp_assert$9)))) tmp_assert$8)))))) tmp_assert$5)))) (and (=> tmp_assert$4 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$4 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$)) (and (=> tmp_assert$4 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$)) (and (=> tmp_assert$4 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$)) (=> tmp_assert$4 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.segment_freeing_start.? pre! post! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::segment_freeing_finish")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_finish.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_finish.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.segment_freeing_finish.? pre! post!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./SegmentFreeing_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((idx$ (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./SegmentFreeing_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((idx$ (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.SegmentId. segment_id$) (I idx$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.SegmentId. $ INT)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (=> tmp_assert$ (= idx$ lib!config.SLICES_PER_SEGMENT.?)) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.SegmentId. segment_id$))))) (let ((update_tmp_segments$ (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) (and (let ((keys$ (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%4 segment_id$ 0 lib!config.SLICES_PER_SEGMENT.?))))))) (let ((update_tmp_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.remove_keys.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!set.Set<lib!tokens.PageId.>. keys$))))) (=> tmp_assert$1 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$)))) (and (=> tmp_assert$1 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (=> tmp_assert$1 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$))))))))))))) (let ((tmp_assert$2 (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((tmp_assert$3 (let ((tmp%%$ (ite (is-lib!page_organization.Popped./SegmentFreeing_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((idx$ (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.SegmentId. segment_id$) (I idx$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.SegmentId. $ INT)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tmp_assert$4 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.SegmentId. segment_id$))))) (let ((update_tmp_segments$ (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) tmp_assert$4)))))))) tmp_assert$3)))) (and (=> tmp_assert$2 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$2 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$)) (and (=> tmp_assert$2 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$)) (=> tmp_assert$2 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.segment_freeing_finish.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::get_list_idx")
(declare-fun %%choose%%0 (Type Type Int Int Int Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Poly Dcr Type Poly Dcr Type) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Type) (%%hole%%2 Int) (%%hole%%3 Int) (%%hole%%4 Int) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (%%hole%%13 Dcr) (%%hole%%14 Type) (%%hole%%15 Poly) (%%hole%%16 Dcr) (%%hole%%17 Type) (%%hole%%18 Poly) (%%hole%%19 Dcr) (%%hole%%20 Type)) (! (=> (exists ((i$ Poly) (j$ Poly)) (! (and (has_type i$ %%hole%%0) (has_type j$ %%hole%%1) (and (and (and (<= %%hole%%2 (%I i$)) (< (%I i$) %%hole%%3)) (and (<= %%hole%%4 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? %%hole%%8 %%hole%%9 (vstd!seq.Seq.index.? %%hole%%5 %%hole%%6 %%hole%%7 i$))))) (= (vstd!seq.Seq.index.? %%hole%%13 %%hole%%14 (vstd!seq.Seq.index.? %%hole%%10 %%hole%%11 %%hole%%12 i$) j$) %%hole%%15))) :pattern ((vstd!seq.Seq.index.? %%hole%%19 %%hole%%20 (vstd!seq.Seq.index.? %%hole%%16 %%hole%%17 %%hole%%18 i$) j$)))) (exists ((i$ Poly) (j$ Poly)) (! (and (and (has_type i$ %%hole%%0) (has_type j$ %%hole%%1) (and (and (and (<= %%hole%%2 (%I i$)) (< (%I i$) %%hole%%3)) (and (<= %%hole%%4 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? %%hole%%8 %%hole%%9 (vstd!seq.Seq.index.? %%hole%%5 %%hole%%6 %%hole%%7 i$))))) (= (vstd!seq.Seq.index.? %%hole%%13 %%hole%%14 (vstd!seq.Seq.index.? %%hole%%10 %%hole%%11 %%hole%%12 i$) j$) %%hole%%15))) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20) (Poly%tuple%2. (tuple%2./tuple%2 i$ j$)))) :pattern ((vstd!seq.Seq.index.? %%hole%%19 %%hole%%20 (vstd!seq.Seq.index.? %%hole%%16 %%hole%%17 %%hole%%18 i$) j$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20)))))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.get_list_idx.) (forall ((lists! Poly) (pid! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.get_list_idx.? lists! pid!) (let ((tmp%%$ (%Poly%tuple%2. (as_type (%%choose%%0 INT INT 0 (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) lists!) 0 $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) lists! $ TYPE%lib!tokens.PageId. $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) lists! $ TYPE%lib!tokens.PageId. pid! $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) lists! $ TYPE%lib!tokens.PageId.) (TYPE%tuple%2. $ INT $ INT))))) (let ((i$ (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((j$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (tuple%2./tuple%2 (I i$) (I j$)))))) :pattern ((lib!page_organization.PageOrg.impl&%4.get_list_idx.? lists! pid!))))))
(assert (forall ((lists! Poly) (pid! Poly)) (! (=> (and (has_type lists! (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.))) (has_type pid! TYPE%lib!tokens.PageId.)) (has_type (Poly%tuple%2. (lib!page_organization.PageOrg.impl&%4.get_list_idx.? lists! pid!)) (TYPE%tuple%2. $ INT $ INT))) :pattern ((lib!page_organization.PageOrg.impl&%4.get_list_idx.? lists! pid!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::merge_with_after")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.merge_with_after.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.merge_with_after.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.merge_with_after.? pre! post!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I cur_start$) (I cur_count$) (B b$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((b$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (=> tmp_assert$ (< (Add cur_start$ cur_count$) lib!config.SLICES_PER_SEGMENT.?)) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Add cur_start$ cur_count$))))))) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (and (=> tmp_assert$1 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))) (let ((tmp_assert$2 (and tmp_assert$1 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((n_count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((tmp_assert$3 (and tmp_assert$2 (<= (Add cur_count$ n_count$) lib!config.SLICES_PER_SEGMENT.?)))) (let ((tmp_assert$4 (and tmp_assert$3 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp_for_match_1$ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))) (let ((tmp_assert$5 (and tmp_assert$4 (and (is-core!option.Option./Some_ tmp_for_match_1$) (let ((dlist_entry$ (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) true))))) (let ((dlist_entry$ (ite (is-core!option.Option./Some_ tmp_for_match_1$) (let ((dlist_entry$2 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) dlist_entry$2) (%Poly%lib!page_organization.DlistEntry. (vstd!pervasive.arbitrary.? $ TYPE%lib!page_organization.DlistEntry.))))) (let ((update_tmp_pages$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$1 core!option.Option./None)) (let ((tmp%%$2 core!option.Option./None)) (let ((tmp%%$3 core!option.Option./None)) (let ((tmp%%$4 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$3)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))))))))))))) (let ((final_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Sub (Add (Add cur_start$ cur_count$) n_count$) 1))))))) (let ((tmp_assert$6 (and tmp_assert$5 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. final_id$))))) (let ((update_tmp_pages$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1) (Poly%lib!tokens.PageId. final_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$5 core!option.Option./None)) (let ((tmp%%$6 core!option.Option./None)) (let ((tmp%%$7 core!option.Option./None)) (let ((tmp%%$8 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. final_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))))))))))))) (let ((tmp_assert$7 (and tmp_assert$6 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. final_id$)))))))) (let ((tmp%%$9 (let ((tmp%%$10 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$10) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$10)))))) (let ((tmp_assert$8 (and tmp_assert$7 (and (and (and (not (= prev_page_id$ page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. prev_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))) false))))) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2) (Poly%lib!tokens.PageId. prev_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$11 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$12 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$13 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$13))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$12))))))))) (let ((tmp%%$14 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$11)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))))))))))) (tuple%2./tuple%2 (B tmp_assert$8) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$3))))) (tuple%2./tuple%2 (B tmp_assert$7) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2)))))) (let ((tmp_assert$9 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$9)))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$9)))))) (and (let ((tmp%%$15 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$15) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$15)))))) (let ((tmp_assert$10 (and tmp_assert$9 (and (and (and (not (= next_page_id$ page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))) false))))) (let ((update_tmp_pages$5 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$4) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$16 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$17 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$18 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$17)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$18)))))))))))) (let ((tmp%%$19 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$16)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))))))))))) (=> tmp_assert$10 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$5))))) (=> tmp_assert$9 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$4)))) (let ((tmp_assert$11 (let ((tmp%%$20 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$20) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$20)))))) (let ((tmp_assert$12 (and tmp_assert$9 (and (and (and (not (= next_page_id$ page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))) false))))) (let ((update_tmp_pages$6 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$4) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$21 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$22 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$23 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$22)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$23)))))))))))) (let ((tmp%%$24 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$21)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$24))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$24))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$24))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$24))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$24))))))))))))) tmp_assert$12))) tmp_assert$9)))) (let ((sbin_idx$ (lib!bin_sizes.smallest_sbin_fitting_size.? (I n_count$)))) (let ((tmp_assert$13 (and tmp_assert$11 (and (<= 0 sbin_idx$) (<= sbin_idx$ lib!config.SEGMENT_BIN_MAX.?))))) (let ((update_tmp_unused_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) (I sbin_idx$) (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$))))))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$))))))))))))) (let ((tmp_assert$14 (and tmp_assert$13 (=> (and (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (not (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I cur_start$)) (%I (I (Add cur_count$ n_count$))) (%B (B b$))))) (and (let ((list_idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (lib!page_organization.PageOrg.impl&%4.get_list_idx.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((update_tmp_unused_lists$1 (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq.update.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. update_tmp_unused_lists$) (I sbin_idx$) (vstd!seq_lib.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$)) (I list_idx$)))))) (=> tmp_assert$14 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$1)))) (and (=> tmp_assert$14 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (=> tmp_assert$14 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$1))))))))))))))))))))))))))))))))))))) (let ((tmp_assert$15 (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((tmp_assert$16 (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I cur_start$) (I cur_count$) (B b$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((b$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tmp_assert$17 (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Add cur_start$ cur_count$))))))) (let ((tmp_assert$18 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$19 (and tmp_assert$18 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp_assert$20 (let ((n_count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((tmp_assert$21 (and tmp_assert$19 (<= (Add cur_count$ n_count$) lib!config.SLICES_PER_SEGMENT.?)))) (let ((tmp_assert$22 (and tmp_assert$21 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp_assert$23 (let ((tmp_for_match_1$ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))) (let ((tmp_assert$24 (and tmp_assert$22 (and (is-core!option.Option./Some_ tmp_for_match_1$) (let ((dlist_entry$ (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) true))))) (let ((tmp_assert$25 (let ((dlist_entry$ (ite (is-core!option.Option./Some_ tmp_for_match_1$) (let ((dlist_entry$5 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) dlist_entry$5) (%Poly%lib!page_organization.DlistEntry. (vstd!pervasive.arbitrary.? $ TYPE%lib!page_organization.DlistEntry.))))) (let ((update_tmp_pages$7 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$26 core!option.Option./None)) (let ((tmp%%$27 core!option.Option./None)) (let ((tmp%%$28 core!option.Option./None)) (let ((tmp%%$29 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$28)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$27)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$26)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$29))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$29))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$29))))))))))))))) (let ((tmp_assert$26 (let ((final_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Sub (Add (Add cur_start$ cur_count$) n_count$) 1))))))) (let ((tmp_assert$27 (and tmp_assert$24 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. final_id$))))) (let ((update_tmp_pages$8 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$7) (Poly%lib!tokens.PageId. final_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$30 core!option.Option./None)) (let ((tmp%%$31 core!option.Option./None)) (let ((tmp%%$32 core!option.Option./None)) (let ((tmp%%$33 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. final_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$32)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$31)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$30)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$33))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$33))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$33))))))))))))))) (let ((tmp_assert$28 (and tmp_assert$27 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. final_id$)))))))) (let ((tmp%%$34 (let ((tmp%%$35 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$35) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$35)))))) (let ((tmp_assert$29 (and tmp_assert$28 (and (and (and (not (= prev_page_id$ page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. prev_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))) false))))) (let ((update_tmp_pages$9 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$8) (Poly%lib!tokens.PageId. prev_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$36 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$37 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$38 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$38))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$37))))))))) (let ((tmp%%$39 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$36)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$39))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$39))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$39))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$39))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$39))))))))))))) (tuple%2./tuple%2 (B tmp_assert$29) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$9))))) (tuple%2./tuple%2 (B tmp_assert$28) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$8)))))) (let ((tmp_assert$30 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$34)))))) (let ((update_tmp_pages$10 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$34)))))) (let ((tmp_assert$31 (let ((tmp%%$40 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$40) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$40)))))) (let ((tmp_assert$32 (and tmp_assert$30 (and (and (and (not (= next_page_id$ page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))) false))))) (let ((update_tmp_pages$11 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$10) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$41 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$42 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$43 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$42)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$43)))))))))))) (let ((tmp%%$44 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$41)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$44))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$44))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$44))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$44))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$44))))))))))))) tmp_assert$32))) tmp_assert$30)))) (let ((tmp_assert$33 (let ((sbin_idx$ (lib!bin_sizes.smallest_sbin_fitting_size.? (I n_count$)))) (let ((tmp_assert$34 (and tmp_assert$31 (and (<= 0 sbin_idx$) (<= sbin_idx$ lib!config.SEGMENT_BIN_MAX.?))))) (let ((update_tmp_unused_dlist_headers$2 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) (I sbin_idx$) (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$))))))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$))))))))))))) (let ((tmp_assert$35 (and tmp_assert$34 (=> (and (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (not (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I cur_start$)) (%I (I (Add cur_count$ n_count$))) (%B (B b$))))) tmp_assert$35))))))) tmp_assert$33))))))))))) tmp_assert$26))))) tmp_assert$25))))) tmp_assert$23)))))) tmp_assert$20)))))) tmp_assert$17)))))))) tmp_assert$16)))) (and (=> tmp_assert$15 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$15 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$)) (=> tmp_assert$15 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$)))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.merge_with_after.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::merge_with_before")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.merge_with_before.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.merge_with_before.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.merge_with_before.? pre! post!) (let ((tmp_assert$ true)) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I cur_start$) (I cur_count$) (B b$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((b$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (=> tmp_assert$ (> cur_start$ 1)) (let ((last_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Sub cur_start$ 1))))))) (let ((tmp_assert$1 (and tmp_assert$ (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))) (let ((offset$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))))) (and (=> tmp_assert$1 (> (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. last_id$))) offset$) 0)) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. last_id$))) offset$))))))) (and (=> tmp_assert$1 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))) (let ((tmp_assert$2 (and tmp_assert$1 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))) (let ((tmp_assert$3 (and tmp_assert$2 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((p_count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((tmp_assert$4 (and tmp_assert$3 (<= (Add cur_count$ p_count$) lib!config.SLICES_PER_SEGMENT.?)))) (let ((tmp_assert$5 (and tmp_assert$4 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip cur_start$))))))))) (let ((tmp_assert$6 (and tmp_assert$5 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip cur_start$)))))))))))) (let ((tmp_assert$7 (and tmp_assert$6 (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip cur_start$)))))))) false)))) (let ((tmp_assert$8 (and tmp_assert$7 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp_for_match_1$ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))) (let ((tmp_assert$9 (and tmp_assert$8 (and (is-core!option.Option./Some_ tmp_for_match_1$) (let ((dlist_entry$ (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) true))))) (let ((dlist_entry$ (ite (is-core!option.Option./Some_ tmp_for_match_1$) (let ((dlist_entry$2 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) dlist_entry$2) (%Poly%lib!page_organization.DlistEntry. (vstd!pervasive.arbitrary.? $ TYPE%lib!page_organization.DlistEntry.))))) (let ((update_tmp_pages$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$1 core!option.Option./None)) (let ((tmp%%$2 core!option.Option./None)) (let ((tmp%%$3 core!option.Option./None)) (let ((tmp%%$4 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$3)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))))))))))))) (let ((tmp_assert$10 (and tmp_assert$9 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_id$))))) (let ((update_tmp_pages$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1) (Poly%lib!tokens.PageId. last_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$5 core!option.Option./None)) (let ((tmp%%$6 core!option.Option./None)) (let ((tmp%%$7 core!option.Option./None)) (let ((tmp%%$8 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))))))))))))) (let ((tmp%%$9 (let ((tmp%%$10 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$10) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$10)))))) (let ((tmp_assert$11 (and tmp_assert$10 (and (and (and (and (not (= prev_page_id$ page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. prev_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))) false)) (not (= prev_page_id$ last_id$)))))) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2) (Poly%lib!tokens.PageId. prev_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$11 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$12 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$13 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$13))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$12))))))))) (let ((tmp%%$14 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$11)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))))))))))) (tuple%2./tuple%2 (B tmp_assert$11) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$3))))) (tuple%2./tuple%2 (B tmp_assert$10) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2)))))) (let ((tmp_assert$12 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$9)))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$9)))))) (and (let ((tmp%%$15 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$15) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$15)))))) (let ((tmp_assert$13 (and tmp_assert$12 (and (and (and (and (not (= next_page_id$ page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))) false)) (not (= next_page_id$ last_id$)))))) (let ((update_tmp_pages$5 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$4) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$16 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$17 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$18 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$17)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$18)))))))))))) (let ((tmp%%$19 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$16)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))))))))))) (=> tmp_assert$13 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$5))))) (=> tmp_assert$12 (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$4)))) (let ((tmp_assert$14 (let ((tmp%%$20 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$20) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$20)))))) (let ((tmp_assert$15 (and tmp_assert$12 (and (and (and (and (not (= next_page_id$ page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))) false)) (not (= next_page_id$ last_id$)))))) (let ((update_tmp_pages$6 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$4) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$21 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$22 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$23 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$22)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$23)))))))))))) (let ((tmp%%$24 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$21)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$24))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$24))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$24))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$24))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$24))))))))))))) tmp_assert$15))) tmp_assert$12)))) (let ((sbin_idx$ (lib!bin_sizes.smallest_sbin_fitting_size.? (I p_count$)))) (let ((tmp_assert$16 (and tmp_assert$14 (and (<= 0 sbin_idx$) (<= sbin_idx$ lib!config.SEGMENT_BIN_MAX.?))))) (let ((update_tmp_unused_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) (I sbin_idx$) (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$))))))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$))))))))))))) (let ((tmp_assert$17 (and tmp_assert$16 (=> (and (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (not (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))) (%I (I (Add cur_count$ p_count$))) (%B (B b$))))) (and (let ((list_idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (lib!page_organization.PageOrg.impl&%4.get_list_idx.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((update_tmp_unused_lists$1 (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq.update.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. update_tmp_unused_lists$) (I sbin_idx$) (vstd!seq_lib.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$)) (I list_idx$)))))) (=> tmp_assert$17 (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$1)))) (and (=> tmp_assert$17 (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)) (=> tmp_assert$17 (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$1)))))))))))))))))))))))))))))))))))))))))) (let ((tmp_assert$18 (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((tmp_assert$19 (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I cur_start$) (I cur_count$) (B b$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((b$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tmp_assert$20 (let ((last_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Sub cur_start$ 1))))))) (let ((tmp_assert$21 (and tmp_assert$ (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))) (let ((tmp_assert$22 (let ((offset$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))))) (let ((tmp_assert$23 (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. last_id$))) offset$))))))) (let ((tmp_assert$24 (and tmp_assert$21 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))) (let ((tmp_assert$25 (and tmp_assert$24 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp_assert$26 (let ((p_count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((tmp_assert$27 (and tmp_assert$25 (<= (Add cur_count$ p_count$) lib!config.SLICES_PER_SEGMENT.?)))) (let ((tmp_assert$28 (and tmp_assert$27 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip cur_start$))))))))) (let ((tmp_assert$29 (and tmp_assert$28 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip cur_start$)))))))))))) (let ((tmp_assert$30 (and tmp_assert$29 (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip cur_start$)))))))) false)))) (let ((tmp_assert$31 (and tmp_assert$30 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp_assert$32 (let ((tmp_for_match_1$ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))) (let ((tmp_assert$33 (and tmp_assert$31 (and (is-core!option.Option./Some_ tmp_for_match_1$) (let ((dlist_entry$ (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) true))))) (let ((tmp_assert$34 (let ((dlist_entry$ (ite (is-core!option.Option./Some_ tmp_for_match_1$) (let ((dlist_entry$5 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) dlist_entry$5) (%Poly%lib!page_organization.DlistEntry. (vstd!pervasive.arbitrary.? $ TYPE%lib!page_organization.DlistEntry.))))) (let ((update_tmp_pages$7 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$26 core!option.Option./None)) (let ((tmp%%$27 core!option.Option./None)) (let ((tmp%%$28 core!option.Option./None)) (let ((tmp%%$29 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$28)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$27)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$26)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$29))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$29))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$29))))))))))))))) (let ((tmp_assert$35 (and tmp_assert$33 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_id$))))) (let ((update_tmp_pages$8 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$7) (Poly%lib!tokens.PageId. last_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$30 core!option.Option./None)) (let ((tmp%%$31 core!option.Option./None)) (let ((tmp%%$32 core!option.Option./None)) (let ((tmp%%$33 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$32)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$31)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$30)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$33))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$33))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$33))))))))))))))) (let ((tmp%%$34 (let ((tmp%%$35 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$35) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$35)))))) (let ((tmp_assert$36 (and tmp_assert$35 (and (and (and (and (not (= prev_page_id$ page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. prev_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))) false)) (not (= prev_page_id$ last_id$)))))) (let ((update_tmp_pages$9 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$8) (Poly%lib!tokens.PageId. prev_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$36 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$37 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$38 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$38))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$37))))))))) (let ((tmp%%$39 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$36)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$39))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$39))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$39))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$39))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$39))))))))))))) (tuple%2./tuple%2 (B tmp_assert$36) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$9))))) (tuple%2./tuple%2 (B tmp_assert$35) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$8)))))) (let ((tmp_assert$37 (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$34)))))) (let ((update_tmp_pages$10 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$34)))))) (let ((tmp_assert$38 (let ((tmp%%$40 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$40) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$40)))))) (let ((tmp_assert$39 (and tmp_assert$37 (and (and (and (and (not (= next_page_id$ page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))) false)) (not (= next_page_id$ last_id$)))))) (let ((update_tmp_pages$11 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$10) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$41 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$42 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$43 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$42)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$43)))))))))))) (let ((tmp%%$44 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$41)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$44))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$44))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$44))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$44))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$44))))))))))))) tmp_assert$39))) tmp_assert$37)))) (let ((tmp_assert$40 (let ((sbin_idx$ (lib!bin_sizes.smallest_sbin_fitting_size.? (I p_count$)))) (let ((tmp_assert$41 (and tmp_assert$38 (and (<= 0 sbin_idx$) (<= sbin_idx$ lib!config.SEGMENT_BIN_MAX.?))))) (let ((update_tmp_unused_dlist_headers$2 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) (I sbin_idx$) (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$))))))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$))))))))))))) (let ((tmp_assert$42 (and tmp_assert$41 (=> (and (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (not (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))) (%I (I (Add cur_count$ p_count$))) (%B (B b$))))) tmp_assert$42))))))) tmp_assert$40))))))))))) tmp_assert$34))))) tmp_assert$32))))))))) tmp_assert$26)))))) tmp_assert$23)))) tmp_assert$22))))) tmp_assert$20)))))))) tmp_assert$19)))) (and (=> tmp_assert$18 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$)) (and (=> tmp_assert$18 (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$)) (=> tmp_assert$18 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$)))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.merge_with_before.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::next_by")
(define-fun is-lib!page_organization.PageOrg.Step./take_page_from_unused_queue_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./take_page_from_unused_queue) c))
(define-fun is-lib!page_organization.PageOrg.Step./split_page_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./split_page) c))
(define-fun is-lib!page_organization.PageOrg.Step./create_segment_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./create_segment) c))
(define-fun is-lib!page_organization.PageOrg.Step./allocate_popped_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./allocate_popped) c))
(define-fun is-lib!page_organization.PageOrg.Step./forget_about_first_page_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./forget_about_first_page) c))
(define-fun is-lib!page_organization.PageOrg.Step./forget_about_first_page2_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./forget_about_first_page2) c))
(define-fun is-lib!page_organization.PageOrg.Step./clear_ec_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./clear_ec) c))
(define-fun is-lib!page_organization.PageOrg.Step./free_to_unused_queue_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./free_to_unused_queue) c))
(define-fun is-lib!page_organization.PageOrg.Step./set_range_to_used_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./set_range_to_used) c))
(define-fun is-lib!page_organization.PageOrg.Step./set_range_to_not_used_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./set_range_to_not_used) c))
(define-fun is-lib!page_organization.PageOrg.Step./into_used_list_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./into_used_list) c))
(define-fun is-lib!page_organization.PageOrg.Step./into_used_list_back_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./into_used_list_back) c))
(define-fun is-lib!page_organization.PageOrg.Step./out_of_used_list_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./out_of_used_list) c))
(define-fun is-lib!page_organization.PageOrg.Step./segment_freeing_start_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./segment_freeing_start) c))
(define-fun is-lib!page_organization.PageOrg.Step./segment_freeing_finish_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./segment_freeing_finish) c))
(define-fun is-lib!page_organization.PageOrg.Step./merge_with_after_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./merge_with_after) c))
(define-fun is-lib!page_organization.PageOrg.Step./merge_with_before_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./merge_with_before) c))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.next_by.) (forall ((pre! Poly) (post! Poly) (step! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.next_by.? pre! post! step!) (ite (is-lib!page_organization.PageOrg.Step./take_page_from_unused_queue_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((page_id$ (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (let ((sbin_idx$ (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/1 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (let ((list_idx$ (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/2 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue.? pre! post! (Poly%lib!tokens.PageId. page_id$) (I sbin_idx$) (I list_idx$))))) (ite (is-lib!page_organization.PageOrg.Step./split_page_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((page_id$ (lib!page_organization.PageOrg.Step./split_page/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (let ((current_count$ (lib!page_organization.PageOrg.Step./split_page/1 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (let ((target_count$ (lib!page_organization.PageOrg.Step./split_page/2 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (let ((sbin_idx$ (lib!page_organization.PageOrg.Step./split_page/3 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.split_page.? pre! post! (Poly%lib!tokens.PageId. page_id$) (I current_count$) (I target_count$) (I sbin_idx$)))))) (ite (is-lib!page_organization.PageOrg.Step./create_segment_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((segment_id$ (lib!page_organization.PageOrg.Step./create_segment/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.create_segment.? pre! post! (Poly%lib!tokens.SegmentId. segment_id$))) (ite (is-lib!page_organization.PageOrg.Step./allocate_popped_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (lib!page_organization.PageOrg.impl&%4.allocate_popped.? pre! post!) (ite (is-lib!page_organization.PageOrg.Step./forget_about_first_page_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((count$ (lib!page_organization.PageOrg.Step./forget_about_first_page/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.forget_about_first_page.? pre! post! (I count$))) (ite (is-lib!page_organization.PageOrg.Step./forget_about_first_page2_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (lib!page_organization.PageOrg.impl&%4.forget_about_first_page2.? pre! post!) (ite (is-lib!page_organization.PageOrg.Step./clear_ec_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (lib!page_organization.PageOrg.impl&%4.clear_ec.? pre! post!) (ite (is-lib!page_organization.PageOrg.Step./free_to_unused_queue_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((sbin_idx$ (lib!page_organization.PageOrg.Step./free_to_unused_queue/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.free_to_unused_queue.? pre! post! (I sbin_idx$))) (ite (is-lib!page_organization.PageOrg.Step./set_range_to_used_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((page_header_kind$ (lib!page_organization.PageOrg.Step./set_range_to_used/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.set_range_to_used.? pre! post! (Poly%lib!page_organization.PageHeaderKind. page_header_kind$))) (ite (is-lib!page_organization.PageOrg.Step./set_range_to_not_used_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (lib!page_organization.PageOrg.impl&%4.set_range_to_not_used.? pre! post!) (ite (is-lib!page_organization.PageOrg.Step./into_used_list_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((bin_idx$ (lib!page_organization.PageOrg.Step./into_used_list/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.into_used_list.? pre! post! (I bin_idx$))) (ite (is-lib!page_organization.PageOrg.Step./into_used_list_back_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((bin_idx$ (lib!page_organization.PageOrg.Step./into_used_list_back/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.into_used_list_back.? pre! post! (I bin_idx$))) (ite (is-lib!page_organization.PageOrg.Step./out_of_used_list_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((page_id$ (lib!page_organization.PageOrg.Step./out_of_used_list/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (let ((bin_idx$ (lib!page_organization.PageOrg.Step./out_of_used_list/1 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (let ((list_idx$ (lib!page_organization.PageOrg.Step./out_of_used_list/2 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.out_of_used_list.? pre! post! (Poly%lib!tokens.PageId. page_id$) (I bin_idx$) (I list_idx$))))) (ite (is-lib!page_organization.PageOrg.Step./segment_freeing_start_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((segment_id$ (lib!page_organization.PageOrg.Step./segment_freeing_start/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.segment_freeing_start.? pre! post! (Poly%lib!tokens.SegmentId. segment_id$))) (ite (is-lib!page_organization.PageOrg.Step./segment_freeing_finish_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (lib!page_organization.PageOrg.impl&%4.segment_freeing_finish.? pre! post!) (ite (is-lib!page_organization.PageOrg.Step./merge_with_after_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (lib!page_organization.PageOrg.impl&%4.merge_with_after.? pre! post!) (and (is-lib!page_organization.PageOrg.Step./merge_with_before_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (lib!page_organization.PageOrg.impl&%4.merge_with_before.? pre! post!))))))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.next_by.? pre! post! step!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::next")
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.next.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.next.? pre! post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!page_organization.PageOrg.Step.) (lib!page_organization.PageOrg.impl&%4.next_by.? pre! post! step$)) :pattern ((lib!page_organization.PageOrg.impl&%4.next_by.? pre! post! step$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.next.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::initialize")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.initialize.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.initialize.) (forall ((post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.initialize.? post!) (let ((update_tmp_unused_dlist_headers$ (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.new.? $ TYPE%lib!page_organization.DlistHeader. $ (TYPE%fun%1. $ INT $ TYPE%lib!page_organization.DlistHeader.) (I (nClip (Add lib!config.SEGMENT_BIN_MAX.? 1))) (Poly%fun%1. (mk_fun (%%lambda%%5 (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))))) (let ((update_tmp_used_dlist_headers$ (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.new.? $ TYPE%lib!page_organization.DlistHeader. $ (TYPE%fun%1. $ INT $ TYPE%lib!page_organization.DlistHeader.) (I (nClip (Add lib!config.BIN_FULL.? 1))) (Poly%fun%1. (mk_fun (%%lambda%%5 (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))))) (let ((update_tmp_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.)))) (let ((update_tmp_segments$ (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.empty.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData.)))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) (let ((update_tmp_unused_lists$ (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq.new.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) $ (TYPE%fun%1. $ INT $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)) (I (nClip (Add lib!config.SEGMENT_BIN_MAX.? 1))) (Poly%fun%1. (mk_fun (%%lambda%%5 (vstd!seq.Seq.empty.? $ TYPE%lib!tokens.PageId.)))))))) (let ((update_tmp_used_lists$ (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq.new.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) $ (TYPE%fun%1. $ INT $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)) (I (nClip (Add lib!config.BIN_FULL.? 1))) (Poly%fun%1. (mk_fun (%%lambda%%5 (vstd!seq.Seq.empty.? $ TYPE%lib!tokens.PageId.)))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (and (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$) (and (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$) (and (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.initialize.? post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::init_by")
(define-fun is-lib!page_organization.PageOrg.Config./initialize_ ((c lib!page_organization.PageOrg.Config.)) Bool ((_ is lib!page_organization.PageOrg.Config./initialize) c))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.init_by.) (forall ((post! Poly) (step! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.init_by.? post! step!) (and (is-lib!page_organization.PageOrg.Config./initialize_ (%Poly%lib!page_organization.PageOrg.Config. step!)) (lib!page_organization.PageOrg.impl&%4.initialize.? post!))) :pattern ((lib!page_organization.PageOrg.impl&%4.init_by.? post! step!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::init")
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.init.) (forall ((post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.init.? post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!page_organization.PageOrg.Config.) (lib!page_organization.PageOrg.impl&%4.init_by.? post! step$)) :pattern ((lib!page_organization.PageOrg.impl&%4.init_by.? post! step$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.init.? post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::public_invariant")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.public_invariant.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.public_invariant.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.public_invariant.? self!) (and (and (= (vstd!seq.Seq.len.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. self!)))) (Add lib!config.SEGMENT_BIN_MAX.? 1)) (= (vstd!seq.Seq.len.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. self!)))) (Add lib!config.BIN_FULL.? 1))) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$)))))) :pattern ((lib!page_organization.PageOrg.impl&%4.public_invariant.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_public_invariant")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_public_invariant. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_public_invariant. s!) (lib!page_organization.PageOrg.impl&%4.public_invariant.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_public_invariant. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_public_invariant. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_public_invariant. s!) (lib!page_organization.PageOrg.impl&%4.public_invariant.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_public_invariant. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ll_basics")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.ll_basics.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.ll_basics.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.ll_basics.? self!) (and (= (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!)))) (Add lib!config.SEGMENT_BIN_MAX.? 1)) (= (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!)))) (Add lib!config.BIN_FULL.? 1)))) :pattern ((lib!page_organization.PageOrg.impl&%4.ll_basics.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_ll_basics")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_basics. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_basics. s!) (lib!page_organization.PageOrg.impl&%4.ll_basics.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_basics. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_basics. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_basics. s!) (lib!page_organization.PageOrg.impl&%4.ll_basics.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_basics. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::page_id_domain")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.page_id_domain.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.page_id_domain.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.page_id_domain.? self!) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)))) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= 0 tmp%%$) (<= tmp%%$ lib!config.SLICES_PER_SEGMENT.?)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.page_id_domain.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_page_id_domain")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_page_id_domain. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_page_id_domain. s!) (lib!page_organization.PageOrg.impl&%4.page_id_domain.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_page_id_domain. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_page_id_domain. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_page_id_domain. s!) (lib!page_organization.PageOrg.impl&%4.page_id_domain.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_page_id_domain. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::count_off0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.count_off0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.count_off0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.count_off0.? self!) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))) (core!option.Option./Some (I 0)))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.count_off0.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_count_off0")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_count_off0. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_count_off0. s!) (lib!page_organization.PageOrg.impl&%4.count_off0.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_count_off0. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_count_off0. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_count_off0. s!) (lib!page_organization.PageOrg.impl&%4.count_off0.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_count_off0. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::end_is_unused")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.end_is_unused.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.end_is_unused.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.end_is_unused.? self!) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) lib!config.SLICES_PER_SEGMENT.?)) (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.end_is_unused.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_end_is_unused")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_end_is_unused. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_end_is_unused. s!) (lib!page_organization.PageOrg.impl&%4.end_is_unused.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_end_is_unused. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_end_is_unused. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_end_is_unused. s!) (lib!page_organization.PageOrg.impl&%4.end_is_unused.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_end_is_unused. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::does_count")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.does_count.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.does_count.) (forall ((self! Poly) (page_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.does_count.? self! page_id!) (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id!) (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) 0))) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!)))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))) (core!option.Option./Some (I 0))))) :pattern ((lib!page_organization.PageOrg.impl&%4.does_count.? self! page_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::one_count")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.one_count.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.one_count.) (forall ((self! Poly) (page_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.one_count.? self! page_id!) (ite (lib!page_organization.PageOrg.impl&%4.does_count.? self! page_id!) 1 0)) :pattern ((lib!page_organization.PageOrg.impl&%4.one_count.? self! page_id!))))))
(assert (forall ((self! Poly) (page_id! Poly)) (! (=> (and (has_type self! TYPE%lib!page_organization.PageOrg.State.) (has_type page_id! TYPE%lib!tokens.PageId.)) (<= 0 (lib!page_organization.PageOrg.impl&%4.one_count.? self! page_id!))) :pattern ((lib!page_organization.PageOrg.impl&%4.one_count.? self! page_id!)))))
(set-info :comment ";; Spec-Termination lib::page_organization::PageOrg::State::ucount_sum")
(set-info :comment ";; page_organization.rs:3833:5: 3833:81 (#0)")
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ucount_sum")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.ucount_sum.))
(declare-const fuel_nat%lib!page_organization.PageOrg.impl&%4.ucount_sum. Fuel)
(assert (forall ((self! Poly) (segment_id! Poly) (idx! Poly) (fuel% Fuel)) (! (= (lib!page_organization.PageOrg.impl&%4.rec%ucount_sum.? self! segment_id! idx! fuel%) (lib!page_organization.PageOrg.impl&%4.rec%ucount_sum.? self! segment_id! idx! zero)) :pattern ((lib!page_organization.PageOrg.impl&%4.rec%ucount_sum.? self! segment_id! idx! fuel%)))))
(assert (forall ((self! Poly) (segment_id! Poly) (idx! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!page_organization.PageOrg.State.) (has_type segment_id! TYPE%lib!tokens.SegmentId.) (has_type idx! INT)) (= (lib!page_organization.PageOrg.impl&%4.rec%ucount_sum.? self! segment_id! idx! (succ fuel%)) (ite (<= (%I idx!) 0) 0 (nClip (Add (lib!page_organization.PageOrg.impl&%4.rec%ucount_sum.? self! segment_id! (I (Sub (%I idx!) 1)) fuel%) (lib!page_organization.PageOrg.impl&%4.one_count.? self! (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. segment_id!) (%I (I (nClip (Sub (%I idx!) 1)))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.rec%ucount_sum.? self! segment_id! idx! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.ucount_sum.) (forall ((self! Poly) (segment_id! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!page_organization.PageOrg.State.) (has_type segment_id! TYPE%lib!tokens.SegmentId.) (has_type idx! INT)) (= (lib!page_organization.PageOrg.impl&%4.ucount_sum.? self! segment_id! idx!) (lib!page_organization.PageOrg.impl&%4.rec%ucount_sum.? self! segment_id! idx! (succ fuel_nat%lib!page_organization.PageOrg.impl&%4.ucount_sum.)))) :pattern ((lib!page_organization.PageOrg.impl&%4.ucount_sum.? self! segment_id! idx!))))))
(assert (forall ((self! Poly) (segment_id! Poly) (idx! Poly)) (! (=> (and (has_type self! TYPE%lib!page_organization.PageOrg.State.) (has_type segment_id! TYPE%lib!tokens.SegmentId.) (has_type idx! INT)) (<= 0 (lib!page_organization.PageOrg.impl&%4.ucount_sum.? self! segment_id! idx!))) :pattern ((lib!page_organization.PageOrg.impl&%4.ucount_sum.? self! segment_id! idx!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ucount")
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.ucount.) (forall ((self! Poly) (segment_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.ucount.? self! segment_id!) (lib!page_organization.PageOrg.impl&%4.ucount_sum.? self! segment_id! (I lib!config.SLICES_PER_SEGMENT.?))) :pattern ((lib!page_organization.PageOrg.impl&%4.ucount.? self! segment_id!))))))
(assert (forall ((self! Poly) (segment_id! Poly)) (! (=> (and (has_type self! TYPE%lib!page_organization.PageOrg.State.) (has_type segment_id! TYPE%lib!tokens.SegmentId.)) (<= 0 (lib!page_organization.PageOrg.impl&%4.ucount.? self! segment_id!))) :pattern ((lib!page_organization.PageOrg.impl&%4.ucount.? self! segment_id!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ec_of_popped")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.ec_of_popped.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.ec_of_popped.) (forall ((p! Poly) (segment_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.ec_of_popped.? p! segment_id!) (ite (is-lib!page_organization.Popped./No_ (%Poly%lib!page_organization.Popped. p!)) 0 (ite (is-lib!page_organization.Popped./Ready_ (%Poly%lib!page_organization.Popped. p!)) (let ((p$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. p!)))) (let ((b$ (lib!page_organization.Popped./Ready/1 (%Poly%lib!page_organization.Popped. p!)))) (ite (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. p$))) (%Poly%lib!tokens.SegmentId. segment_id!)) b$) 1 0))) (ite (is-lib!page_organization.Popped./Used_ (%Poly%lib!page_organization.Popped. p!)) (let ((p$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. p!)))) (let ((b$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. p!)))) (ite (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. p$))) (%Poly%lib!tokens.SegmentId. segment_id!)) (ite b$ 0 (Sub 0 1)) 0))) (ite (is-lib!page_organization.Popped./SegmentCreating_ (%Poly%lib!page_organization.Popped. p!)) 0 (ite (is-lib!page_organization.Popped./VeryUnready_ (%Poly%lib!page_organization.Popped. p!)) (let ((sid$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. p!)))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. p!)))) (ite (and (= (%Poly%lib!tokens.SegmentId. segment_id!) sid$) b$) 1 0))) (ite (is-lib!page_organization.Popped./SegmentFreeing_ (%Poly%lib!page_organization.Popped. p!)) 0 (let ((sid$ (lib!page_organization.Popped./ExtraCount/0 (%Poly%lib!page_organization.Popped. p!)))) (ite (= (%Poly%lib!tokens.SegmentId. segment_id!) sid$) 1 0))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.ec_of_popped.? p! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::popped_ec")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.popped_ec.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.popped_ec.) (forall ((self! Poly) (segment_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.popped_ec.? self! segment_id!) (lib!page_organization.PageOrg.impl&%4.ec_of_popped.? (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!))) segment_id!)) :pattern ((lib!page_organization.PageOrg.impl&%4.popped_ec.? self! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::count_is_right")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.count_is_right.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.count_is_right.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.count_is_right.? self!) (forall ((sid$ Poly)) (! (=> (has_type sid$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) sid$) (= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!))) sid$))) (Add (lib!page_organization.PageOrg.impl&%4.ucount.? self! sid$) (lib!page_organization.PageOrg.impl&%4.popped_ec.? self! sid$))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) sid$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.count_is_right.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_count_is_right")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_count_is_right. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_count_is_right. s!) (lib!page_organization.PageOrg.impl&%4.count_is_right.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_count_is_right. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_count_is_right. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_count_is_right. s!) (lib!page_organization.PageOrg.impl&%4.count_is_right.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_count_is_right. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::is_unused_header")
(assert (fuel_bool_default fuel%lib!page_organization.is_unused_header.))
(assert (=> (fuel_bool fuel%lib!page_organization.is_unused_header.) (forall ((pd! Poly)) (! (= (lib!page_organization.is_unused_header.? pd!) (and (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. pd!)) (core!option.Option./Some (I 0))) (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. pd!))))) :pattern ((lib!page_organization.is_unused_header.? pd!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::is_in_lls")
(assert (fuel_bool_default fuel%lib!page_organization.is_in_lls.))
(assert (=> (fuel_bool fuel%lib!page_organization.is_in_lls.) (forall ((page_id! Poly) (s! Poly)) (! (= (lib!page_organization.is_in_lls.? page_id! s!) (exists ((i$ Poly) (j$ Poly)) (! (and (and (has_type i$ INT) (has_type j$ INT)) (and (and (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) s!))) (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) s! i$))))) (= (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) s! i$) j$) page_id!))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) s! i$) j$))))) :pattern ((lib!page_organization.is_in_lls.? page_id! s!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::is_used_header")
(assert (fuel_bool_default fuel%lib!page_organization.is_used_header.))
(assert (=> (fuel_bool fuel%lib!page_organization.is_used_header.) (forall ((pd! Poly)) (! (= (lib!page_organization.is_used_header.? pd!) (and (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. pd!)) (core!option.Option./Some (I 0))) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. pd!)))) :pattern ((lib!page_organization.is_used_header.? pd!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::seg_free_prefix")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.seg_free_prefix.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.seg_free_prefix.) (forall ((self! Poly) (segment_id! Poly) (idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.seg_free_prefix.? self! segment_id! idx!) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (%Poly%lib!tokens.SegmentId. segment_id!)) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= 0 tmp%%$) (< tmp%%$ (%I idx!))))) (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))) false)) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.seg_free_prefix.? self! segment_id! idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::get_VeryUnready_2")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.get_VeryUnready_2.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.get_VeryUnready_2.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.get_VeryUnready_2.? self!) (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.get_VeryUnready_2.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::good_range_very_unready")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.good_range_very_unready.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.good_range_very_unready.) (forall ((self! Poly) (page_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.good_range_very_unready.? self! page_id!) (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id!) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!))))))) (and (<= (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) count$) lib!config.SLICES_PER_SEGMENT.?) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) tmp%%$) (< tmp%%$ (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) count$))))) (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))) false)) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.good_range_very_unready.? self! page_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::popped_basics")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.popped_basics.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.popped_basics.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.popped_basics.? self!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (=> (not (is-lib!page_organization.Popped./No_ tmp%%$)) (ite (is-lib!page_organization.Popped./Ready_ tmp%%$) (let ((page_id$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id$)) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))) false)) (lib!page_organization.is_unused_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))) (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) 0))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))) (<= (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))))))) lib!config.SLICES_PER_SEGMENT.?)) (not (lib!page_organization.is_in_lls.? (Poly%lib!tokens.PageId. page_id$) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))))))) (ite (is-lib!page_organization.Popped./Used_ tmp%%$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id$)) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))) true)) (lib!page_organization.is_used_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))) (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) 0))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))) (<= (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))))))) lib!config.SLICES_PER_SEGMENT.?))) (ite (is-lib!page_organization.Popped./SegmentCreating_ tmp%%$) (let ((segment_id$ (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.SegmentId. segment_id$))) (ite (is-lib!page_organization.Popped./SegmentFreeing_ tmp%%$) (let ((segment_id$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((idx$ (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.SegmentId. segment_id$)) (and (< 0 idx$) (<= idx$ lib!config.SLICES_PER_SEGMENT.?))) (lib!page_organization.PageOrg.impl&%4.seg_free_prefix.? self! (Poly%lib!tokens.SegmentId. segment_id$) (I idx$))) (= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.SegmentId. segment_id$)))) 0)) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (and (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id$)) segment_id$) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id$)))) (and (<= 0 tmp%%$1) (< tmp%%$1 idx$)))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$)) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$))) false))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$))))))) (ite (is-lib!page_organization.Popped./VeryUnready_ tmp%%$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip start$)))))) (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id$)) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))) false)) (lib!page_organization.PageOrg.impl&%4.good_range_very_unready.? self! (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip start$))))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.SegmentId. segment_id$))) (let ((tmp%%$2 (Add start$ count$))) (and (and (<= 1 start$) (< start$ tmp%%$2)) (<= tmp%%$2 lib!config.SLICES_PER_SEGMENT.?)))))))) (let ((segment_id$ (lib!page_organization.Popped./ExtraCount/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.SegmentId. segment_id$))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.popped_basics.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_popped_basics")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_popped_basics. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_popped_basics. s!) (lib!page_organization.PageOrg.impl&%4.popped_basics.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_popped_basics. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_popped_basics. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_popped_basics. s!) (lib!page_organization.PageOrg.impl&%4.popped_basics.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_popped_basics. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::data_for_used_header")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.data_for_used_header.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.data_for_used_header.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.data_for_used_header.? self!) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$) (=> (lib!page_organization.is_used_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$)) (and (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$)))) (> (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$))))))) 0)) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$))) (core!option.Option./Some (I 0))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.data_for_used_header.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_data_for_used_header")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_data_for_used_header. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_data_for_used_header. s!) (lib!page_organization.PageOrg.impl&%4.data_for_used_header.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_data_for_used_header. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_data_for_used_header. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_data_for_used_header. s!) (lib!page_organization.PageOrg.impl&%4.data_for_used_header.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_data_for_used_header. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::inv_segment_creating")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.inv_segment_creating.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.inv_segment_creating.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.inv_segment_creating.? self!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (=> (is-lib!page_organization.Popped./SegmentCreating_ tmp%%$) (let ((segment_id$ (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) segment_id$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$)) (and (and (and (and (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.inv_segment_creating.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_inv_segment_creating")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_segment_creating. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_segment_creating. s!) (lib!page_organization.PageOrg.impl&%4.inv_segment_creating.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_segment_creating. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_segment_creating. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_segment_creating. s!) (lib!page_organization.PageOrg.impl&%4.inv_segment_creating.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_segment_creating. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::inv_very_unready")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.inv_very_unready.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.inv_very_unready.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.inv_very_unready.? self!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (=> (is-lib!page_organization.Popped./VeryUnready_ tmp%%$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) segment_id$) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= start$ tmp%%$1) (< tmp%%$1 (Add start$ count$))))) (and (and (and (and (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.inv_very_unready.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_inv_very_unready")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_very_unready. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_very_unready. s!) (lib!page_organization.PageOrg.impl&%4.inv_very_unready.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_very_unready. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_very_unready. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_very_unready. s!) (lib!page_organization.PageOrg.impl&%4.inv_very_unready.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_very_unready. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::inv_ready")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.inv_ready.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.inv_ready.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.inv_ready.? self!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (=> (is-lib!page_organization.Popped./Ready_ tmp%%$) (let ((page_id$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$1) (< tmp%%$1 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))))))))))) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (and (and (and (and (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))) (core!option.Option./Some (I (nClip (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))))) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= (%Poly%lib!tokens.PageId. pid$) page_id$))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.inv_ready.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_inv_ready")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_ready. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_ready. s!) (lib!page_organization.PageOrg.impl&%4.inv_ready.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_ready. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_ready. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_ready. s!) (lib!page_organization.PageOrg.impl&%4.inv_ready.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_ready. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::inv_used")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.inv_used.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.inv_used.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.inv_used.? self!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (=> (is-lib!page_organization.Popped./Used_ tmp%%$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$1) (< tmp%%$1 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))))))))))) (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))) (core!option.Option./Some (I (nClip (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))))) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= (%Poly%lib!tokens.PageId. pid$) page_id$))) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= (%Poly%lib!tokens.PageId. pid$) page_id$))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$)))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.inv_used.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_inv_used")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_used. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_used. s!) (lib!page_organization.PageOrg.impl&%4.inv_used.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_used. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_used. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_used. s!) (lib!page_organization.PageOrg.impl&%4.inv_used.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_inv_used. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::data_for_unused_header")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.data_for_unused_header.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.data_for_unused_header.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.data_for_unused_header.? self!) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$) (=> (lib!page_organization.is_unused_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$)) (and (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$)))) (> (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$))))))) 0)) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$))) (core!option.Option./Some (I 0))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.data_for_unused_header.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_data_for_unused_header")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_data_for_unused_header. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_data_for_unused_header. s!) (lib!page_organization.PageOrg.impl&%4.data_for_unused_header.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_data_for_unused_header. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_data_for_unused_header. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_data_for_unused_header. s!) (lib!page_organization.PageOrg.impl&%4.data_for_unused_header.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_data_for_unused_header. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::get_prev")
(assert (fuel_bool_default fuel%lib!page_organization.get_prev.))
(assert (=> (fuel_bool fuel%lib!page_organization.get_prev.) (forall ((ll! Poly) (j! Poly)) (! (= (lib!page_organization.get_prev.? ll! j!) (ite (= (%I j!) 0) core!option.Option./None (core!option.Option./Some (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! (I (Sub (%I j!) 1)))))) :pattern ((lib!page_organization.get_prev.? ll! j!))))))
(assert (forall ((ll! Poly) (j! Poly)) (! (=> (and (has_type ll! (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)) (has_type j! INT)) (has_type (Poly%core!option.Option. (lib!page_organization.get_prev.? ll! j!)) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) :pattern ((lib!page_organization.get_prev.? ll! j!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::get_next")
(assert (fuel_bool_default fuel%lib!page_organization.get_next.))
(assert (=> (fuel_bool fuel%lib!page_organization.get_next.) (forall ((ll! Poly) (j! Poly)) (! (= (lib!page_organization.get_next.? ll! j!) (ite (= (%I j!) (Sub (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!) 1)) core!option.Option./None (core!option.Option./Some (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! (I (Add (%I j!) 1)))))) :pattern ((lib!page_organization.get_next.? ll! j!))))))
(assert (forall ((ll! Poly) (j! Poly)) (! (=> (and (has_type ll! (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)) (has_type j! INT)) (has_type (Poly%core!option.Option. (lib!page_organization.get_next.? ll! j!)) (TYPE%core!option.Option. $ TYPE%lib!tokens.PageId.))) :pattern ((lib!page_organization.get_next.? ll! j!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::valid_ll_i")
(assert (fuel_bool_default fuel%lib!page_organization.valid_ll_i.))
(assert (=> (fuel_bool fuel%lib!page_organization.valid_ll_i.) (forall ((pages! Poly) (ll! Poly) (j! Poly)) (! (= (lib!page_organization.valid_ll_i.? pages! ll! j!) (and (and (and (and (and (<= 0 (%I j!)) (< (%I j!) (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. pages!) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! j!))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. pages! (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! j!)))))) (= (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. pages! (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! j!))))))))) (lib!page_organization.get_prev.? ll! j!))) (= (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. pages! (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! j!))))))))) (lib!page_organization.get_next.? ll! j!)))) :pattern ((lib!page_organization.valid_ll_i.? pages! ll! j!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::valid_ll")
(assert (fuel_bool_default fuel%lib!page_organization.valid_ll.))
(assert (=> (fuel_bool fuel%lib!page_organization.valid_ll.) (forall ((pages! Poly) (header! Poly) (ll! Poly)) (! (= (lib!page_organization.valid_ll.? pages! header! ll!) (and (and (let ((tmp%%$ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. header!)))) (ite (is-core!option.Option./Some_ tmp%%$) (let ((first_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (and (not (= (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!) 0)) (= (%Poly%lib!tokens.PageId. (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! (I 0))) first_id$))) (= (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!) 0))) (let ((tmp%%$ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. header!)))) (ite (is-core!option.Option./Some_ tmp%%$) (let ((last_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (and (not (= (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!) 0)) (= (%Poly%lib!tokens.PageId. (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. ll! (I (Sub (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!) 1)))) last_id$))) (= (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!) 0)))) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. ll!))) (lib!page_organization.valid_ll_i.? pages! ll! j$))) :pattern ((lib!page_organization.valid_ll_i.? pages! ll! j$)))))) :pattern ((lib!page_organization.valid_ll.? pages! header! ll!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ll_inv_valid_unused")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!)))))) (lib!page_organization.valid_ll.? (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. self!))) i$) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. self!))) i$)) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_ll_inv_valid_unused")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_unused. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_unused. s!) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_unused. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_unused. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_unused. s!) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_unused. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ll_inv_valid_used")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!)))))) (lib!page_organization.valid_ll.? (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. self!))) i$) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$)))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. self!))) i$)) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_ll_inv_valid_used")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_used. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_used. s!) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_used. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_used. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_used. s!) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_used. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ll_inv_valid_unused2")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!)))))) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$)))) (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)) (lib!page_organization.is_unused_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))) (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$))) 0))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))))) (= (%I i$) (lib!bin_sizes.smallest_sbin_fitting_size.? (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))))))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_ll_inv_valid_unused2")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_unused2. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_unused2. s!) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_unused2. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_unused2. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_unused2. s!) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_unused2. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ll_inv_valid_used2")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2.? self!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!)))))) (forall ((j$ Poly)) (! (=> (has_type j$ INT) (=> (and (<= 0 (%I j$)) (< (%I j$) (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$)))) (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)) (lib!page_organization.is_used_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))) (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$))) 0))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))))) (= (%B (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))))))) (= (%I i$) lib!config.BIN_FULL.?))) (let ((tmp%%$ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))))) (and (not (is-core!option.Option./None_ tmp%%$)) (let ((bin$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$))))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$))))))) (and (and (and (lib!bin_sizes.valid_bin_idx.? (I bin$)) (= bsize$ (lib!bin_sizes.size_of_bin.? (I bin$)))) (=> (not (= (%I i$) lib!config.BIN_FULL.?)) (= (%I i$) bin$))) (<= bsize$ lib!config.MEDIUM_OBJ_SIZE_MAX.?))))))))) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)) :pattern ((vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$) j$)))))) :pattern ((vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!))) i$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_ll_inv_valid_used2")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_used2. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_used2. s!) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_used2. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_used2. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_used2. s!) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_valid_used2. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::expect_out_of_lists")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.expect_out_of_lists.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.expect_out_of_lists.) (forall ((self! Poly) (pid! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.expect_out_of_lists.? self! pid!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (and (not (is-lib!page_organization.Popped./No_ tmp%%$)) (and (not (is-lib!page_organization.Popped./ExtraCount_ tmp%%$)) (ite (is-lib!page_organization.Popped./Ready_ tmp%%$) (let ((page_id$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (= (%Poly%lib!tokens.PageId. pid!) page_id$)) (ite (is-lib!page_organization.Popped./Used_ tmp%%$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (= (%Poly%lib!tokens.PageId. pid!) page_id$)) (ite (is-lib!page_organization.Popped./SegmentCreating_ tmp%%$) (let ((segment_id$ (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) false) (ite (is-lib!page_organization.Popped./SegmentFreeing_ tmp%%$) (let ((segment_id$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((idx$ (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid!)) segment_id$) (< (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid!)) idx$)))) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) false)))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.expect_out_of_lists.? self! pid!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::ll_inv_exists_in_some_list")
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.ll_inv_exists_in_some_list.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.ll_inv_exists_in_some_list.? self!) (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id$))) (core!option.Option./Some (I 0)))) (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id$)) 0))) (not (lib!page_organization.PageOrg.impl&%4.expect_out_of_lists.? self! page_id$))) (or (lib!page_organization.is_in_lls.? page_id$ (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. self!)))) (lib!page_organization.is_in_lls.? page_id$ (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. self!))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.ll_inv_exists_in_some_list.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_ll_inv_exists_in_some_list")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_exists_in_some_list. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_exists_in_some_list. s!) (lib!page_organization.PageOrg.impl&%4.ll_inv_exists_in_some_list.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_exists_in_some_list. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_exists_in_some_list. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_exists_in_some_list. s!) (lib!page_organization.PageOrg.impl&%4.ll_inv_exists_in_some_list.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_ll_inv_exists_in_some_list. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::is_the_popped")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.is_the_popped.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.is_the_popped.) (forall ((segment_id! Poly) (idx! Poly) (popped! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.is_the_popped.? segment_id! idx! popped!) (and (not (is-lib!page_organization.Popped./No_ (%Poly%lib!page_organization.Popped. popped!))) (ite (or (is-lib!page_organization.Popped./Ready_ (%Poly%lib!page_organization.Popped. popped!)) (is-lib!page_organization.Popped./Used_ (%Poly%lib!page_organization.Popped. popped!))) (let ((page_id$ (ite (is-lib!page_organization.Popped./Ready_ (%Poly%lib!page_organization.Popped. popped!)) (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. popped!)) (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. popped!))))) (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%Poly%lib!tokens.SegmentId. segment_id!)) (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%I idx!)))) (and (not (is-lib!page_organization.Popped./SegmentCreating_ (%Poly%lib!page_organization.Popped. popped!))) (and (not (is-lib!page_organization.Popped./SegmentFreeing_ (%Poly%lib!page_organization.Popped. popped!))) (and (is-lib!page_organization.Popped./VeryUnready_ (%Poly%lib!page_organization.Popped. popped!)) (let ((sid$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. popped!)))) (let ((i$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. popped!)))) (and (= sid$ (%Poly%lib!tokens.SegmentId. segment_id!)) (= i$ (%I idx!))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.is_the_popped.? segment_id! idx! popped!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::popped_len")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.popped_len.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.popped_len.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.popped_len.? self!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (ite (is-lib!page_organization.Popped./No_ tmp%%$) (%I (vstd!pervasive.arbitrary.? $ INT)) (ite (or (is-lib!page_organization.Popped./Ready_ tmp%%$) (is-lib!page_organization.Popped./Used_ tmp%%$)) (%I (let ((page_id$ (ite (is-lib!page_organization.Popped./Ready_ tmp%%$) (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))) (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$)))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$))))))))) (ite (is-lib!page_organization.Popped./SegmentCreating_ tmp%%$) (%I (vstd!pervasive.arbitrary.? $ INT)) (ite (is-lib!page_organization.Popped./SegmentFreeing_ tmp%%$) (%I (vstd!pervasive.arbitrary.? $ INT)) (ite (is-lib!page_organization.Popped./VeryUnready_ tmp%%$) (let ((sid$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((i$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) count$))) (%I (vstd!pervasive.arbitrary.? $ INT))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.popped_len.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::good_range_used")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.good_range_used.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.good_range_used.) (forall ((self! Poly) (page_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.good_range_used.? self! page_id!) (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id!) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))) (core!option.Option./Some (I 0)))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))))) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))))))))) (and (<= (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) count$)) lib!config.SLICES_PER_SEGMENT.?) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) tmp%%$) (< tmp%%$ (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) count$)))))) (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))) true)) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))) (core!option.Option./Some (I (nClip (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)))))))) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= pid$ page_id!))) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= pid$ page_id!))) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= pid$ page_id!))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.good_range_used.? self! page_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::good_range_unused")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.good_range_unused.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.good_range_unused.) (forall ((self! Poly) (page_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.good_range_unused.? self! page_id!) (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) page_id!) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))) (core!option.Option./Some (I 0)))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))))) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))))))))) (and (<= (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) count$)) lib!config.SLICES_PER_SEGMENT.?) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!))) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) tmp%%$) (< tmp%%$ (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) count$)))))) (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))) false)) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= pid$ page_id!))) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= pid$ page_id!))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))) (ite (or (= pid$ page_id!) (= (%Poly%lib!tokens.PageId. pid$) (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (nClip (Sub (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) page_id!))))))))) 1))))))) (core!option.Option./Some (I (nClip (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)))))) core!option.Option./None))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.good_range_unused.? self! page_id!))))))
(set-info :comment ";; Spec-Termination lib::page_organization::PageOrg::State::attached_rec")
(set-info :comment ";; page_organization.rs:372:5: 372:94 (#0)")
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::attached_rec")
(declare-const fuel_nat%lib!page_organization.PageOrg.impl&%4.attached_rec. Fuel)
(assert (forall ((self! Poly) (segment_id! Poly) (idx! Poly) (sp! Poly) (fuel% Fuel)) (! (= (lib!page_organization.PageOrg.impl&%4.rec%attached_rec.? self! segment_id! idx! sp! fuel%) (lib!page_organization.PageOrg.impl&%4.rec%attached_rec.? self! segment_id! idx! sp! zero)) :pattern ((lib!page_organization.PageOrg.impl&%4.rec%attached_rec.? self! segment_id! idx! sp! fuel%)))))
(assert (forall ((self! Poly) (segment_id! Poly) (idx! Poly) (sp! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%lib!page_organization.PageOrg.State.) (has_type segment_id! TYPE%lib!tokens.SegmentId.) (has_type idx! INT) (has_type sp! BOOL)) (= (lib!page_organization.PageOrg.impl&%4.rec%attached_rec.? self! segment_id! idx! sp! (succ fuel%)) (ite (= (%I idx!) lib!config.SLICES_PER_SEGMENT.?) (not (%B sp!)) (and (not (> (%I idx!) lib!config.SLICES_PER_SEGMENT.?)) (ite (lib!page_organization.PageOrg.impl&%4.is_the_popped.? segment_id! idx! (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (and (and (and (%B sp!) (> (lib!page_organization.PageOrg.impl&%4.popped_len.? self!) 0)) (<= (Add (%I idx!) (lib!page_organization.PageOrg.impl&%4.popped_len.? self!)) lib!config.SLICES_PER_SEGMENT.?)) (lib!page_organization.PageOrg.impl&%4.rec%attached_rec.? self! segment_id! (I (Add (%I idx!) (lib!page_organization.PageOrg.impl&%4.popped_len.? self!))) (B false) fuel%)) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. segment_id!) (%I (I (nClip (%I idx!))))))) (and (and (and (and (=> (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))) (lib!page_organization.PageOrg.impl&%4.good_range_used.? self! (Poly%lib!tokens.PageId. page_id$))) (=> (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageOrg.impl&%4.good_range_unused.? self! (Poly%lib!tokens.PageId. page_id$)))) (> (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))))) 0)) (<= (Add (%I idx!) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$))))))))) lib!config.SLICES_PER_SEGMENT.?)) (lib!page_organization.PageOrg.impl&%4.rec%attached_rec.? self! segment_id! (I (Add (%I idx!) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))))))) sp! fuel%)))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.rec%attached_rec.? self! segment_id! idx! sp! (succ fuel%))))))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.attached_rec.) (forall ((self! Poly) (segment_id! Poly) (idx! Poly) (sp! Poly)) (! (=> (and (has_type self! TYPE%lib!page_organization.PageOrg.State.) (has_type segment_id! TYPE%lib!tokens.SegmentId.) (has_type idx! INT) (has_type sp! BOOL)) (= (lib!page_organization.PageOrg.impl&%4.attached_rec.? self! segment_id! idx! sp!) (lib!page_organization.PageOrg.impl&%4.rec%attached_rec.? self! segment_id! idx! sp! (succ fuel_nat%lib!page_organization.PageOrg.impl&%4.attached_rec.)))) :pattern ((lib!page_organization.PageOrg.impl&%4.attached_rec.? self! segment_id! idx! sp!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::good_range0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.good_range0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.good_range0.) (forall ((self! Poly) (segment_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.good_range0.? self! segment_id!) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. segment_id!) (%I (I 0))))) (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id$)) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0)))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (and (<= (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)) lib!config.SLICES_PER_SEGMENT.?) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$) (< tmp%%$ (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))) false)) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$)))) (= (%Poly%lib!tokens.PageId. pid$) page_id$))) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))) (core!option.Option./Some (I (nClip (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!)))) pid$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) pid$))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.good_range0.? self! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::attached_rec0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.attached_rec0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.attached_rec0.) (forall ((self! Poly) (segment_id! Poly) (sp! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.attached_rec0.? self! segment_id! sp!) (and (lib!page_organization.PageOrg.impl&%4.good_range0.? self! segment_id!) (lib!page_organization.PageOrg.impl&%4.attached_rec.? self! segment_id! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. segment_id!) (%I (I 0)))))))))) sp!))) :pattern ((lib!page_organization.PageOrg.impl&%4.attached_rec0.? self! segment_id! sp!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::popped_for_seg")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.popped_for_seg.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.popped_for_seg.) (forall ((self! Poly) (segment_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.popped_for_seg.? self! segment_id!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (and (not (is-lib!page_organization.Popped./No_ tmp%%$)) (ite (or (is-lib!page_organization.Popped./Ready_ tmp%%$) (is-lib!page_organization.Popped./Used_ tmp%%$)) (let ((page_id$ (ite (is-lib!page_organization.Popped./Ready_ tmp%%$) (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))) (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$)))))) (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%Poly%lib!tokens.SegmentId. segment_id!))) (and (not (is-lib!page_organization.Popped./SegmentCreating_ tmp%%$)) (and (not (is-lib!page_organization.Popped./SegmentFreeing_ tmp%%$)) (and (is-lib!page_organization.Popped./VeryUnready_ tmp%%$) (let ((sid$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (= sid$ (%Poly%lib!tokens.SegmentId. segment_id!)))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.popped_for_seg.? self! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::attached_ranges_segment")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.attached_ranges_segment.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.attached_ranges_segment.) (forall ((self! Poly) (segment_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.attached_ranges_segment.? self! segment_id!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (ite (let ((sid$ (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (and (is-lib!page_organization.Popped./SegmentCreating_ tmp%%$) (= sid$ (%Poly%lib!tokens.SegmentId. segment_id!)))) (let ((sid$ (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) true) (ite (let ((sid$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((idx$ (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (and (is-lib!page_organization.Popped./SegmentFreeing_ tmp%%$) (and (= sid$ (%Poly%lib!tokens.SegmentId. segment_id!)) (> idx$ 0))))) (let ((sid$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((idx$ (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (lib!page_organization.PageOrg.impl&%4.attached_rec.? self! segment_id! (I idx$) (B false)))) (lib!page_organization.PageOrg.impl&%4.attached_rec0.? self! segment_id! (B (lib!page_organization.PageOrg.impl&%4.popped_for_seg.? self! segment_id!))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.attached_ranges_segment.? self! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::attached_ranges")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.attached_ranges.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.attached_ranges.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.attached_ranges.? self!) (forall ((segment_id$ Poly)) (! (=> (has_type segment_id$ TYPE%lib!tokens.SegmentId.) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) segment_id$) (lib!page_organization.PageOrg.impl&%4.attached_ranges_segment.? self! segment_id$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. self!)))) segment_id$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.attached_ranges.? self!))))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_msg_attached_ranges")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_msg_attached_ranges. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_msg_attached_ranges. s!) (lib!page_organization.PageOrg.impl&%4.attached_ranges.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_msg_attached_ranges. s!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_attached_ranges. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((s! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_attached_ranges. s!) (lib!page_organization.PageOrg.impl&%4.attached_ranges.? (Poly%lib!page_organization.PageOrg.State. s!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_msg_attached_ranges. s!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_3")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_3.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_3.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_3.? self!) (lib!page_organization.PageOrg.Step./split_page/3 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_3.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_take_page_from_unused_queue_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_0.? self!) (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_take_page_from_unused_queue_1")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_1.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_1.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_1.? self!) (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/1 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_1.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_take_page_from_unused_queue_2")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_2.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_2.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_2.? self!) (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/2 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_take_page_from_unused_queue_2.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_split_page_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_split_page_0.? self!) (lib!page_organization.PageOrg.Step./split_page/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_split_page_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%0.arrow_split_page_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_split_page_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_split_page_1")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_1.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_1.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_split_page_1.? self!) (lib!page_organization.PageOrg.Step./split_page/1 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_split_page_1.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_split_page_2")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_2.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_2.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_split_page_2.? self!) (lib!page_organization.PageOrg.Step./split_page/2 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_split_page_2.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_split_page_3")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_3.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_split_page_3.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_split_page_3.? self!) (lib!page_organization.PageOrg.Step./split_page/3 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_split_page_3.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_create_segment_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_create_segment_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_create_segment_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_create_segment_0.? self!) (lib!page_organization.PageOrg.Step./create_segment/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_create_segment_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.PageOrg.impl&%0.arrow_create_segment_0.? self!)) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_create_segment_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_forget_about_first_page_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_forget_about_first_page_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_forget_about_first_page_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_forget_about_first_page_0.? self!) (lib!page_organization.PageOrg.Step./forget_about_first_page/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_forget_about_first_page_0.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_free_to_unused_queue_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_free_to_unused_queue_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_free_to_unused_queue_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_free_to_unused_queue_0.? self!) (lib!page_organization.PageOrg.Step./free_to_unused_queue/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_free_to_unused_queue_0.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_set_range_to_used_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_set_range_to_used_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_set_range_to_used_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_set_range_to_used_0.? self!) (lib!page_organization.PageOrg.Step./set_range_to_used/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_set_range_to_used_0.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_into_used_list_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_into_used_list_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_into_used_list_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_into_used_list_0.? self!) (lib!page_organization.PageOrg.Step./into_used_list/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_into_used_list_0.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_into_used_list_back_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_into_used_list_back_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_into_used_list_back_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_into_used_list_back_0.? self!) (lib!page_organization.PageOrg.Step./into_used_list_back/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_into_used_list_back_0.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_out_of_used_list_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_0.? self!) (lib!page_organization.PageOrg.Step./out_of_used_list/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_out_of_used_list_1")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_1.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_1.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_1.? self!) (lib!page_organization.PageOrg.Step./out_of_used_list/1 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_1.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_out_of_used_list_2")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_2.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_2.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_2.? self!) (lib!page_organization.PageOrg.Step./out_of_used_list/2 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_out_of_used_list_2.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_segment_freeing_start_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_segment_freeing_start_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_segment_freeing_start_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_segment_freeing_start_0.? self!) (lib!page_organization.PageOrg.Step./segment_freeing_start/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_segment_freeing_start_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.PageOrg.impl&%0.arrow_segment_freeing_start_0.? self!)) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_segment_freeing_start_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%0.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%0.arrow_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%0.arrow_dummy_to_use_type_params_0.? self!) (lib!page_organization.PageOrg.Step./dummy_to_use_type_params/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_dummy_to_use_type_params_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!page_organization.PageOrg.State. (lib!page_organization.PageOrg.impl&%0.arrow_dummy_to_use_type_params_0.? self!)) TYPE%lib!page_organization.PageOrg.State.)) :pattern ((lib!page_organization.PageOrg.impl&%0.arrow_dummy_to_use_type_params_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_take_page_from_unused_queue")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_take_page_from_unused_queue.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_take_page_from_unused_queue.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_take_page_from_unused_queue.? self!) (is-lib!page_organization.PageOrg.Step./take_page_from_unused_queue_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_take_page_from_unused_queue.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_take_page_from_unused_queue_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_0.? self!) (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_take_page_from_unused_queue_1")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_1.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_1.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_1.? self!) (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/1 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_1.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_take_page_from_unused_queue_2")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_2.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_2.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_2.? self!) (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/2 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_take_page_from_unused_queue_2.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_split_page")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_split_page.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_split_page.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_split_page.? self!) (is-lib!page_organization.PageOrg.Step./split_page_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_split_page.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_split_page_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_split_page_0.? self!) (lib!page_organization.PageOrg.Step./split_page/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_split_page_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%1.get_split_page_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.PageOrg.impl&%1.get_split_page_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_split_page_1")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_1.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_1.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_split_page_1.? self!) (lib!page_organization.PageOrg.Step./split_page/1 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_split_page_1.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_split_page_2")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_2.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_2.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_split_page_2.? self!) (lib!page_organization.PageOrg.Step./split_page/2 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_split_page_2.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_split_page_3")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_3.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_split_page_3.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_split_page_3.? self!) (lib!page_organization.PageOrg.Step./split_page/3 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_split_page_3.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_create_segment")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_create_segment.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_create_segment.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_create_segment.? self!) (is-lib!page_organization.PageOrg.Step./create_segment_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_create_segment.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_create_segment_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_create_segment_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_create_segment_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_create_segment_0.? self!) (lib!page_organization.PageOrg.Step./create_segment/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_create_segment_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.PageOrg.impl&%1.get_create_segment_0.? self!)) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.PageOrg.impl&%1.get_create_segment_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_allocate_popped")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_allocate_popped.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_allocate_popped.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_allocate_popped.? self!) (is-lib!page_organization.PageOrg.Step./allocate_popped_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_allocate_popped.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_forget_about_first_page")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_forget_about_first_page.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_forget_about_first_page.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_forget_about_first_page.? self!) (is-lib!page_organization.PageOrg.Step./forget_about_first_page_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_forget_about_first_page.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_forget_about_first_page_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_forget_about_first_page_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_forget_about_first_page_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_forget_about_first_page_0.? self!) (lib!page_organization.PageOrg.Step./forget_about_first_page/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_forget_about_first_page_0.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_forget_about_first_page2")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_forget_about_first_page2.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_forget_about_first_page2.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_forget_about_first_page2.? self!) (is-lib!page_organization.PageOrg.Step./forget_about_first_page2_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_forget_about_first_page2.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_clear_ec")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_clear_ec.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_clear_ec.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_clear_ec.? self!) (is-lib!page_organization.PageOrg.Step./clear_ec_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_clear_ec.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_free_to_unused_queue")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_free_to_unused_queue.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_free_to_unused_queue.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_free_to_unused_queue.? self!) (is-lib!page_organization.PageOrg.Step./free_to_unused_queue_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_free_to_unused_queue.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_free_to_unused_queue_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_free_to_unused_queue_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_free_to_unused_queue_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_free_to_unused_queue_0.? self!) (lib!page_organization.PageOrg.Step./free_to_unused_queue/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_free_to_unused_queue_0.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_set_range_to_used")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_set_range_to_used.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_set_range_to_used.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_set_range_to_used.? self!) (is-lib!page_organization.PageOrg.Step./set_range_to_used_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_set_range_to_used.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_set_range_to_used_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_set_range_to_used_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_set_range_to_used_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_set_range_to_used_0.? self!) (lib!page_organization.PageOrg.Step./set_range_to_used/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_set_range_to_used_0.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_set_range_to_not_used")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_set_range_to_not_used.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_set_range_to_not_used.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_set_range_to_not_used.? self!) (is-lib!page_organization.PageOrg.Step./set_range_to_not_used_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_set_range_to_not_used.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_into_used_list")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_into_used_list.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_into_used_list.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_into_used_list.? self!) (is-lib!page_organization.PageOrg.Step./into_used_list_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_into_used_list.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_into_used_list_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_into_used_list_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_into_used_list_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_into_used_list_0.? self!) (lib!page_organization.PageOrg.Step./into_used_list/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_into_used_list_0.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_into_used_list_back")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_into_used_list_back.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_into_used_list_back.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_into_used_list_back.? self!) (is-lib!page_organization.PageOrg.Step./into_used_list_back_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_into_used_list_back.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_into_used_list_back_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_into_used_list_back_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_into_used_list_back_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_into_used_list_back_0.? self!) (lib!page_organization.PageOrg.Step./into_used_list_back/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_into_used_list_back_0.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_out_of_used_list")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_out_of_used_list.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_out_of_used_list.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_out_of_used_list.? self!) (is-lib!page_organization.PageOrg.Step./out_of_used_list_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_out_of_used_list.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_out_of_used_list_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_0.? self!) (lib!page_organization.PageOrg.Step./out_of_used_list/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_out_of_used_list_1")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_1.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_1.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_1.? self!) (lib!page_organization.PageOrg.Step./out_of_used_list/1 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_1.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_out_of_used_list_2")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_2.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_2.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_2.? self!) (lib!page_organization.PageOrg.Step./out_of_used_list/2 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_out_of_used_list_2.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_segment_freeing_start")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_segment_freeing_start.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_segment_freeing_start.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_segment_freeing_start.? self!) (is-lib!page_organization.PageOrg.Step./segment_freeing_start_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_segment_freeing_start.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_segment_freeing_start_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_segment_freeing_start_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_segment_freeing_start_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_segment_freeing_start_0.? self!) (lib!page_organization.PageOrg.Step./segment_freeing_start/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_segment_freeing_start_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.PageOrg.impl&%1.get_segment_freeing_start_0.? self!)) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.PageOrg.impl&%1.get_segment_freeing_start_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_segment_freeing_finish")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_segment_freeing_finish.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_segment_freeing_finish.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_segment_freeing_finish.? self!) (is-lib!page_organization.PageOrg.Step./segment_freeing_finish_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_segment_freeing_finish.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_merge_with_after")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_merge_with_after.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_merge_with_after.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_merge_with_after.? self!) (is-lib!page_organization.PageOrg.Step./merge_with_after_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_merge_with_after.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_merge_with_before")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_merge_with_before.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_merge_with_before.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_merge_with_before.? self!) (is-lib!page_organization.PageOrg.Step./merge_with_before_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_merge_with_before.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.is_dummy_to_use_type_params.))
(define-fun is-lib!page_organization.PageOrg.Step./dummy_to_use_type_params_ ((c lib!page_organization.PageOrg.Step.)) Bool ((_ is lib!page_organization.PageOrg.Step./dummy_to_use_type_params) c))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.is_dummy_to_use_type_params.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.is_dummy_to_use_type_params.? self!) (is-lib!page_organization.PageOrg.Step./dummy_to_use_type_params_ (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.is_dummy_to_use_type_params.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Step::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%1.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%1.get_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%1.get_dummy_to_use_type_params_0.? self!) (lib!page_organization.PageOrg.Step./dummy_to_use_type_params/0 (%Poly%lib!page_organization.PageOrg.Step. self!))) :pattern ((lib!page_organization.PageOrg.impl&%1.get_dummy_to_use_type_params_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Step.) (has_type (Poly%lib!page_organization.PageOrg.State. (lib!page_organization.PageOrg.impl&%1.get_dummy_to_use_type_params_0.? self!)) TYPE%lib!page_organization.PageOrg.State.)) :pattern ((lib!page_organization.PageOrg.impl&%1.get_dummy_to_use_type_params_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Config::arrow_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%2.arrow_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%2.arrow_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%2.arrow_0.? self!) (lib!page_organization.PageOrg.Config./dummy_to_use_type_params/0 (%Poly%lib!page_organization.PageOrg.Config. self!))) :pattern ((lib!page_organization.PageOrg.impl&%2.arrow_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Config.) (has_type (Poly%lib!page_organization.PageOrg.State. (lib!page_organization.PageOrg.impl&%2.arrow_0.? self!)) TYPE%lib!page_organization.PageOrg.State.)) :pattern ((lib!page_organization.PageOrg.impl&%2.arrow_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Config::arrow_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%2.arrow_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%2.arrow_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%2.arrow_dummy_to_use_type_params_0.? self!) (lib!page_organization.PageOrg.Config./dummy_to_use_type_params/0 (%Poly%lib!page_organization.PageOrg.Config. self!))) :pattern ((lib!page_organization.PageOrg.impl&%2.arrow_dummy_to_use_type_params_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Config.) (has_type (Poly%lib!page_organization.PageOrg.State. (lib!page_organization.PageOrg.impl&%2.arrow_dummy_to_use_type_params_0.? self!)) TYPE%lib!page_organization.PageOrg.State.)) :pattern ((lib!page_organization.PageOrg.impl&%2.arrow_dummy_to_use_type_params_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Config::is_initialize")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%3.is_initialize.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%3.is_initialize.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%3.is_initialize.? self!) (is-lib!page_organization.PageOrg.Config./initialize_ (%Poly%lib!page_organization.PageOrg.Config. self!))) :pattern ((lib!page_organization.PageOrg.impl&%3.is_initialize.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Config::is_dummy_to_use_type_params")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%3.is_dummy_to_use_type_params.))
(define-fun is-lib!page_organization.PageOrg.Config./dummy_to_use_type_params_ ((c lib!page_organization.PageOrg.Config.)) Bool ((_ is lib!page_organization.PageOrg.Config./dummy_to_use_type_params) c))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%3.is_dummy_to_use_type_params.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%3.is_dummy_to_use_type_params.? self!) (is-lib!page_organization.PageOrg.Config./dummy_to_use_type_params_ (%Poly%lib!page_organization.PageOrg.Config. self!))) :pattern ((lib!page_organization.PageOrg.impl&%3.is_dummy_to_use_type_params.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::Config::get_dummy_to_use_type_params_0")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%3.get_dummy_to_use_type_params_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%3.get_dummy_to_use_type_params_0.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%3.get_dummy_to_use_type_params_0.? self!) (lib!page_organization.PageOrg.Config./dummy_to_use_type_params/0 (%Poly%lib!page_organization.PageOrg.Config. self!))) :pattern ((lib!page_organization.PageOrg.impl&%3.get_dummy_to_use_type_params_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.Config.) (has_type (Poly%lib!page_organization.PageOrg.State. (lib!page_organization.PageOrg.impl&%3.get_dummy_to_use_type_params_0.? self!)) TYPE%lib!page_organization.PageOrg.State.)) :pattern ((lib!page_organization.PageOrg.impl&%3.get_dummy_to_use_type_params_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::initialize_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.initialize_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.initialize_enabled.) (forall ((no%param Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.initialize_enabled.? no%param) true) :pattern ((lib!page_organization.PageOrg.impl&%4.initialize_enabled.? no%param))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::take_page_from_unused_queue_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_strong.) (forall ((pre! Poly) (post! Poly) (page_id! Poly) (sbin_idx! Poly) (list_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_strong.? pre! post! page_id! sbin_idx! list_idx!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_popped$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (lib!page_organization.PageOrg.impl&%4.valid_unused_page.? pre! page_id! sbin_idx! list_idx!) (and (or (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) lib!page_organization.Popped./No) (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) (lib!page_organization.Popped./SegmentFreeing (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))))))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!))))) (and (and (is-core!option.Option./Some_ tmp_for_match_0$) (let ((dlist_entry$ (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_0$)))))) true)) (let ((dlist_entry$ (ite (is-core!option.Option./Some_ tmp_for_match_0$) (let ((dlist_entry$2 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_0$)))))) dlist_entry$2) (%Poly%lib!page_organization.DlistEntry. (vstd!pervasive.arbitrary.? $ TYPE%lib!page_organization.DlistEntry.))))) (and (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!))) false) (let ((update_tmp_pages$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) page_id! (Poly%lib!page_organization.PageData. (let ((tmp%%$ core!option.Option./None)) (let ((tmp%%$1 core!option.Option./None)) (let ((tmp%%$2 core!option.Option./None)) (let ((tmp%%$3 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))))))))))))) (and (let ((tmp%%$ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (and (and (and (not (= prev_page_id$ (%Poly%lib!tokens.PageId. page_id!))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. prev_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))) false))))) (let ((update_tmp_pages$2 (let ((tmp%%$ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1) (Poly%lib!tokens.PageId. prev_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$6 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$7 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$8 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7))))))))) (let ((tmp%%$9 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$9))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$9))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$9))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$9))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$9))))))))))))) update_tmp_pages$3)) update_tmp_pages$1)))) (and (let ((tmp%%$ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (and (and (and (not (= next_page_id$ (%Poly%lib!tokens.PageId. page_id!))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))) false))))) (let ((update_tmp_pages$4 (let ((tmp%%$ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (let ((update_tmp_pages$5 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$12 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$13 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$14 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$13)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$14)))))))))))) (let ((tmp%%$15 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$12)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$15))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$15))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$15))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$15))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$15))))))))))))) update_tmp_pages$5)) update_tmp_pages$2)))) (and (ite (and (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((update_tmp_unused_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) sbin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))))))))) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$1)) (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (let ((update_tmp_unused_dlist_headers$2 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) sbin_idx! (Poly%lib!page_organization.DlistHeader. (let ((tmp%%$ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$17 (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (Poly%lib!page_organization.DlistHeader. tmp%%$17))))))))))))) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$2)) (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (let ((update_tmp_unused_dlist_headers$3 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) sbin_idx! (Poly%lib!page_organization.DlistHeader. (let ((tmp%%$ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$19 (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (Poly%lib!page_organization.DlistHeader. tmp%%$19))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))))))) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$3)) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))) (and (=> (and (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (not (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))))))) (let ((tmp_for_match_1$ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!))))) (and (and (is-core!option.Option./Some_ tmp_for_match_1$) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) true)) (let ((count$ (ite (is-core!option.Option./Some_ tmp_for_match_1$) (let ((count$2 (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) count$2) (%I (vstd!pervasive.arbitrary.? $ NAT))))) (and (>= count$ 1) (let ((last_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (nClip (Sub (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) count$)) 1))))))) (and (ite (not (= last_id$ (%Poly%lib!tokens.PageId. page_id!))) (let ((update_tmp_pages$6 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$4) (Poly%lib!tokens.PageId. last_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$ core!option.Option./None)) (let ((tmp%%$21 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$21))))))))))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_id$)) (and (and (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))) false) (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$6)))) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$4)) (and (and (not (= (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (core!option.Option./Some (Poly%lib!tokens.PageId. last_id$)))) (not (= (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (core!option.Option./Some (Poly%lib!tokens.PageId. last_id$))))) (and (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (ite (is-lib!page_organization.Popped./No_ tmp%%$) (let ((update_tmp_popped$1 (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)))) (%I (I count$)) (%B (B false))))) (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$1)) (ite (is-lib!page_organization.Popped./SegmentFreeing_ tmp%%$) (let ((sid$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((i$ (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((update_tmp_popped$2 (lib!page_organization.Popped./SegmentFreeing (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. sid$)) (%I (I (Add i$ count$)))))) (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$2)))) (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$)))) (let ((update_tmp_unused_lists$1 (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq.update.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. update_tmp_unused_lists$) sbin_idx! (vstd!seq_lib.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!) list_idx!))))) (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$1))))))))))))))))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$) (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$)))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_strong.? pre! post! page_id! sbin_idx! list_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::take_page_from_unused_queue_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_enabled.) (forall ((pre! Poly) (page_id! Poly) (sbin_idx! Poly) (list_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_enabled.? pre! page_id! sbin_idx! list_idx!) (and (lib!page_organization.PageOrg.impl&%4.valid_unused_page.? pre! page_id! sbin_idx! list_idx!) (or (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) lib!page_organization.Popped./No) (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) (lib!page_organization.Popped./SegmentFreeing (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_enabled.? pre! page_id! sbin_idx! list_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::split_page_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.split_page_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.split_page_strong.) (forall ((pre! Poly) (post! Poly) (page_id! Poly) (current_count! Poly) (target_count! Poly) (sbin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.split_page_strong.? pre! post! page_id! current_count! target_count! sbin_idx!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)))) (%I current_count!) (%B (B false)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) page_id!) (and (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))) (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))) (and (and (<= 1 (%I target_count!)) (< (%I target_count!) (%I current_count!))) (and (and (<= 0 (%I sbin_idx!)) (<= (%I sbin_idx!) lib!config.SEGMENT_BIN_MAX.?)) (and (= (%I sbin_idx!) (lib!bin_sizes.smallest_sbin_fitting_size.? (I (Sub (%I current_count!) (%I target_count!))))) (and (let ((next_page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) (%I target_count!)))))))) (let ((last_page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (nClip (Sub (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)) (%I current_count!)) 1))))))) (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_page_id$))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))) false)) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page_id$)))) false)) (let ((update_tmp_pages$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$ (core!option.Option./Some (I (nClip (Sub (%I current_count!) (%I target_count!))))))) (let ((tmp%%$1 (core!option.Option./Some (I 0)))) (let ((tmp%%$2 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))))))))) (let ((tmp%%$3 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))))))))))))) (let ((update_tmp_pages$2 (ite (> (Sub (%I current_count!) (%I target_count!)) 1) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1) (Poly%lib!tokens.PageId. last_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$ core!option.Option./None)) (let ((tmp%%$5 (core!option.Option./Some (I (nClip (Sub (Sub (%I current_count!) (%I target_count!)) 1)))))) (let ((tmp%%$6 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$6))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$6))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$6))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$6)))))))))))))) update_tmp_pages$3) update_tmp_pages$1))) (let ((update_tmp_unused_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) sbin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. next_page_id$)))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. next_page_id$))))))))))) (and (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (let ((first_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!))))))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. first_id$)) (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$))))) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$))))) (and (not (= first_id$ (%Poly%lib!tokens.PageId. page_id!))) (and (not (= first_id$ next_page_id$)) (and (not (= first_id$ last_page_id$)) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2) (Poly%lib!tokens.PageId. first_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$ (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$8 (core!option.Option./Some (Poly%lib!tokens.PageId. next_page_id$)))) (let ((tmp%%$9 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$8)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$9)))))))))))) (let ((tmp%%$10 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$10))))))))))))) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$4))))))))) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$2)) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)))) (%I target_count!) (%B (B false))))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.impl&%4.insert_front.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx! (Poly%lib!tokens.PageId. next_page_id$)))) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$1)))))))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$) (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$))))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.split_page_strong.? pre! post! page_id! current_count! target_count! sbin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::split_page_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.split_page_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.split_page_enabled.) (forall ((pre! Poly) (page_id! Poly) (current_count! Poly) (target_count! Poly) (sbin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.split_page_enabled.? pre! page_id! current_count! target_count! sbin_idx!) (let ((tmp_assert$ true)) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. page_id!)))) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. page_id!)))) (%I current_count!) (%B (B false)))) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) page_id!)))) (let ((tmp_assert$2 (and tmp_assert$1 (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!))))))) (and (=> tmp_assert$2 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!))))) (and (=> tmp_assert$2 (and (<= 1 (%I target_count!)) (< (%I target_count!) (%I current_count!)))) (and (=> tmp_assert$2 (and (<= 0 (%I sbin_idx!)) (<= (%I sbin_idx!) lib!config.SEGMENT_BIN_MAX.?))) (=> tmp_assert$2 (= (%I sbin_idx!) (lib!bin_sizes.smallest_sbin_fitting_size.? (I (Sub (%I current_count!) (%I target_count!)))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.split_page_enabled.? pre! page_id! current_count! target_count! sbin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::create_segment_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.create_segment_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.create_segment_strong.) (forall ((pre! Poly) (post! Poly) (segment_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.create_segment_strong.? pre! post! segment_id!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) lib!page_organization.Popped./No) (and (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) segment_id!)) (and (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%4 (%Poly%lib!tokens.SegmentId. segment_id!) 0 lib!config.SLICES_PER_SEGMENT.?))) (Poly%fun%1. (mk_fun (%%lambda%%5 (Poly%lib!page_organization.PageData. (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%B (B false)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))))) (let ((update_tmp_segments$ (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) segment_id! (Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData./SegmentData (%I (I 0)))))))) (let ((update_tmp_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_pages$))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./SegmentCreating (%Poly%lib!tokens.SegmentId. segment_id!)))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (and (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$) (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.create_segment_strong.? pre! post! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::create_segment_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.create_segment_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.create_segment_enabled.) (forall ((pre! Poly) (segment_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.create_segment_enabled.? pre! segment_id!) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) lib!page_organization.Popped./No) (not (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) segment_id!)))) :pattern ((lib!page_organization.PageOrg.impl&%4.create_segment_enabled.? pre! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::allocate_popped_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.allocate_popped_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.allocate_popped_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.allocate_popped_strong.? pre! post!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((idx$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((fals$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((idx$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((fals$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I idx$) (I count$) (B fals$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((fals$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (= fals$ false) (and (>= idx$ 0) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip idx$)))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$)) (and (> count$ 0) (and (<= (Add count$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) lib!config.SLICES_PER_SEGMENT.?) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$1) (< tmp%%$1 (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$)))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$2 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$2) (< tmp%%$2 (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$))))) (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))) (let ((changed_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%6 (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))) (Poly%fun%1. (mk_fun (%%lambda%%7 $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id$ $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (core!option.Option./Some (I (nClip count$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%B (B false)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. changed_pages$))))) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_pages$))) (and (<= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))) (Add lib!config.SLICES_PER_SEGMENT.? 1)) (let ((update_tmp_segments$1 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. update_tmp_segments$) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData./SegmentData (%I (I (Add (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))) 1))))))))) (let ((update_tmp_pages$ new_pages$)) (let ((update_tmp_popped$ (lib!page_organization.Popped./Ready (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)) (%B (B true))))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (and (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$) (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$1))))))))))))))))))))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.allocate_popped_strong.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::allocate_popped_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.allocate_popped_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.allocate_popped_enabled.) (forall ((pre! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.allocate_popped_enabled.? pre!) (let ((tmp_assert$ true)) (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((idx$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((fals$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((idx$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((fals$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I idx$) (I count$) (B fals$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((idx$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((fals$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (=> tmp_assert$ (= fals$ false))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.allocate_popped_enabled.? pre!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::forget_about_first_page_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page_strong.) (forall ((pre! Poly) (post! Poly) (count! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.forget_about_first_page_strong.? pre! post! count!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (<= 1 (%I count!)) (< (%I count!) lib!config.SLICES_PER_SEGMENT.?)) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (is-lib!page_organization.Popped./SegmentCreating_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)) (let ((segment_id$ (ite (is-lib!page_organization.Popped./SegmentCreating_ tmp_for_match_0$) (let ((segment_id$2 (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) segment_id$2) (%Poly%lib!tokens.SegmentId. (vstd!pervasive.arbitrary.? $ TYPE%lib!tokens.SegmentId.))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.SegmentId. segment_id$)) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) segment_id$) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= 0 tmp%%$) (< tmp%%$ (%I count!))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$)))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) segment_id$) (let ((tmp%%$ (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= 0 tmp%%$) (< tmp%%$ (%I count!))))) (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I 0))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$)) (and (<= (Add (%I count!) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) lib!config.SLICES_PER_SEGMENT.?) (let ((changed_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%6 segment_id$ 0 (%I count!)))) (Poly%fun%1. (mk_fun (%%lambda%%7 $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id$ $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (core!option.Option./Some (I (nClip (%I count!)))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%B (B false)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. changed_pages$))))) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_pages$))) (let ((update_tmp_pages$ new_pages$)) (and (<= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))) (Add lib!config.SLICES_PER_SEGMENT.? 1)) (let ((update_tmp_segments$1 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. update_tmp_segments$) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData./SegmentData (%I (I (Add (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))))) 1))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I count!) (%I (I (Sub lib!config.SLICES_PER_SEGMENT.? (%I count!)))) (%B (B true))))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (and (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$1) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$))))))))))))))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.forget_about_first_page_strong.? pre! post! count!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::forget_about_first_page_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page_enabled.) (forall ((pre! Poly) (count! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.forget_about_first_page_enabled.? pre! count!) (let ((tmp_assert$ true)) (and (and (<= 1 (%I count!)) (< (%I count!) lib!config.SLICES_PER_SEGMENT.?)) (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (=> tmp_assert$ (and (is-lib!page_organization.Popped./SegmentCreating_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.forget_about_first_page_enabled.? pre! count!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::forget_about_first_page2_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_strong.? pre! post!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I start$) (I count$) (B tru$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tru$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (= tru$ true) (and (>= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$)))) 1) (let ((update_tmp_segments$1 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. update_tmp_segments$) (Poly%lib!tokens.SegmentId. segment_id$) (Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData./SegmentData (%I (I (Sub (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$)))) 1))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I start$)) (%I (I count$)) (%B (B false))))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$1))))))))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$) (and (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_strong.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::forget_about_first_page2_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_enabled.) (forall ((pre! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_enabled.? pre!) (let ((tmp_assert$ true)) (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I start$) (I count$) (B tru$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tru$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (=> tmp_assert$ (= tru$ true))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_enabled.? pre!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::clear_ec_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.clear_ec_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.clear_ec_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.clear_ec_strong.? pre! post!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (is-lib!page_organization.Popped./ExtraCount_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./ExtraCount/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)) (let ((segment_id$ (ite (is-lib!page_organization.Popped./ExtraCount_ tmp_for_match_0$) (let ((segment_id$2 (lib!page_organization.Popped./ExtraCount/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) segment_id$2) (%Poly%lib!tokens.SegmentId. (vstd!pervasive.arbitrary.? $ TYPE%lib!tokens.SegmentId.))))) (and (>= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$)))) 1) (let ((update_tmp_segments$1 (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. update_tmp_segments$) (Poly%lib!tokens.SegmentId. segment_id$) (Poly%lib!page_organization.SegmentData. (lib!page_organization.SegmentData./SegmentData (%I (I (Sub (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$)))) 1))))))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$1)))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$) (and (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.clear_ec_strong.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::clear_ec_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.clear_ec_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.clear_ec_enabled.) (forall ((pre! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.clear_ec_enabled.? pre!) (let ((tmp_assert$ true)) (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (=> tmp_assert$ (and (is-lib!page_organization.Popped./ExtraCount_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./ExtraCount/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))))) :pattern ((lib!page_organization.PageOrg.impl&%4.clear_ec_enabled.? pre!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::free_to_unused_queue_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_strong.) (forall ((pre! Poly) (post! Poly) (sbin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_strong.? pre! post! sbin_idx!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (lib!bin_sizes.valid_sbin_idx.? sbin_idx!) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((ec$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((ec$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I start$) (I count$) (B ec$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((ec$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.SegmentId. segment_id$)) (and (let ((tmp%%$1 (Add start$ count$))) (and (and (<= 1 start$) (< start$ tmp%%$1)) (<= tmp%%$1 lib!config.SLICES_PER_SEGMENT.?))) (and (= (%I sbin_idx!) (lib!bin_sizes.smallest_sbin_fitting_size.? (I count$))) (let ((first_page$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip start$)))))) (let ((last_page$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Sub (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. first_page$))) count$) 1))))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. first_page$)) (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_page$))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_page$)) (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page$))))) (and (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_page$))))) (and (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_page$))))) (and (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page$))))) (let ((update_tmp_pages$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. first_page$) (Poly%lib!page_organization.PageData. (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))))))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (I (nClip count$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (I 0)))) (%B (B false)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)))))))) (and (=> (> count$ 1) (not (= last_page$ first_page$))) (let ((update_tmp_pages$2 (ite (> count$ 1) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1) (Poly%lib!tokens.PageId. last_page$) (Poly%lib!page_organization.PageData. (let ((tmp%%$2 (core!option.Option./Some (I (nClip (Sub count$ 1)))))) (let ((tmp%%$3 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_page$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$3))))))))))))) update_tmp_pages$3) update_tmp_pages$1))) (let ((update_tmp_unused_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) sbin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. first_page$)))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. first_page$))))))))))) (and (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!)))) (let ((queue_first_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx!))))))))) (and (not (= queue_first_page_id$ first_page$)) (and (not (= queue_first_page_id$ last_page$)) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. queue_first_page_id$)) (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$))))) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2) (Poly%lib!tokens.PageId. queue_first_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$4 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$5 (core!option.Option./Some (Poly%lib!tokens.PageId. first_page$)))) (let ((tmp%%$6 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$6)))))))))))) (let ((tmp%%$7 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. queue_first_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$4)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$7))))))))))))) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$4)))))))) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$2)) (let ((update_tmp_popped$ (ite ec$ (lib!page_organization.Popped./ExtraCount (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$))) lib!page_organization.Popped./No))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.impl&%4.insert_front.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) sbin_idx! (Poly%lib!tokens.PageId. first_page$)))) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$1))))))))))))))))))))))))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$) (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_strong.? pre! post! sbin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::free_to_unused_queue_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_enabled.) (forall ((pre! Poly) (sbin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_enabled.? pre! sbin_idx!) (let ((tmp_assert$ true)) (and (lib!bin_sizes.valid_sbin_idx.? sbin_idx!) (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((ec$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((ec$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I start$) (I count$) (B ec$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((ec$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.SegmentId. segment_id$))))) (let ((tmp_assert$2 (and tmp_assert$1 (let ((tmp%%$1 (Add start$ count$))) (and (and (<= 1 start$) (< start$ tmp%%$1)) (<= tmp%%$1 lib!config.SLICES_PER_SEGMENT.?)))))) (=> tmp_assert$2 (= (%I sbin_idx!) (lib!bin_sizes.smallest_sbin_fitting_size.? (I count$)))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_enabled.? pre! sbin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::set_range_to_used_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_used_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_used_strong.) (forall ((pre! Poly) (post! Poly) (page_header_kind! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.set_range_to_used_strong.? pre! post! page_header_kind!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (is-lib!page_organization.Popped./Ready_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./Ready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Ready_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./Ready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B b$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((b$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$)) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (and (> count$ 0) (and (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0))) (and (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) 0)) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$1) (< tmp%%$1 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$)))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$2 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$2) (< tmp%%$2 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$3 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$3) (< tmp%%$3 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))) (= (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))) (let ((changed_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%6 (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$))))) (Poly%fun%1. (mk_fun (%%lambda%%8 page_id$ (core!option.Option./Some page_header_kind!) core!option.Option./None $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (%B (B true))))))))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. changed_pages$))))) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_pages$))) (let ((update_tmp_pages$ new_pages$)) (let ((update_tmp_popped$ (lib!page_organization.Popped./Used (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)) (%B (B b$))))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$))))))))))))))))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$) (and (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.set_range_to_used_strong.? pre! post! page_header_kind!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::set_range_to_used_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_used_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_used_enabled.) (forall ((pre! Poly) (page_header_kind! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.set_range_to_used_enabled.? pre! page_header_kind!) (let ((tmp_assert$ true)) (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (=> tmp_assert$ (and (is-lib!page_organization.Popped./Ready_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./Ready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.set_range_to_used_enabled.? pre! page_header_kind!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::set_range_to_not_used_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_strong.? pre! post!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B b$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((b$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$)) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (and (> count$ 0) (and (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0))) (and (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$1) (< tmp%%$1 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) pid$)))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$2 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$2) (< tmp%%$2 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))) (and (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$3 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$3) (< tmp%%$3 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$)))))) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))) (= (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$))))))) (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) pid$)))) (let ((changed_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%6 (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) count$))))) (Poly%fun%1. (mk_fun (%%lambda%%9 $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (%B (B false)) core!option.Option./None core!option.Option./None core!option.Option./None))))))) (let ((new_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. changed_pages$))))) (and (ext_eq false (TYPE%vstd!set.Set. $ TYPE%lib!tokens.PageId.) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_pages$))) (let ((update_tmp_pages$ new_pages$)) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))) (%I (I count$)) (%B (B b$))))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$))))))))))))))))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$) (and (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_strong.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::set_range_to_not_used_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_enabled.) (forall ((pre! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_enabled.? pre!) (let ((tmp_assert$ true)) (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (=> tmp_assert$ (and (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_enabled.? pre!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::into_used_list_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_strong.) (forall ((pre! Poly) (post! Poly) (bin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.into_used_list_strong.? pre! post! bin_idx!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (or (lib!bin_sizes.valid_bin_idx.? bin_idx!) (= (%I bin_idx!) lib!config.BIN_FULL.?)) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B tru$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tru$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (= tru$ true) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$)) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (and (let ((tmp%%$1 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((i$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (and (and (and (=> (not (= (%I bin_idx!) lib!config.BIN_FULL.?)) (= (%I bin_idx!) i$)) (lib!bin_sizes.valid_bin_idx.? (I i$))) (= bsize$ (lib!bin_sizes.size_of_bin.? (I i$)))) (<= bsize$ lib!config.MEDIUM_OBJ_SIZE_MAX.?))))) (let ((update_tmp_used_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_used_dlist_headers$) bin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$))))))))))) (and (=> (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (let ((first_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. first_id$)) (and (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$))))) (not (= first_id$ page_id$))))))) (let ((update_tmp_pages$1 (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (let ((update_tmp_pages$2 (let ((first_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))))))) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. first_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$2 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$3 (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$4 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$3)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$4)))))))))))) (let ((tmp%%$5 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. first_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))))))))))) update_tmp_pages$3)))) update_tmp_pages$2) update_tmp_pages$))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$)) (and (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (and (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0))) (and (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$6 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))))))))) (let ((tmp%%$7 (core!option.Option./Some (B (= (%I bin_idx!) lib!config.BIN_FULL.?))))) (let ((tmp%%$8 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8)))))))))))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.impl&%4.insert_front.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx! (Poly%lib!tokens.PageId. page_id$)))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (and (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$4) (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$1))))))))))))))))))))))) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.into_used_list_strong.? pre! post! bin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::into_used_list_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_enabled.) (forall ((pre! Poly) (bin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.into_used_list_enabled.? pre! bin_idx!) (let ((tmp_assert$ true)) (and (or (lib!bin_sizes.valid_bin_idx.? bin_idx!) (= (%I bin_idx!) lib!config.BIN_FULL.?)) (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B tru$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tru$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (=> tmp_assert$ (= tru$ true)) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$2 (and tmp_assert$1 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp%%$1 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((i$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (=> tmp_assert$2 (and (and (and (=> (not (= (%I bin_idx!) lib!config.BIN_FULL.?)) (= (%I bin_idx!) i$)) (lib!bin_sizes.valid_bin_idx.? (I i$))) (= bsize$ (lib!bin_sizes.size_of_bin.? (I i$)))) (<= bsize$ lib!config.MEDIUM_OBJ_SIZE_MAX.?))))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.into_used_list_enabled.? pre! bin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::into_used_list_back_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong.) (forall ((pre! Poly) (post! Poly) (bin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong.? pre! post! bin_idx!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (or (lib!bin_sizes.valid_bin_idx.? bin_idx!) (= (%I bin_idx!) lib!config.BIN_FULL.?)) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B tru$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tru$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (= tru$ true) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$)) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (and (let ((tmp%%$1 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((i$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (and (and (and (=> (not (= (%I bin_idx!) lib!config.BIN_FULL.?)) (= (%I bin_idx!) i$)) (lib!bin_sizes.valid_bin_idx.? (I i$))) (= bsize$ (lib!bin_sizes.size_of_bin.? (I i$)))) (<= bsize$ lib!config.MEDIUM_OBJ_SIZE_MAX.?))))) (and (= (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))) (let ((update_tmp_used_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_used_dlist_headers$) bin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$))))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))))))))) (and (=> (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (let ((last_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))))))) (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_id$)) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))) (not (= last_id$ page_id$))))) (let ((update_tmp_pages$1 (ite (is-core!option.Option./Some_ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!)))) (let ((update_tmp_pages$2 (let ((last_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))))))) (let ((update_tmp_pages$3 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. last_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$2 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$3 (core!option.Option./Some (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$4 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$3))))))))) (let ((tmp%%$5 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))))))))))) update_tmp_pages$3)))) update_tmp_pages$2) update_tmp_pages$))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$)) (and (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (and (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))) (core!option.Option./Some (I 0))) (and (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$6 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))))) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))) (let ((tmp%%$7 (core!option.Option./Some (B (= (%I bin_idx!) lib!config.BIN_FULL.?))))) (let ((tmp%%$8 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8)))))))))))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.impl&%4.insert_back.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx! (Poly%lib!tokens.PageId. page_id$)))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (and (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$4) (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$1)))))))))))))))))))))))) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong.? pre! post! bin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::into_used_list_back_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled.) (forall ((pre! Poly) (bin_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled.? pre! bin_idx!) (let ((tmp_assert$ true)) (and (or (lib!bin_sizes.valid_bin_idx.? bin_idx!) (= (%I bin_idx!) lib!config.BIN_FULL.?)) (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./Used_ tmp_for_match_0$) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((tru$ (lib!page_organization.Popped./Used/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.PageId. page_id$) (B tru$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.PageId. $ BOOL)))))) (let ((page_id$ (%Poly%lib!tokens.PageId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((tru$ (%B (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (=> tmp_assert$ (= tru$ true)) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_assert$2 (and tmp_assert$1 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((tmp%%$1 (%Poly%lib!page_organization.PageHeaderKind. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (let ((i$ (lib!page_organization.PageHeaderKind./Normal/0 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (let ((bsize$ (lib!page_organization.PageHeaderKind./Normal/1 (%Poly%lib!page_organization.PageHeaderKind. (Poly%lib!page_organization.PageHeaderKind. tmp%%$1))))) (=> tmp_assert$2 (and (and (and (=> (not (= (%I bin_idx!) lib!config.BIN_FULL.?)) (= (%I bin_idx!) i$)) (lib!bin_sizes.valid_bin_idx.? (I i$))) (= bsize$ (lib!bin_sizes.size_of_bin.? (I i$)))) (<= bsize$ lib!config.MEDIUM_OBJ_SIZE_MAX.?))))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.into_used_list_back_enabled.? pre! bin_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::out_of_used_list_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.out_of_used_list_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.out_of_used_list_strong.) (forall ((pre! Poly) (post! Poly) (page_id! Poly) (bin_idx! Poly) (list_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.out_of_used_list_strong.? pre! post! page_id! bin_idx! list_idx!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) lib!page_organization.Popped./No) (and (lib!page_organization.PageOrg.impl&%4.valid_used_page.? pre! page_id! bin_idx! list_idx!) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))) (and (let ((prev_page_id_opt$ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))))))))) (let ((next_page_id_opt$ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))))))))) (and (=> (and (and (not (= prev_page_id_opt$ (core!option.Option./Some page_id!))) (not (= next_page_id_opt$ (core!option.Option./Some page_id!)))) (is-core!option.Option./Some_ prev_page_id_opt$)) (not (= prev_page_id_opt$ next_page_id_opt$))) (and (=> (is-core!option.Option./Some_ prev_page_id_opt$) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. prev_page_id_opt$)))))) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. prev_page_id$)) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$))))))) (let ((update_tmp_pages$1 (ite (is-core!option.Option./Some_ prev_page_id_opt$) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. prev_page_id_opt$)))))) (let ((update_tmp_pages$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. prev_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$ (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$1 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$1))))) (%Poly%core!option.Option. (Poly%core!option.Option. next_page_id_opt$)))))))) (let ((tmp%%$2 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$2))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$2))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$2))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$2))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$2))))))))))))) update_tmp_pages$2)) update_tmp_pages$))) (and (=> (is-core!option.Option./Some_ next_page_id_opt$) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. next_page_id_opt$)))))) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$)) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))))) (let ((update_tmp_pages$3 (ite (is-core!option.Option./Some_ next_page_id_opt$) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. next_page_id_opt$)))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$ (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$4 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. prev_page_id_opt$)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$4))))))))))) (let ((tmp%%$5 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$5))))))))))))) update_tmp_pages$4)) update_tmp_pages$1))) (let ((update_tmp_used_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_used_dlist_headers$) bin_idx! (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ prev_page_id_opt$) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) next_page_id_opt$))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./Some_ next_page_id_opt$) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!))) prev_page_id_opt$))))))))) (let ((update_tmp_pages$5 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$3) page_id! (Poly%lib!page_organization.PageData. (let ((tmp%%$ core!option.Option./None)) (let ((tmp%%$7 core!option.Option./None)) (let ((tmp%%$8 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) page_id!)))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8)))))))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./Used (%Poly%lib!tokens.PageId. page_id!) (%B (B true))))) (let ((update_tmp_used_lists$1 (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq.update.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. update_tmp_used_lists$) bin_idx! (vstd!seq_lib.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) bin_idx!) list_idx!))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$1) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (and (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$5) (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$1))))))))))))))) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.out_of_used_list_strong.? pre! post! page_id! bin_idx! list_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::out_of_used_list_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.out_of_used_list_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.out_of_used_list_enabled.) (forall ((pre! Poly) (page_id! Poly) (bin_idx! Poly) (list_idx! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.out_of_used_list_enabled.? pre! page_id! bin_idx! list_idx!) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)) lib!page_organization.Popped./No) (lib!page_organization.PageOrg.impl&%4.valid_used_page.? pre! page_id! bin_idx! list_idx!))) :pattern ((lib!page_organization.PageOrg.impl&%4.out_of_used_list_enabled.? pre! page_id! bin_idx! list_idx!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::segment_freeing_start_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_start_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_start_strong.) (forall ((pre! Poly) (post! Poly) (segment_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.segment_freeing_start_strong.? pre! post! segment_id!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (is-lib!page_organization.Popped./No_ tmp_for_match_0$) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) segment_id!) (and (= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) segment_id!))) 0) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. segment_id!) (%I (I 0))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$)) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (and (and (<= 1 count$) (<= count$ lib!config.SLICES_PER_SEGMENT.?)) (let ((last_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. segment_id!) (%I (I (nClip (Sub count$ 1))))))) (let ((new_page_map$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData.) (Poly%fun%1. (mk_fun (%%lambda%%6 (%Poly%lib!tokens.SegmentId. segment_id!) 0 count$))) (Poly%fun%1. (mk_fun (%%lambda%%5 (Poly%lib!page_organization.PageData. (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%B (B false)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None))))))))))) (let ((update_tmp_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.union_prefer_right.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. new_page_map$))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./SegmentFreeing (%Poly%lib!tokens.SegmentId. segment_id!) (%I (I count$))))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$))))))))))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$) (and (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.segment_freeing_start_strong.? pre! post! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::segment_freeing_start_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_start_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_start_enabled.) (forall ((pre! Poly) (segment_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.segment_freeing_start_enabled.? pre! segment_id!) (let ((tmp_assert$ true)) (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (is-lib!page_organization.Popped./No_ tmp_for_match_0$)) (and (=> tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) segment_id!)) (=> tmp_assert$ (= (lib!page_organization.SegmentData./SegmentData/used (%Poly%lib!page_organization.SegmentData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) segment_id!))) 0))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.segment_freeing_start_enabled.? pre! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::segment_freeing_finish_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_strong.? pre! post!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (is-lib!page_organization.Popped./SegmentFreeing_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((idx$ (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./SegmentFreeing_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((idx$ (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.SegmentId. segment_id$) (I idx$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.SegmentId. $ INT)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (= idx$ lib!config.SLICES_PER_SEGMENT.?) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.SegmentId. segment_id$)) (let ((update_tmp_segments$ (%Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (vstd!map.impl&%0.remove.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.SegmentId. segment_id$))))) (let ((update_tmp_popped$ lib!page_organization.Popped./No)) (and (let ((keys$ (%Poly%vstd!set.Set<lib!tokens.PageId.>. (vstd!set.impl&%0.new.? $ TYPE%lib!tokens.PageId. $ (TYPE%fun%1. $ TYPE%lib!tokens.PageId. $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%4 segment_id$ 0 lib!config.SLICES_PER_SEGMENT.?))))))) (let ((update_tmp_pages$ (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map_lib.impl&%0.remove_keys.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%vstd!set.Set<lib!tokens.PageId.>. keys$))))) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$)))))))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$) (and (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$)))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_strong.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::segment_freeing_finish_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_enabled.) (forall ((pre! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_enabled.? pre!) (let ((tmp_assert$ true)) (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./SegmentFreeing_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((idx$ (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./SegmentFreeing_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((idx$ (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%2./tuple%2 (Poly%lib!tokens.SegmentId. segment_id$) (I idx$)))) (%Poly%tuple%2. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%2. $ TYPE%lib!tokens.SegmentId. $ INT)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (=> tmp_assert$ (= idx$ lib!config.SLICES_PER_SEGMENT.?))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_enabled.? pre!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::merge_with_after_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.merge_with_after_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.merge_with_after_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.merge_with_after_strong.? pre! post!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I cur_start$) (I cur_count$) (B b$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((b$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (< (Add cur_start$ cur_count$) lib!config.SLICES_PER_SEGMENT.?) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Add cur_start$ cur_count$))))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$)) (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (let ((n_count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (and (<= (Add cur_count$ n_count$) lib!config.SLICES_PER_SEGMENT.?) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_for_match_1$ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))) (and (and (is-core!option.Option./Some_ tmp_for_match_1$) (let ((dlist_entry$ (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) true)) (let ((dlist_entry$ (ite (is-core!option.Option./Some_ tmp_for_match_1$) (let ((dlist_entry$2 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) dlist_entry$2) (%Poly%lib!page_organization.DlistEntry. (vstd!pervasive.arbitrary.? $ TYPE%lib!page_organization.DlistEntry.))))) (let ((update_tmp_pages$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$1 core!option.Option./None)) (let ((tmp%%$2 core!option.Option./None)) (let ((tmp%%$3 core!option.Option./None)) (let ((tmp%%$4 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$3)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))))))))))))) (let ((final_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Sub (Add (Add cur_start$ cur_count$) n_count$) 1))))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. final_id$)) (let ((update_tmp_pages$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1) (Poly%lib!tokens.PageId. final_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$5 core!option.Option./None)) (let ((tmp%%$6 core!option.Option./None)) (let ((tmp%%$7 core!option.Option./None)) (let ((tmp%%$8 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. final_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))))))))))))) (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. final_id$))))) (and (let ((tmp%%$9 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (=> (is-core!option.Option./Some_ tmp%%$9) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$9)))))) (and (and (and (not (= prev_page_id$ page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. prev_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))) false))))) (let ((update_tmp_pages$3 (let ((tmp%%$10 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$10) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$10)))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2) (Poly%lib!tokens.PageId. prev_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$11 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$12 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$13 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$13))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$12))))))))) (let ((tmp%%$14 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$11)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))))))))))) update_tmp_pages$4)) update_tmp_pages$2)))) (and (let ((tmp%%$15 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$15) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$15)))))) (and (and (and (and (not (= next_page_id$ page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))) false)) (let ((update_tmp_pages$5 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$3) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$16 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$17 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$18 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$17)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$18)))))))))))) (let ((tmp%%$19 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$16)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))))))))))) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$5)))) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$3))) (let ((sbin_idx$ (lib!bin_sizes.smallest_sbin_fitting_size.? (I n_count$)))) (and (and (<= 0 sbin_idx$) (<= sbin_idx$ lib!config.SEGMENT_BIN_MAX.?)) (let ((update_tmp_unused_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) (I sbin_idx$) (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$))))))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$))))))))))))) (and (=> (and (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (not (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I cur_start$)) (%I (I (Add cur_count$ n_count$))) (%B (B b$))))) (and (let ((list_idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (lib!page_organization.PageOrg.impl&%4.get_list_idx.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((update_tmp_unused_lists$1 (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq.update.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. update_tmp_unused_lists$) (I sbin_idx$) (vstd!seq_lib.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$)) (I list_idx$)))))) (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$1))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$1)))))))))))))))))))))))))))))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$) (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.merge_with_after_strong.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::merge_with_after_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.merge_with_after_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.merge_with_after_enabled.) (forall ((pre! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.merge_with_after_enabled.? pre!) (let ((tmp_assert$ true)) (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I cur_start$) (I cur_count$) (B b$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((b$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (=> tmp_assert$ (< (Add cur_start$ cur_count$) lib!config.SLICES_PER_SEGMENT.?)) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Add cur_start$ cur_count$))))))) (let ((tmp_assert$1 (and tmp_assert$ (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. page_id$))))) (=> tmp_assert$1 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.merge_with_after_enabled.? pre!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::merge_with_before_strong")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.merge_with_before_strong.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.merge_with_before_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.merge_with_before_strong.? pre! post!) (let ((update_tmp_unused_dlist_headers$ (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_dlist_headers$ (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_pages$ (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_segments$ (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_unused_lists$ (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (let ((update_tmp_used_lists$ (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I cur_start$) (I cur_count$) (B b$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((b$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (> cur_start$ 1) (let ((last_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Sub cur_start$ 1))))))) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (let ((offset$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))))) (and (> (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. last_id$))) offset$) 0) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. last_id$))) offset$))))))) (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (and (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (let ((p_count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))))) (and (<= (Add cur_count$ p_count$) lib!config.SLICES_PER_SEGMENT.?) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip cur_start$)))))) (and (is-core!option.Option./None_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip cur_start$))))))))) (and (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip cur_start$)))))))) false) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (let ((tmp_for_match_1$ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))) (and (and (is-core!option.Option./Some_ tmp_for_match_1$) (let ((dlist_entry$ (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) true)) (let ((dlist_entry$ (ite (is-core!option.Option./Some_ tmp_for_match_1$) (let ((dlist_entry$2 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp_for_match_1$)))))) dlist_entry$2) (%Poly%lib!page_organization.DlistEntry. (vstd!pervasive.arbitrary.? $ TYPE%lib!page_organization.DlistEntry.))))) (let ((update_tmp_pages$1 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$) (Poly%lib!tokens.PageId. page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$1 core!option.Option./None)) (let ((tmp%%$2 core!option.Option./None)) (let ((tmp%%$3 core!option.Option./None)) (let ((tmp%%$4 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$3)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$2)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$4))))))))))))))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. last_id$)) (let ((update_tmp_pages$2 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$1) (Poly%lib!tokens.PageId. last_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$5 core!option.Option./None)) (let ((tmp%%$6 core!option.Option./None)) (let ((tmp%%$7 core!option.Option./None)) (let ((tmp%%$8 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$7)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$6)) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$5)) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$8))))))))))))))) (and (let ((tmp%%$9 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (=> (is-core!option.Option./Some_ tmp%%$9) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$9)))))) (and (and (and (and (not (= prev_page_id$ page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. prev_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))) false)) (not (= prev_page_id$ last_id$)))))) (let ((update_tmp_pages$3 (let ((tmp%%$10 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$10) (let ((prev_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$10)))))) (let ((update_tmp_pages$4 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$2) (Poly%lib!tokens.PageId. prev_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$11 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$12 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$13 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$13))))) (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$12))))))))) (let ((tmp%%$14 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. prev_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$11)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$14))))))))))))) update_tmp_pages$4)) update_tmp_pages$2)))) (and (let ((tmp%%$15 (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (ite (is-core!option.Option./Some_ tmp%%$15) (let ((next_page_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$15)))))) (and (and (and (and (and (not (= next_page_id$ page_id$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!)))) (Poly%lib!tokens.PageId. next_page_id$))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))) false)) (not (= next_page_id$ last_id$))) (let ((update_tmp_pages$5 (%Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (vstd!map.impl&%0.insert.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. update_tmp_pages$3) (Poly%lib!tokens.PageId. next_page_id$) (Poly%lib!page_organization.PageData. (let ((tmp%%$16 (core!option.Option./Some (Poly%lib!page_organization.DlistEntry. (let ((tmp%%$17 (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (let ((tmp%%$18 (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$)))))))))) (lib!page_organization.DlistEntry./DlistEntry (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$17)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. tmp%%$18)))))))))))) (let ((tmp%%$19 (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. next_page_id$))))) (lib!page_organization.PageData./PageData (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$16)) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%B (B (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))) (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (Poly%lib!page_organization.PageData. tmp%%$19))))))))))))) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$5)))) (= (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_pages$3))) (let ((sbin_idx$ (lib!bin_sizes.smallest_sbin_fitting_size.? (I p_count$)))) (and (and (<= 0 sbin_idx$) (<= sbin_idx$ lib!config.SEGMENT_BIN_MAX.?)) (let ((update_tmp_unused_dlist_headers$1 (%Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (vstd!seq.Seq.update.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. update_tmp_unused_dlist_headers$) (I sbin_idx$) (Poly%lib!page_organization.DlistHeader. (lib!page_organization.DlistHeader./DlistHeader (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$))))))) (%Poly%core!option.Option. (Poly%core!option.Option. (ite (is-core!option.Option./None_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))) (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$))))))))))))) (and (=> (and (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))) (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))) (not (= (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$)))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (Poly%lib!page_organization.DlistEntry. dlist_entry$))))))))) (let ((update_tmp_popped$ (lib!page_organization.Popped./VeryUnready (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))))) (%I (I (Add cur_count$ p_count$))) (%B (B b$))))) (and (let ((list_idx$ (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (lib!page_organization.PageOrg.impl&%4.get_list_idx.? (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$)))))))) (let ((update_tmp_unused_lists$1 (%Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (vstd!seq.Seq.update.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. update_tmp_unused_lists$) (I sbin_idx$) (vstd!seq_lib.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. pre!))) (I sbin_idx$)) (I list_idx$)))))) (= (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_lists$1))) (and (= (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_popped$) (= (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_unused_dlist_headers$1))))))))))))))))))))))))))))))))))))))) (and (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_lists$) (and (= (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_segments$) (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. post!)) update_tmp_used_dlist_headers$))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.merge_with_before_strong.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::merge_with_before_enabled")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.merge_with_before_enabled.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.merge_with_before_enabled.) (forall ((pre! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.merge_with_before_enabled.? pre!) (let ((tmp_assert$ true)) (let ((tmp_for_match_0$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (=> tmp_assert$ (and (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) true)))))) (let ((tmp%%$ (ite (is-lib!page_organization.Popped./VeryUnready_ tmp_for_match_0$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_start$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((cur_count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (let ((b$ (lib!page_organization.Popped./VeryUnready/3 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp_for_match_0$))))) (tuple%4./tuple%4 (Poly%lib!tokens.SegmentId. segment_id$) (I cur_start$) (I cur_count$) (B b$)))))) (%Poly%tuple%4. (vstd!pervasive.arbitrary.? $ (TYPE%tuple%4. $ TYPE%lib!tokens.SegmentId. $ INT $ INT $ BOOL)))))) (let ((segment_id$ (%Poly%lib!tokens.SegmentId. (tuple%4./tuple%4/0 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_start$ (%I (tuple%4./tuple%4/1 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((cur_count$ (%I (tuple%4./tuple%4/2 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (let ((b$ (%B (tuple%4./tuple%4/3 (%Poly%tuple%4. (Poly%tuple%4. tmp%%$)))))) (and (=> tmp_assert$ (> cur_start$ 1)) (let ((last_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Sub cur_start$ 1))))))) (let ((tmp_assert$1 (and tmp_assert$ (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))) (let ((offset$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. last_id$)))))))))) (and (=> tmp_assert$1 (> (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. last_id$))) offset$) 0)) (let ((page_id$ (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip (Sub (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. last_id$))) offset$))))))) (=> tmp_assert$1 (not (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. pre!))) (Poly%lib!tokens.PageId. page_id$))))))))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.merge_with_before_enabled.? pre!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::next_strong_by")
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.next_strong_by.) (forall ((pre! Poly) (post! Poly) (step! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.next_strong_by.? pre! post! step!) (ite (is-lib!page_organization.PageOrg.Step./take_page_from_unused_queue_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((page_id$ (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (let ((sbin_idx$ (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/1 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (let ((list_idx$ (lib!page_organization.PageOrg.Step./take_page_from_unused_queue/2 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_strong.? pre! post! (Poly%lib!tokens.PageId. page_id$) (I sbin_idx$) (I list_idx$))))) (ite (is-lib!page_organization.PageOrg.Step./split_page_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((page_id$ (lib!page_organization.PageOrg.Step./split_page/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (let ((current_count$ (lib!page_organization.PageOrg.Step./split_page/1 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (let ((target_count$ (lib!page_organization.PageOrg.Step./split_page/2 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (let ((sbin_idx$ (lib!page_organization.PageOrg.Step./split_page/3 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.split_page_strong.? pre! post! (Poly%lib!tokens.PageId. page_id$) (I current_count$) (I target_count$) (I sbin_idx$)))))) (ite (is-lib!page_organization.PageOrg.Step./create_segment_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((segment_id$ (lib!page_organization.PageOrg.Step./create_segment/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.create_segment_strong.? pre! post! (Poly%lib!tokens.SegmentId. segment_id$))) (ite (is-lib!page_organization.PageOrg.Step./allocate_popped_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (lib!page_organization.PageOrg.impl&%4.allocate_popped_strong.? pre! post!) (ite (is-lib!page_organization.PageOrg.Step./forget_about_first_page_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((count$ (lib!page_organization.PageOrg.Step./forget_about_first_page/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.forget_about_first_page_strong.? pre! post! (I count$))) (ite (is-lib!page_organization.PageOrg.Step./forget_about_first_page2_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (lib!page_organization.PageOrg.impl&%4.forget_about_first_page2_strong.? pre! post!) (ite (is-lib!page_organization.PageOrg.Step./clear_ec_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (lib!page_organization.PageOrg.impl&%4.clear_ec_strong.? pre! post!) (ite (is-lib!page_organization.PageOrg.Step./free_to_unused_queue_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((sbin_idx$ (lib!page_organization.PageOrg.Step./free_to_unused_queue/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.free_to_unused_queue_strong.? pre! post! (I sbin_idx$))) (ite (is-lib!page_organization.PageOrg.Step./set_range_to_used_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((page_header_kind$ (lib!page_organization.PageOrg.Step./set_range_to_used/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.set_range_to_used_strong.? pre! post! (Poly%lib!page_organization.PageHeaderKind. page_header_kind$))) (ite (is-lib!page_organization.PageOrg.Step./set_range_to_not_used_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (lib!page_organization.PageOrg.impl&%4.set_range_to_not_used_strong.? pre! post!) (ite (is-lib!page_organization.PageOrg.Step./into_used_list_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((bin_idx$ (lib!page_organization.PageOrg.Step./into_used_list/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.into_used_list_strong.? pre! post! (I bin_idx$))) (ite (is-lib!page_organization.PageOrg.Step./into_used_list_back_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((bin_idx$ (lib!page_organization.PageOrg.Step./into_used_list_back/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.into_used_list_back_strong.? pre! post! (I bin_idx$))) (ite (is-lib!page_organization.PageOrg.Step./out_of_used_list_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((page_id$ (lib!page_organization.PageOrg.Step./out_of_used_list/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (let ((bin_idx$ (lib!page_organization.PageOrg.Step./out_of_used_list/1 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (let ((list_idx$ (lib!page_organization.PageOrg.Step./out_of_used_list/2 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.out_of_used_list_strong.? pre! post! (Poly%lib!tokens.PageId. page_id$) (I bin_idx$) (I list_idx$))))) (ite (is-lib!page_organization.PageOrg.Step./segment_freeing_start_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (let ((segment_id$ (lib!page_organization.PageOrg.Step./segment_freeing_start/0 (%Poly%lib!page_organization.PageOrg.Step. step!)))) (lib!page_organization.PageOrg.impl&%4.segment_freeing_start_strong.? pre! post! (Poly%lib!tokens.SegmentId. segment_id$))) (ite (is-lib!page_organization.PageOrg.Step./segment_freeing_finish_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (lib!page_organization.PageOrg.impl&%4.segment_freeing_finish_strong.? pre! post!) (ite (is-lib!page_organization.PageOrg.Step./merge_with_after_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (lib!page_organization.PageOrg.impl&%4.merge_with_after_strong.? pre! post!) (and (is-lib!page_organization.PageOrg.Step./merge_with_before_ (%Poly%lib!page_organization.PageOrg.Step. step!)) (lib!page_organization.PageOrg.impl&%4.merge_with_before_strong.? pre! post!))))))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.next_strong_by.? pre! post! step!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::next_strong")
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.next_strong.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.next_strong.? pre! post!) (exists ((step$ Poly)) (! (and (has_type step$ TYPE%lib!page_organization.PageOrg.Step.) (lib!page_organization.PageOrg.impl&%4.next_strong_by.? pre! post! step$)) :pattern ((lib!page_organization.PageOrg.impl&%4.next_strong_by.? pre! post! step$))))) :pattern ((lib!page_organization.PageOrg.impl&%4.next_strong.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::invariant")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.invariant.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.invariant.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.invariant.? self!) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (lib!page_organization.PageOrg.impl&%4.public_invariant.? self!) (lib!page_organization.PageOrg.impl&%4.ll_basics.? self!)) (lib!page_organization.PageOrg.impl&%4.page_id_domain.? self!)) (lib!page_organization.PageOrg.impl&%4.count_off0.? self!)) (lib!page_organization.PageOrg.impl&%4.end_is_unused.? self!)) (lib!page_organization.PageOrg.impl&%4.count_is_right.? self!)) (lib!page_organization.PageOrg.impl&%4.popped_basics.? self!)) (lib!page_organization.PageOrg.impl&%4.data_for_used_header.? self!)) (lib!page_organization.PageOrg.impl&%4.inv_segment_creating.? self!)) (lib!page_organization.PageOrg.impl&%4.inv_very_unready.? self!)) (lib!page_organization.PageOrg.impl&%4.inv_ready.? self!)) (lib!page_organization.PageOrg.impl&%4.inv_used.? self!)) (lib!page_organization.PageOrg.impl&%4.data_for_unused_header.? self!)) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.? self!)) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.? self!)) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.? self!)) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used2.? self!)) (lib!page_organization.PageOrg.impl&%4.ll_inv_exists_in_some_list.? self!)) (lib!page_organization.PageOrg.impl&%4.attached_ranges.? self!))) :pattern ((lib!page_organization.PageOrg.impl&%4.invariant.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::is_any_the_popped")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.is_any_the_popped.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.is_any_the_popped.) (forall ((popped! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.is_any_the_popped.? popped!) (and (not (is-lib!page_organization.Popped./No_ (%Poly%lib!page_organization.Popped. popped!))) (ite (or (is-lib!page_organization.Popped./Ready_ (%Poly%lib!page_organization.Popped. popped!)) (is-lib!page_organization.Popped./Used_ (%Poly%lib!page_organization.Popped. popped!))) (let ((page_id$ (ite (is-lib!page_organization.Popped./Ready_ (%Poly%lib!page_organization.Popped. popped!)) (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. popped!)) (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. popped!))))) true) (and (not (is-lib!page_organization.Popped./SegmentCreating_ (%Poly%lib!page_organization.Popped. popped!))) (and (not (is-lib!page_organization.Popped./SegmentFreeing_ (%Poly%lib!page_organization.Popped. popped!))) (and (is-lib!page_organization.Popped./VeryUnready_ (%Poly%lib!page_organization.Popped. popped!)) (let ((sid$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. popped!)))) (let ((i$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. popped!)))) true)))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.is_any_the_popped.? popped!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::page_id_of_popped")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.page_id_of_popped.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.page_id_of_popped.) (forall ((p! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.page_id_of_popped.? p!) (ite (is-lib!page_organization.Popped./Ready_ (%Poly%lib!page_organization.Popped. p!)) (let ((page_id$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. p!)))) page_id$) (ite (is-lib!page_organization.Popped./Used_ (%Poly%lib!page_organization.Popped. p!)) (let ((page_id$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. p!)))) page_id$) (ite (is-lib!page_organization.Popped./VeryUnready_ (%Poly%lib!page_organization.Popped. p!)) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. p!)))) (let ((idx$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. p!)))) (lib!tokens.PageId./PageId (%Poly%lib!tokens.SegmentId. (Poly%lib!tokens.SegmentId. segment_id$)) (%I (I (nClip idx$)))))) (%Poly%lib!tokens.PageId. (vstd!pervasive.arbitrary.? $ TYPE%lib!tokens.PageId.)))))) :pattern ((lib!page_organization.PageOrg.impl&%4.page_id_of_popped.? p!))))))
(assert (forall ((p! Poly)) (! (=> (has_type p! TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%4.page_id_of_popped.? p!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.PageOrg.impl&%4.page_id_of_popped.? p!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::popped_ranges_match")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.popped_ranges_match.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.popped_ranges_match.) (forall ((pre! Poly) (post! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.popped_ranges_match.? pre! post!) (and (= (lib!page_organization.PageOrg.impl&%4.is_any_the_popped.? (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (lib!page_organization.PageOrg.impl&%4.is_any_the_popped.? (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!))))) (=> (lib!page_organization.PageOrg.impl&%4.is_any_the_popped.? (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (and (= (lib!page_organization.PageOrg.impl&%4.popped_len.? pre!) (lib!page_organization.PageOrg.impl&%4.popped_len.? post!)) (= (lib!page_organization.PageOrg.impl&%4.page_id_of_popped.? (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (lib!page_organization.PageOrg.impl&%4.page_id_of_popped.? (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.popped_ranges_match.? pre! post!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::popped_ranges_match_for_sid")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.popped_ranges_match_for_sid.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.popped_ranges_match_for_sid.) (forall ((pre! Poly) (post! Poly) (sid! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.popped_ranges_match_for_sid.? pre! post! sid!) (and (= (lib!page_organization.PageOrg.impl&%4.popped_for_seg.? pre! sid!) (lib!page_organization.PageOrg.impl&%4.popped_for_seg.? post! sid!)) (=> (lib!page_organization.PageOrg.impl&%4.popped_for_seg.? pre! sid!) (and (= (lib!page_organization.PageOrg.impl&%4.popped_len.? pre!) (lib!page_organization.PageOrg.impl&%4.popped_len.? post!)) (= (lib!page_organization.PageOrg.impl&%4.page_id_of_popped.? (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. pre!)))) (lib!page_organization.PageOrg.impl&%4.page_id_of_popped.? (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. post!))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.popped_ranges_match_for_sid.? pre! post! sid!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::popped_page_id")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.popped_page_id.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.popped_page_id.) (forall ((self! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.popped_page_id.? self!) (lib!page_organization.PageOrg.impl&%4.page_id_of_popped.? (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!))))) :pattern ((lib!page_organization.PageOrg.impl&%4.popped_page_id.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.PageOrg.State.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%4.popped_page_id.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.PageOrg.impl&%4.popped_page_id.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::in_popped_range")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.in_popped_range.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.in_popped_range.) (forall ((self! Poly) (pid! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.in_popped_range.? self! pid!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (and (not (or (is-lib!page_organization.Popped./No_ tmp%%$) (or (is-lib!page_organization.Popped./ExtraCount_ tmp%%$) (or (is-lib!page_organization.Popped./SegmentFreeing_ tmp%%$) (is-lib!page_organization.Popped./SegmentCreating_ tmp%%$))))) (ite (is-lib!page_organization.Popped./VeryUnready_ tmp%%$) (let ((segment_id$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((idx$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (let ((count$ (lib!page_organization.Popped./VeryUnready/2 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid!)) segment_id$) (let ((tmp%%$1 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid!)))) (and (<= idx$ tmp%%$1) (< tmp%%$1 (Add idx$ count$)))))))) (let ((page_id$ (ite (is-lib!page_organization.Popped./Ready_ tmp%%$) (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))) (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$)))))) (and (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid!)) (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$)))) (let ((tmp%%$2 (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid!)))) (and (<= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) tmp%%$2) (< tmp%%$2 (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. self!))) (Poly%lib!tokens.PageId. page_id$))))))))))))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.in_popped_range.? self! pid!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::PageOrg::State::if_popped_or_other_then_for")
(assert (fuel_bool_default fuel%lib!page_organization.PageOrg.impl&%4.if_popped_or_other_then_for.))
(assert (=> (fuel_bool fuel%lib!page_organization.PageOrg.impl&%4.if_popped_or_other_then_for.) (forall ((self! Poly) (segment_id! Poly)) (! (= (lib!page_organization.PageOrg.impl&%4.if_popped_or_other_then_for.? self! segment_id!) (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. self!)))) (=> (not (is-lib!page_organization.Popped./No_ tmp%%$)) (ite (or (is-lib!page_organization.Popped./Ready_ tmp%%$) (is-lib!page_organization.Popped./Used_ tmp%%$)) (let ((page_id$ (ite (is-lib!page_organization.Popped./Ready_ tmp%%$) (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))) (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$)))))) (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id$))) (%Poly%lib!tokens.SegmentId. segment_id!))) (ite (is-lib!page_organization.Popped./SegmentCreating_ tmp%%$) (let ((sid$ (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (= sid$ (%Poly%lib!tokens.SegmentId. segment_id!))) (ite (is-lib!page_organization.Popped./SegmentFreeing_ tmp%%$) (let ((sid$ (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (= sid$ (%Poly%lib!tokens.SegmentId. segment_id!))) (=> (is-lib!page_organization.Popped./VeryUnready_ tmp%%$) (let ((sid$ (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (= sid$ (%Poly%lib!tokens.SegmentId. segment_id!)))))))))) :pattern ((lib!page_organization.PageOrg.impl&%4.if_popped_or_other_then_for.? self! segment_id!))))))
(set-info :comment ";; Function-Axioms lib::bin_sizes::smallest_bin_fitting_size")
(assert (fuel_bool_default fuel%lib!bin_sizes.smallest_bin_fitting_size.))
(assert (=> (fuel_bool fuel%lib!bin_sizes.smallest_bin_fitting_size.) (forall ((size! Poly)) (! (= (lib!bin_sizes.smallest_bin_fitting_size.? size!) (let ((bytes_per_word$ (uClip 32 (EucDiv SZ 8)))) (let ((wsize$ (EucDiv (Sub (Add (%I size!) bytes_per_word$) 1) bytes_per_word$))) (ite (<= wsize$ 1) 1 (ite (<= wsize$ 8) wsize$ (ite (> wsize$ 524288) lib!config.BIN_HUGE.? (let ((w$ (uClip 64 (Sub wsize$ 1)))) (let ((lz$ (vstd!std_specs.bits.u64_leading_zeros.? (I w$)))) (let ((b$ (uClip 8 (Sub (Sub SZ 1) lz$)))) (let ((shifted$ (uClip 8 (uClip 64 (bitshr (I w$) (I (uClip 64 (Sub b$ 2)))))))) (let ((bin_idx$ (Sub (Add (Mul b$ 4) (uClip 8 (bitand (I shifted$) (I 3)))) 3))) bin_idx$))))))))))) :pattern ((lib!bin_sizes.smallest_bin_fitting_size.? size!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::is_SegmentCreating")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.is_SegmentCreating.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.is_SegmentCreating.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.is_SegmentCreating.? self!) (is-lib!page_organization.Popped./SegmentCreating_ (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.is_SegmentCreating.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::is_Ready")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.is_Ready.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.is_Ready.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.is_Ready.? self!) (is-lib!page_organization.Popped./Ready_ (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.is_Ready.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::get_Ready_0")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.get_Ready_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.get_Ready_0.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.get_Ready_0.? self!) (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.get_Ready_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.impl&%2.get_Ready_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.impl&%2.get_Ready_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::is_VeryUnready")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.is_VeryUnready.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.is_VeryUnready.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.is_VeryUnready.? self!) (is-lib!page_organization.Popped./VeryUnready_ (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.is_VeryUnready.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::get_VeryUnready_0")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.get_VeryUnready_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.get_VeryUnready_0.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.get_VeryUnready_0.? self!) (lib!page_organization.Popped./VeryUnready/0 (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.get_VeryUnready_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.impl&%2.get_VeryUnready_0.? self!)) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.impl&%2.get_VeryUnready_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::get_VeryUnready_1")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.get_VeryUnready_1.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.get_VeryUnready_1.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.get_VeryUnready_1.? self!) (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.get_VeryUnready_1.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::is_No")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.is_No.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.is_No.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.is_No.? self!) (is-lib!page_organization.Popped./No_ (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.is_No.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::is_Used")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.is_Used.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.is_Used.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.is_Used.? self!) (is-lib!page_organization.Popped./Used_ (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.is_Used.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::get_Used_0")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.get_Used_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.get_Used_0.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.get_Used_0.? self!) (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.get_Used_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.PageId. (lib!page_organization.impl&%2.get_Used_0.? self!)) TYPE%lib!tokens.PageId.)) :pattern ((lib!page_organization.impl&%2.get_Used_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::get_SegmentCreating_0")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.get_SegmentCreating_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.get_SegmentCreating_0.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.get_SegmentCreating_0.? self!) (lib!page_organization.Popped./SegmentCreating/0 (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.get_SegmentCreating_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.impl&%2.get_SegmentCreating_0.? self!)) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.impl&%2.get_SegmentCreating_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::is_SegmentFreeing")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.is_SegmentFreeing.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.is_SegmentFreeing.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.is_SegmentFreeing.? self!) (is-lib!page_organization.Popped./SegmentFreeing_ (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.is_SegmentFreeing.? self!))))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::get_SegmentFreeing_0")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.get_SegmentFreeing_0.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.get_SegmentFreeing_0.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.get_SegmentFreeing_0.? self!) (lib!page_organization.Popped./SegmentFreeing/0 (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.get_SegmentFreeing_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%lib!page_organization.Popped.) (has_type (Poly%lib!tokens.SegmentId. (lib!page_organization.impl&%2.get_SegmentFreeing_0.? self!)) TYPE%lib!tokens.SegmentId.)) :pattern ((lib!page_organization.impl&%2.get_SegmentFreeing_0.? self!)))))
(set-info :comment ";; Function-Axioms lib::page_organization::Popped::get_SegmentFreeing_1")
(assert (fuel_bool_default fuel%lib!page_organization.impl&%2.get_SegmentFreeing_1.))
(assert (=> (fuel_bool fuel%lib!page_organization.impl&%2.get_SegmentFreeing_1.) (forall ((self! Poly)) (! (= (lib!page_organization.impl&%2.get_SegmentFreeing_1.? self!) (lib!page_organization.Popped./SegmentFreeing/1 (%Poly%lib!page_organization.Popped. self!))) :pattern ((lib!page_organization.impl&%2.get_SegmentFreeing_1.? self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::initialize_inductive")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.initialize_inductive. (lib!page_organization.PageOrg.State.) Bool)
(declare-const %%global_location_label%%11 Bool)
(assert (forall ((post! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.initialize_inductive. post!) (=> %%global_location_label%%11 (lib!page_organization.PageOrg.impl&%4.initialize.? (Poly%lib!page_organization.PageOrg.State. post!)))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.initialize_inductive. post!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.initialize_inductive. (lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((post! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.initialize_inductive. post!) (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. post!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.initialize_inductive. post!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::initialize_inductive")
(set-info :comment ";; page_organization.rs:2737:5: 2737:40 (#0)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::ll_unused_distinct")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.ll_unused_distinct. (lib!page_organization.PageOrg.State. Int Int Int Int) Bool)
(declare-const %%global_location_label%%12 Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(declare-const %%global_location_label%%15 Bool)
(declare-const %%global_location_label%%16 Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (i1! Int) (j1! Int) (i2! Int) (j2! Int)) (! (= (req%lib!page_organization.PageOrg.impl&%4.ll_unused_distinct. self! i1! j1! i2! j2!) (and (=> %%global_location_label%%12 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. self!))) (=> %%global_location_label%%13 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))))))) (=> %%global_location_label%%14 (and (<= 0 j1!) (< j1! (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i1!)))))) (=> %%global_location_label%%15 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))))))) (=> %%global_location_label%%16 (and (<= 0 j2!) (< j2! (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i2!)))))) (=> %%global_location_label%%17 (or (not (= i1! i2!)) (not (= j1! j2!)))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.ll_unused_distinct. self! i1! j1! i2! j2!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.ll_unused_distinct. (lib!page_organization.PageOrg.State. Int Int Int Int) Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (i1! Int) (j1! Int) (i2! Int) (j2! Int)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.ll_unused_distinct. self! i1! j1! i2! j2!) (not (= (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i1!)) (I j1!)) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i2!)) (I j2!))))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.ll_unused_distinct. self! i1! j1! i2! j2!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::ll_unused_distinct")
(set-info :comment ";; page_organization.rs:4911:5: 4911:79 (#0)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::rec_lemma_range_not_used")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.rec_lemma_range_not_used. (lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Bool) Bool)
(declare-const %%global_location_label%%18 Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.) (idx! Int) (sp! Bool)) (! (= (req%lib!page_organization.PageOrg.impl&%4.rec_lemma_range_not_used. self! page_id! idx! sp!) (and (=> %%global_location_label%%18 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. self!))) (=> %%global_location_label%%19 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (Poly%lib!tokens.PageId. page_id!))) (=> %%global_location_label%%20 (lib!page_organization.is_unused_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id!)))) (=> %%global_location_label%%21 (and (<= 0 idx!) (<= idx! (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!)))))) (=> %%global_location_label%%22 (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!))) lib!config.SLICES_PER_SEGMENT.?))) (=> %%global_location_label%%23 (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (=> (is-lib!page_organization.Popped./Ready_ tmp%%$) (let ((pid$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (not (= pid$ page_id!)))))) (=> %%global_location_label%%24 (lib!page_organization.PageOrg.impl&%4.attached_rec.? (Poly%lib!page_organization.PageOrg.State. self!) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!)))) (I idx!) (B sp!))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.rec_lemma_range_not_used. self! page_id! idx! sp!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.rec_lemma_range_not_used. (lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Bool) Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.) (idx! Int) (sp! Bool)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.rec_lemma_range_not_used. self! page_id! idx! sp!) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id!))))) (lib!page_organization.PageOrg.impl&%4.good_range_unused.? (Poly%lib!page_organization.PageOrg.State. self!) (Poly%lib!tokens.PageId. page_id!)))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.rec_lemma_range_not_used. self! page_id! idx! sp!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::rec_lemma_range_not_used")
(set-info :comment ";; page_organization.rs:4067:5: 4067:86 (#0)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_range_not_used")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_range_not_used. (lib!page_organization.PageOrg.State. lib!tokens.PageId.) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(declare-const %%global_location_label%%27 Bool)
(declare-const %%global_location_label%%28 Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_range_not_used. self! page_id!) (and (=> %%global_location_label%%25 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. self!))) (=> %%global_location_label%%26 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (Poly%lib!tokens.PageId. page_id!))) (=> %%global_location_label%%27 (lib!page_organization.is_unused_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id!)))) (=> %%global_location_label%%28 (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!))) 0))) (=> %%global_location_label%%29 (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (=> (is-lib!page_organization.Popped./Ready_ tmp%%$) (let ((pid$ (lib!page_organization.Popped./Ready/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (not (= pid$ page_id!)))))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_range_not_used. self! page_id!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_range_not_used. (lib!page_organization.PageOrg.State. lib!tokens.PageId.) Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_range_not_used. self! page_id!) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id!))))) (lib!page_organization.PageOrg.impl&%4.good_range_unused.? (Poly%lib!page_organization.PageOrg.State. self!) (Poly%lib!tokens.PageId. page_id!)))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_range_not_used. self! page_id!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::lemma_range_not_used")
(set-info :comment ";; page_organization.rs:3950:5: 3950:62 (#0)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::unused_ll_stuff")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.unused_ll_stuff. (lib!page_organization.PageOrg.State. Int Int) Bool)
(declare-const %%global_location_label%%30 Bool)
(declare-const %%global_location_label%%31 Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (i! Int) (j! Int)) (! (= (req%lib!page_organization.PageOrg.impl&%4.unused_ll_stuff. self! i! j!) (and (=> %%global_location_label%%30 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. self!))) (=> %%global_location_label%%31 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))))))) (=> %%global_location_label%%32 (and (<= 0 j!) (< j! (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)))))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.unused_ll_stuff. self! i! j!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.unused_ll_stuff. (lib!page_organization.PageOrg.State. Int Int) Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (i! Int) (j! Int)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.unused_ll_stuff. self! i! j!) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!))))) false) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!)))))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!)))))) (not (= (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!)))))))))) (core!option.Option./Some (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!))))) (not (= (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!)))))))))) (core!option.Option./Some (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!))))) (=> (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!))))))))))) (not (= (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!)))))))))) (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!))))))))))))) (=> (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!))))))))))) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!)))))))))))))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!)))))))))))))))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/prev (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!)))))))))))))))) false))) (=> (is-core!option.Option./Some_ (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!))))))))))) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!)))))))))))))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!)))))))))))))))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.DlistEntry./DlistEntry/next (%Poly%lib!page_organization.DlistEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I j!)))))))))))))))) false))))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.unused_ll_stuff. self! i! j!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::unused_ll_stuff")
(set-info :comment ";; page_organization.rs:3738:5: 3738:56 (#0)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::ucount_sum_preserve")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.ucount_sum_preserve. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.SegmentId. Int) Bool)
(declare-const %%global_location_label%%33 Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (segment_id! lib!tokens.SegmentId.) (idx! Int)) (! (= (req%lib!page_organization.PageOrg.impl&%4.ucount_sum_preserve. pre! post! segment_id! idx!) (and (=> %%global_location_label%%33 (>= idx! 0)) (=> %%global_location_label%%34 (or (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) segment_id!) (and (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) pid$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) pid$)) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) pid$) (= (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$) (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$)))))) :pattern ((lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) pid$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) pid$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$)))) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (= (lib!page_organization.PageOrg.impl&%4.does_count.? (Poly%lib!page_organization.PageOrg.State. pre!) pid$) (lib!page_organization.PageOrg.impl&%4.does_count.? (Poly%lib!page_organization.PageOrg.State. post!) pid$))) :pattern ((lib!page_organization.PageOrg.impl&%4.does_count.? (Poly%lib!page_organization.PageOrg.State. pre!) pid$)) :pattern ((lib!page_organization.PageOrg.impl&%4.does_count.? (Poly%lib!page_organization.PageOrg.State. post!) pid$)))))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.ucount_sum_preserve. pre! post! segment_id! idx!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.ucount_sum_preserve. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.SegmentId. Int) Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (segment_id! lib!tokens.SegmentId.) (idx! Int)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.ucount_sum_preserve. pre! post! segment_id! idx!) (= (lib!page_organization.PageOrg.impl&%4.ucount_sum.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!tokens.SegmentId. segment_id!) (I idx!)) (lib!page_organization.PageOrg.impl&%4.ucount_sum.? (Poly%lib!page_organization.PageOrg.State. post!) (Poly%lib!tokens.SegmentId. segment_id!) (I idx!)))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.ucount_sum_preserve. pre! post! segment_id! idx!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::ucount_sum_preserve")
(set-info :comment ";; page_organization.rs:4368:5: 4368:93 (#0)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::ucount_preserve_all")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.ucount_preserve_all. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State.) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.ucount_preserve_all. pre! post!) (=> %%global_location_label%%35 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (= (lib!page_organization.PageOrg.impl&%4.does_count.? (Poly%lib!page_organization.PageOrg.State. pre!) pid$) (lib!page_organization.PageOrg.impl&%4.does_count.? (Poly%lib!page_organization.PageOrg.State. post!) pid$))) :pattern ((lib!page_organization.PageOrg.impl&%4.does_count.? (Poly%lib!page_organization.PageOrg.State. pre!) pid$)) :pattern ((lib!page_organization.PageOrg.impl&%4.does_count.? (Poly%lib!page_organization.PageOrg.State. post!) pid$)))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.ucount_preserve_all. pre! post!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.ucount_preserve_all. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.ucount_preserve_all. pre! post!) (forall ((sid$ Poly)) (! (=> (has_type sid$ TYPE%lib!tokens.SegmentId.) (= (lib!page_organization.PageOrg.impl&%4.ucount.? (Poly%lib!page_organization.PageOrg.State. pre!) sid$) (lib!page_organization.PageOrg.impl&%4.ucount.? (Poly%lib!page_organization.PageOrg.State. post!) sid$))) :pattern ((lib!page_organization.PageOrg.impl&%4.ucount.? (Poly%lib!page_organization.PageOrg.State. pre!) sid$)) :pattern ((lib!page_organization.PageOrg.impl&%4.ucount.? (Poly%lib!page_organization.PageOrg.State. post!) sid$))))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.ucount_preserve_all. pre! post!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::ucount_preserve_all")
(set-info :comment ";; page_organization.rs:4354:5: 4354:60 (#0)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::unchanged_used_ll")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.unchanged_used_ll. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State.) Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(declare-const %%global_location_label%%38 Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.unchanged_used_ll. pre! post!) (and (=> %%global_location_label%%36 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. pre!))) (=> %%global_location_label%%37 (= (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))) (lib!page_organization.PageOrg.State./State/used_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) (=> %%global_location_label%%38 (= (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))) (lib!page_organization.PageOrg.State./State/used_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) (=> %%global_location_label%%39 (forall ((page_id$ Poly)) (! (=> (has_type page_id$ TYPE%lib!tokens.PageId.) (=> (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) page_id$) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) page_id$)))) (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) page_id$) (= (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) page_id$))) (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) page_id$))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) page_id$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) page_id$))))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.unchanged_used_ll. pre! post!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.unchanged_used_ll. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State.) Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.unchanged_used_ll. pre! post!) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_used.? (Poly%lib!page_organization.PageOrg.State. post!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.unchanged_used_ll. pre! post!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::unchanged_used_ll")
(set-info :comment ";; page_organization.rs:4766:5: 4766:58 (#0)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::take_page_from_unused_queue_ll_inv_valid_unused")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_ll_inv_valid_unused. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Int) Bool)
(declare-const %%global_location_label%%40 Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.) (sbin_idx! Int) (list_idx! Int)) (! (= (req%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_ll_inv_valid_unused. pre! post! page_id! sbin_idx! list_idx!) (and (=> %%global_location_label%%40 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. pre!))) (=> %%global_location_label%%41 (lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_strong.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!page_organization.PageOrg.State. post!) (Poly%lib!tokens.PageId. page_id!) (I sbin_idx!) (I list_idx!))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_ll_inv_valid_unused. pre! post! page_id! sbin_idx! list_idx!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_ll_inv_valid_unused. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Int) Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.) (sbin_idx! Int) (list_idx! Int)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_ll_inv_valid_unused. pre! post! page_id! sbin_idx! list_idx!) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused.? (Poly%lib!page_organization.PageOrg.State. post!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_ll_inv_valid_unused. pre! post! page_id! sbin_idx! list_idx!)))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::attached_rec_same")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.attached_rec_same. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.SegmentId. Int Bool) Bool)
(declare-const %%global_location_label%%42 Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(declare-const %%global_location_label%%45 Bool)
(declare-const %%global_location_label%%46 Bool)
(declare-const %%global_location_label%%47 Bool)
(declare-const %%global_location_label%%48 Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (segment_id! lib!tokens.SegmentId.) (idx! Int) (sp! Bool)) (! (= (req%lib!page_organization.PageOrg.impl&%4.attached_rec_same. pre! post! segment_id! idx! sp!) (and (=> %%global_location_label%%42 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. pre!))) (=> %%global_location_label%%43 (lib!page_organization.PageOrg.impl&%4.attached_rec.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!tokens.SegmentId. segment_id!) (I idx!) (B sp!))) (=> %%global_location_label%%44 (lib!page_organization.PageOrg.impl&%4.popped_ranges_match_for_sid.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!page_organization.PageOrg.State. post!) (Poly%lib!tokens.SegmentId. segment_id!))) (=> %%global_location_label%%45 (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) (=> (is-lib!page_organization.Popped./VeryUnready_ tmp%%$) (let ((i$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (>= i$ 0))))) (=> %%global_location_label%%46 (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) (=> (is-lib!page_organization.Popped./VeryUnready_ tmp%%$) (let ((i$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (>= i$ 0))))) (=> %%global_location_label%%47 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) segment_id!) (and (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) pid$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) pid$)) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) pid$) (=> (and (not (lib!page_organization.PageOrg.impl&%4.in_popped_range.? (Poly%lib!page_organization.PageOrg.State. pre!) pid$)) (>= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. pid$)) idx!)) (and (and (and (and (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) pid$) (= (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$))))) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$)))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$)))))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$))))) (= (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$))))) (= (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$)))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) pid$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) pid$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$)) :pattern ((vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$))))) (=> %%global_location_label%%48 (=> (not sp!) (=> (lib!page_organization.PageOrg.impl&%4.popped_for_seg.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!tokens.SegmentId. segment_id!)) (>= idx! (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%4.page_id_of_popped.? (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))))))) (lib!page_organization.PageOrg.impl&%4.popped_len.? (Poly%lib!page_organization.PageOrg.State. pre!))))))) (=> %%global_location_label%%49 (>= idx! 0)))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.attached_rec_same. pre! post! segment_id! idx! sp!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.attached_rec_same. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.SegmentId. Int Bool) Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (segment_id! lib!tokens.SegmentId.) (idx! Int) (sp! Bool)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.attached_rec_same. pre! post! segment_id! idx! sp!) (and (lib!page_organization.PageOrg.impl&%4.attached_rec.? (Poly%lib!page_organization.PageOrg.State. post!) (Poly%lib!tokens.SegmentId. segment_id!) (I idx!) (B sp!)) (=> sp! (=> (lib!page_organization.PageOrg.impl&%4.popped_for_seg.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!tokens.SegmentId. segment_id!)) (<= idx! (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%4.page_id_of_popped.? (Poly%lib!page_organization.Popped. (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))))))))))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.attached_rec_same. pre! post! segment_id! idx! sp!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::attached_rec_same")
(set-info :comment ";; page_organization.rs:4642:5: 4645:6 (#0)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::attached_ranges_except")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.attached_ranges_except. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.SegmentId.) Bool)
(declare-const %%global_location_label%%50 Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (esid! lib!tokens.SegmentId.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.attached_ranges_except. pre! post! esid!) (and (=> %%global_location_label%%50 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. pre!))) (=> %%global_location_label%%51 (forall ((sid$ Poly)) (! (=> (has_type sid$ TYPE%lib!tokens.SegmentId.) (=> (and (not (= (%Poly%lib!tokens.SegmentId. sid$) esid!)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) sid$)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) sid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) sid$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) sid$))))) (=> %%global_location_label%%52 (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (not (= (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. pid$)) esid!)) (and (= (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) pid$) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) pid$)) (=> (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) pid$) (and (and (and (and (and (= (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$)))) (= (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$)))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$)))))) (= (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) (lib!page_organization.PageData./PageData/offset (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$))))) (= (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) (lib!page_organization.PageData./PageData/is_used (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$))))) (= (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) (lib!page_organization.PageData./PageData/full (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$))))) (= (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) pid$))) (lib!page_organization.PageData./PageData/page_header_kind (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!)))) pid$))))))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) pid$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) pid$))))) (=> %%global_location_label%%53 (lib!page_organization.PageOrg.impl&%4.if_popped_or_other_then_for.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!tokens.SegmentId. esid!))) (=> %%global_location_label%%54 (lib!page_organization.PageOrg.impl&%4.if_popped_or_other_then_for.? (Poly%lib!page_organization.PageOrg.State. post!) (Poly%lib!tokens.SegmentId. esid!))) (=> %%global_location_label%%55 (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) (=> (is-lib!page_organization.Popped./VeryUnready_ tmp%%$) (let ((i$ (lib!page_organization.Popped./VeryUnready/1 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (>= i$ 0))))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.attached_ranges_except. pre! post! esid!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.attached_ranges_except. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.SegmentId.) Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (esid! lib!tokens.SegmentId.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.attached_ranges_except. pre! post! esid!) (forall ((sid$ Poly)) (! (=> (has_type sid$ TYPE%lib!tokens.SegmentId.) (=> (and (not (= (%Poly%lib!tokens.SegmentId. sid$) esid!)) (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) sid$)) (lib!page_organization.PageOrg.impl&%4.attached_ranges_segment.? (Poly%lib!page_organization.PageOrg.State. post!) sid$))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.SegmentId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.SegmentId. $ TYPE%lib!page_organization.SegmentData. (Poly%vstd!map.Map<lib!tokens.SegmentId./lib!page_organization.SegmentData.>. (lib!page_organization.PageOrg.State./State/segments (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. post!))))) sid$))))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.attached_ranges_except. pre! post! esid!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::attached_ranges_except")
(set-info :comment ";; page_organization.rs:4512:5: 4512:80 (#0)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::rec_take_page_from_unused_queue")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.rec_take_page_from_unused_queue. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Int Int) Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(declare-const %%global_location_label%%59 Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (pid! lib!tokens.PageId.) (sbin_idx! Int) (list_idx! Int) (idx! Int)) (! (= (req%lib!page_organization.PageOrg.impl&%4.rec_take_page_from_unused_queue. pre! post! pid! sbin_idx! list_idx! idx!) (and (=> %%global_location_label%%56 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. pre!))) (=> %%global_location_label%%57 (lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_strong.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!page_organization.PageOrg.State. post!) (Poly%lib!tokens.PageId. pid!) (I sbin_idx!) (I list_idx!))) (=> %%global_location_label%%58 (lib!page_organization.PageOrg.impl&%4.attached_rec.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. pid!)))) (I idx!) (B false))) (=> %%global_location_label%%59 (is-lib!page_organization.Popped./No_ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!))))) (=> %%global_location_label%%60 (>= idx! 0)) (=> %%global_location_label%%61 (< (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. pid!))) lib!config.SLICES_PER_SEGMENT.?)))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.rec_take_page_from_unused_queue. pre! post! pid! sbin_idx! list_idx! idx!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.rec_take_page_from_unused_queue. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Int Int) Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (pid! lib!tokens.PageId.) (sbin_idx! Int) (list_idx! Int) (idx! Int)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.rec_take_page_from_unused_queue. pre! post! pid! sbin_idx! list_idx! idx!) (lib!page_organization.PageOrg.impl&%4.attached_rec.? (Poly%lib!page_organization.PageOrg.State. post!) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. pid!)))) (I idx!) (B (<= idx! (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. pid!))))))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.rec_take_page_from_unused_queue. pre! post! pid! sbin_idx! list_idx! idx!)))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::take_page_from_unused_queue_inductive_attached_ranges")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive_attached_ranges. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Int) Bool)
(declare-const %%global_location_label%%62 Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.) (sbin_idx! Int) (list_idx! Int)) (! (= (req%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive_attached_ranges. pre! post! page_id! sbin_idx! list_idx!) (and (=> %%global_location_label%%62 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. pre!))) (=> %%global_location_label%%63 (lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_strong.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!page_organization.PageOrg.State. post!) (Poly%lib!tokens.PageId. page_id!) (I sbin_idx!) (I list_idx!))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive_attached_ranges. pre! post! page_id! sbin_idx! list_idx!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive_attached_ranges. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Int) Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.) (sbin_idx! Int) (list_idx! Int)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive_attached_ranges. pre! post! page_id! sbin_idx! list_idx!) (lib!page_organization.PageOrg.impl&%4.attached_ranges.? (Poly%lib!page_organization.PageOrg.State. post!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive_attached_ranges. pre! post! page_id! sbin_idx! list_idx!)))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::take_page_from_unused_queue_inductive_unusedinv2")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive_unusedinv2. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Int) Bool)
(declare-const %%global_location_label%%64 Bool)
(declare-const %%global_location_label%%65 Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.) (sbin_idx! Int) (list_idx! Int)) (! (= (req%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive_unusedinv2. pre! post! page_id! sbin_idx! list_idx!) (and (=> %%global_location_label%%64 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. pre!))) (=> %%global_location_label%%65 (lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_strong.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!page_organization.PageOrg.State. post!) (Poly%lib!tokens.PageId. page_id!) (I sbin_idx!) (I list_idx!))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive_unusedinv2. pre! post! page_id! sbin_idx! list_idx!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive_unusedinv2. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Int) Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.) (sbin_idx! Int) (list_idx! Int)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive_unusedinv2. pre! post! page_id! sbin_idx! list_idx!) (lib!page_organization.PageOrg.impl&%4.ll_inv_valid_unused2.? (Poly%lib!page_organization.PageOrg.State. post!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive_unusedinv2. pre! post! page_id! sbin_idx! list_idx!)))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::ll_remove")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.ll_remove. (vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. Int Int) Bool)
(declare-const %%global_location_label%%66 Bool)
(declare-const %%global_location_label%%67 Bool)
(declare-const %%global_location_label%%68 Bool)
(assert (forall ((lls1! vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.) (lls2! vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.) (sbin_idx! Int) (list_idx! Int)) (! (= (req%lib!page_organization.PageOrg.impl&%4.ll_remove. lls1! lls2! sbin_idx! list_idx!) (and (=> %%global_location_label%%66 (and (<= 0 sbin_idx!) (< sbin_idx! (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. lls1!))))) (=> %%global_location_label%%67 (and (<= 0 list_idx!) (< list_idx! (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. lls1!) (I sbin_idx!)))))) (=> %%global_location_label%%68 (ext_eq true (TYPE%vstd!seq.Seq. $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.)) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. lls2!) (vstd!seq.Seq.update.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. lls1!) (I sbin_idx!) (vstd!seq_lib.impl&%0.remove.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. lls1!) (I sbin_idx!)) (I list_idx!))))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.ll_remove. lls1! lls2! sbin_idx! list_idx!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.ll_remove. (vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. Int Int) Bool)
(assert (forall ((lls1! vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.) (lls2! vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>.) (sbin_idx! Int) (list_idx! Int)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.ll_remove. lls1! lls2! sbin_idx! list_idx!) (forall ((pid$ Poly)) (! (=> (has_type pid$ TYPE%lib!tokens.PageId.) (=> (not (= pid$ (vstd!seq.Seq.index.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. lls1!) (I sbin_idx!)) (I list_idx!)))) (=> (lib!page_organization.is_in_lls.? pid$ (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. lls1!)) (lib!page_organization.is_in_lls.? pid$ (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. lls2!))))) :pattern ((lib!page_organization.is_in_lls.? pid$ (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. lls1!)))))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.ll_remove. lls1! lls2! sbin_idx! list_idx!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::ll_remove")
(set-info :comment ";; page_organization.rs:5023:5: 5023:105 (#0)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::ll_inv_exists_take_page_from_unused_queue")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.ll_inv_exists_take_page_from_unused_queue. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Int) Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(declare-const %%global_location_label%%72 Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.) (sbin_idx! Int) (list_idx! Int)) (! (= (req%lib!page_organization.PageOrg.impl&%4.ll_inv_exists_take_page_from_unused_queue. pre! post! page_id! sbin_idx! list_idx!) (and (=> %%global_location_label%%69 (and (<= 0 sbin_idx!) (< sbin_idx! (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))))))) (=> %%global_location_label%%70 (and (<= 0 list_idx!) (< list_idx! (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. pre!)))) (I sbin_idx!)))))) (=> %%global_location_label%%71 (lib!page_organization.PageOrg.impl&%4.ll_inv_exists_in_some_list.? (Poly%lib!page_organization.PageOrg.State. pre!))) (=> %%global_location_label%%72 (lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_strong.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!page_organization.PageOrg.State. post!) (Poly%lib!tokens.PageId. page_id!) (I sbin_idx!) (I list_idx!))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.ll_inv_exists_take_page_from_unused_queue. pre! post! page_id! sbin_idx! list_idx!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.ll_inv_exists_take_page_from_unused_queue. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Int) Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.) (sbin_idx! Int) (list_idx! Int)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.ll_inv_exists_take_page_from_unused_queue. pre! post! page_id! sbin_idx! list_idx!) (lib!page_organization.PageOrg.impl&%4.ll_inv_exists_in_some_list.? (Poly%lib!page_organization.PageOrg.State. post!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.ll_inv_exists_take_page_from_unused_queue. pre! post! page_id! sbin_idx! list_idx!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::ll_inv_exists_take_page_from_unused_queue")
(set-info :comment ";; page_organization.rs:2170:5: 2170:129 (#0)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::take_page_from_unused_queue_inductive")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Int) Bool)
(declare-const %%global_location_label%%73 Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.) (sbin_idx! Int) (list_idx! Int)) (! (= (req%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive. pre! post! page_id! sbin_idx! list_idx!) (=> %%global_location_label%%73 (and (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. pre!)) (lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_strong.? (Poly%lib!page_organization.PageOrg.State. pre!) (Poly%lib!page_organization.PageOrg.State. post!) (Poly%lib!tokens.PageId. page_id!) (I sbin_idx!) (I list_idx!))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive. pre! post! page_id! sbin_idx! list_idx!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive. (lib!page_organization.PageOrg.State. lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Int) Bool)
(assert (forall ((pre! lib!page_organization.PageOrg.State.) (post! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.) (sbin_idx! Int) (list_idx! Int)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive. pre! post! page_id! sbin_idx! list_idx!) (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. post!))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.take_page_from_unused_queue_inductive. pre! post! page_id! sbin_idx! list_idx!)))))
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::rec_lemma_range_used")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.rec_lemma_range_used. (lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Bool) Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(declare-const %%global_location_label%%76 Bool)
(declare-const %%global_location_label%%77 Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.) (idx! Int) (sp! Bool)) (! (= (req%lib!page_organization.PageOrg.impl&%4.rec_lemma_range_used. self! page_id! idx! sp!) (and (=> %%global_location_label%%74 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. self!))) (=> %%global_location_label%%75 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (Poly%lib!tokens.PageId. page_id!))) (=> %%global_location_label%%76 (lib!page_organization.is_used_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id!)))) (=> %%global_location_label%%77 (not (= (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!))) lib!config.SLICES_PER_SEGMENT.?))) (=> %%global_location_label%%78 (and (<= 0 idx!) (<= idx! (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!)))))) (=> %%global_location_label%%79 (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (=> (is-lib!page_organization.Popped./Used_ tmp%%$) (let ((pid$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (not (= pid$ page_id!)))))) (=> %%global_location_label%%80 (lib!page_organization.PageOrg.impl&%4.attached_rec.? (Poly%lib!page_organization.PageOrg.State. self!) (Poly%lib!tokens.SegmentId. (lib!tokens.PageId./PageId/segment_id (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!)))) (I idx!) (B sp!))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.rec_lemma_range_used. self! page_id! idx! sp!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.rec_lemma_range_used. (lib!page_organization.PageOrg.State. lib!tokens.PageId. Int Bool) Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.) (idx! Int) (sp! Bool)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.rec_lemma_range_used. self! page_id! idx! sp!) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id!))))) (lib!page_organization.PageOrg.impl&%4.good_range_used.? (Poly%lib!page_organization.PageOrg.State. self!) (Poly%lib!tokens.PageId. page_id!)))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.rec_lemma_range_used. self! page_id! idx! sp!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::rec_lemma_range_used")
(set-info :comment ";; page_organization.rs:4009:5: 4009:82 (#0)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::lemma_range_used")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.lemma_range_used. (lib!page_organization.PageOrg.State. lib!tokens.PageId.) Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(declare-const %%global_location_label%%84 Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.lemma_range_used. self! page_id!) (and (=> %%global_location_label%%81 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. self!))) (=> %%global_location_label%%82 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (Poly%lib!tokens.PageId. page_id!))) (=> %%global_location_label%%83 (lib!page_organization.is_used_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id!)))) (=> %%global_location_label%%84 (let ((tmp%%$ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (=> (is-lib!page_organization.Popped./Used_ tmp%%$) (let ((pid$ (lib!page_organization.Popped./Used/0 (%Poly%lib!page_organization.Popped. (Poly%lib!page_organization.Popped. tmp%%$))))) (not (= pid$ page_id!)))))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.lemma_range_used. self! page_id!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.lemma_range_used. (lib!page_organization.PageOrg.State. lib!tokens.PageId.) Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.lemma_range_used. self! page_id!) (and (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id!))))) (lib!page_organization.PageOrg.impl&%4.good_range_used.? (Poly%lib!page_organization.PageOrg.State. self!) (Poly%lib!tokens.PageId. page_id!)))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.lemma_range_used. self! page_id!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::lemma_range_used")
(set-info :comment ";; page_organization.rs:3981:5: 3981:58 (#0)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::get_count_bound")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.get_count_bound. (lib!page_organization.PageOrg.State. lib!tokens.PageId.) Bool)
(declare-const %%global_location_label%%85 Bool)
(declare-const %%global_location_label%%86 Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.)) (! (= (req%lib!page_organization.PageOrg.impl&%4.get_count_bound. self! page_id!) (and (=> %%global_location_label%%85 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. self!))) (=> %%global_location_label%%86 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (Poly%lib!tokens.PageId. page_id!))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.get_count_bound. self! page_id!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.get_count_bound. (lib!page_organization.PageOrg.State. lib!tokens.PageId.) Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (page_id! lib!tokens.PageId.)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.get_count_bound. self! page_id!) (let ((tmp%%$ (lib!page_organization.PageData./PageData/count (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. page_id!)))))) (=> (not (is-core!option.Option./None_ tmp%%$)) (let ((count$ (%I (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (<= (nClip (Add (lib!tokens.PageId./PageId/idx (%Poly%lib!tokens.PageId. (Poly%lib!tokens.PageId. page_id!))) count$)) lib!config.SLICES_PER_SEGMENT.?))))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.get_count_bound. self! page_id!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::get_count_bound")
(set-info :comment ";; page_organization.rs:741:5: 741:57 (#0)")
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::take_page_from_unused_queue_asserts")
(set-info :comment ";; page_organization.rs:57:1: 5042:3 (#1375)")
(set-info :comment ";; Function-Specs lib::page_organization::PageOrg::State::first_last_ll_stuff_unused")
(declare-fun req%lib!page_organization.PageOrg.impl&%4.first_last_ll_stuff_unused. (lib!page_organization.PageOrg.State. Int) Bool)
(declare-const %%global_location_label%%87 Bool)
(declare-const %%global_location_label%%88 Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (i! Int)) (! (= (req%lib!page_organization.PageOrg.impl&%4.first_last_ll_stuff_unused. self! i!) (and (=> %%global_location_label%%87 (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. self!))) (=> %%global_location_label%%88 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))))))))) :pattern ((req%lib!page_organization.PageOrg.impl&%4.first_last_ll_stuff_unused. self! i!)))))
(declare-fun ens%lib!page_organization.PageOrg.impl&%4.first_last_ll_stuff_unused. (lib!page_organization.PageOrg.State. Int) Bool)
(assert (forall ((self! lib!page_organization.PageOrg.State.) (i! Int)) (! (= (ens%lib!page_organization.PageOrg.impl&%4.first_last_ll_stuff_unused. self! i!) (and (=> (is-lib!page_organization.Popped./Ready_ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (and (not (= (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)))) (core!option.Option./Some (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%4.popped_page_id.? (Poly%lib!page_organization.PageOrg.State. self!)))))) (not (= (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)))) (core!option.Option./Some (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%4.popped_page_id.? (Poly%lib!page_organization.PageOrg.State. self!)))))))) (let ((tmp%%$ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((first_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (Poly%lib!tokens.PageId. first_id$)) (lib!page_organization.is_unused_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. first_id$)))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. first_id$))))))))) (let ((tmp%%$ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((last_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (Poly%lib!tokens.PageId. last_id$)) (lib!page_organization.is_unused_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. last_id$)))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. last_id$))))))))))) :pattern ((ens%lib!page_organization.PageOrg.impl&%4.first_last_ll_stuff_unused. self! i!)))))
(set-info :comment ";; Function-Def lib::page_organization::PageOrg::State::first_last_ll_stuff_unused")
(set-info :comment ";; page_organization.rs:3844:5: 3844:59 (#0)")
(declare-const self! lib!page_organization.PageOrg.State.)
(declare-const i! Int)
(declare-const tmp%1 Bool)
(declare-const tmp%2 Bool)
(declare-const tmp%3 Bool)
(declare-const tmp%4 Bool)
(declare-const tmp%5 Bool)
(declare-const tmp%6 Bool)
(declare-const tmp%7 Bool)
(declare-const last_id@ lib!tokens.PageId.)
(declare-const tmp%%@ core!option.Option.)
(declare-const tmp%8 Bool)
(declare-const tmp%9 Bool)
(declare-const tmp%10 Bool)
(declare-const tmp%11 Bool)
(declare-const first_id@ lib!tokens.PageId.)
(declare-const tmp%%$1@ core!option.Option.)
(assert fuel_defaults)
(assert (has_type (Poly%lib!page_organization.PageOrg.State. self!) TYPE%lib!page_organization.PageOrg.State.))
(assert (lib!page_organization.PageOrg.impl&%4.invariant.? (Poly%lib!page_organization.PageOrg.State. self!)))
(assert (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))))))
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(declare-const %%switch_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%13 Bool)
(assert (not (=> (= tmp%1 (lib!page_organization.valid_ll.? (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)))) (and (=> %%location_label%%0 tmp%1) (=> tmp%1 (or (and (=> (is-lib!page_organization.Popped./Ready_ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (=> (= tmp%2 (not (= (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)))) (core!option.Option./Some (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%4.popped_page_id.? (Poly%lib!page_organization.PageOrg.State. self!))))))) (and (=> %%location_label%%1 tmp%2) (=> tmp%2 (=> (= tmp%3 (not (= (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)))) (core!option.Option./Some (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%4.popped_page_id.? (Poly%lib!page_organization.PageOrg.State. self!))))))) (and (=> %%location_label%%2 tmp%3) (=> tmp%3 %%switch_label%%2))))))) (=> (not (is-lib!page_organization.Popped./Ready_ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) %%switch_label%%2)) (and (not %%switch_label%%2) (=> (= tmp%%@ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!))))) (or (and (=> (is-core!option.Option./Some_ tmp%%@) (=> (= last_id@ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%@))))) (=> (= tmp%4 (lib!page_organization.valid_ll_i.? (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I (Sub (vstd!seq.Seq.len.? $ TYPE%lib!tokens.PageId. (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!))) 1)))) (and (=> %%location_label%%3 tmp%4) (=> tmp%4 (=> (= tmp%5 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (Poly%lib!tokens.PageId. last_id@))) (and (=> %%location_label%%4 tmp%5) (=> tmp%5 (=> (= tmp%6 (lib!page_organization.is_unused_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. last_id@)))) (and (=> %%location_label%%5 tmp%6) (=> tmp%6 (=> (= tmp%7 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. last_id@)))))) (and (=> %%location_label%%6 tmp%7) (=> tmp%7 %%switch_label%%1)))))))))))))) (=> (not (is-core!option.Option./Some_ tmp%%@)) %%switch_label%%1)) (and (not %%switch_label%%1) (=> (= tmp%%$1@ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!))))) (or (and (=> (is-core!option.Option./Some_ tmp%%$1@) (=> (= first_id@ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$1@))))) (=> (= tmp%8 (lib!page_organization.valid_ll_i.? (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (vstd!seq.Seq.index.? $ (TYPE%vstd!seq.Seq. $ TYPE%lib!tokens.PageId.) (Poly%vstd!seq.Seq<vstd!seq.Seq<lib!tokens.PageId.>.>. (lib!page_organization.PageOrg.State./State/unused_lists (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)) (I 0))) (and (=> %%location_label%%7 tmp%8) (=> tmp%8 (=> (= tmp%9 (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (Poly%lib!tokens.PageId. first_id@))) (and (=> %%location_label%%8 tmp%9) (=> tmp%9 (=> (= tmp%10 (lib!page_organization.is_unused_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. first_id@)))) (and (=> %%location_label%%9 tmp%10) (=> tmp%10 (=> (= tmp%11 (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. first_id@)))))) (and (=> %%location_label%%10 tmp%11) (=> tmp%11 %%switch_label%%0)))))))))))))) (=> (not (is-core!option.Option./Some_ tmp%%$1@)) %%switch_label%%0)) (and (not %%switch_label%%0) (and (=> %%location_label%%11 (=> (is-lib!page_organization.Popped./Ready_ (lib!page_organization.PageOrg.State./State/popped (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (and (not (= (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)))) (core!option.Option./Some (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%4.popped_page_id.? (Poly%lib!page_organization.PageOrg.State. self!)))))) (not (= (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)))) (core!option.Option./Some (Poly%lib!tokens.PageId. (lib!page_organization.PageOrg.impl&%4.popped_page_id.? (Poly%lib!page_organization.PageOrg.State. self!))))))))) (and (=> %%location_label%%12 (let ((tmp%%$ (lib!page_organization.DlistHeader./DlistHeader/first (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((first_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (Poly%lib!tokens.PageId. first_id$)) (lib!page_organization.is_unused_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. first_id$)))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. first_id$)))))))))) (=> %%location_label%%13 (let ((tmp%%$ (lib!page_organization.DlistHeader./DlistHeader/last (%Poly%lib!page_organization.DlistHeader. (vstd!seq.Seq.index.? $ TYPE%lib!page_organization.DlistHeader. (Poly%vstd!seq.Seq<lib!page_organization.DlistHeader.>. (lib!page_organization.PageOrg.State./State/unused_dlist_headers (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (I i!)))))) (=> (is-core!option.Option./Some_ tmp%%$) (let ((last_id$ (%Poly%lib!tokens.PageId. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. tmp%%$)))))) (and (and (vstd!set.impl&%0.contains.? $ TYPE%lib!tokens.PageId. (vstd!map.impl&%0.dom.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!))))) (Poly%lib!tokens.PageId. last_id$)) (lib!page_organization.is_unused_header.? (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. last_id$)))) (is-core!option.Option./Some_ (lib!page_organization.PageData./PageData/dlist_entry (%Poly%lib!page_organization.PageData. (vstd!map.impl&%0.index.? $ TYPE%lib!tokens.PageId. $ TYPE%lib!page_organization.PageData. (Poly%vstd!map.Map<lib!tokens.PageId./lib!page_organization.PageData.>. (lib!page_organization.PageOrg.State./State/pages (%Poly%lib!page_organization.PageOrg.State. (Poly%lib!page_organization.PageOrg.State. self!)))) (Poly%lib!tokens.PageId. last_id$)))))))))))))))))))))))))
(check-sat)
(exit)
