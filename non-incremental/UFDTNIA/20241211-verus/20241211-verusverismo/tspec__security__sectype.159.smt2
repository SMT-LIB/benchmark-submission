(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verismo (https://www.usenix.org/conference/osdi24/presentation/zhou) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module tspec::security::sectype'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!set.impl&%0.full. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_nat_pow2. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_Unknown. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_Secret. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%1.spec_set_val. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%1.spec_set__unused. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%1.spec_set_valsets. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%1.spec_set_labels. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_val. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec__unused. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_labels. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%4.is_fullsecret. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%6.view. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%9.call_self. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%9.wf_value. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%10.is_fullsecret_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%11.is_fullsecret_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%12.is_constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%15.is_constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.call_self. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.wf_value. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.bop_new. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.uop_new. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.secval_eq_at. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.sec_eq. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16._is_constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%17.spec_constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%20.wf. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%92.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%93.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%95.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%96.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%98.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%99.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%101.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%102.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%104.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%105.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%106.is_secure_gt. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%110.is_secure_lt. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%114.is_secure_le. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%118.is_secure_ge. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%122.is_secure_eq. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%176.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%177.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%178.requires_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%178.ensures_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%180.is_secure_gt. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%184.is_secure_lt. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%188.is_secure_le. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%192.is_secure_ge. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%196.is_secure_eq. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%250.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%251.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%252.requires_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%252.ensures_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%254.is_secure_gt. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%258.is_secure_lt. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%262.is_secure_le. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%266.is_secure_ge. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%270.is_secure_eq. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%324.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%325.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%326.requires_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%326.ensures_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%328.is_secure_gt. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%332.is_secure_lt. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%336.is_secure_le. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%340.is_secure_ge. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%344.is_secure_eq. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%398.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%399.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%400.requires_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%400.ensures_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%402.is_secure_gt. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%406.is_secure_lt. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%410.is_secure_le. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%414.is_secure_ge. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%418.is_secure_eq. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%472.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%473.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%474.requires_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%474.ensures_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%476.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%477.spec_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%478.requires_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%478.ensures_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%480.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%481.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%514.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%515.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%516.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%517.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%518.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%519.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%520.spec_bitor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%521.spec_bitor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%522.spec_bitand. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%523.spec_bitand. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%524.spec_bitxor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%525.spec_bitxor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%526.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%527.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%528.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%529.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%530.spec_shl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%531.spec_shl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%532.spec_shr. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%533.spec_shr. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%534.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%535.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%568.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%569.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%570.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%571.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%572.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%573.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%574.spec_bitor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%575.spec_bitor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%576.spec_bitand. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%577.spec_bitand. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%578.spec_bitxor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%579.spec_bitxor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%580.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%581.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%582.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%583.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%584.spec_shl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%585.spec_shl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%586.spec_shr. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%587.spec_shr. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%588.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%589.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%622.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%623.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%624.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%625.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%626.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%627.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%628.spec_bitor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%629.spec_bitor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%630.spec_bitand. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%631.spec_bitand. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%632.spec_bitxor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%633.spec_bitxor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%634.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%635.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%636.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%637.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%638.spec_shl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%639.spec_shl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%640.spec_shr. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%641.spec_shr. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%642.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%643.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%676.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%677.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%678.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%679.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%680.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%681.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%682.spec_bitor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%683.spec_bitor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%684.spec_bitand. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%685.spec_bitand. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%686.spec_bitxor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%687.spec_bitxor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%688.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%689.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%690.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%691.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%692.spec_shl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%693.spec_shl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%694.spec_shr. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%695.spec_shr. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%696.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%697.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%730.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%731.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%732.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%733.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%734.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%735.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%736.spec_bitor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%737.spec_bitor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%738.spec_bitand. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%739.spec_bitand. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%740.spec_bitxor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%741.spec_bitxor. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%742.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%743.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%744.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%745.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%746.spec_shl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%747.spec_shl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%748.spec_shr. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%749.spec_shr. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%750.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%751.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%780.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%781.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%782.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%783.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%784.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%785.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%786.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%787.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%788.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%789.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%790.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%791.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%820.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%821.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%822.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%823.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%824.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%825.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%826.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%827.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%828.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%829.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%830.requires_not. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%830.ensures_not. FuelId)
(declare-const fuel%verismo!tspec.security.seq.fn_spec_to_seq_index. FuelId)
(declare-const fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.bool_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.char_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u8_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u16_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u32_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u64_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u128_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.usize_to_stream. FuelId)
(declare-const fuel%verismo!arch.rmp.perm_s.impl&%1.as_int. FuelId)
(declare-const fuel%verismo!arch.rmp.perm_s.impl&%1.from_int. FuelId)
(declare-const fuel%verismo!tspec.cast.proof_field_set_constant. FuelId)
(declare-const fuel%verismo!tspec.cast.fn_vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%1.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%7.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%8.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%9.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%10.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%11.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%12.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%13.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%14.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%15.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%16.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%17.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%18.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%19.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%20.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%21.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%22.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%23.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%24.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%25.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%26.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%27.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%28.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%29.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%30.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%31.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%32.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%33.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%34.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%35.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%36.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%37.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%38.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%39.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%40.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%41.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%42.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%43.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%44.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%45.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%46.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%47.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%48.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%49.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%50.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%51.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%52.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%53.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%54.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%55.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%56.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%57.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%58.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%59.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%60.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%61.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%62.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%63.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%64.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%65.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%66.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%67.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%68.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%69.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%70.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%71.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%72.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%73.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%74.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%75.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%76.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%77.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%78.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%79.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%80.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%81.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%82.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%83.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%84.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%85.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%86.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%87.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%88.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%89.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%90.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%91.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%92.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%93.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%94.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%95.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%96.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%97.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%98.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%99.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%100.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%101.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%1.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%2.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%3.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%4.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%5.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%6.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%7.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%8.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%9.spec_default. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%0.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%0.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%1.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%1.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%3.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%3.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%4.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%4.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%5.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%5.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%6.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%6.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%7.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%7.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%8.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%8.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%9.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%9.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%10.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%10.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%11.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%11.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.ops.impl&%0.spec_not. FuelId)
(declare-const fuel%verismo!tspec.ops.impl&%1.spec_not. FuelId)
(declare-const fuel%verismo!tspec.ops.impl&%2.spec_not. FuelId)
(declare-const fuel%verismo!tspec.ops.impl&%3.spec_not. FuelId)
(declare-const fuel%verismo!tspec.ops.impl&%4.spec_not. FuelId)
(declare-const fuel%verismo!tspec.ops.impl&%5.spec_not. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_lt_u64_u64_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_gt_u64_u64_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_le_u64_u64_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_ge_u64_u64_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_eq_u64_u64_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_lt_u32_u32_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_gt_u32_u32_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_le_u32_u32_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_ge_u32_u32_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_eq_u32_u32_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_lt_u16_u16_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_gt_u16_u16_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_le_u16_u16_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_ge_u16_u16_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_eq_u16_u16_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_lt_u8_u8_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_gt_u8_u8_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_le_u8_u8_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_ge_u8_u8_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_eq_u8_u8_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_lt_usize_usize_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_gt_usize_usize_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_le_usize_usize_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_ge_usize_usize_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_eq_usize_usize_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_u64_u64_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u64_u64_u64. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_div_u64_u64_u64. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_rem_u64_u64_u64. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_u32_u32_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u32_u32_u32. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_div_u32_u32_u32. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_rem_u32_u32_u32. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_u16_u16_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u16_u16_u16. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_div_u16_u16_u16. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_rem_u16_u16_u16. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_u8_u8_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u8_u8_u8. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_div_u8_u8_u8. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_rem_u8_u8_u8. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_usize_usize_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_usize_usize_usize. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_div_usize_usize_usize. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_rem_usize_usize_usize. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_int_int_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_int_int_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_nat_nat_nat. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_not_u64_u64. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_not_u32_u32. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_not_u16_u16. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_not_u8_u8. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_not_usize_usize. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_not_bool_bool. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitand_u64_u64_u64. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitor_u64_u64_u64. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitxor_u64_u64_u64. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_shr_u64_u64_u64. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_shl_u64_u64_u64. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitand_u32_u32_u32. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitor_u32_u32_u32. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitxor_u32_u32_u32. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_shr_u32_u32_u32. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_shl_u32_u32_u32. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitand_u16_u16_u16. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitor_u16_u16_u16. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitxor_u16_u16_u16. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_shr_u16_u16_u16. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_shl_u16_u16_u16. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitand_u8_u8_u8. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitor_u8_u8_u8. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitxor_u8_u8_u8. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_shr_u8_u8_u8. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_shl_u8_u8_u8. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitand_usize_usize_usize. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitor_usize_usize_usize. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_bitxor_usize_usize_usize. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_shr_usize_usize_usize. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_shl_usize_usize_usize. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%0.spec_add. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%1.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%2.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%3.spec_euclidean_div. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%4.spec_euclidean_mod. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%5.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.setlib.uop_to_bop. FuelId)
(declare-const fuel%verismo!tspec.setlib.set_op. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%8.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%9.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%10.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%12.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%13.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%14.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%15.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%16.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%17.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%18.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%19.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.stream.impl&%0.spec_shr. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%0.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%3.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%4.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%5.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%6.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%7.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%8.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%9.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%10.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%11.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%12.wf. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%4.from_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%5.ord_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%6.spec_from_int. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%0.wf. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%1.wf. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%0.wf. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%1.is_constant. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%1.is_constant_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.recursive_sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%9.is_fullsecret_to. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.Seq.last. fuel%vstd!set.impl&%0.full. fuel%vstd!set.impl&%0.choose. fuel%verismo!tspec.math.pow_s.spec_nat_pow2. fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol. fuel%verismo!tspec.security.sectype.impl&%0.is_Unknown. fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom. fuel%verismo!tspec.security.sectype.impl&%0.is_Secret. fuel%verismo!tspec.security.sectype.impl&%1.spec_set_val. fuel%verismo!tspec.security.sectype.impl&%1.spec_set__unused. fuel%verismo!tspec.security.sectype.impl&%1.spec_set_valsets. fuel%verismo!tspec.security.sectype.impl&%1.spec_set_labels. fuel%verismo!tspec.security.sectype.impl&%3.spec_val. fuel%verismo!tspec.security.sectype.impl&%3.spec__unused. fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets. fuel%verismo!tspec.security.sectype.impl&%3.spec_labels. fuel%verismo!tspec.security.sectype.impl&%4.is_fullsecret. fuel%verismo!tspec.security.sectype.impl&%6.view. fuel%verismo!tspec.security.sectype.impl&%9.call_self. fuel%verismo!tspec.security.sectype.impl&%9.wf_value. fuel%verismo!tspec.security.sectype.impl&%10.is_fullsecret_to. fuel%verismo!tspec.security.sectype.impl&%11.is_fullsecret_to. fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to. fuel%verismo!tspec.security.sectype.impl&%12.is_constant. fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to. fuel%verismo!tspec.security.sectype.impl&%15.is_constant. fuel%verismo!tspec.security.sectype.impl&%16.call_self. fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl. fuel%verismo!tspec.security.sectype.impl&%16.wf_value. fuel%verismo!tspec.security.sectype.impl&%16.bop_new. fuel%verismo!tspec.security.sectype.impl&%16.uop_new. fuel%verismo!tspec.security.sectype.impl&%16.secval_eq_at. fuel%verismo!tspec.security.sectype.impl&%16.sec_eq. fuel%verismo!tspec.security.sectype.impl&%16._is_constant. fuel%verismo!tspec.security.sectype.impl&%16.constant. fuel%verismo!tspec.security.sectype.impl&%17.spec_constant. fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%20.wf. fuel%verismo!tspec.security.sectype.impl&%92.spec_default. fuel%verismo!tspec.security.sectype.impl&%93.spec_default. fuel%verismo!tspec.security.sectype.impl&%95.spec_default. fuel%verismo!tspec.security.sectype.impl&%96.spec_default. fuel%verismo!tspec.security.sectype.impl&%98.spec_default. fuel%verismo!tspec.security.sectype.impl&%99.spec_default. fuel%verismo!tspec.security.sectype.impl&%101.spec_default. fuel%verismo!tspec.security.sectype.impl&%102.spec_default. fuel%verismo!tspec.security.sectype.impl&%104.spec_default. fuel%verismo!tspec.security.sectype.impl&%105.spec_default. fuel%verismo!tspec.security.sectype.impl&%106.is_secure_gt. fuel%verismo!tspec.security.sectype.impl&%110.is_secure_lt. fuel%verismo!tspec.security.sectype.impl&%114.is_secure_le. fuel%verismo!tspec.security.sectype.impl&%118.is_secure_ge. fuel%verismo!tspec.security.sectype.impl&%122.is_secure_eq. fuel%verismo!tspec.security.sectype.impl&%176.spec_not. fuel%verismo!tspec.security.sectype.impl&%177.spec_not. fuel%verismo!tspec.security.sectype.impl&%178.requires_not. fuel%verismo!tspec.security.sectype.impl&%178.ensures_not. fuel%verismo!tspec.security.sectype.impl&%180.is_secure_gt. fuel%verismo!tspec.security.sectype.impl&%184.is_secure_lt. fuel%verismo!tspec.security.sectype.impl&%188.is_secure_le. fuel%verismo!tspec.security.sectype.impl&%192.is_secure_ge. fuel%verismo!tspec.security.sectype.impl&%196.is_secure_eq. fuel%verismo!tspec.security.sectype.impl&%250.spec_not. fuel%verismo!tspec.security.sectype.impl&%251.spec_not. fuel%verismo!tspec.security.sectype.impl&%252.requires_not. fuel%verismo!tspec.security.sectype.impl&%252.ensures_not. fuel%verismo!tspec.security.sectype.impl&%254.is_secure_gt. fuel%verismo!tspec.security.sectype.impl&%258.is_secure_lt. fuel%verismo!tspec.security.sectype.impl&%262.is_secure_le. fuel%verismo!tspec.security.sectype.impl&%266.is_secure_ge. fuel%verismo!tspec.security.sectype.impl&%270.is_secure_eq. fuel%verismo!tspec.security.sectype.impl&%324.spec_not. fuel%verismo!tspec.security.sectype.impl&%325.spec_not. fuel%verismo!tspec.security.sectype.impl&%326.requires_not. fuel%verismo!tspec.security.sectype.impl&%326.ensures_not. fuel%verismo!tspec.security.sectype.impl&%328.is_secure_gt. fuel%verismo!tspec.security.sectype.impl&%332.is_secure_lt. fuel%verismo!tspec.security.sectype.impl&%336.is_secure_le. fuel%verismo!tspec.security.sectype.impl&%340.is_secure_ge. fuel%verismo!tspec.security.sectype.impl&%344.is_secure_eq. fuel%verismo!tspec.security.sectype.impl&%398.spec_not. fuel%verismo!tspec.security.sectype.impl&%399.spec_not. fuel%verismo!tspec.security.sectype.impl&%400.requires_not. fuel%verismo!tspec.security.sectype.impl&%400.ensures_not. fuel%verismo!tspec.security.sectype.impl&%402.is_secure_gt. fuel%verismo!tspec.security.sectype.impl&%406.is_secure_lt. fuel%verismo!tspec.security.sectype.impl&%410.is_secure_le. fuel%verismo!tspec.security.sectype.impl&%414.is_secure_ge. fuel%verismo!tspec.security.sectype.impl&%418.is_secure_eq. fuel%verismo!tspec.security.sectype.impl&%472.spec_not. fuel%verismo!tspec.security.sectype.impl&%473.spec_not. fuel%verismo!tspec.security.sectype.impl&%474.requires_not. fuel%verismo!tspec.security.sectype.impl&%474.ensures_not. fuel%verismo!tspec.security.sectype.impl&%476.spec_not. fuel%verismo!tspec.security.sectype.impl&%477.spec_not. fuel%verismo!tspec.security.sectype.impl&%478.requires_not. fuel%verismo!tspec.security.sectype.impl&%478.ensures_not. fuel%verismo!tspec.security.sectype.impl&%480.ord_int. fuel%verismo!tspec.security.sectype.impl&%481.ord_int. fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%514.spec_add. fuel%verismo!tspec.security.sectype.impl&%515.spec_add. fuel%verismo!tspec.security.sectype.impl&%516.spec_sub. fuel%verismo!tspec.security.sectype.impl&%517.spec_sub. fuel%verismo!tspec.security.sectype.impl&%518.spec_mul. fuel%verismo!tspec.security.sectype.impl&%519.spec_mul. fuel%verismo!tspec.security.sectype.impl&%520.spec_bitor. fuel%verismo!tspec.security.sectype.impl&%521.spec_bitor. fuel%verismo!tspec.security.sectype.impl&%522.spec_bitand. fuel%verismo!tspec.security.sectype.impl&%523.spec_bitand. fuel%verismo!tspec.security.sectype.impl&%524.spec_bitxor. fuel%verismo!tspec.security.sectype.impl&%525.spec_bitxor. fuel%verismo!tspec.security.sectype.impl&%526.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%527.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%528.spec_euclidean_mod. fuel%verismo!tspec.security.sectype.impl&%529.spec_euclidean_mod. fuel%verismo!tspec.security.sectype.impl&%530.spec_shl. fuel%verismo!tspec.security.sectype.impl&%531.spec_shl. fuel%verismo!tspec.security.sectype.impl&%532.spec_shr. fuel%verismo!tspec.security.sectype.impl&%533.spec_shr. fuel%verismo!tspec.security.sectype.impl&%534.ord_int. fuel%verismo!tspec.security.sectype.impl&%535.ord_int. fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%568.spec_add. fuel%verismo!tspec.security.sectype.impl&%569.spec_add. fuel%verismo!tspec.security.sectype.impl&%570.spec_sub. fuel%verismo!tspec.security.sectype.impl&%571.spec_sub. fuel%verismo!tspec.security.sectype.impl&%572.spec_mul. fuel%verismo!tspec.security.sectype.impl&%573.spec_mul. fuel%verismo!tspec.security.sectype.impl&%574.spec_bitor. fuel%verismo!tspec.security.sectype.impl&%575.spec_bitor. fuel%verismo!tspec.security.sectype.impl&%576.spec_bitand. fuel%verismo!tspec.security.sectype.impl&%577.spec_bitand. fuel%verismo!tspec.security.sectype.impl&%578.spec_bitxor. fuel%verismo!tspec.security.sectype.impl&%579.spec_bitxor. fuel%verismo!tspec.security.sectype.impl&%580.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%581.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%582.spec_euclidean_mod. fuel%verismo!tspec.security.sectype.impl&%583.spec_euclidean_mod. fuel%verismo!tspec.security.sectype.impl&%584.spec_shl. fuel%verismo!tspec.security.sectype.impl&%585.spec_shl. fuel%verismo!tspec.security.sectype.impl&%586.spec_shr. fuel%verismo!tspec.security.sectype.impl&%587.spec_shr. fuel%verismo!tspec.security.sectype.impl&%588.ord_int. fuel%verismo!tspec.security.sectype.impl&%589.ord_int. fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%622.spec_add. fuel%verismo!tspec.security.sectype.impl&%623.spec_add. fuel%verismo!tspec.security.sectype.impl&%624.spec_sub. fuel%verismo!tspec.security.sectype.impl&%625.spec_sub. fuel%verismo!tspec.security.sectype.impl&%626.spec_mul. fuel%verismo!tspec.security.sectype.impl&%627.spec_mul. fuel%verismo!tspec.security.sectype.impl&%628.spec_bitor. fuel%verismo!tspec.security.sectype.impl&%629.spec_bitor. fuel%verismo!tspec.security.sectype.impl&%630.spec_bitand. fuel%verismo!tspec.security.sectype.impl&%631.spec_bitand. fuel%verismo!tspec.security.sectype.impl&%632.spec_bitxor. fuel%verismo!tspec.security.sectype.impl&%633.spec_bitxor. fuel%verismo!tspec.security.sectype.impl&%634.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%635.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%636.spec_euclidean_mod. fuel%verismo!tspec.security.sectype.impl&%637.spec_euclidean_mod. fuel%verismo!tspec.security.sectype.impl&%638.spec_shl. fuel%verismo!tspec.security.sectype.impl&%639.spec_shl. fuel%verismo!tspec.security.sectype.impl&%640.spec_shr. fuel%verismo!tspec.security.sectype.impl&%641.spec_shr. fuel%verismo!tspec.security.sectype.impl&%642.ord_int. fuel%verismo!tspec.security.sectype.impl&%643.ord_int. fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%676.spec_add. fuel%verismo!tspec.security.sectype.impl&%677.spec_add. fuel%verismo!tspec.security.sectype.impl&%678.spec_sub. fuel%verismo!tspec.security.sectype.impl&%679.spec_sub. fuel%verismo!tspec.security.sectype.impl&%680.spec_mul. fuel%verismo!tspec.security.sectype.impl&%681.spec_mul. fuel%verismo!tspec.security.sectype.impl&%682.spec_bitor. fuel%verismo!tspec.security.sectype.impl&%683.spec_bitor. fuel%verismo!tspec.security.sectype.impl&%684.spec_bitand. fuel%verismo!tspec.security.sectype.impl&%685.spec_bitand. fuel%verismo!tspec.security.sectype.impl&%686.spec_bitxor. fuel%verismo!tspec.security.sectype.impl&%687.spec_bitxor. fuel%verismo!tspec.security.sectype.impl&%688.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%689.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%690.spec_euclidean_mod. fuel%verismo!tspec.security.sectype.impl&%691.spec_euclidean_mod. fuel%verismo!tspec.security.sectype.impl&%692.spec_shl. fuel%verismo!tspec.security.sectype.impl&%693.spec_shl. fuel%verismo!tspec.security.sectype.impl&%694.spec_shr. fuel%verismo!tspec.security.sectype.impl&%695.spec_shr. fuel%verismo!tspec.security.sectype.impl&%696.ord_int. fuel%verismo!tspec.security.sectype.impl&%697.ord_int. fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%730.spec_add. fuel%verismo!tspec.security.sectype.impl&%731.spec_add. fuel%verismo!tspec.security.sectype.impl&%732.spec_sub. fuel%verismo!tspec.security.sectype.impl&%733.spec_sub. fuel%verismo!tspec.security.sectype.impl&%734.spec_mul. fuel%verismo!tspec.security.sectype.impl&%735.spec_mul. fuel%verismo!tspec.security.sectype.impl&%736.spec_bitor. fuel%verismo!tspec.security.sectype.impl&%737.spec_bitor. fuel%verismo!tspec.security.sectype.impl&%738.spec_bitand. fuel%verismo!tspec.security.sectype.impl&%739.spec_bitand. fuel%verismo!tspec.security.sectype.impl&%740.spec_bitxor. fuel%verismo!tspec.security.sectype.impl&%741.spec_bitxor. fuel%verismo!tspec.security.sectype.impl&%742.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%743.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%744.spec_euclidean_mod. fuel%verismo!tspec.security.sectype.impl&%745.spec_euclidean_mod. fuel%verismo!tspec.security.sectype.impl&%746.spec_shl. fuel%verismo!tspec.security.sectype.impl&%747.spec_shl. fuel%verismo!tspec.security.sectype.impl&%748.spec_shr. fuel%verismo!tspec.security.sectype.impl&%749.spec_shr. fuel%verismo!tspec.security.sectype.impl&%750.ord_int. fuel%verismo!tspec.security.sectype.impl&%751.ord_int. fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%780.spec_add. fuel%verismo!tspec.security.sectype.impl&%781.spec_add. fuel%verismo!tspec.security.sectype.impl&%782.spec_sub. fuel%verismo!tspec.security.sectype.impl&%783.spec_sub. fuel%verismo!tspec.security.sectype.impl&%784.spec_mul. fuel%verismo!tspec.security.sectype.impl&%785.spec_mul. fuel%verismo!tspec.security.sectype.impl&%786.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%787.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%788.spec_euclidean_mod. fuel%verismo!tspec.security.sectype.impl&%789.spec_euclidean_mod. fuel%verismo!tspec.security.sectype.impl&%790.ord_int. fuel%verismo!tspec.security.sectype.impl&%791.ord_int. fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%820.spec_add. fuel%verismo!tspec.security.sectype.impl&%821.spec_add. fuel%verismo!tspec.security.sectype.impl&%822.spec_sub. fuel%verismo!tspec.security.sectype.impl&%823.spec_sub. fuel%verismo!tspec.security.sectype.impl&%824.spec_mul. fuel%verismo!tspec.security.sectype.impl&%825.spec_mul. fuel%verismo!tspec.security.sectype.impl&%826.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%827.spec_euclidean_div. fuel%verismo!tspec.security.sectype.impl&%828.spec_euclidean_mod. fuel%verismo!tspec.security.sectype.impl&%829.spec_euclidean_mod. fuel%verismo!tspec.security.sectype.impl&%830.requires_not. fuel%verismo!tspec.security.sectype.impl&%830.ensures_not. fuel%verismo!tspec.security.seq.fn_spec_to_seq_index. fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to. fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to. fuel%verismo!tspec.stream.basic.bool_to_stream. fuel%verismo!tspec.stream.basic.char_to_stream. fuel%verismo!tspec.stream.basic.u8_to_stream. fuel%verismo!tspec.stream.basic.u16_to_stream. fuel%verismo!tspec.stream.basic.u32_to_stream. fuel%verismo!tspec.stream.basic.u64_to_stream. fuel%verismo!tspec.stream.basic.u128_to_stream. fuel%verismo!tspec.stream.basic.usize_to_stream. fuel%verismo!arch.rmp.perm_s.impl&%1.as_int. fuel%verismo!arch.rmp.perm_s.impl&%1.from_int. fuel%verismo!tspec.cast.proof_field_set_constant. fuel%verismo!tspec.cast.fn_vspec_cast_to. fuel%verismo!tspec.cast.impl&%1.vspec_cast_to. fuel%verismo!tspec.cast.impl&%2.vspec_cast_to. fuel%verismo!tspec.cast.impl&%3.vspec_cast_to. fuel%verismo!tspec.cast.impl&%4.vspec_cast_to. fuel%verismo!tspec.cast.impl&%5.vspec_cast_to. fuel%verismo!tspec.cast.impl&%6.vspec_cast_to. fuel%verismo!tspec.cast.impl&%7.vspec_cast_to. fuel%verismo!tspec.cast.impl&%8.vspec_cast_to. fuel%verismo!tspec.cast.impl&%9.vspec_cast_to. fuel%verismo!tspec.cast.impl&%10.vspec_cast_to. fuel%verismo!tspec.cast.impl&%11.vspec_cast_to. fuel%verismo!tspec.cast.impl&%12.vspec_cast_to. fuel%verismo!tspec.cast.impl&%13.vspec_cast_to. fuel%verismo!tspec.cast.impl&%14.vspec_cast_to. fuel%verismo!tspec.cast.impl&%15.vspec_cast_to. fuel%verismo!tspec.cast.impl&%16.vspec_cast_to. fuel%verismo!tspec.cast.impl&%17.vspec_cast_to. fuel%verismo!tspec.cast.impl&%18.vspec_cast_to. fuel%verismo!tspec.cast.impl&%19.vspec_cast_to. fuel%verismo!tspec.cast.impl&%20.vspec_cast_to. fuel%verismo!tspec.cast.impl&%21.vspec_cast_to. fuel%verismo!tspec.cast.impl&%22.vspec_cast_to. fuel%verismo!tspec.cast.impl&%23.vspec_cast_to. fuel%verismo!tspec.cast.impl&%24.vspec_cast_to. fuel%verismo!tspec.cast.impl&%25.vspec_cast_to. fuel%verismo!tspec.cast.impl&%26.vspec_cast_to. fuel%verismo!tspec.cast.impl&%27.vspec_cast_to. fuel%verismo!tspec.cast.impl&%28.vspec_cast_to. fuel%verismo!tspec.cast.impl&%29.vspec_cast_to. fuel%verismo!tspec.cast.impl&%30.vspec_cast_to. fuel%verismo!tspec.cast.impl&%31.vspec_cast_to. fuel%verismo!tspec.cast.impl&%32.vspec_cast_to. fuel%verismo!tspec.cast.impl&%33.vspec_cast_to. fuel%verismo!tspec.cast.impl&%34.vspec_cast_to. fuel%verismo!tspec.cast.impl&%35.vspec_cast_to. fuel%verismo!tspec.cast.impl&%36.vspec_cast_to. fuel%verismo!tspec.cast.impl&%37.vspec_cast_to. fuel%verismo!tspec.cast.impl&%38.vspec_cast_to. fuel%verismo!tspec.cast.impl&%39.vspec_cast_to. fuel%verismo!tspec.cast.impl&%40.vspec_cast_to. fuel%verismo!tspec.cast.impl&%41.vspec_cast_to. fuel%verismo!tspec.cast.impl&%42.vspec_cast_to. fuel%verismo!tspec.cast.impl&%43.vspec_cast_to. fuel%verismo!tspec.cast.impl&%44.vspec_cast_to. fuel%verismo!tspec.cast.impl&%45.vspec_cast_to. fuel%verismo!tspec.cast.impl&%46.vspec_cast_to. fuel%verismo!tspec.cast.impl&%47.vspec_cast_to. fuel%verismo!tspec.cast.impl&%48.vspec_cast_to. fuel%verismo!tspec.cast.impl&%49.vspec_cast_to. fuel%verismo!tspec.cast.impl&%50.vspec_cast_to. fuel%verismo!tspec.cast.impl&%51.vspec_cast_to. fuel%verismo!tspec.cast.impl&%52.vspec_cast_to. fuel%verismo!tspec.cast.impl&%53.vspec_cast_to. fuel%verismo!tspec.cast.impl&%54.vspec_cast_to. fuel%verismo!tspec.cast.impl&%55.vspec_cast_to. fuel%verismo!tspec.cast.impl&%56.vspec_cast_to. fuel%verismo!tspec.cast.impl&%57.vspec_cast_to. fuel%verismo!tspec.cast.impl&%58.vspec_cast_to. fuel%verismo!tspec.cast.impl&%59.vspec_cast_to. fuel%verismo!tspec.cast.impl&%60.vspec_cast_to. fuel%verismo!tspec.cast.impl&%61.vspec_cast_to. fuel%verismo!tspec.cast.impl&%62.vspec_cast_to. fuel%verismo!tspec.cast.impl&%63.vspec_cast_to. fuel%verismo!tspec.cast.impl&%64.vspec_cast_to. fuel%verismo!tspec.cast.impl&%65.vspec_cast_to. fuel%verismo!tspec.cast.impl&%66.vspec_cast_to. fuel%verismo!tspec.cast.impl&%67.vspec_cast_to. fuel%verismo!tspec.cast.impl&%68.vspec_cast_to. fuel%verismo!tspec.cast.impl&%69.vspec_cast_to. fuel%verismo!tspec.cast.impl&%70.vspec_cast_to. fuel%verismo!tspec.cast.impl&%71.vspec_cast_to. fuel%verismo!tspec.cast.impl&%72.vspec_cast_to. fuel%verismo!tspec.cast.impl&%73.vspec_cast_to. fuel%verismo!tspec.cast.impl&%74.vspec_cast_to. fuel%verismo!tspec.cast.impl&%75.vspec_cast_to. fuel%verismo!tspec.cast.impl&%76.vspec_cast_to. fuel%verismo!tspec.cast.impl&%77.vspec_cast_to. fuel%verismo!tspec.cast.impl&%78.vspec_cast_to. fuel%verismo!tspec.cast.impl&%79.vspec_cast_to. fuel%verismo!tspec.cast.impl&%80.vspec_cast_to. fuel%verismo!tspec.cast.impl&%81.vspec_cast_to. fuel%verismo!tspec.cast.impl&%82.vspec_cast_to. fuel%verismo!tspec.cast.impl&%83.vspec_cast_to. fuel%verismo!tspec.cast.impl&%84.vspec_cast_to. fuel%verismo!tspec.cast.impl&%85.vspec_cast_to. fuel%verismo!tspec.cast.impl&%86.vspec_cast_to. fuel%verismo!tspec.cast.impl&%87.vspec_cast_to. fuel%verismo!tspec.cast.impl&%88.vspec_cast_to. fuel%verismo!tspec.cast.impl&%89.vspec_cast_to. fuel%verismo!tspec.cast.impl&%90.vspec_cast_to. fuel%verismo!tspec.cast.impl&%91.vspec_cast_to. fuel%verismo!tspec.cast.impl&%92.vspec_cast_to. fuel%verismo!tspec.cast.impl&%93.vspec_cast_to. fuel%verismo!tspec.cast.impl&%94.vspec_cast_to. fuel%verismo!tspec.cast.impl&%95.vspec_cast_to. fuel%verismo!tspec.cast.impl&%96.vspec_cast_to. fuel%verismo!tspec.cast.impl&%97.vspec_cast_to. fuel%verismo!tspec.cast.impl&%98.vspec_cast_to. fuel%verismo!tspec.cast.impl&%99.vspec_cast_to. fuel%verismo!tspec.cast.impl&%100.vspec_cast_to. fuel%verismo!tspec.cast.impl&%101.vspec_cast_to. fuel%verismo!tspec.default.impl&%1.spec_default. fuel%verismo!tspec.default.impl&%2.spec_default. fuel%verismo!tspec.default.impl&%3.spec_default. fuel%verismo!tspec.default.impl&%4.spec_default. fuel%verismo!tspec.default.impl&%5.spec_default. fuel%verismo!tspec.default.impl&%6.spec_default. fuel%verismo!tspec.default.impl&%7.spec_default. fuel%verismo!tspec.default.impl&%8.spec_default. fuel%verismo!tspec.default.impl&%9.spec_default. fuel%verismo!tspec.isconst.impl&%0.is_constant. fuel%verismo!tspec.isconst.impl&%0.is_constant_to. fuel%verismo!tspec.isconst.impl&%1.is_constant. fuel%verismo!tspec.isconst.impl&%1.is_constant_to. fuel%verismo!tspec.isconst.impl&%3.is_constant. fuel%verismo!tspec.isconst.impl&%3.is_constant_to. fuel%verismo!tspec.isconst.impl&%4.is_constant. fuel%verismo!tspec.isconst.impl&%4.is_constant_to. fuel%verismo!tspec.isconst.impl&%5.is_constant. fuel%verismo!tspec.isconst.impl&%5.is_constant_to. fuel%verismo!tspec.isconst.impl&%6.is_constant. fuel%verismo!tspec.isconst.impl&%6.is_constant_to. fuel%verismo!tspec.isconst.impl&%7.is_constant. fuel%verismo!tspec.isconst.impl&%7.is_constant_to. fuel%verismo!tspec.isconst.impl&%8.is_constant. fuel%verismo!tspec.isconst.impl&%8.is_constant_to. fuel%verismo!tspec.isconst.impl&%9.is_constant. fuel%verismo!tspec.isconst.impl&%9.is_constant_to. fuel%verismo!tspec.isconst.impl&%10.is_constant. fuel%verismo!tspec.isconst.impl&%10.is_constant_to. fuel%verismo!tspec.isconst.impl&%11.is_constant. fuel%verismo!tspec.isconst.impl&%11.is_constant_to. fuel%verismo!tspec.ops.impl&%0.spec_not. fuel%verismo!tspec.ops.impl&%1.spec_not. fuel%verismo!tspec.ops.impl&%2.spec_not. fuel%verismo!tspec.ops.impl&%3.spec_not. fuel%verismo!tspec.ops.impl&%4.spec_not. fuel%verismo!tspec.ops.impl&%5.spec_not. fuel%verismo!tspec.fnspec.fn_spec_lt_u64_u64_bool. fuel%verismo!tspec.fnspec.fn_spec_gt_u64_u64_bool. fuel%verismo!tspec.fnspec.fn_spec_le_u64_u64_bool. fuel%verismo!tspec.fnspec.fn_spec_ge_u64_u64_bool. fuel%verismo!tspec.fnspec.fn_spec_eq_u64_u64_bool. fuel%verismo!tspec.fnspec.fn_spec_lt_u32_u32_bool. fuel%verismo!tspec.fnspec.fn_spec_gt_u32_u32_bool. fuel%verismo!tspec.fnspec.fn_spec_le_u32_u32_bool. fuel%verismo!tspec.fnspec.fn_spec_ge_u32_u32_bool. fuel%verismo!tspec.fnspec.fn_spec_eq_u32_u32_bool. fuel%verismo!tspec.fnspec.fn_spec_lt_u16_u16_bool. fuel%verismo!tspec.fnspec.fn_spec_gt_u16_u16_bool. fuel%verismo!tspec.fnspec.fn_spec_le_u16_u16_bool. fuel%verismo!tspec.fnspec.fn_spec_ge_u16_u16_bool. fuel%verismo!tspec.fnspec.fn_spec_eq_u16_u16_bool. fuel%verismo!tspec.fnspec.fn_spec_lt_u8_u8_bool. fuel%verismo!tspec.fnspec.fn_spec_gt_u8_u8_bool. fuel%verismo!tspec.fnspec.fn_spec_le_u8_u8_bool. fuel%verismo!tspec.fnspec.fn_spec_ge_u8_u8_bool. fuel%verismo!tspec.fnspec.fn_spec_eq_u8_u8_bool. fuel%verismo!tspec.fnspec.fn_spec_lt_usize_usize_bool. fuel%verismo!tspec.fnspec.fn_spec_gt_usize_usize_bool. fuel%verismo!tspec.fnspec.fn_spec_le_usize_usize_bool. fuel%verismo!tspec.fnspec.fn_spec_ge_usize_usize_bool. fuel%verismo!tspec.fnspec.fn_spec_eq_usize_usize_bool. fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int. fuel%verismo!tspec.fnspec.fn_spec_mul_u64_u64_int. fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64. fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u64_u64_u64. fuel%verismo!tspec.fnspec.fn_spec_div_u64_u64_u64. fuel%verismo!tspec.fnspec.fn_spec_rem_u64_u64_u64. fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int. fuel%verismo!tspec.fnspec.fn_spec_mul_u32_u32_int. fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32. fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u32_u32_u32. fuel%verismo!tspec.fnspec.fn_spec_div_u32_u32_u32. fuel%verismo!tspec.fnspec.fn_spec_rem_u32_u32_u32. fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int. fuel%verismo!tspec.fnspec.fn_spec_mul_u16_u16_int. fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16. fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u16_u16_u16. fuel%verismo!tspec.fnspec.fn_spec_div_u16_u16_u16. fuel%verismo!tspec.fnspec.fn_spec_rem_u16_u16_u16. fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int. fuel%verismo!tspec.fnspec.fn_spec_mul_u8_u8_int. fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8. fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u8_u8_u8. fuel%verismo!tspec.fnspec.fn_spec_div_u8_u8_u8. fuel%verismo!tspec.fnspec.fn_spec_rem_u8_u8_u8. fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int. fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int. fuel%verismo!tspec.fnspec.fn_spec_mul_usize_usize_int. fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize. fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_usize_usize_usize. fuel%verismo!tspec.fnspec.fn_spec_div_usize_usize_usize. fuel%verismo!tspec.fnspec.fn_spec_rem_usize_usize_usize. fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int. fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int. fuel%verismo!tspec.fnspec.fn_spec_mul_int_int_int. fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int. fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_int_int_int. fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat. fuel%verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat. fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat. fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_nat_nat_nat. fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int. fuel%verismo!tspec.fnspec.fn_spec_not_u64_u64. fuel%verismo!tspec.fnspec.fn_spec_not_u32_u32. fuel%verismo!tspec.fnspec.fn_spec_not_u16_u16. fuel%verismo!tspec.fnspec.fn_spec_not_u8_u8. fuel%verismo!tspec.fnspec.fn_spec_not_usize_usize. fuel%verismo!tspec.fnspec.fn_spec_not_bool_bool. fuel%verismo!tspec.fnspec.fn_spec_bitand_u64_u64_u64. fuel%verismo!tspec.fnspec.fn_spec_bitor_u64_u64_u64. fuel%verismo!tspec.fnspec.fn_spec_bitxor_u64_u64_u64. fuel%verismo!tspec.fnspec.fn_spec_shr_u64_u64_u64. fuel%verismo!tspec.fnspec.fn_spec_shl_u64_u64_u64. fuel%verismo!tspec.fnspec.fn_spec_bitand_u32_u32_u32. fuel%verismo!tspec.fnspec.fn_spec_bitor_u32_u32_u32. fuel%verismo!tspec.fnspec.fn_spec_bitxor_u32_u32_u32. fuel%verismo!tspec.fnspec.fn_spec_shr_u32_u32_u32. fuel%verismo!tspec.fnspec.fn_spec_shl_u32_u32_u32. fuel%verismo!tspec.fnspec.fn_spec_bitand_u16_u16_u16. fuel%verismo!tspec.fnspec.fn_spec_bitor_u16_u16_u16. fuel%verismo!tspec.fnspec.fn_spec_bitxor_u16_u16_u16. fuel%verismo!tspec.fnspec.fn_spec_shr_u16_u16_u16. fuel%verismo!tspec.fnspec.fn_spec_shl_u16_u16_u16. fuel%verismo!tspec.fnspec.fn_spec_bitand_u8_u8_u8. fuel%verismo!tspec.fnspec.fn_spec_bitor_u8_u8_u8. fuel%verismo!tspec.fnspec.fn_spec_bitxor_u8_u8_u8. fuel%verismo!tspec.fnspec.fn_spec_shr_u8_u8_u8. fuel%verismo!tspec.fnspec.fn_spec_shl_u8_u8_u8. fuel%verismo!tspec.fnspec.fn_spec_bitand_usize_usize_usize. fuel%verismo!tspec.fnspec.fn_spec_bitor_usize_usize_usize. fuel%verismo!tspec.fnspec.fn_spec_bitxor_usize_usize_usize. fuel%verismo!tspec.fnspec.fn_spec_shr_usize_usize_usize. fuel%verismo!tspec.fnspec.fn_spec_shl_usize_usize_usize. fuel%verismo!tspec.integer.impl&%0.spec_add. fuel%verismo!tspec.integer.impl&%1.spec_sub. fuel%verismo!tspec.integer.impl&%2.spec_sub. fuel%verismo!tspec.integer.impl&%3.spec_euclidean_div. fuel%verismo!tspec.integer.impl&%4.spec_euclidean_mod. fuel%verismo!tspec.integer.impl&%5.spec_mul. fuel%verismo!tspec.setlib.uop_to_bop. fuel%verismo!tspec.setlib.set_op. fuel%verismo!tspec.size_s.impl&%8.spec_size_def. fuel%verismo!tspec.size_s.impl&%9.spec_size_def. fuel%verismo!tspec.size_s.impl&%10.spec_size_def. fuel%verismo!tspec.size_s.impl&%11.spec_size_def. fuel%verismo!tspec.size_s.impl&%12.spec_size_def. fuel%verismo!tspec.size_s.impl&%13.spec_size_def. fuel%verismo!tspec.size_s.impl&%14.spec_size_def. fuel%verismo!tspec.size_s.impl&%15.spec_size_def. fuel%verismo!tspec.size_s.impl&%16.spec_size_def. fuel%verismo!tspec.size_s.impl&%17.spec_size_def. fuel%verismo!tspec.size_s.impl&%18.spec_size_def. fuel%verismo!tspec.size_s.impl&%19.spec_size_def. fuel%verismo!tspec.stream.impl&%0.spec_shr. fuel%verismo!tspec.wellformed.impl&%0.wf. fuel%verismo!tspec.wellformed.impl&%3.wf. fuel%verismo!tspec.wellformed.impl&%4.wf. fuel%verismo!tspec.wellformed.impl&%5.wf. fuel%verismo!tspec.wellformed.impl&%6.wf. fuel%verismo!tspec.wellformed.impl&%7.wf. fuel%verismo!tspec.wellformed.impl&%8.wf. fuel%verismo!tspec.wellformed.impl&%9.wf. fuel%verismo!tspec.wellformed.impl&%10.wf. fuel%verismo!tspec.wellformed.impl&%11.wf. fuel%verismo!tspec.wellformed.impl&%12.wf. fuel%verismo!arch.entities.impl&%4.as_int. fuel%verismo!arch.entities.impl&%4.from_int. fuel%verismo!arch.entities.impl&%5.ord_int. fuel%verismo!arch.entities.impl&%6.spec_from_int. fuel%verismo!primitives_e.sectype.impl&%0.wf. fuel%verismo!primitives_e.sectype.impl&%1.wf. fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes. fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes. fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to. fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%0.wf. fuel%verismo!primitives_e.seq.impl&%1.is_constant. fuel%verismo!primitives_e.seq.impl&%1.is_constant_to. fuel%verismo!primitives_e.seq.recursive_sec_bytes. fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%9.is_fullsecret_to.))
(set-info :comment ";; Associated-Type-Decls")
(declare-fun proj%%verismo!tspec.security.sectype.VNot./Output (Dcr Type) Dcr)
(declare-fun proj%verismo!tspec.security.sectype.VNot./Output (Dcr Type) Type)
(set-info :comment ";; Datatypes")
(declare-sort vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. 0)
(declare-sort vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<verismo!arch.entities.VMPL.>. 0)
(declare-sort vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. 0)
(declare-datatypes ((core!option.Option. 0) (verismo!tspec.security.sectype.SecType. 0) (verismo!tspec.security.sectype.DataLabel. 0) (verismo!tspec.security.sectype.SpecSecType. 0) (verismo!arch.rmp.perm_s.Perm. 0) (verismo!arch.entities.VMPL. 0) (tuple%0. 0) (tuple%1. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((verismo!tspec.security.sectype.SecType./SecType (verismo!tspec.security.sectype.SecType./SecType/?val Poly) (verismo!tspec.security.sectype.SecType./SecType/?view verismo!tspec.security.sectype.SpecSecType.))) ((verismo!tspec.security.sectype.DataLabel./Symbol ) (verismo!tspec.security.sectype.DataLabel./Unknown ) (verismo!tspec.security.sectype.DataLabel./TrustedRandom ) (verismo!tspec.security.sectype.DataLabel./Secret )) ((verismo!tspec.security.sectype.SpecSecType./SpecSecType (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?val Poly) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?_unused core!option.Option.) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?valsets Poly) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?labels vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.))) ((verismo!arch.rmp.perm_s.Perm./Read ) (verismo!arch.rmp.perm_s.Perm./Write ) (verismo!arch.rmp.perm_s.Perm./ExeU ) (verismo!arch.rmp.perm_s.Perm./ExeS ) (verismo!arch.rmp.perm_s.Perm./Shadow )) ((verismo!arch.entities.VMPL./VMPL0 ) (verismo!arch.entities.VMPL./VMPL1 ) (verismo!arch.entities.VMPL./VMPL2 ) (verismo!arch.entities.VMPL./VMPL3 )) ((tuple%0./tuple%0 )) ((tuple%1./tuple%1 (tuple%1./tuple%1/?0 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun verismo!tspec.security.sectype.SecType./SecType/val (verismo!tspec.security.sectype.SecType.) Poly)
(declare-fun verismo!tspec.security.sectype.SecType./SecType/view (verismo!tspec.security.sectype.SecType.) verismo!tspec.security.sectype.SpecSecType.)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (verismo!tspec.security.sectype.SpecSecType.) core!option.Option.)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (verismo!tspec.security.sectype.SpecSecType.) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(declare-fun tuple%1./tuple%1/0 (tuple%1.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%verismo!tspec.security.sectype.SecType. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!tspec.security.sectype.DataLabel. Type)
(declare-fun TYPE%verismo!tspec.security.sectype.SpecSecType. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!arch.rmp.perm_s.Perm. Type)
(declare-const TYPE%verismo!arch.entities.VMPL. Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%1. (Dcr Type) Type)
(declare-fun FNDEF%core!clone.Clone.clone. (Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (Poly) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (vstd!set.Set<verismo!arch.entities.VMPL.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (Poly) vstd!set.Set<verismo!arch.entities.VMPL.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (Poly) vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.SecType.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType. (Poly) verismo!tspec.security.sectype.SecType.)
(declare-fun Poly%verismo!tspec.security.sectype.DataLabel. (verismo!tspec.security.sectype.DataLabel.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.DataLabel. (Poly) verismo!tspec.security.sectype.DataLabel.)
(declare-fun Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SpecSecType. (Poly) verismo!tspec.security.sectype.SpecSecType.)
(declare-fun Poly%verismo!arch.rmp.perm_s.Perm. (verismo!arch.rmp.perm_s.Perm.) Poly)
(declare-fun %Poly%verismo!arch.rmp.perm_s.Perm. (Poly) verismo!arch.rmp.perm_s.Perm.)
(declare-fun Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.VMPL.) Poly)
(declare-fun %Poly%verismo!arch.entities.VMPL. (Poly) verismo!arch.entities.VMPL.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%1. (tuple%1.) Poly)
(declare-fun %Poly%tuple%1. (Poly) tuple%1.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)))) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1)))))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (= x (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x))) :pattern ((Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.)) (= x (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))))))
(assert (forall ((x vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (has_type (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.)) :pattern ((has_type (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) (= x (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (= x (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((x vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.VMPL.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.)) (= x (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (%Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.VMPL.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (= x (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x verismo!tspec.security.sectype.SecType.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType. x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (= x (Poly%verismo!tspec.security.sectype.SecType. (%Poly%verismo!tspec.security.sectype.SecType. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (_val! Poly) (_view! verismo!tspec.security.sectype.SpecSecType.)) (! (=> (and (has_type _val! T&) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. _view!) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) (has_type (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.SecType./SecType _val! _view!)) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.SecType./SecType _val! _view!)) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType.)) (! (= (verismo!tspec.security.sectype.SecType./SecType/val x) (verismo!tspec.security.sectype.SecType./SecType/?val x)) :pattern ((verismo!tspec.security.sectype.SecType./SecType/val x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.SecType./SecType/val (%Poly%verismo!tspec.security.sectype.SecType. x)) T&)) :pattern ((verismo!tspec.security.sectype.SecType./SecType/val (%Poly%verismo!tspec.security.sectype.SecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType.)) (! (= (verismo!tspec.security.sectype.SecType./SecType/view x) (verismo!tspec.security.sectype.SecType./SecType/?view x)) :pattern ((verismo!tspec.security.sectype.SecType./SecType/view x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecType./SecType/view (%Poly%verismo!tspec.security.sectype.SecType. x))) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.SecType./SecType/view (%Poly%verismo!tspec.security.sectype.SecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(define-fun is-verismo!tspec.security.sectype.SecType./SecType_ ((c verismo!tspec.security.sectype.SecType.)) Bool ((_ is verismo!tspec.security.sectype.SecType./SecType) c))
(assert (forall ((x verismo!tspec.security.sectype.SecType.)) (! (=> (is-verismo!tspec.security.sectype.SecType./SecType_ x) (height_lt (height (verismo!tspec.security.sectype.SecType./SecType/val x)) (height (Poly%verismo!tspec.security.sectype.SecType. x)))) :pattern ((height (verismo!tspec.security.sectype.SecType./SecType/val x))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType.)) (! (=> (is-verismo!tspec.security.sectype.SecType./SecType_ x) (height_lt (height (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecType./SecType/view x))) (height (Poly%verismo!tspec.security.sectype.SecType. x)))) :pattern ((height (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecType./SecType/view x)))))))
(assert (forall ((x verismo!tspec.security.sectype.DataLabel.)) (! (= x (%Poly%verismo!tspec.security.sectype.DataLabel. (Poly%verismo!tspec.security.sectype.DataLabel. x))) :pattern ((Poly%verismo!tspec.security.sectype.DataLabel. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!tspec.security.sectype.DataLabel.) (= x (Poly%verismo!tspec.security.sectype.DataLabel. (%Poly%verismo!tspec.security.sectype.DataLabel. x)))) :pattern ((has_type x TYPE%verismo!tspec.security.sectype.DataLabel.)))))
(assert (forall ((x verismo!tspec.security.sectype.DataLabel.)) (! (has_type (Poly%verismo!tspec.security.sectype.DataLabel. x) TYPE%verismo!tspec.security.sectype.DataLabel.) :pattern ((has_type (Poly%verismo!tspec.security.sectype.DataLabel. x) TYPE%verismo!tspec.security.sectype.DataLabel.)))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= x (%Poly%verismo!tspec.security.sectype.SpecSecType. (Poly%verismo!tspec.security.sectype.SpecSecType. x))) :pattern ((Poly%verismo!tspec.security.sectype.SpecSecType. x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (= x (Poly%verismo!tspec.security.sectype.SpecSecType. (%Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (_val! Poly) (__unused! core!option.Option.) (_valsets! Poly) (_labels! vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (=> (and (has_type _val! T&) (has_type (Poly%core!option.Option. __unused!) (TYPE%core!option.Option. M&. M&)) (has_type _valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType./SpecSecType _val! __unused! _valsets! _labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType./SpecSecType _val! __unused! _valsets! _labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?val x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) T&)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?_unused x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. x))) (TYPE%core!option.Option. M&. M&))) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?valsets x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?labels x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels x)))))
(define-fun is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ ((c verismo!tspec.security.sectype.SpecSecType.)) Bool ((_ is verismo!tspec.security.sectype.SpecSecType./SpecSecType) c))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x)) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x))) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x)))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x)) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x))))))
(assert (forall ((x verismo!arch.rmp.perm_s.Perm.)) (! (= x (%Poly%verismo!arch.rmp.perm_s.Perm. (Poly%verismo!arch.rmp.perm_s.Perm. x))) :pattern ((Poly%verismo!arch.rmp.perm_s.Perm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.perm_s.Perm.) (= x (Poly%verismo!arch.rmp.perm_s.Perm. (%Poly%verismo!arch.rmp.perm_s.Perm. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.perm_s.Perm.)))))
(assert (forall ((x verismo!arch.rmp.perm_s.Perm.)) (! (has_type (Poly%verismo!arch.rmp.perm_s.Perm. x) TYPE%verismo!arch.rmp.perm_s.Perm.) :pattern ((has_type (Poly%verismo!arch.rmp.perm_s.Perm. x) TYPE%verismo!arch.rmp.perm_s.Perm.)))))
(assert (forall ((x verismo!arch.entities.VMPL.)) (! (= x (%Poly%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. x))) :pattern ((Poly%verismo!arch.entities.VMPL. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.VMPL.) (= x (Poly%verismo!arch.entities.VMPL. (%Poly%verismo!arch.entities.VMPL. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.VMPL.)))))
(assert (forall ((x verismo!arch.entities.VMPL.)) (! (has_type (Poly%verismo!arch.entities.VMPL. x) TYPE%verismo!arch.entities.VMPL.) :pattern ((has_type (Poly%verismo!arch.entities.VMPL. x) TYPE%verismo!arch.entities.VMPL.)))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%1.)) (! (= x (%Poly%tuple%1. (Poly%tuple%1. x))) :pattern ((Poly%tuple%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (= x (Poly%tuple%1. (%Poly%tuple%1. x)))) :pattern ((has_type x (TYPE%tuple%1. T%0&. T%0&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (_0! Poly)) (! (=> (has_type _0! T%0&) (has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))) :pattern ((has_type (Poly%tuple%1. (tuple%1./tuple%1 _0!)) (TYPE%tuple%1. T%0&. T%0&))))))
(assert (forall ((x tuple%1.)) (! (= (tuple%1./tuple%1/0 x) (tuple%1./tuple%1/?0 x)) :pattern ((tuple%1./tuple%1/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) T%0&)) :pattern ((tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (has_type x (TYPE%tuple%1. T%0&. T%0&))))))
(define-fun is-tuple%1./tuple%1_ ((c tuple%1.)) Bool ((_ is tuple%1./tuple%1) c))
(assert (forall ((x tuple%1.)) (! (=> (is-tuple%1./tuple%1_ x) (height_lt (height (tuple%1./tuple%1/0 x)) (height (Poly%tuple%1. x)))) :pattern ((height (tuple%1./tuple%1/0 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%1. T%0&. T%0&)) (has_type y (TYPE%tuple%1. T%0&. T%0&)) (ext_eq deep T%0& (tuple%1./tuple%1/0 (%Poly%tuple%1. x)) (tuple%1./tuple%1/0 (%Poly%tuple%1. y)))) (ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)) :pattern ((ext_eq deep (TYPE%tuple%1. T%0&. T%0&) x y)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.cast.VTypeCast. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.default.SpecDefault. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.isconst.IsConstant. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecNot. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecAdd. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecSub. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecMul. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecEuclideanMod. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecBitAnd. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecBitOr. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecBitXor. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecShl. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecShr. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.security.sectype.IsFullSecret. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.security.sectype.IsFullSecretToAll. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.security.sectype.SecMemType. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.security.sectype.VNot. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.integer.IntValue. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.integer.IntOrd. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.size_s.SpecSize. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.wellformed.WellFormed. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!primitives_e.sectype.ToSecSeq. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!primitives_e.sectype.FromSecSeq. (Dcr Type Dcr Type) Bool)
(set-info :comment ";; Associated-Type-Impls")
(assert (forall ((M&. Dcr) (M& Type)) (! (= (proj%%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) $) :pattern ((proj%%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (= (proj%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((proj%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (= (proj%%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) $) :pattern ((proj%%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (= (proj%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((proj%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (= (proj%%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) $) :pattern ((proj%%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (= (proj%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((proj%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (= (proj%%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) $) :pattern ((proj%%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (= (proj%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((proj%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (= (proj%%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) $) :pattern ((proj%%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (= (proj%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((proj%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (= (proj%%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&)) $) :pattern ((proj%%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (= (proj%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&)) (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&)) :pattern ((proj%verismo!tspec.security.sectype.VNot./Output $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&))))))
(assert (= (proj%%verismo!tspec.security.sectype.VNot./Output $ BOOL) $))
(assert (= (proj%verismo!tspec.security.sectype.VNot./Output $ BOOL) BOOL))
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::last")
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::full")
(declare-fun vstd!set.impl&%0.full.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::math::pow_s::spec_nat_pow2")
(declare-fun verismo!tspec.math.pow_s.spec_nat_pow2.? (Poly) Int)
(declare-fun verismo!tspec.math.pow_s.rec%spec_nat_pow2.? (Poly Fuel) Int)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::DataLabel::is_Symbol")
(declare-fun verismo!tspec.security.sectype.impl&%0.is_Symbol.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::DataLabel::is_Unknown")
(declare-fun verismo!tspec.security.sectype.impl&%0.is_Unknown.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::DataLabel::is_TrustedRandom")
(declare-fun verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::DataLabel::is_Secret")
(declare-fun verismo!tspec.security.sectype.impl&%0.is_Secret.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_set_val")
(declare-fun verismo!tspec.security.sectype.impl&%1.spec_set_val.? (Dcr Type Dcr Type Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_set__unused")
(declare-fun verismo!tspec.security.sectype.impl&%1.spec_set__unused.? (Dcr Type Dcr Type Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_set_valsets")
(declare-fun verismo!tspec.security.sectype.impl&%1.spec_set_valsets.? (Dcr Type Dcr Type Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_set_labels")
(declare-fun verismo!tspec.security.sectype.impl&%1.spec_set_labels.? (Dcr Type Dcr Type Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_new")
(declare-fun verismo!tspec.security.sectype.impl&%2.spec_new.? (Dcr Type Dcr Type Poly Poly Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_val")
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_val.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec__unused")
(declare-fun verismo!tspec.security.sectype.impl&%3.spec__unused.? (Dcr Type Dcr Type Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_valsets")
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_valsets.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_labels")
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_labels.? (Dcr Type Dcr Type Poly) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::IsFullSecret::is_fullsecret_to")
(declare-fun verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::IsFullSecretToAll::is_fullsecret")
(declare-fun verismo!tspec.security.sectype.IsFullSecretToAll.is_fullsecret.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.IsFullSecretToAll.is_fullsecret%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SecMemType::view")
(declare-fun verismo!tspec.security.sectype.SecMemType.view.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.SecMemType.view%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SecType::spec_new")
(declare-fun verismo!tspec.security.sectype.impl&%9.spec_new.? (Dcr Type Dcr Type Poly) verismo!tspec.security.sectype.SecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SecType::call_self")
(declare-fun verismo!tspec.security.sectype.impl&%9.call_self.? (Dcr Type Dcr Type Poly) verismo!tspec.security.sectype.SecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SecType::wf_value")
(declare-fun verismo!tspec.security.sectype.impl&%9.wf_value.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::call_self")
(declare-fun verismo!tspec.security.sectype.impl&%16.call_self.? (Dcr Type Dcr Type Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::wf_vmpl")
(declare-fun verismo!tspec.security.sectype.impl&%16.wf_vmpl.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::wf_value")
(declare-fun verismo!tspec.security.sectype.impl&%16.wf_value.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::bop_new")
(declare-fun verismo!tspec.security.sectype.impl&%16.bop_new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::uop_new")
(declare-fun verismo!tspec.security.sectype.impl&%16.uop_new.? (Dcr Type Dcr Type Dcr Type Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::secval_eq_at")
(declare-fun verismo!tspec.security.sectype.impl&%16.secval_eq_at.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::sec_eq")
(declare-fun verismo!tspec.security.sectype.impl&%16.sec_eq.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::_is_constant")
(declare-fun verismo!tspec.security.sectype.impl&%16._is_constant.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::constant")
(declare-fun verismo!tspec.security.sectype.impl&%16.constant.? (Dcr Type Dcr Type Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SecType::spec_constant")
(declare-fun verismo!tspec.security.sectype.impl&%17.spec_constant.? (Dcr Type Dcr Type Poly) verismo!tspec.security.sectype.SecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SecType::wf")
(declare-fun verismo!tspec.security.sectype.impl&%20.wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_gt")
(declare-fun verismo!tspec.security.sectype.impl&%106.is_secure_gt.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_lt")
(declare-fun verismo!tspec.security.sectype.impl&%110.is_secure_lt.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_le")
(declare-fun verismo!tspec.security.sectype.impl&%114.is_secure_le.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_ge")
(declare-fun verismo!tspec.security.sectype.impl&%118.is_secure_ge.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_eq")
(declare-fun verismo!tspec.security.sectype.impl&%122.is_secure_eq.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_gt")
(declare-fun verismo!tspec.security.sectype.impl&%180.is_secure_gt.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_lt")
(declare-fun verismo!tspec.security.sectype.impl&%184.is_secure_lt.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_le")
(declare-fun verismo!tspec.security.sectype.impl&%188.is_secure_le.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_ge")
(declare-fun verismo!tspec.security.sectype.impl&%192.is_secure_ge.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_eq")
(declare-fun verismo!tspec.security.sectype.impl&%196.is_secure_eq.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_gt")
(declare-fun verismo!tspec.security.sectype.impl&%254.is_secure_gt.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_lt")
(declare-fun verismo!tspec.security.sectype.impl&%258.is_secure_lt.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_le")
(declare-fun verismo!tspec.security.sectype.impl&%262.is_secure_le.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_ge")
(declare-fun verismo!tspec.security.sectype.impl&%266.is_secure_ge.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_eq")
(declare-fun verismo!tspec.security.sectype.impl&%270.is_secure_eq.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_gt")
(declare-fun verismo!tspec.security.sectype.impl&%328.is_secure_gt.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_lt")
(declare-fun verismo!tspec.security.sectype.impl&%332.is_secure_lt.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_le")
(declare-fun verismo!tspec.security.sectype.impl&%336.is_secure_le.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_ge")
(declare-fun verismo!tspec.security.sectype.impl&%340.is_secure_ge.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_eq")
(declare-fun verismo!tspec.security.sectype.impl&%344.is_secure_eq.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_gt")
(declare-fun verismo!tspec.security.sectype.impl&%402.is_secure_gt.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_lt")
(declare-fun verismo!tspec.security.sectype.impl&%406.is_secure_lt.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_le")
(declare-fun verismo!tspec.security.sectype.impl&%410.is_secure_le.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_ge")
(declare-fun verismo!tspec.security.sectype.impl&%414.is_secure_ge.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::is_secure_eq")
(declare-fun verismo!tspec.security.sectype.impl&%418.is_secure_eq.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::VNot::requires_not")
(declare-fun verismo!tspec.security.sectype.VNot.requires_not.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.VNot.requires_not%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::VNot::ensures_not")
(declare-fun verismo!tspec.security.sectype.VNot.ensures_not.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.security.sectype.VNot.ensures_not%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::seq::fn_spec_to_seq_index")
(declare-fun verismo!tspec.security.seq.fn_spec_to_seq_index.? (Dcr Type Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::bool_to_stream")
(declare-fun verismo!tspec.stream.basic.bool_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::char_to_stream")
(declare-fun verismo!tspec.stream.basic.char_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u8_to_stream")
(declare-fun verismo!tspec.stream.basic.u8_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u16_to_stream")
(declare-fun verismo!tspec.stream.basic.u16_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u32_to_stream")
(declare-fun verismo!tspec.stream.basic.u32_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u64_to_stream")
(declare-fun verismo!tspec.stream.basic.u64_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u128_to_stream")
(declare-fun verismo!tspec.stream.basic.u128_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::usize_to_stream")
(declare-fun verismo!tspec.stream.basic.usize_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::cast::VTypeCast::vspec_cast_to")
(declare-fun verismo!tspec.cast.VTypeCast.vspec_cast_to.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.cast.VTypeCast.vspec_cast_to%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::cast::field_set")
(declare-fun verismo!tspec.cast.field_set.? (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::cast::fn_vspec_cast_to")
(declare-fun verismo!tspec.cast.fn_vspec_cast_to.? (Dcr Type Dcr Type) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::default::SpecDefault::spec_default")
(declare-fun verismo!tspec.default.SpecDefault.spec_default.? (Dcr Type) Poly)
(declare-fun verismo!tspec.default.SpecDefault.spec_default%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::isconst::IsConstant::is_constant")
(declare-fun verismo!tspec.isconst.IsConstant.is_constant.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.isconst.IsConstant.is_constant%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::isconst::IsConstant::is_constant_to")
(declare-fun verismo!tspec.isconst.IsConstant.is_constant_to.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.isconst.IsConstant.is_constant_to%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ops::VSpecNot::spec_not")
(declare-fun verismo!tspec.ops.VSpecNot.spec_not.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecNot.spec_not%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ops::VSpecAdd::spec_add")
(declare-fun verismo!tspec.ops.VSpecAdd.spec_add.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecAdd.spec_add%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ops::VSpecSub::spec_sub")
(declare-fun verismo!tspec.ops.VSpecSub.spec_sub.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecSub.spec_sub%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ops::VSpecMul::spec_mul")
(declare-fun verismo!tspec.ops.VSpecMul.spec_mul.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecMul.spec_mul%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ops::VSpecEuclideanDiv::spec_euclidean_div")
(declare-fun verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ops::VSpecEuclideanMod::spec_euclidean_mod")
(declare-fun verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ops::VSpecBitAnd::spec_bitand")
(declare-fun verismo!tspec.ops.VSpecBitAnd.spec_bitand.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecBitAnd.spec_bitand%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ops::VSpecBitOr::spec_bitor")
(declare-fun verismo!tspec.ops.VSpecBitOr.spec_bitor.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecBitOr.spec_bitor%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ops::VSpecBitXor::spec_bitxor")
(declare-fun verismo!tspec.ops.VSpecBitXor.spec_bitxor.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecBitXor.spec_bitxor%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ops::VSpecShl::spec_shl")
(declare-fun verismo!tspec.ops.VSpecShl.spec_shl.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecShl.spec_shl%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ops::VSpecShr::spec_shr")
(declare-fun verismo!tspec.ops.VSpecShr.spec_shr.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecShr.spec_shr%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_lt_u64_u64_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_lt_u64_u64_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_gt_u64_u64_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_gt_u64_u64_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_le_u64_u64_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_le_u64_u64_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_ge_u64_u64_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_ge_u64_u64_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_eq_u64_u64_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_eq_u64_u64_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_lt_u32_u32_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_lt_u32_u32_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_gt_u32_u32_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_gt_u32_u32_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_le_u32_u32_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_le_u32_u32_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_ge_u32_u32_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_ge_u32_u32_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_eq_u32_u32_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_eq_u32_u32_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_lt_u16_u16_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_lt_u16_u16_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_gt_u16_u16_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_gt_u16_u16_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_le_u16_u16_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_le_u16_u16_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_ge_u16_u16_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_ge_u16_u16_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_eq_u16_u16_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_eq_u16_u16_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_lt_u8_u8_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_lt_u8_u8_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_gt_u8_u8_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_gt_u8_u8_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_le_u8_u8_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_le_u8_u8_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_ge_u8_u8_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_ge_u8_u8_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_eq_u8_u8_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_eq_u8_u8_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_lt_usize_usize_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_lt_usize_usize_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_gt_usize_usize_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_gt_usize_usize_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_le_usize_usize_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_le_usize_usize_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_ge_usize_usize_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_ge_usize_usize_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_eq_usize_usize_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_eq_usize_usize_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_add_u64_u64_int")
(declare-fun verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_sub_u64_u64_int")
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_mul_u64_u64_int")
(declare-fun verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_euclidean_div_u64_u64_u64")
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_euclidean_mod_u64_u64_u64")
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_mod_u64_u64_u64.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_div_u64_u64_u64")
(declare-fun verismo!tspec.fnspec.fn_spec_div_u64_u64_u64.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_rem_u64_u64_u64")
(declare-fun verismo!tspec.fnspec.fn_spec_rem_u64_u64_u64.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_add_u32_u32_int")
(declare-fun verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_sub_u32_u32_int")
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_mul_u32_u32_int")
(declare-fun verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_euclidean_div_u32_u32_u32")
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_euclidean_mod_u32_u32_u32")
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_mod_u32_u32_u32.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_div_u32_u32_u32")
(declare-fun verismo!tspec.fnspec.fn_spec_div_u32_u32_u32.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_rem_u32_u32_u32")
(declare-fun verismo!tspec.fnspec.fn_spec_rem_u32_u32_u32.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_add_u16_u16_int")
(declare-fun verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_sub_u16_u16_int")
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_mul_u16_u16_int")
(declare-fun verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_euclidean_div_u16_u16_u16")
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_euclidean_mod_u16_u16_u16")
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_mod_u16_u16_u16.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_div_u16_u16_u16")
(declare-fun verismo!tspec.fnspec.fn_spec_div_u16_u16_u16.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_rem_u16_u16_u16")
(declare-fun verismo!tspec.fnspec.fn_spec_rem_u16_u16_u16.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_add_u8_u8_int")
(declare-fun verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_sub_u8_u8_int")
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_mul_u8_u8_int")
(declare-fun verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_euclidean_div_u8_u8_u8")
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_euclidean_mod_u8_u8_u8")
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_mod_u8_u8_u8.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_div_u8_u8_u8")
(declare-fun verismo!tspec.fnspec.fn_spec_div_u8_u8_u8.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_rem_u8_u8_u8")
(declare-fun verismo!tspec.fnspec.fn_spec_rem_u8_u8_u8.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_add_usize_usize_int")
(declare-fun verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_sub_usize_usize_int")
(declare-fun verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_mul_usize_usize_int")
(declare-fun verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_euclidean_div_usize_usize_usize")
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_euclidean_mod_usize_usize_usize")
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_mod_usize_usize_usize.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_div_usize_usize_usize")
(declare-fun verismo!tspec.fnspec.fn_spec_div_usize_usize_usize.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_rem_usize_usize_usize")
(declare-fun verismo!tspec.fnspec.fn_spec_rem_usize_usize_usize.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_add_int_int_int")
(declare-fun verismo!tspec.fnspec.fn_spec_add_int_int_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_sub_int_int_int")
(declare-fun verismo!tspec.fnspec.fn_spec_sub_int_int_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_mul_int_int_int")
(declare-fun verismo!tspec.fnspec.fn_spec_mul_int_int_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_euclidean_div_int_int_int")
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_euclidean_mod_int_int_int")
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_mod_int_int_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_add_nat_nat_nat")
(declare-fun verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_mul_nat_nat_nat")
(declare-fun verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_euclidean_div_nat_nat_nat")
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_euclidean_mod_nat_nat_nat")
(declare-fun verismo!tspec.fnspec.fn_spec_euclidean_mod_nat_nat_nat.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_sub_nat_nat_int")
(declare-fun verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_not_u64_u64")
(declare-fun verismo!tspec.fnspec.fn_spec_not_u64_u64.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_not_u32_u32")
(declare-fun verismo!tspec.fnspec.fn_spec_not_u32_u32.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_not_u16_u16")
(declare-fun verismo!tspec.fnspec.fn_spec_not_u16_u16.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_not_u8_u8")
(declare-fun verismo!tspec.fnspec.fn_spec_not_u8_u8.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_not_usize_usize")
(declare-fun verismo!tspec.fnspec.fn_spec_not_usize_usize.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_not_bool_bool")
(declare-fun verismo!tspec.fnspec.fn_spec_not_bool_bool.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitand_u64_u64_u64")
(declare-fun verismo!tspec.fnspec.fn_spec_bitand_u64_u64_u64.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitor_u64_u64_u64")
(declare-fun verismo!tspec.fnspec.fn_spec_bitor_u64_u64_u64.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitxor_u64_u64_u64")
(declare-fun verismo!tspec.fnspec.fn_spec_bitxor_u64_u64_u64.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_shr_u64_u64_u64")
(declare-fun verismo!tspec.fnspec.fn_spec_shr_u64_u64_u64.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_shl_u64_u64_u64")
(declare-fun verismo!tspec.fnspec.fn_spec_shl_u64_u64_u64.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitand_u32_u32_u32")
(declare-fun verismo!tspec.fnspec.fn_spec_bitand_u32_u32_u32.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitor_u32_u32_u32")
(declare-fun verismo!tspec.fnspec.fn_spec_bitor_u32_u32_u32.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitxor_u32_u32_u32")
(declare-fun verismo!tspec.fnspec.fn_spec_bitxor_u32_u32_u32.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_shr_u32_u32_u32")
(declare-fun verismo!tspec.fnspec.fn_spec_shr_u32_u32_u32.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_shl_u32_u32_u32")
(declare-fun verismo!tspec.fnspec.fn_spec_shl_u32_u32_u32.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitand_u16_u16_u16")
(declare-fun verismo!tspec.fnspec.fn_spec_bitand_u16_u16_u16.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitor_u16_u16_u16")
(declare-fun verismo!tspec.fnspec.fn_spec_bitor_u16_u16_u16.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitxor_u16_u16_u16")
(declare-fun verismo!tspec.fnspec.fn_spec_bitxor_u16_u16_u16.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_shr_u16_u16_u16")
(declare-fun verismo!tspec.fnspec.fn_spec_shr_u16_u16_u16.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_shl_u16_u16_u16")
(declare-fun verismo!tspec.fnspec.fn_spec_shl_u16_u16_u16.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitand_u8_u8_u8")
(declare-fun verismo!tspec.fnspec.fn_spec_bitand_u8_u8_u8.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitor_u8_u8_u8")
(declare-fun verismo!tspec.fnspec.fn_spec_bitor_u8_u8_u8.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitxor_u8_u8_u8")
(declare-fun verismo!tspec.fnspec.fn_spec_bitxor_u8_u8_u8.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_shr_u8_u8_u8")
(declare-fun verismo!tspec.fnspec.fn_spec_shr_u8_u8_u8.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_shl_u8_u8_u8")
(declare-fun verismo!tspec.fnspec.fn_spec_shl_u8_u8_u8.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitand_usize_usize_usize")
(declare-fun verismo!tspec.fnspec.fn_spec_bitand_usize_usize_usize.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitor_usize_usize_usize")
(declare-fun verismo!tspec.fnspec.fn_spec_bitor_usize_usize_usize.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_bitxor_usize_usize_usize")
(declare-fun verismo!tspec.fnspec.fn_spec_bitxor_usize_usize_usize.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_shr_usize_usize_usize")
(declare-fun verismo!tspec.fnspec.fn_spec_shr_usize_usize_usize.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_shl_usize_usize_usize")
(declare-fun verismo!tspec.fnspec.fn_spec_shl_usize_usize_usize.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::integer::IntValue::as_int")
(declare-fun verismo!tspec.integer.IntValue.as_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.as_int%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::integer::IntValue::from_int")
(declare-fun verismo!tspec.integer.IntValue.from_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.from_int%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::integer::IntOrd::ord_int")
(declare-fun verismo!tspec.integer.IntOrd.ord_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntOrd.ord_int%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::setlib::uop_to_bop")
(declare-fun verismo!tspec.setlib.uop_to_bop.? (Dcr Type Dcr Type Dcr Type Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::setlib::set_op")
(declare-fun verismo!tspec.setlib.set_op.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::size_s::spec_max_count")
(declare-fun verismo!tspec.size_s.spec_max_count.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl verismo::tspec::size_s::SpecSize::spec_size_def")
(declare-fun verismo!tspec.size_s.SpecSize.spec_size_def.? (Dcr Type) Poly)
(declare-fun verismo!tspec.size_s.SpecSize.spec_size_def%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::size_s::spec_size")
(declare-fun verismo!tspec.size_s.spec_size.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl verismo::tspec::wellformed::WellFormed::wf")
(declare-fun verismo!tspec.wellformed.WellFormed.wf.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.wellformed.WellFormed.wf%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::arch::entities::VMPL::spec_from_int")
(declare-fun verismo!arch.entities.impl&%6.spec_from_int.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::primitives_e::sectype::ToSecSeq::sec_bytes")
(declare-fun verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? (Dcr Type Poly) Poly)
(declare-fun verismo!primitives_e.sectype.ToSecSeq.sec_bytes%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::primitives_e::sectype::FromSecSeq::from_sec_bytes")
(declare-fun verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::primitives_e::seq::recursive_sec_bytes")
(declare-fun verismo!primitives_e.seq.recursive_sec_bytes.? (Dcr Type Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun verismo!primitives_e.seq.rec%recursive_sec_bytes.? (Dcr Type Poly Fuel) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::IsConstant::is_constant")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.isconst.IsConstant.is_constant.? Self%&. Self%& self!) BOOL)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::IsConstant::is_constant_to")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (vmpl! Poly)) (! (=> (and (has_type self! Self%&) (has_type vmpl! NAT)) (has_type (verismo!tspec.isconst.IsConstant.is_constant_to.? Self%&. Self%& self! vmpl!) BOOL)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? Self%&. Self%& self! vmpl!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::WellFormed::wf")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.wellformed.WellFormed.wf.? Self%&. Self%& self!) BOOL)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Specs core::clone::Clone::clone")
(declare-fun ens%core!clone.Clone.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (a! Poly) (%return! Poly)) (! (= (ens%core!clone.Clone.clone. Self%&. Self%& a! %return!) (has_type %return! Self%&)) :pattern ((ens%core!clone.Clone.clone. Self%&. Self%& a! %return!)))))
(assert (forall ((tmp%%$ Poly) (Self%&. Dcr) (Self%& Type)) (! (=> (has_type tmp%%$ (TYPE%tuple%1. (REF Self%&.) Self%&)) (=> (let ((a$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) true) (closure_req (FNDEF%core!clone.Clone.clone. Self%&. Self%&) $ (TYPE%tuple%1. (REF Self%&.) Self%&) (F fndef_singleton) tmp%%$))) :pattern ((closure_req (FNDEF%core!clone.Clone.clone. Self%&. Self%&) $ (TYPE%tuple%1. (REF Self%&.) Self%&) (F fndef_singleton) tmp%%$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%6::clone")
(declare-fun ens%core!clone.impls.impl&%6.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%6.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 8) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%6.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 8))) (has_type res$ (UINT 8))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 8)) $ (TYPE%tuple%1. (REF $) (UINT 8)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 8)) $ (TYPE%tuple%1. (REF $) (UINT 8)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%7::clone")
(declare-fun ens%core!clone.impls.impl&%7.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%7.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 16) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%7.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 16))) (has_type res$ (UINT 16))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 16)) $ (TYPE%tuple%1. (REF $) (UINT 16)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 16)) $ (TYPE%tuple%1. (REF $) (UINT 16)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%8::clone")
(declare-fun ens%core!clone.impls.impl&%8.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%8.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 32) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%8.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 32))) (has_type res$ (UINT 32))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 32)) $ (TYPE%tuple%1. (REF $) (UINT 32)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 32)) $ (TYPE%tuple%1. (REF $) (UINT 32)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%9::clone")
(declare-fun ens%core!clone.impls.impl&%9.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%9.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 64) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%9.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 64))) (has_type res$ (UINT 64))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 64)) $ (TYPE%tuple%1. (REF $) (UINT 64)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 64)) $ (TYPE%tuple%1. (REF $) (UINT 64)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%10::clone")
(declare-fun ens%core!clone.impls.impl&%10.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%10.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT 128) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%10.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT 128))) (has_type res$ (UINT 128))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 128)) $ (TYPE%tuple%1. (REF $) (UINT 128)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT 128)) $ (TYPE%tuple%1. (REF $) (UINT 128)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%5::clone")
(declare-fun ens%core!clone.impls.impl&%5.clone. (Poly Poly) Bool)
(assert (forall ((x! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%5.clone. x! res!) (and (ens%core!clone.Clone.clone. $ (UINT SZ) x! res!) (= res! x!))) :pattern ((ens%core!clone.impls.impl&%5.clone. x! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (UINT SZ))) (has_type res$ (UINT SZ))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT SZ)) $ (TYPE%tuple%1. (REF $) (UINT SZ)) (F fndef_singleton) tmp%%$ res$) (let ((x$ (%I (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%I res$) x$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (UINT SZ)) $ (TYPE%tuple%1. (REF $) (UINT SZ)) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%19::clone")
(declare-fun ens%core!clone.impls.impl&%19.clone. (Poly Poly) Bool)
(assert (forall ((b! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%19.clone. b! res!) (and (ens%core!clone.Clone.clone. $ BOOL b! res!) (= res! b!))) :pattern ((ens%core!clone.impls.impl&%19.clone. b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) BOOL)) (has_type res$ BOOL)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ BOOL) $ (TYPE%tuple%1. (REF $) BOOL) (F fndef_singleton) tmp%%$ res$) (let ((b$ (%B (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= (%B res$) b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ BOOL) $ (TYPE%tuple%1. (REF $) BOOL) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs core::clone::impls::impl&%3::clone")
(declare-fun ens%core!clone.impls.impl&%3.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%core!clone.impls.impl&%3.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (REF T&.) T& b! res!) (= res! b!))) :pattern ((ens%core!clone.impls.impl&%3.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (REF T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (REF T&.) T&) $ (TYPE%tuple%1. (REF (REF T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (REF T&.) T&) $ (TYPE%tuple%1. (REF (REF T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs builtin::impl&%4::clone")
(declare-fun ens%builtin!impl&%4.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%builtin!impl&%4.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (TRACKED T&.) T& b! res!) (= res! b!))) :pattern ((ens%builtin!impl&%4.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (TRACKED T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (TRACKED T&.) T&) $ (TYPE%tuple%1. (REF (TRACKED T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (TRACKED T&.) T&) $ (TYPE%tuple%1. (REF (TRACKED T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Specs builtin::impl&%2::clone")
(declare-fun ens%builtin!impl&%2.clone. (Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (b! Poly) (res! Poly)) (! (= (ens%builtin!impl&%2.clone. T&. T& b! res!) (and (ens%core!clone.Clone.clone. (GHOST T&.) T& b! res!) (= res! b!))) :pattern ((ens%builtin!impl&%2.clone. T&. T& b! res!)))))
(assert (forall ((tmp%%$ Poly) (res$ Poly) (T&. Dcr) (T& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF (GHOST T&.)) T&)) (has_type res$ T&)) (=> (closure_ens (FNDEF%core!clone.Clone.clone. (GHOST T&.) T&) $ (TYPE%tuple%1. (REF (GHOST T&.)) T&) (F fndef_singleton) tmp%%$ res$) (let ((b$ (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$)))) (= res$ b$)))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. (GHOST T&.) T&) $ (TYPE%tuple%1. (REF (GHOST T&.)) T&) (F fndef_singleton) tmp%%$ res$)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%2 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%6 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%8 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%9 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%10 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%12 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%13 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%14 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%15 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%16 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%17 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%18 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%19 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%20 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%21 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%22 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%23 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%24 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%25 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%26 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::last")
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%27 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::last")
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%28 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%29 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%30 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%31 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%32 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%33 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%34 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%35 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%36 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%37 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)))) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%38 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%39 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%41 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%42 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%43 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%44 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::full")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.full.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.full.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.full.? A&. A&) (vstd!set.impl&%0.complement.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((vstd!set.impl&%0.full.? A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.full.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.full.? A&. A&)))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::VMPL::spec_from_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%6.spec_from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%6.spec_from_int.) (forall ((val! Poly)) (! (= (verismo!arch.entities.impl&%6.spec_from_int.? val!) (ite (< (%I val!) 0) core!option.Option./None (ite (= (%I val!) 0) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL0)) (ite (= (%I val!) 1) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)) (ite (= (%I val!) 2) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)) (ite (= (%I val!) 3) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)) core!option.Option./None)))))) :pattern ((verismo!arch.entities.impl&%6.spec_from_int.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%core!option.Option. (verismo!arch.entities.impl&%6.spec_from_int.? val!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.entities.VMPL.))) :pattern ((verismo!arch.entities.impl&%6.spec_from_int.? val!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::default::SpecDefault::spec_default")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (verismo!tspec.default.SpecDefault.spec_default.? Self%&. Self%&) Self%&) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? Self%&. Self%&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::wf")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!) (B (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$))))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::is_constant")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%1.is_constant.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%1.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) self!) (B (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$))))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::is_constant_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%1.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%1.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) self! vmpl!) (B (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$) vmpl!)))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%vstd!seq.Seq. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%vstd!seq.Seq. T&. T&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::DataLabel::is_Symbol")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./Symbol_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./Symbol) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_Symbol.? self!) (is-verismo!tspec.security.sectype.DataLabel./Symbol_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_Symbol.? self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::DataLabel::is_TrustedRandom")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./TrustedRandom) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? self!) (is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::DataLabel::is_Secret")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_Secret.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./Secret_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./Secret) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_Secret.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_Secret.? self!) (is-verismo!tspec.security.sectype.DataLabel./Secret_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_Secret.? self!))))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::wf_vmpl")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (valsets! Poly) (labels! Poly) (vmpl! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& valsets! labels! vmpl!) (and (and (and (and (and (=> (is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels! vmpl!))) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!) (vstd!set.impl&%0.full.? T&. T&))) (=> (is-verismo!tspec.security.sectype.DataLabel./Secret_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels! vmpl!))) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!) (vstd!set.impl&%0.full.? T&. T&)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels!) vmpl!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets!) vmpl!)) (> (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!)) 0)) (vstd!set.impl&%0.finite.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!)))) :pattern ((verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& valsets! labels! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::wf_value")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.wf_value.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.wf_value.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!) (and (and (and (and (and (and (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 1)) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 2))) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 3))) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 4))) (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) core!option.Option./None)) (ext_eq true (TYPE%vstd!set.Set. $ NAT) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.empty.? $ NAT) (I 1)) (I 2)) (I 3)) (I 4)))) (ext_eq true (TYPE%vstd!set.Set. $ NAT) (vstd!map.impl&%0.dom.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.empty.? $ NAT) (I 1)) (I 2)) (I 3)) (I 4))))) :pattern ((verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! vmpl!) (B (and (and (and (= (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) vmpl!)) 1) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) vmpl!) (vstd!set.impl&%0.insert.? T&. T& (vstd!set.impl&%0.empty.? T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))))) (is-verismo!tspec.security.sectype.DataLabel./Symbol_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) vmpl!)))) (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%12.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%12.is_constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self!) (B (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 4)))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::wf")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.) self!) (B (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& $ TYPE%tuple%0. self!))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.)) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::IntValue::as_int")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.integer.IntValue.as_int.? Self%&. Self%& self!) INT)) :pattern ((verismo!tspec.integer.IntValue.as_int.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::IntValue::from_int")
(assert (forall ((Self%&. Dcr) (Self%& Type) (val! Poly)) (! (=> (has_type val! INT) (has_type (verismo!tspec.integer.IntValue.from_int.? Self%&. Self%& val!) Self%&)) :pattern ((verismo!tspec.integer.IntValue.from_int.? Self%&. Self%& val!)))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::VMPL::as_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%4.as_int.))
(define-fun is-verismo!arch.entities.VMPL./VMPL0_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL0) c))
(define-fun is-verismo!arch.entities.VMPL./VMPL1_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL1) c))
(define-fun is-verismo!arch.entities.VMPL./VMPL2_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL2) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%4.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. self!) (I (let ((val$ (ite (is-verismo!arch.entities.VMPL./VMPL0_ (%Poly%verismo!arch.entities.VMPL. self!)) 0 (ite (is-verismo!arch.entities.VMPL./VMPL1_ (%Poly%verismo!arch.entities.VMPL. self!)) 1 (ite (is-verismo!arch.entities.VMPL./VMPL2_ (%Poly%verismo!arch.entities.VMPL. self!)) 2 3))))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::VTypeCast::vspec_cast_to")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.cast.VTypeCast.vspec_cast_to.? Self%&. Self%& T&. T& self!) T&)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%44::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%44.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%44.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecMemType::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.security.sectype.SecMemType.view.? Self%&. Self%& T&. T& M&. M& self!) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? Self%&. Self%& T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_new")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! Poly) (valsets! Poly) (labels! Poly)) (! (=> (and (has_type val! T&) (has_type _unused! (TYPE%core!option.Option. M&. M&)) (has_type valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&))) (has_type labels! (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec__unused")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec__unused.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec__unused.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (Poly%core!option.Option. (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!)) (TYPE%core!option.Option. M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_valsets")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!) (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_labels")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_labels.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_labels.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_set_val")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%1.spec_set_val.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%1.spec_set_val.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (val! Poly)) (! (= (verismo!tspec.security.sectype.impl&%1.spec_set_val.? T&. T& M&. M& self! val!) (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!)) (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.security.sectype.impl&%1.spec_set_val.? T&. T& M&. M& self! val!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (val! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type val! T&)) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%1.spec_set_val.? T&. T& M&. M& self! val!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%1.spec_set_val.? T&. T& M&. M& self! val!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::view")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%6.view.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%6.view.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%1.spec_set_val.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecType./SecType/view (%Poly%verismo!tspec.security.sectype.SecType. self!))) (verismo!tspec.security.sectype.SecType./SecType/val (%Poly%verismo!tspec.security.sectype.SecType. self!))))) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::wf_value")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%9.wf_value.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%9.wf_value.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& self!) (and (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!)) (= (verismo!tspec.security.sectype.SecType./SecType/val (%Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!)))))) :pattern ((verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%15.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%15.is_constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!))) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%72.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%72.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!) (I (nClip (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%63::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%63.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%63.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%9::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%9.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%9.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT SZ) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::VSpecSub::spec_sub")
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecSub.spec_sub.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%1::T1::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%1.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%1.spec_sub.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (Sub (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::VSpecAdd::spec_add")
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecAdd.spec_add.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%0::T1::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%0.spec_add.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (Add (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u8_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u8_to_stream.))
(declare-fun %%lambda%%0 (Int Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (%%hole%%2 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) i$) (I (ite (= (%I i$) %%hole%%0) %%hole%%1 %%hole%%2))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2) i$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u8_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u8_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I 1) (Poly%fun%1. (mk_fun (%%lambda%%0 0 (%I data!) 0)))))) :pattern ((verismo!tspec.stream.basic.u8_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u16_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u16_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u16_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u16_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I data!))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I data!) 256))))))))) :pattern ((verismo!tspec.stream.basic.u16_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%3::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%3.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I self!))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I self!) 256)))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::spec_size")
(assert (forall ((T&. Dcr) (T& Type)) (! (<= 0 (verismo!tspec.size_s.spec_size.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_size.? T&. T&)))))
(set-info :comment ";; Function-Axioms verismo::tspec::setlib::set_op")
(assert (fuel_bool_default fuel%verismo!tspec.setlib.set_op.))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Poly Type Type Dcr Type Poly Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Type) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Poly) (%%hole%%11 Dcr) (%%hole%%12 Type) (%%hole%%13 Poly) (%%hole%%14 %%Function%%) (val$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14) val$) (B (exists ((v1$ Poly) (v2$ Poly)) (! (and (and (has_type v1$ %%hole%%6) (has_type v2$ %%hole%%7)) (and (and (vstd!set.impl&%0.contains.? %%hole%%8 %%hole%%9 %%hole%%10 v1$) (vstd!set.impl&%0.contains.? %%hole%%11 %%hole%%12 %%hole%%13 v2$)) (= val$ (%%apply%%1 %%hole%%14 v1$ v2$)))) :pattern ((vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 v1$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 v2$)))))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14) val$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.setlib.set_op.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (s1! Poly) (s2! Poly) (op_fn! Poly)) (! (= (verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!) (vstd!set.impl&%0.new.? T3&. T3& $ (TYPE%fun%1. T3&. T3& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%1 T1&. T1& s1! T2&. T2& s2! T1& T2& T1&. T1& s1! T2&. T2& s2! (%Poly%fun%2. op_fn!)))))) :pattern ((verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (s1! Poly) (s2! Poly) (op_fn! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. T1&. T1&)) (has_type s2! (TYPE%vstd!set.Set. T2&. T2&)) (has_type op_fn! (TYPE%fun%2. T1&. T1& T2&. T2& T3&. T3&))) (has_type (verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!) (TYPE%vstd!set.Set. T3&. T3&))) :pattern ((verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::bop_new")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.bop_new.))
(declare-fun %%lambda%%2 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1) vmpl$) (B (and (<= %%hole%%0 (%I vmpl$)) (<= (%I vmpl$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1) vmpl$)))))
(declare-fun %%lambda%%3 (Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Type Type Dcr Type Dcr Type %%Function%% Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Poly) (%%hole%%15 Dcr) (%%hole%%16 Type) (%%hole%%17 Dcr) (%%hole%%18 Type) (%%hole%%19 Poly) (%%hole%%20 Dcr) (%%hole%%21 Type) (%%hole%%22 Dcr) (%%hole%%23 Type) (%%hole%%24 Type) (%%hole%%25 Type) (%%hole%%26 Dcr) (%%hole%%27 Type) (%%hole%%28 Dcr) (%%hole%%29 Type) (%%hole%%30 %%Function%%) (%%hole%%31 Dcr) (%%hole%%32 Type) (%%hole%%33 Dcr) (%%hole%%34 Type) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28 %%hole%%29 %%hole%%30 %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34) vmpl$) (vstd!set.impl&%0.new.? %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34 (Poly%fun%1. (mk_fun (%%lambda%%1 %%hole%%20 %%hole%%21 (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 vmpl$) %%hole%%22 %%hole%%23 (vstd!map.impl&%0.index.? %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 vmpl$) %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 (vstd!map.impl&%0.index.? %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 vmpl$) %%hole%%28 %%hole%%29 (vstd!map.impl&%0.index.? %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 vmpl$) %%hole%%30))))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28 %%hole%%29 %%hole%%30 %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34) vmpl$)))))
(declare-fun %%lambda%%4 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0) vmpl$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0) vmpl$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.bop_new.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (Rhs&. Dcr) (Rhs& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly) (op! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType (%%apply%%1 (%Poly%fun%2. op!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!))) (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)))) (vstd!map.impl&%0.new.? $ NAT $ (TYPE%vstd!set.Set. T2&. T2&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ (TYPE%vstd!set.Set. T2&. T2&)) (Poly%fun%1. (mk_fun (%%lambda%%2 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%3 $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) $ NAT $ (TYPE%vstd!set.Set. Rhs&. Rhs&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) $ NAT $ (TYPE%vstd!set.Set. Rhs&. Rhs&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) T&. T& Rhs&. Rhs& T& Rhs& T&. T& Rhs&. Rhs& (%Poly%fun%2. op!) T2&. T2& $ (TYPE%fun%1. T2&. T2& $ BOOL))))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.) (Poly%fun%1. (mk_fun (%%lambda%%2 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%4 (Poly%verismo!tspec.security.sectype.DataLabel. verismo!tspec.security.sectype.DataLabel./Symbol)))))))) :pattern ((verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (Rhs&. Dcr) (Rhs& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly) (op! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type rhs! (TYPE%verismo!tspec.security.sectype.SpecSecType. Rhs&. Rhs& M&. M&)) (has_type op! (TYPE%fun%2. T&. T& Rhs&. Rhs& T2&. T2&))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::constant")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType val! (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (vstd!map.impl&%0.new.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ (TYPE%vstd!set.Set. T&. T&)) (Poly%fun%1. (mk_fun (%%lambda%%2 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%4 (vstd!set.impl&%0.insert.? T&. T& (vstd!set.impl&%0.empty.? T&. T&) val!))))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.) (Poly%fun%1. (mk_fun (%%lambda%%2 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%4 (Poly%verismo!tspec.security.sectype.DataLabel. verismo!tspec.security.sectype.DataLabel./Symbol)))))))) :pattern ((verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! T&) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::setlib::uop_to_bop")
(assert (fuel_bool_default fuel%verismo!tspec.setlib.uop_to_bop.))
(declare-fun %%lambda%%5 (%%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 %%Function%%) (v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 (%%lambda%%5 %%hole%%0) v1$ v2$) (%%apply%%0 %%hole%%0 v1$)) :pattern ((%%apply%%1 (%%lambda%%5 %%hole%%0) v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.setlib.uop_to_bop.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (op! Poly)) (! (= (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!) (mk_fun (%%lambda%%5 (%Poly%fun%1. op!)))) :pattern ((verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (op! Poly)) (! (=> (has_type op! (TYPE%fun%1. T1&. T1& T3&. T3&)) (has_type (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!)) (TYPE%fun%2. T1&. T1& T2&. T2& T3&. T3&))) :pattern ((verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::uop_new")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.uop_new.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.uop_new.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (T2&. Dcr) (T2& Type) (self! Poly) (op! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!) (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& T&. T& T2&. T2& self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& (vstd!pervasive.arbitrary.? T&. T&))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T&. T& T&. T& T2&. T2& op!)))) :pattern ((verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (T2&. Dcr) (T2& Type) (self! Poly) (op! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type op! (TYPE%fun%1. T&. T& T2&. T2&))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::seq::fn_spec_to_seq_index")
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.fn_spec_to_seq_index.))
(declare-fun %%lambda%%6 (Dcr Type Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) v$) (vstd!seq.Seq.index.? %%hole%%4 %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 v$) %%hole%%6)) :pattern ((%%apply%%0 (%%lambda%%6 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) v$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.fn_spec_to_seq_index.) (forall ((T&. Dcr) (T& Type) (i! Poly)) (! (= (verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!) (mk_fun (%%lambda%%6 T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) i!))) :pattern ((verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!))))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly)) (! (=> (has_type i! INT) (has_type (Poly%fun%1. (verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!)) (TYPE%fun%1. T&. T& $ (UINT 8)))) :pattern ((verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to.))
(declare-fun %%lambda%%7 (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Dcr) (%%hole%%15 Type) (%%hole%%16 Poly) (%%hole%%17 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17) i$) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 (Poly%fun%1. (verismo!tspec.security.seq.fn_spec_to_seq_index.? %%hole%%0 %%hole%%1 i$))))))) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17) i$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) (I (verismo!tspec.size_s.spec_size.? T&. T&)) (Poly%fun%1. (mk_fun (%%lambda%%7 T&. T& T&. T& T&. T& $ (UINT 8) T&. T& M&. M& T&. T& $ (UINT 8) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& (vstd!pervasive.arbitrary.? T&. T&)))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u32_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u32_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u32_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u32_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I data!)))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I data!)))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I data!) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I data!) 65536))))) 256)))))))))))) :pattern ((verismo!tspec.stream.basic.u32_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%5::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I self!)))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I self!)))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I self!) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I self!) 65536))))) 256))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u64_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u64_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u64_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u64_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I data!))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I data!))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I data!)))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I data!)))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296))))) 65536))))) 256))))))))))))))) :pattern ((verismo!tspec.stream.basic.u64_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%7::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%7.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%7.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I self!))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I self!))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I self!)))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I self!)))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296))))) 65536))))) 256)))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::ToSecSeq::sec_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? Self%&. Self%& self!) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::impl&%2::T::sec_bytes")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&)) :pattern ((tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%1::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%1.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%1.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? self!))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::recursive_sec_bytes")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.recursive_sec_bytes.))
(declare-const fuel_nat%verismo!primitives_e.seq.recursive_sec_bytes. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (s! Poly) (fuel% Fuel)) (! (= (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! fuel%) (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! zero)) :pattern ((verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! fuel%)))))
(assert (forall ((T&. Dcr) (T& Type) (s! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (has_type s! (TYPE%vstd!seq.Seq. T&. T&))) (= (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel%)) (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (ite (> (vstd!seq.Seq.len.? T&. T& s!) 0) (let ((prevs$ (vstd!seq.Seq.subrange.? T&. T& s! (I 0) (I (Sub (vstd!seq.Seq.len.? T&. T& s!) 1))))) (ite (< (vstd!seq.Seq.len.? T&. T& prevs$) (vstd!seq.Seq.len.? T&. T& s!)) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& prevs$ fuel%)) (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& (vstd!seq.Seq.last.? T&. T& s!))) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel%))))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.recursive_sec_bytes.) (forall ((T&. Dcr) (T& Type) (s! Poly)) (! (=> (and (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (has_type s! (TYPE%vstd!seq.Seq. T&. T&))) (= (verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& s!) (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel_nat%verismo!primitives_e.seq.recursive_sec_bytes.)))) :pattern ((verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& s!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& self!))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::FromSecSeq::from_sec_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? Self%&. Self%& T&. T& self!) T&)) :pattern ((verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::SecSeqByte::from_sec_bytes")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes.))
(declare-fun %%choose%%1 (Type Dcr Type Bool Type Poly Dcr Type) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Bool) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type)) (! (=> (exists ((v$ Poly)) (! (and (has_type v$ %%hole%%0) (ext_eq %%hole%%3 %%hole%%4 (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%1 %%hole%%2 v$) %%hole%%5)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%6 %%hole%%7 v$)))) (exists ((v$ Poly)) (! (and (and (has_type v$ %%hole%%0) (ext_eq %%hole%%3 %%hole%%4 (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%1 %%hole%%2 v$) %%hole%%5)) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) v$)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%6 %%hole%%7 v$))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7)))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!) (as_type (%%choose%%1 T& T&. T& true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self! T&. T&) T&)) :pattern ((verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::SecSeqByte::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!) (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::IntOrd::ord_int")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.integer.IntOrd.ord_int.? Self%&. Self%& self!) INT)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%480.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%480.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%481.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%481.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::VMPL::from_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%4.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%4.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.entities.VMPL. val!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.entities.impl&%6.spec_from_int.? val!))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.entities.VMPL. val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::perm_s::PagePerm::from_int")
(assert (fuel_bool_default fuel%verismo!arch.rmp.perm_s.impl&%1.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.perm_s.impl&%1.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) val!) (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (let ((ret$ (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) (let ((ret$1 (ite (= (EucMod (%I val!) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Read))) ret$))) (let ((ret$2 (ite (= (EucMod (EucDiv (%I val!) 2) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$1) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write))) ret$1))) (let ((ret$3 (ite (= (EucMod (EucDiv (%I val!) 4) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$2) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeU))) ret$2))) (let ((ret$4 (ite (= (EucMod (EucDiv (%I val!) 8) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$3) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeS))) ret$3))) (let ((ret$5 (ite (= (EucMod (EucDiv (%I val!) 16) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$4) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Shadow))) ret$4))) ret$5)))))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) val!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_val")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_val.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_val.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!) T&)) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SpecSecType::axiom_spec_new")
(declare-fun ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. (Dcr Type Dcr Type Poly core!option.Option. Poly vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! core!option.Option.) (valsets! Poly) (labels! vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (= (ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. T&. T& M&. M& val! _unused! valsets! labels!) (and (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) val!) (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) _unused!) (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) valsets!) (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) labels!))) :pattern ((ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. T&. T& M&. M& val! _unused! valsets! labels!)))))
(set-info :comment ";; Broadcast verismo::tspec::security::sectype::SpecSecType::axiom_spec_new")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! Poly) (valsets! Poly) (labels! Poly)) (! (=> (and (has_type val! T&) (has_type _unused! (TYPE%core!option.Option. M&. M&)) (has_type valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&))) (has_type labels! (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))) (and (and (and (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) val!) (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) (%Poly%core!option.Option. _unused!))) (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) valsets!)) (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) :pattern ((verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::IsFullSecret::is_fullsecret_to")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (vmpl! Poly)) (! (=> (and (has_type self! Self%&) (has_type vmpl! NAT)) (has_type (verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? Self%&. Self%& self! vmpl!) BOOL)) :pattern ((verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? Self%&. Self%& self! vmpl!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::IsFullSecretToAll::is_fullsecret")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.security.sectype.IsFullSecretToAll.is_fullsecret.? Self%&. Self%& self!) BOOL)) :pattern ((verismo!tspec.security.sectype.IsFullSecretToAll.is_fullsecret.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::clone")
(declare-fun ens%verismo!tspec.security.sectype.impl&%7.clone. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (ret! Poly)) (! (= (ens%verismo!tspec.security.sectype.impl&%7.clone. T&. T& M&. M& self! ret!) (and (ens%core!clone.Clone.clone. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self! ret!) (= self! ret!))) :pattern ((ens%verismo!tspec.security.sectype.impl&%7.clone. T&. T& M&. M& self! ret!)))))
(assert (forall ((tmp%%$ Poly) (ret$ Poly) (T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (=> (and (has_type tmp%%$ (TYPE%tuple%1. (REF $) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) (has_type ret$ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) (=> (closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) $ (TYPE%tuple%1. (REF $) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (F fndef_singleton) tmp%%$ ret$) (let ((self$ (%Poly%verismo!tspec.security.sectype.SecType. (tuple%1./tuple%1/0 (%Poly%tuple%1. tmp%%$))))) (= self$ (%Poly%verismo!tspec.security.sectype.SecType. ret$))))) :pattern ((closure_ens (FNDEF%core!clone.Clone.clone. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) $ (TYPE%tuple%1. (REF $) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (F fndef_singleton) tmp%%$ ret$)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_new")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::axiom_spec_new")
(declare-fun ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. (Dcr Type Dcr Type verismo!tspec.security.sectype.SpecSecType.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! verismo!tspec.security.sectype.SpecSecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. T&. T& M&. M& val!) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. val!))))) val!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. T&. T& M&. M& val!)))))
(set-info :comment ";; Broadcast verismo::tspec::security::sectype::SecType::axiom_spec_new")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!))) val!)) :pattern ((verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::axiom_ext_equal")
(declare-fun ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. (Dcr Type Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! verismo!tspec.security.sectype.SecType.) (val2! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. T&. T& M&. M& val! val2!) (= (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. val!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. val2!))) (= val! val2!))) :pattern ((ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. T&. T& M&. M& val! val2!)))))
(set-info :comment ";; Broadcast verismo::tspec::security::sectype::SecType::axiom_ext_equal")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (val2! Poly)) (! (=> (and (has_type val! (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (has_type val2! (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) (= (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)) (= val! val2!))) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_set_labels")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%1.spec_set_labels.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%1.spec_set_labels.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (val! Poly)) (! (= (verismo!tspec.security.sectype.impl&%1.spec_set_labels.? T&. T& M&. M& self! val!) (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!) (Poly%core!option.Option. (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!)) (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!) val!)) :pattern ((verismo!tspec.security.sectype.impl&%1.spec_set_labels.? T&. T& M&. M& self! val!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (val! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type val! (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%1.spec_set_labels.? T&. T& M&. M& self! val!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%1.spec_set_labels.? T&. T& M&. M& self! val!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::upgrade_secret")
(declare-fun req%verismo!tspec.security.sectype.impl&%9.upgrade_secret. (Dcr Type Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (vmpl! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%9.upgrade_secret. T&. T& M&. M& pre%self! vmpl!) (=> %%global_location_label%%45 (or (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)))) (I vmpl!)) (vstd!set.impl&%0.full.? T&. T&)) (is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))))) (I vmpl!))))))) :pattern ((req%verismo!tspec.security.sectype.impl&%9.upgrade_secret. T&. T& M&. M& pre%self! vmpl!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%9.upgrade_secret. (Dcr Type Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (self! verismo!tspec.security.sectype.SecType.) (vmpl! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%9.upgrade_secret. T&. T& M&. M& pre%self! self! vmpl!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. self!) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (verismo!tspec.security.sectype.impl&%1.spec_set_labels.? T&. T& M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)) (vstd!map.impl&%0.insert.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))))) (I vmpl!) (Poly%verismo!tspec.security.sectype.DataLabel. verismo!tspec.security.sectype.DataLabel./Secret)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%9.upgrade_secret. T&. T& M&. M& pre%self! self! vmpl!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_set_valsets")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%1.spec_set_valsets.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%1.spec_set_valsets.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (val! Poly)) (! (= (verismo!tspec.security.sectype.impl&%1.spec_set_valsets.? T&. T& M&. M& self! val!) (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!) (Poly%core!option.Option. (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!)) val! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.security.sectype.impl&%1.spec_set_valsets.? T&. T& M&. M& self! val!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (val! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type val! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%1.spec_set_valsets.? T&. T& M&. M& self! val!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%1.spec_set_valsets.? T&. T& M&. M& self! val!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::downgrade_security")
(declare-fun req%verismo!tspec.security.sectype.impl&%9.downgrade_security. (Dcr Type Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (vmpl! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%9.downgrade_security. T&. T& M&. M& pre%self! vmpl!) (=> %%global_location_label%%46 (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%9.downgrade_security. T&. T& M&. M& pre%self! vmpl!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%9.downgrade_security. (Dcr Type Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (self! verismo!tspec.security.sectype.SecType.) (vmpl! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%9.downgrade_security. T&. T& M&. M& pre%self! self! vmpl!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. self!) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (verismo!tspec.security.sectype.impl&%1.spec_set_labels.? T&. T& M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)) (vstd!map.impl&%0.insert.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))))) (I vmpl!) (Poly%verismo!tspec.security.sectype.DataLabel. verismo!tspec.security.sectype.DataLabel./Symbol)))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (verismo!tspec.security.sectype.impl&%1.spec_set_valsets.? T&. T& M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)) (vstd!map.impl&%0.insert.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)))) (I vmpl!) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (I vmpl!))))) (= (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (I vmpl!))) 1) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (I vmpl!)) (vstd!set.impl&%0.insert.? T&. T& (vstd!set.impl&%0.empty.? T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%9.downgrade_security. T&. T& M&. M& pre%self! self! vmpl!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::reveal_value")
(declare-fun req%verismo!tspec.security.sectype.impl&%9.reveal_value. (Dcr Type Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%9.reveal_value. T&. T& M&. M& self!) (=> %%global_location_label%%47 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%9.reveal_value. T&. T& M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%9.reveal_value. (Dcr Type Dcr Type verismo!tspec.security.sectype.SecType. Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Poly)) (! (= (ens%verismo!tspec.security.sectype.impl&%9.reveal_value. T&. T& M&. M& self! ret!) (and (has_type ret! T&) (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) ret!))) :pattern ((ens%verismo!tspec.security.sectype.impl&%9.reveal_value. T&. T& M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%46::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%46.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%46.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::fn_vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.fn_vspec_cast_to.))
(declare-fun %%lambda%%8 (Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 v$)) :pattern ((%%apply%%0 (%%lambda%%8 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.fn_vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (= (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&) (mk_fun (%%lambda%%8 T1&. T1& T2&. T2&))) :pattern ((verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (has_type (Poly%fun%1. (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&)) (TYPE%fun%1. T1&. T1& T2&. T2&)) :pattern ((verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? T1&. T1& M&. M& T1&. T1& T2&. T2& self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T1&. T1& M&. M& (vstd!pervasive.arbitrary.? T1&. T1&))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T1&. T1& T2&. T2& (Poly%fun%1. (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? T2&. T2& M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) T1&. T1& M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&) self!))))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%22.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%22.into. M&. M& self!) (=> %%global_location_label%%48 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%22.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%22.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%22.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%22.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%43::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%43.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%43.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 32)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%25.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%25.into. M&. M& self!) (=> %%global_location_label%%49 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%25.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%25.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%25.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%25.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%42::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%42.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%42.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 16)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%28.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%28.into. M&. M& self!) (=> %%global_location_label%%50 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%28.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%28.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%28.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%28.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%41::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%41.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%41.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 8)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%31.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%31.into. M&. M& self!) (=> %%global_location_label%%51 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%31.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%31.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%31.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%31.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%38::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%38.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%38.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT SZ)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%36.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%36.into. M&. M& self!) (=> %%global_location_label%%52 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%36.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%36.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%36.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%36.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%36::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%36.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%36.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 64)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%39.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%53 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%39.into. M&. M& self!) (=> %%global_location_label%%53 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%39.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%39.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%39.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%39.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%34::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%34.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%34.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 16)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%42.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%54 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%42.into. M&. M& self!) (=> %%global_location_label%%54 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%42.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%42.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%42.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%42.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%33::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%33.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%33.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 8)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%45.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%45.into. M&. M& self!) (=> %%global_location_label%%55 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%45.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%45.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%45.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%45.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%30::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%30.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%30.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT SZ)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%50.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%50.into. M&. M& self!) (=> %%global_location_label%%56 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%50.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%50.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%50.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%50.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%28::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%28.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%28.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 64)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%53.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%57 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%53.into. M&. M& self!) (=> %%global_location_label%%57 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%53.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%53.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%53.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%53.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%27::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%27.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%27.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 32)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%56.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%56.into. M&. M& self!) (=> %%global_location_label%%58 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%56.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%56.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%56.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%56.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%25::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%25.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%25.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 8)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%59.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%59.into. M&. M& self!) (=> %%global_location_label%%59 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%59.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%59.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%59.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%59.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%22::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%22.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%22.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT SZ)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%64.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%60 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%64.into. M&. M& self!) (=> %%global_location_label%%60 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%64.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%64.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%64.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%64.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%20::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%20.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%20.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 64)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%67.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%61 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%67.into. M&. M& self!) (=> %%global_location_label%%61 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%67.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%67.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%67.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%67.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%19::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%19.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%19.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 32)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%70.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%62 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%70.into. M&. M& self!) (=> %%global_location_label%%62 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%70.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%70.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%70.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%70.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%18::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%18.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%18.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 16)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%73.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%73.into. M&. M& self!) (=> %%global_location_label%%63 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%73.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%73.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%73.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%73.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%60::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%60.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%60.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 64)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%78.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%64 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%78.into. M&. M& self!) (=> %%global_location_label%%64 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%78.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%78.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%78.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%78.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%59::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%59.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%59.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 32)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%81.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%65 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%81.into. M&. M& self!) (=> %%global_location_label%%65 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%81.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%81.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%81.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%81.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%58::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%58.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%58.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 16)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%84.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%66 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%84.into. M&. M& self!) (=> %%global_location_label%%66 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%84.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%84.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%84.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%84.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%57::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%57.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%57.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 8)))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%87.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%67 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%87.into. M&. M& self!) (=> %%global_location_label%%67 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%87.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%87.into. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%87.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%87.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::VNot::requires_not")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.security.sectype.VNot.requires_not.? Self%&. Self%& self!) BOOL)) :pattern ((verismo!tspec.security.sectype.VNot.requires_not.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::VNot::ensures_not")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (ret! Poly)) (! (=> (and (has_type self! Self%&) (has_type ret! (proj%verismo!tspec.security.sectype.VNot./Output Self%&. Self%&))) (has_type (verismo!tspec.security.sectype.VNot.ensures_not.? Self%&. Self%& self! ret!) BOOL)) :pattern ((verismo!tspec.security.sectype.VNot.ensures_not.? Self%&. Self%& self! ret!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::VNot::not")
(declare-fun req%verismo!tspec.security.sectype.VNot.not. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%68 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (= (req%verismo!tspec.security.sectype.VNot.not. Self%&. Self%& self!) (=> %%global_location_label%%68 (%B (verismo!tspec.security.sectype.VNot.requires_not.? Self%&. Self%& self!)))) :pattern ((req%verismo!tspec.security.sectype.VNot.not. Self%&. Self%& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.VNot.not. (Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (ret! Poly)) (! (= (ens%verismo!tspec.security.sectype.VNot.not. Self%&. Self%& self! ret!) (and (has_type ret! (proj%verismo!tspec.security.sectype.VNot./Output Self%&. Self%&)) (%B (verismo!tspec.security.sectype.VNot.ensures_not.? Self%&. Self%& self! ret!)))) :pattern ((ens%verismo!tspec.security.sectype.VNot.not. Self%&. Self%& self! ret!)))))
(set-info :comment ";; Function-Specs verismo::arch::rmp::perm_s::rmp_perm_track_dom")
(declare-fun ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. (vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. verismo!arch.entities.VMPL.) Bool)
(assert (forall ((p! vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) (vmpl! verismo!arch.entities.VMPL.)) (! (= (ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. p! vmpl!) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. p!)) (Poly%verismo!arch.entities.VMPL. vmpl!))) :pattern ((ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. p! vmpl!)))))
(set-info :comment ";; Broadcast verismo::arch::rmp::perm_s::rmp_perm_track_dom")
(assert (forall ((p! Poly) (vmpl! Poly)) (! (=> (and (has_type p! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) (has_type vmpl! TYPE%verismo!arch.entities.VMPL.)) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) p!) vmpl!)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) p!) vmpl!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::pow_s::spec_nat_pow2")
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_nat_pow2.))
(declare-const fuel_nat%verismo!tspec.math.pow_s.spec_nat_pow2. Fuel)
(assert (forall ((e! Poly) (fuel% Fuel)) (! (= (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! fuel%) (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! zero)) :pattern ((verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! fuel%)))))
(assert (forall ((e! Poly) (fuel% Fuel)) (! (=> (has_type e! NAT) (= (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel%)) (ite (= (%I e!) 0) 1 (Mul 2 (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? (I (nClip (Sub (%I e!) 1))) fuel%))))) :pattern ((verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel%))))))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_nat_pow2.) (forall ((e! Poly)) (! (=> (has_type e! NAT) (= (verismo!tspec.math.pow_s.spec_nat_pow2.? e!) (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel_nat%verismo!tspec.math.pow_s.spec_nat_pow2.)))) :pattern ((verismo!tspec.math.pow_s.spec_nat_pow2.? e!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%47::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%47.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%47.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::VMPL::ord_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%5.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%5.ord_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.entities.VMPL. self!) (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.entities.VMPL. self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntOrd. $ TYPE%verismo!arch.entities.VMPL.))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_constant")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%17.spec_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%17.spec_constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (= (verismo!tspec.security.sectype.impl&%17.spec_constant.? T&. T& M&. M& val!) (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)))) :pattern ((verismo!tspec.security.sectype.impl&%17.spec_constant.? T&. T& M&. M& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! T&) (has_type (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%17.spec_constant.? T&. T& M&. M& val!)) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%17.spec_constant.? T&. T& M&. M& val!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%96.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%96.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (I 0)))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%102.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%102.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I 0)))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::wf")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%20.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%20.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%20.wf.? T&. T& self!) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& $ TYPE%tuple%0. self!)) :pattern ((verismo!tspec.security.sectype.impl&%20.wf.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%8::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%8.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%8.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT SZ) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::SpecSize::spec_size_def")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (verismo!tspec.size_s.SpecSize.spec_size_def.? Self%&. Self%&) NAT) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? Self%&. Self%&)))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%12::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%12.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%12.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16)) (I 2))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 16)))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%19.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%19.spec_size_def.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%11::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32)) (I 4))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 32)))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%10::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%10.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%10.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)) (I 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%13::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%13.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%13.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8)) (I 1))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 8)))
(set-info :comment ";; Function-Specs verismo::tspec::cast::axiom_cast_to_seq_unique")
(declare-fun ens%verismo!tspec.cast.axiom_cast_to_seq_unique. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!tspec.cast.axiom_cast_to_seq_unique. T&. T& val!) (= val! (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))) :pattern ((ens%verismo!tspec.cast.axiom_cast_to_seq_unique. T&. T& val!)))))
(set-info :comment ";; Broadcast verismo::tspec::cast::axiom_cast_to_seq_unique")
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (= val! (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))))
(set-info :comment ";; Function-Specs verismo::tspec::isconst::axiom_const_forall")
(declare-fun ens%verismo!tspec.isconst.axiom_const_forall. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (= (ens%verismo!tspec.isconst.axiom_const_forall. T&. T& v!) (and (and (and (= (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!) (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 4))))) :pattern ((ens%verismo!tspec.isconst.axiom_const_forall. T&. T& v!)))))
(set-info :comment ";; Broadcast verismo::tspec::isconst::axiom_const_forall")
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (=> (has_type v! T&) (=> (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (and (and (and (= (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!) (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 4)))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::VSpecNot::spec_not")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.ops.VSpecNot.spec_not.? Self%&. Self%& self!) Self%&)) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::VSpecMul::spec_mul")
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecMul.spec_mul.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::VSpecEuclideanDiv::spec_euclidean_div")
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::VSpecEuclideanMod::spec_euclidean_mod")
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::VSpecBitAnd::spec_bitand")
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecBitAnd.spec_bitand.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::VSpecBitOr::spec_bitor")
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecBitOr.spec_bitor.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecBitOr.spec_bitor.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::VSpecBitXor::spec_bitxor")
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecBitXor.spec_bitxor.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::VSpecShl::spec_shl")
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecShl.spec_shl.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecShl.spec_shl.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::VSpecShr::spec_shr")
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecShr.spec_shr.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecShr.spec_shr.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::spec_max_count")
(assert (forall ((T&. Dcr) (T& Type)) (! (<= 0 (verismo!tspec.size_s.spec_max_count.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(set-info :comment ";; Function-Specs verismo::tspec::size_s::axiom_max_count_size_rel")
(declare-fun ens%verismo!tspec.size_s.axiom_max_count_size_rel. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_max_count_size_rel. T&. T&) (let ((tmp%%$ (verismo!tspec.size_s.spec_max_count.? T&. T&))) (and (< (EucDiv (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (verismo!tspec.size_s.spec_size.? T&. T&))) 2) tmp%%$) (<= tmp%%$ (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (nClip (Mul (verismo!tspec.size_s.spec_size.? T&. T&) 8)))))))) :pattern ((ens%verismo!tspec.size_s.axiom_max_count_size_rel. T&. T&)))))
(set-info :comment ";; Broadcast verismo::tspec::size_s::axiom_max_count_size_rel")
(assert (forall ((T&. Dcr) (T& Type)) (! (let ((tmp%%$ (verismo!tspec.size_s.spec_max_count.? T&. T&))) (and (< (EucDiv (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (verismo!tspec.size_s.spec_size.? T&. T&))) 2) tmp%%$) (<= tmp%%$ (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (nClip (Mul (verismo!tspec.size_s.spec_size.? T&. T&) 8))))))) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(set-info :comment ";; Function-Specs verismo::tspec::size_s::axiom_set_full_max_count_rel")
(declare-fun ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. T&. T&) (= (vstd!set.impl&%0.len.? T&. T& (vstd!set.impl&%0.full.? T&. T&)) (verismo!tspec.size_s.spec_max_count.? T&. T&))) :pattern ((ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. T&. T&)))))
(set-info :comment ";; Broadcast verismo::tspec::size_s::axiom_set_full_max_count_rel")
(assert (forall ((T&. Dcr) (T& Type)) (! (= (vstd!set.impl&%0.len.? T&. T& (vstd!set.impl&%0.full.? T&. T&)) (verismo!tspec.size_s.spec_max_count.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(set-info :comment ";; Function-Specs verismo::tspec::size_s::axiom_size_from_cast_bytes")
(declare-fun ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. T&. T&) (= (verismo!tspec.size_s.spec_size.? T&. T&) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))) :pattern ((ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. T&. T&)))))
(set-info :comment ";; Broadcast verismo::tspec::size_s::axiom_size_from_cast_bytes")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (= (verismo!tspec.size_s.spec_size.? T&. T&) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))) :pattern ((verismo!tspec.size_s.spec_size.? T&. T&)))))
(set-info :comment ";; Function-Specs verismo::tspec::size_s::axiom_size_from_cast_bytes_def")
(declare-fun ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. T&. T& val!) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (UINT 8) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!)))) :pattern ((ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. T&. T& val!)))))
(set-info :comment ";; Broadcast verismo::tspec::size_s::axiom_size_from_cast_bytes_def")
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (and (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (UINT 8) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!)))))
(set-info :comment ";; Function-Specs verismo::primitives_e::sectype::axiom_size_from_cast_secbytes_def")
(declare-fun ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. T&. T& val!) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))) :pattern ((ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. T&. T& val!)))))
(set-info :comment ";; Broadcast verismo::primitives_e::sectype::axiom_size_from_cast_secbytes_def")
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (and (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self! vmpl!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%696.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%696.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%697.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%697.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%1::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%1.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%1.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%tuple%0. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%1::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%1.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%1.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%tuple%0. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%tuple%0. self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%tuple%0.))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%0::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%0.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%tuple%0. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%tuple%0.))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%16::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%16.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%16.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%tuple%0.) (I 0))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%tuple%0.))
(set-info :comment ";; Function-Axioms verismo::tspec::security::seq::impl&%1::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%8::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%8.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%8.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT SZ) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT SZ) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%8::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%8.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%8.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT SZ)) (I 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::usize_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.usize_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.usize_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.usize_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))) 256))))))))))))))) :pattern ((verismo!tspec.stream.basic.usize_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%11::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%11.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%11.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))) 256)))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%4::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to.))
(declare-fun %%lambda%%9 (Dcr Type Poly Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) i$) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$)))) :pattern ((%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) i$)))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%9 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::wf")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%1.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%1.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.) self!) (B (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& $ TYPE%tuple%0. self!))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.)) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%5::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%5.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%5.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 64) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%6::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%6.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%6.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 64) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%5::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%5.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%5.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 64) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 64) self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%48::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%48.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%48.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%588.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%588.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%589.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%589.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_fullsecret_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%10.is_fullsecret_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%10.is_fullsecret_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! vmpl!) (B (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) vmpl!) (vstd!set.impl&%0.full.? T&. T&)))) :pattern ((verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::is_fullsecret_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%11.is_fullsecret_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%11.is_fullsecret_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self! vmpl!) (verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!) vmpl!)) :pattern ((verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.security.sectype.IsFullSecret. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) :pattern ((tr_bound%verismo!tspec.security.sectype.IsFullSecret. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::is_fullsecret_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%9.is_fullsecret_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%9.is_fullsecret_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? $ (TYPE%vstd!seq.Seq. T&. T&) self! vmpl!) (B (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$) vmpl!)))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))))) :pattern ((verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? $ (TYPE%vstd!seq.Seq. T&. T&) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%62::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%62.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%62.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%708::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%709::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%90::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%90.into. (Dcr Type Int) Bool)
(declare-const %%global_location_label%%69 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%90.into. M&. M& self!) (=> %%global_location_label%%69 (%B (B true)))) :pattern ((req%verismo!tspec.security.sectype.impl&%90.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%90.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%90.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (I self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%90.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%90::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:781:9: 781:50 (#1667)")
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%70.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%70.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_sub_usize_usize_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.))
(declare-fun %%lambda%%10 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%10 v1$ v2$) (I (Sub (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%10 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param) (mk_fun %%lambda%%10)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%732.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%732.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%733.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%733.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%64::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%64.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%64.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.security.sectype.IsFullSecret. T&. T&) (tr_bound%verismo!tspec.security.sectype.IsFullSecret. $ (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((tr_bound%verismo!tspec.security.sectype.IsFullSecret. $ (TYPE%vstd!seq.Seq. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.security.sectype.IsFullSecret. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) :pattern ((tr_bound%verismo!tspec.security.sectype.IsFullSecret. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%4::T::is_fullsecret")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%4.is_fullsecret.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%4.is_fullsecret.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.IsFullSecretToAll.is_fullsecret.? T&. T& self!) (B (and (and (and (%B (verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? T&. T& self! (I 1))) (%B (verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? T&. T& self! (I 2)))) (%B (verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? T&. T& self! (I 3)))) (%B (verismo!tspec.security.sectype.IsFullSecret.is_fullsecret_to.? T&. T& self! (I 4)))))) :pattern ((verismo!tspec.security.sectype.IsFullSecretToAll.is_fullsecret.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::default::impl&%7::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%7.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%7.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT SZ)) (I (uClip SZ 0)))))
(set-info :comment ";; Function-Axioms core::option::Option::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%0.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%0.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%core!option.Option. T&. T&) self!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%core!option.Option. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms core::option::Option::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%0.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%0.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%core!option.Option. T&. T&) self! vmpl!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%core!option.Option. T&. T&) self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Function-Axioms core::option::Option::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%3.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%3.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%core!option.Option. T&. T&) self!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%core!option.Option. T&. T&) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::DataLabel::is_Unknown")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_Unknown.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./Unknown_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./Unknown) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_Unknown.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_Unknown.? self!) (is-verismo!tspec.security.sectype.DataLabel./Unknown_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_Unknown.? self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_set__unused")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%1.spec_set__unused.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%1.spec_set__unused.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (val! Poly)) (! (= (verismo!tspec.security.sectype.impl&%1.spec_set__unused.? T&. T& M&. M& self! val!) (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!) val! (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.security.sectype.impl&%1.spec_set__unused.? T&. T& M&. M& self! val!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (val! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type val! (TYPE%core!option.Option. M&. M&))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%1.spec_set__unused.? T&. T& M&. M& self! val!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%1.spec_set__unused.? T&. T& M&. M& self! val!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::call_self")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%9.call_self.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%9.call_self.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%9.call_self.? T&. T& M&. M& self!) (%Poly%verismo!tspec.security.sectype.SecType. self!)) :pattern ((verismo!tspec.security.sectype.impl&%9.call_self.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (has_type (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.call_self.? T&. T& M&. M& self!)) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%9.call_self.? T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::call_self")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.call_self.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.call_self.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.call_self.? T&. T& M&. M& self!) (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) :pattern ((verismo!tspec.security.sectype.impl&%16.call_self.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.call_self.? T&. T& M&. M& self!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.call_self.? T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::secval_eq_at")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.secval_eq_at.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.secval_eq_at.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (rhs! Poly) (vmpl! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.secval_eq_at.? T&. T& M&. M& self! rhs! vmpl!) (= (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) vmpl!)) (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) vmpl!)))) :pattern ((verismo!tspec.security.sectype.impl&%16.secval_eq_at.? T&. T& M&. M& self! rhs! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::sec_eq")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.sec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.sec_eq.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.sec_eq.? T&. T& M&. M& self! rhs!) (and (and (and (= (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (I 1))) (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) (I 1)))) (= (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (I 2))) (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) (I 2))))) (= (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (I 3))) (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) (I 3))))) (= (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (I 4))) (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) (I 4)))))) :pattern ((verismo!tspec.security.sectype.impl&%16.sec_eq.? T&. T& M&. M& self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::_is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16._is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16._is_constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16._is_constant.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? T&. T& M&. M& self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& (vstd!set.impl&%0.choose.? T&. T& (vstd!set.impl&%0.full.? T&. T&)))))) :pattern ((verismo!tspec.security.sectype.impl&%16._is_constant.? T&. T& M&. M& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%92.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%92.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%93.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%93.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I 0)))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%95.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%95.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%98.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%98.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%99.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%99.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (I 0)))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%101.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%101.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%104.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%104.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%105.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%105.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (I 0)))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_gt")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%106.is_secure_gt.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%106.is_secure_gt.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%106.is_secure_gt.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%106.is_secure_gt.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_lt")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%110.is_secure_lt.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%110.is_secure_lt.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%110.is_secure_lt.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%110.is_secure_lt.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_le")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%114.is_secure_le.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%114.is_secure_le.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%114.is_secure_le.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%114.is_secure_le.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_ge")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%118.is_secure_ge.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%118.is_secure_ge.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%118.is_secure_ge.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%118.is_secure_ge.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_eq")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%122.is_secure_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%122.is_secure_eq.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%122.is_secure_eq.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%122.is_secure_eq.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_not_u8_u8")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_not_u8_u8.))
(declare-fun %%lambda%%11 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (v1$ Poly)) (! (= (%%apply%%0 (%%lambda%%11 %%hole%%0 %%hole%%1) v1$) (I (uClip %%hole%%1 (uintnot %%hole%%0 (I (%I v1$)))))) :pattern ((%%apply%%0 (%%lambda%%11 %%hole%%0 %%hole%%1) v1$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_not_u8_u8.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_not_u8_u8.? no%param) (mk_fun (%%lambda%%11 8 8))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u8_u8.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u8_u8.? no%param)) (TYPE%fun%1. $ (UINT 8) $ (UINT 8)))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u8_u8.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%176.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%176.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ (UINT 8) self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (vstd!pervasive.arbitrary.? $ (UINT 8)))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? $ (UINT 8) $ (UINT 8) $ (UINT 8) (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u8_u8.? (I 0)))))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%177.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%177.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::requires_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%178.requires_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%178.requires_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.VNot.requires_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (B (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& self!))) :pattern ((verismo!tspec.security.sectype.VNot.requires_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ensures_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%178.ensures_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%178.ensures_not.) (forall ((M&. Dcr) (M& Type) (self! Poly) (ret! Poly)) (! (= (verismo!tspec.security.sectype.VNot.ensures_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! ret!) (B (and (and (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& ret!) (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& ret!)))) :pattern ((verismo!tspec.security.sectype.VNot.ensures_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! ret!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_gt")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%180.is_secure_gt.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%180.is_secure_gt.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%180.is_secure_gt.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 16) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%180.is_secure_gt.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_lt")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%184.is_secure_lt.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%184.is_secure_lt.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%184.is_secure_lt.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 16) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%184.is_secure_lt.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_le")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%188.is_secure_le.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%188.is_secure_le.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%188.is_secure_le.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 16) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%188.is_secure_le.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_ge")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%192.is_secure_ge.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%192.is_secure_ge.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%192.is_secure_ge.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 16) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%192.is_secure_ge.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_eq")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%196.is_secure_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%196.is_secure_eq.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%196.is_secure_eq.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 16) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%196.is_secure_eq.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_not_u16_u16")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_not_u16_u16.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_not_u16_u16.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_not_u16_u16.? no%param) (mk_fun (%%lambda%%11 16 16))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u16_u16.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u16_u16.? no%param)) (TYPE%fun%1. $ (UINT 16) $ (UINT 16)))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u16_u16.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%250.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%250.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ (UINT 16) self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (vstd!pervasive.arbitrary.? $ (UINT 16)))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? $ (UINT 16) $ (UINT 16) $ (UINT 16) (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u16_u16.? (I 0)))))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%251.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%251.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::requires_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%252.requires_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%252.requires_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.VNot.requires_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (B (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& self!))) :pattern ((verismo!tspec.security.sectype.VNot.requires_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ensures_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%252.ensures_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%252.ensures_not.) (forall ((M&. Dcr) (M& Type) (self! Poly) (ret! Poly)) (! (= (verismo!tspec.security.sectype.VNot.ensures_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! ret!) (B (and (and (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& ret!) (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& ret!)))) :pattern ((verismo!tspec.security.sectype.VNot.ensures_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! ret!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_gt")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%254.is_secure_gt.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%254.is_secure_gt.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%254.is_secure_gt.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 32) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%254.is_secure_gt.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_lt")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%258.is_secure_lt.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%258.is_secure_lt.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%258.is_secure_lt.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 32) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%258.is_secure_lt.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_le")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%262.is_secure_le.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%262.is_secure_le.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%262.is_secure_le.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 32) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%262.is_secure_le.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_ge")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%266.is_secure_ge.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%266.is_secure_ge.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%266.is_secure_ge.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 32) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%266.is_secure_ge.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_eq")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%270.is_secure_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%270.is_secure_eq.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%270.is_secure_eq.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 32) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%270.is_secure_eq.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_not_u32_u32")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_not_u32_u32.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_not_u32_u32.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_not_u32_u32.? no%param) (mk_fun (%%lambda%%11 32 32))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u32_u32.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u32_u32.? no%param)) (TYPE%fun%1. $ (UINT 32) $ (UINT 32)))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u32_u32.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%324.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%324.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ (UINT 32) self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (vstd!pervasive.arbitrary.? $ (UINT 32)))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? $ (UINT 32) $ (UINT 32) $ (UINT 32) (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u32_u32.? (I 0)))))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%325.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%325.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::requires_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%326.requires_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%326.requires_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.VNot.requires_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (B (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& self!))) :pattern ((verismo!tspec.security.sectype.VNot.requires_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ensures_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%326.ensures_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%326.ensures_not.) (forall ((M&. Dcr) (M& Type) (self! Poly) (ret! Poly)) (! (= (verismo!tspec.security.sectype.VNot.ensures_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! ret!) (B (and (and (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& ret!) (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& ret!)))) :pattern ((verismo!tspec.security.sectype.VNot.ensures_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! ret!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_gt")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%328.is_secure_gt.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%328.is_secure_gt.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%328.is_secure_gt.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 64) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%328.is_secure_gt.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_lt")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%332.is_secure_lt.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%332.is_secure_lt.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%332.is_secure_lt.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 64) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%332.is_secure_lt.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_le")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%336.is_secure_le.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%336.is_secure_le.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%336.is_secure_le.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 64) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%336.is_secure_le.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_ge")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%340.is_secure_ge.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%340.is_secure_ge.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%340.is_secure_ge.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 64) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%340.is_secure_ge.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_eq")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%344.is_secure_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%344.is_secure_eq.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%344.is_secure_eq.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 64) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%344.is_secure_eq.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_not_u64_u64")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_not_u64_u64.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_not_u64_u64.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_not_u64_u64.? no%param) (mk_fun (%%lambda%%11 64 64))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u64_u64.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u64_u64.? no%param)) (TYPE%fun%1. $ (UINT 64) $ (UINT 64)))) :pattern ((verismo!tspec.fnspec.fn_spec_not_u64_u64.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%398.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%398.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ (UINT 64) self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (vstd!pervasive.arbitrary.? $ (UINT 64)))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? $ (UINT 64) $ (UINT 64) $ (UINT 64) (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_u64_u64.? (I 0)))))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%399.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%399.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::requires_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%400.requires_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%400.requires_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.VNot.requires_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (B (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& self!))) :pattern ((verismo!tspec.security.sectype.VNot.requires_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ensures_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%400.ensures_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%400.ensures_not.) (forall ((M&. Dcr) (M& Type) (self! Poly) (ret! Poly)) (! (= (verismo!tspec.security.sectype.VNot.ensures_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! ret!) (B (and (and (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& ret!) (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& ret!)))) :pattern ((verismo!tspec.security.sectype.VNot.ensures_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! ret!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_gt")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%402.is_secure_gt.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%402.is_secure_gt.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%402.is_secure_gt.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT SZ) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%402.is_secure_gt.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_lt")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%406.is_secure_lt.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%406.is_secure_lt.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%406.is_secure_lt.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT SZ) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%406.is_secure_lt.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_le")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%410.is_secure_le.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%410.is_secure_le.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%410.is_secure_le.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT SZ) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%410.is_secure_le.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_ge")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%414.is_secure_ge.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%414.is_secure_ge.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%414.is_secure_ge.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT SZ) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%414.is_secure_ge.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_secure_eq")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%418.is_secure_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%418.is_secure_eq.) (forall ((M&. Dcr) (M& Type) (self! Poly) (other! Poly)) (! (= (verismo!tspec.security.sectype.impl&%418.is_secure_eq.? M&. M& self! other!) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT SZ) M&. M& self! other!)) :pattern ((verismo!tspec.security.sectype.impl&%418.is_secure_eq.? M&. M& self! other!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_not_usize_usize")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_not_usize_usize.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_not_usize_usize.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_not_usize_usize.? no%param) (mk_fun (%%lambda%%11 SZ SZ))) :pattern ((verismo!tspec.fnspec.fn_spec_not_usize_usize.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_usize_usize.? no%param)) (TYPE%fun%1. $ (UINT SZ) $ (UINT SZ)))) :pattern ((verismo!tspec.fnspec.fn_spec_not_usize_usize.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%472.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%472.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ (UINT SZ) self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (vstd!pervasive.arbitrary.? $ (UINT SZ)))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? $ (UINT SZ) $ (UINT SZ) $ (UINT SZ) (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_usize_usize.? (I 0)))))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%473.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%473.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::requires_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%474.requires_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%474.requires_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.VNot.requires_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (B (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& self!))) :pattern ((verismo!tspec.security.sectype.VNot.requires_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ensures_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%474.ensures_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%474.ensures_not.) (forall ((M&. Dcr) (M& Type) (self! Poly) (ret! Poly)) (! (= (verismo!tspec.security.sectype.VNot.ensures_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! ret!) (B (and (and (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& ret!) (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& ret!)))) :pattern ((verismo!tspec.security.sectype.VNot.ensures_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! ret!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_not_bool_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_not_bool_bool.))
(declare-fun %%lambda%%12 () %%Function%%)
(assert (forall ((v1$ Poly)) (! (= (%%apply%%0 %%lambda%%12 v1$) (B (not (%B v1$)))) :pattern ((%%apply%%0 %%lambda%%12 v1$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_not_bool_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_not_bool_bool.? no%param) (mk_fun %%lambda%%12)) :pattern ((verismo!tspec.fnspec.fn_spec_not_bool_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_bool_bool.? no%param)) (TYPE%fun%1. $ BOOL $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_not_bool_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%476.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%476.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ BOOL M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ BOOL M&. M& $ BOOL $ BOOL self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ BOOL M&. M& (vstd!pervasive.arbitrary.? $ BOOL))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? $ BOOL $ BOOL $ BOOL (Poly%fun%1. (verismo!tspec.fnspec.fn_spec_not_bool_bool.? (I 0)))))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ BOOL M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%477.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%477.spec_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ BOOL M&. M& (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ BOOL M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& self!))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::requires_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%478.requires_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%478.requires_not.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.VNot.requires_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) self!) (B (verismo!tspec.security.sectype.impl&%9.wf_value.? $ BOOL M&. M& self!))) :pattern ((verismo!tspec.security.sectype.VNot.requires_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ensures_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%478.ensures_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%478.ensures_not.) (forall ((M&. Dcr) (M& Type) (self! Poly) (ret! Poly)) (! (= (verismo!tspec.security.sectype.VNot.ensures_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) self! ret!) (B (and (and (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& ret!) (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ BOOL M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& self!))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) self!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ BOOL M&. M& ret!)))) :pattern ((verismo!tspec.security.sectype.VNot.ensures_not.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) self! ret!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%23::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%23.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%23.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%484::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%485::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%24::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%24.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%24.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%488::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%489::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%492::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%493::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%496::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%497::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%500::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%501::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%504::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%505::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%17::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%17.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%17.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%508::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%509::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%512::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%513::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_add_u8_u8_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int.))
(declare-fun %%lambda%%13 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%13 v1$ v2$) (I (Add (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%13 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param) (mk_fun %%lambda%%13)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%514.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%514.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%515.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%515.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_sub_u8_u8_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param) (mk_fun %%lambda%%10)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%516.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%516.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%517.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%517.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_mul_u8_u8_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.))
(declare-fun %%lambda%%14 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%14 v1$ v2$) (I (Mul (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%14 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? no%param) (mk_fun %%lambda%%14)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%518.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%518.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%519.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%519.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitor_u8_u8_u8")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitor_u8_u8_u8.))
(declare-fun %%lambda%%15 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 (%%lambda%%15 %%hole%%0 %%hole%%1) v1$ v2$) (I (uClip %%hole%%1 (uintor %%hole%%0 (I (%I v1$)) (I (%I v2$)))))) :pattern ((%%apply%%1 (%%lambda%%15 %%hole%%0 %%hole%%1) v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitor_u8_u8_u8.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitor_u8_u8_u8.? no%param) (mk_fun (%%lambda%%15 8 8))) :pattern ((verismo!tspec.fnspec.fn_spec_bitor_u8_u8_u8.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitor_u8_u8_u8.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ (UINT 8)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitor_u8_u8_u8.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%520.spec_bitor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%520.spec_bitor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ (UINT 8) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitor_u8_u8_u8.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%521.spec_bitor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%521.spec_bitor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitand_u8_u8_u8")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitand_u8_u8_u8.))
(declare-fun %%lambda%%16 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 (%%lambda%%16 %%hole%%0 %%hole%%1) v1$ v2$) (I (uClip %%hole%%1 (uintand %%hole%%0 (I (%I v1$)) (I (%I v2$)))))) :pattern ((%%apply%%1 (%%lambda%%16 %%hole%%0 %%hole%%1) v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitand_u8_u8_u8.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitand_u8_u8_u8.? no%param) (mk_fun (%%lambda%%16 8 8))) :pattern ((verismo!tspec.fnspec.fn_spec_bitand_u8_u8_u8.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitand_u8_u8_u8.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ (UINT 8)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitand_u8_u8_u8.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitand")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%522.spec_bitand.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%522.spec_bitand.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ (UINT 8) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitand_u8_u8_u8.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitand")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%523.spec_bitand.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%523.spec_bitand.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitxor_u8_u8_u8")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitxor_u8_u8_u8.))
(declare-fun %%lambda%%17 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 (%%lambda%%17 %%hole%%0 %%hole%%1) v1$ v2$) (I (uClip %%hole%%1 (uintxor %%hole%%0 (I (%I v1$)) (I (%I v2$)))))) :pattern ((%%apply%%1 (%%lambda%%17 %%hole%%0 %%hole%%1) v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitxor_u8_u8_u8.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitxor_u8_u8_u8.? no%param) (mk_fun (%%lambda%%17 8 8))) :pattern ((verismo!tspec.fnspec.fn_spec_bitxor_u8_u8_u8.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitxor_u8_u8_u8.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ (UINT 8)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitxor_u8_u8_u8.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitxor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%524.spec_bitxor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%524.spec_bitxor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ (UINT 8) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitxor_u8_u8_u8.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitxor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%525.spec_bitxor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%525.spec_bitxor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_euclidean_div_u8_u8_u8")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.))
(declare-fun %%lambda%%18 (Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 (%%lambda%%18 %%hole%%0) v1$ v2$) (I (uClip %%hole%%0 (EucDiv (%I v1$) (%I v2$))))) :pattern ((%%apply%%1 (%%lambda%%18 %%hole%%0) v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.? no%param) (mk_fun (%%lambda%%18 8))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ (UINT 8)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%526.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%526.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ (UINT 8) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u8_u8_u8.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%527.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%527.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_euclidean_mod_u8_u8_u8")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u8_u8_u8.))
(declare-fun %%lambda%%19 (Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 (%%lambda%%19 %%hole%%0) v1$ v2$) (I (uClip %%hole%%0 (EucMod (%I v1$) (%I v2$))))) :pattern ((%%apply%%1 (%%lambda%%19 %%hole%%0) v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u8_u8_u8.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_mod_u8_u8_u8.? no%param) (mk_fun (%%lambda%%19 8))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_mod_u8_u8_u8.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_mod_u8_u8_u8.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ (UINT 8)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_mod_u8_u8_u8.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%528.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%528.spec_euclidean_mod.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ (UINT 8) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_mod_u8_u8_u8.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%529.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%529.spec_euclidean_mod.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_shl_u8_u8_u8")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_shl_u8_u8_u8.))
(declare-fun %%lambda%%20 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 (%%lambda%%20 %%hole%%0 %%hole%%1) v1$ v2$) (I (uClip %%hole%%1 (uintshl %%hole%%0 (I (%I v1$)) (I (%I v2$)))))) :pattern ((%%apply%%1 (%%lambda%%20 %%hole%%0 %%hole%%1) v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_shl_u8_u8_u8.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_shl_u8_u8_u8.? no%param) (mk_fun (%%lambda%%20 8 8))) :pattern ((verismo!tspec.fnspec.fn_spec_shl_u8_u8_u8.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shl_u8_u8_u8.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ (UINT 8)))) :pattern ((verismo!tspec.fnspec.fn_spec_shl_u8_u8_u8.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_shl")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%530.spec_shl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%530.spec_shl.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ (UINT 8) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shl_u8_u8_u8.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_shl")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%531.spec_shl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%531.spec_shl.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_shr_u8_u8_u8")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_shr_u8_u8_u8.))
(declare-fun %%lambda%%21 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 (%%lambda%%21 %%hole%%0 %%hole%%1) v1$ v2$) (I (uClip %%hole%%1 (uintshr %%hole%%0 (I (%I v1$)) (I (%I v2$)))))) :pattern ((%%apply%%1 (%%lambda%%21 %%hole%%0 %%hole%%1) v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_shr_u8_u8_u8.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_shr_u8_u8_u8.? no%param) (mk_fun (%%lambda%%21 8 8))) :pattern ((verismo!tspec.fnspec.fn_spec_shr_u8_u8_u8.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shr_u8_u8_u8.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ (UINT 8)))) :pattern ((verismo!tspec.fnspec.fn_spec_shr_u8_u8_u8.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_shr")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%532.spec_shr.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%532.spec_shr.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ (UINT 8) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shr_u8_u8_u8.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_shr")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%533.spec_shr.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%533.spec_shr.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%534.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%534.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%535.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%535.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%31::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%31.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%31.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%538::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%539::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%32::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%32.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%32.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%542::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%543::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%546::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%547::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%550::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%551::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%554::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%555::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%26::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%26.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%26.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%558::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%559::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%562::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%563::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%566::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%567::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_add_u16_u16_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param) (mk_fun %%lambda%%13)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%568.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%568.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%569.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%569.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_sub_u16_u16_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param) (mk_fun %%lambda%%10)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%570.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%570.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%571.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%571.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_mul_u16_u16_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? no%param) (mk_fun %%lambda%%14)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%572.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%572.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%573.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%573.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitor_u16_u16_u16")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitor_u16_u16_u16.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitor_u16_u16_u16.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitor_u16_u16_u16.? no%param) (mk_fun (%%lambda%%15 16 16))) :pattern ((verismo!tspec.fnspec.fn_spec_bitor_u16_u16_u16.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitor_u16_u16_u16.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ (UINT 16)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitor_u16_u16_u16.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%574.spec_bitor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%574.spec_bitor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ (UINT 16) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitor_u16_u16_u16.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%575.spec_bitor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%575.spec_bitor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitand_u16_u16_u16")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitand_u16_u16_u16.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitand_u16_u16_u16.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitand_u16_u16_u16.? no%param) (mk_fun (%%lambda%%16 16 16))) :pattern ((verismo!tspec.fnspec.fn_spec_bitand_u16_u16_u16.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitand_u16_u16_u16.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ (UINT 16)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitand_u16_u16_u16.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitand")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%576.spec_bitand.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%576.spec_bitand.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ (UINT 16) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitand_u16_u16_u16.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitand")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%577.spec_bitand.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%577.spec_bitand.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitxor_u16_u16_u16")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitxor_u16_u16_u16.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitxor_u16_u16_u16.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitxor_u16_u16_u16.? no%param) (mk_fun (%%lambda%%17 16 16))) :pattern ((verismo!tspec.fnspec.fn_spec_bitxor_u16_u16_u16.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitxor_u16_u16_u16.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ (UINT 16)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitxor_u16_u16_u16.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitxor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%578.spec_bitxor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%578.spec_bitxor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ (UINT 16) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitxor_u16_u16_u16.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitxor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%579.spec_bitxor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%579.spec_bitxor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_euclidean_div_u16_u16_u16")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.? no%param) (mk_fun (%%lambda%%18 16))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ (UINT 16)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%580.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%580.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ (UINT 16) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u16_u16_u16.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%581.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%581.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_euclidean_mod_u16_u16_u16")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u16_u16_u16.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u16_u16_u16.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_mod_u16_u16_u16.? no%param) (mk_fun (%%lambda%%19 16))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_mod_u16_u16_u16.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_mod_u16_u16_u16.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ (UINT 16)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_mod_u16_u16_u16.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%582.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%582.spec_euclidean_mod.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ (UINT 16) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_mod_u16_u16_u16.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%583.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%583.spec_euclidean_mod.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_shl_u16_u16_u16")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_shl_u16_u16_u16.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_shl_u16_u16_u16.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_shl_u16_u16_u16.? no%param) (mk_fun (%%lambda%%20 16 16))) :pattern ((verismo!tspec.fnspec.fn_spec_shl_u16_u16_u16.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shl_u16_u16_u16.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ (UINT 16)))) :pattern ((verismo!tspec.fnspec.fn_spec_shl_u16_u16_u16.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_shl")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%584.spec_shl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%584.spec_shl.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ (UINT 16) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shl_u16_u16_u16.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_shl")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%585.spec_shl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%585.spec_shl.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_shr_u16_u16_u16")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_shr_u16_u16_u16.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_shr_u16_u16_u16.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_shr_u16_u16_u16.? no%param) (mk_fun (%%lambda%%21 16 16))) :pattern ((verismo!tspec.fnspec.fn_spec_shr_u16_u16_u16.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shr_u16_u16_u16.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ (UINT 16)))) :pattern ((verismo!tspec.fnspec.fn_spec_shr_u16_u16_u16.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_shr")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%586.spec_shr.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%586.spec_shr.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ (UINT 16) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shr_u16_u16_u16.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_shr")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%587.spec_shr.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%587.spec_shr.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%39::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%39.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%39.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%592::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%593::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%40::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%40.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%40.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%596::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%597::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%600::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%601::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%604::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%605::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%35::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%35.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%35.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%608::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%609::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%612::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%613::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%616::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%617::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%620::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%621::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_add_u32_u32_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param) (mk_fun %%lambda%%13)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%622.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%622.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%623.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%623.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_sub_u32_u32_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param) (mk_fun %%lambda%%10)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%624.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%624.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%625.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%625.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_mul_u32_u32_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? no%param) (mk_fun %%lambda%%14)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%626.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%626.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%627.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%627.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitor_u32_u32_u32")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitor_u32_u32_u32.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitor_u32_u32_u32.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitor_u32_u32_u32.? no%param) (mk_fun (%%lambda%%15 32 32))) :pattern ((verismo!tspec.fnspec.fn_spec_bitor_u32_u32_u32.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitor_u32_u32_u32.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ (UINT 32)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitor_u32_u32_u32.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%628.spec_bitor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%628.spec_bitor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ (UINT 32) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitor_u32_u32_u32.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%629.spec_bitor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%629.spec_bitor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitand_u32_u32_u32")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitand_u32_u32_u32.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitand_u32_u32_u32.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitand_u32_u32_u32.? no%param) (mk_fun (%%lambda%%16 32 32))) :pattern ((verismo!tspec.fnspec.fn_spec_bitand_u32_u32_u32.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitand_u32_u32_u32.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ (UINT 32)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitand_u32_u32_u32.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitand")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%630.spec_bitand.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%630.spec_bitand.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ (UINT 32) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitand_u32_u32_u32.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitand")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%631.spec_bitand.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%631.spec_bitand.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitxor_u32_u32_u32")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitxor_u32_u32_u32.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitxor_u32_u32_u32.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitxor_u32_u32_u32.? no%param) (mk_fun (%%lambda%%17 32 32))) :pattern ((verismo!tspec.fnspec.fn_spec_bitxor_u32_u32_u32.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitxor_u32_u32_u32.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ (UINT 32)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitxor_u32_u32_u32.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitxor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%632.spec_bitxor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%632.spec_bitxor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ (UINT 32) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitxor_u32_u32_u32.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitxor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%633.spec_bitxor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%633.spec_bitxor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_euclidean_div_u32_u32_u32")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.? no%param) (mk_fun (%%lambda%%18 32))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ (UINT 32)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%634.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%634.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ (UINT 32) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u32_u32_u32.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%635.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%635.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_euclidean_mod_u32_u32_u32")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u32_u32_u32.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u32_u32_u32.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_mod_u32_u32_u32.? no%param) (mk_fun (%%lambda%%19 32))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_mod_u32_u32_u32.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_mod_u32_u32_u32.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ (UINT 32)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_mod_u32_u32_u32.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%636.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%636.spec_euclidean_mod.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ (UINT 32) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_mod_u32_u32_u32.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%637.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%637.spec_euclidean_mod.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_shl_u32_u32_u32")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_shl_u32_u32_u32.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_shl_u32_u32_u32.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_shl_u32_u32_u32.? no%param) (mk_fun (%%lambda%%20 32 32))) :pattern ((verismo!tspec.fnspec.fn_spec_shl_u32_u32_u32.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shl_u32_u32_u32.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ (UINT 32)))) :pattern ((verismo!tspec.fnspec.fn_spec_shl_u32_u32_u32.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_shl")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%638.spec_shl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%638.spec_shl.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ (UINT 32) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shl_u32_u32_u32.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_shl")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%639.spec_shl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%639.spec_shl.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_shr_u32_u32_u32")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_shr_u32_u32_u32.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_shr_u32_u32_u32.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_shr_u32_u32_u32.? no%param) (mk_fun (%%lambda%%21 32 32))) :pattern ((verismo!tspec.fnspec.fn_spec_shr_u32_u32_u32.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shr_u32_u32_u32.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ (UINT 32)))) :pattern ((verismo!tspec.fnspec.fn_spec_shr_u32_u32_u32.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_shr")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%640.spec_shr.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%640.spec_shr.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ (UINT 32) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shr_u32_u32_u32.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_shr")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%641.spec_shr.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%641.spec_shr.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%642.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%642.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%643.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%643.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%646::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%647::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%650::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%651::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%654::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%655::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%658::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%659::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%662::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%663::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%666::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%667::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%670::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%671::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%674::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%675::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_add_u64_u64_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param) (mk_fun %%lambda%%13)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%676.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%676.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%677.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%677.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_sub_u64_u64_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param) (mk_fun %%lambda%%10)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%678.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%678.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%679.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%679.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_mul_u64_u64_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? no%param) (mk_fun %%lambda%%14)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%680.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%680.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%681.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%681.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitor_u64_u64_u64")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitor_u64_u64_u64.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitor_u64_u64_u64.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitor_u64_u64_u64.? no%param) (mk_fun (%%lambda%%15 64 64))) :pattern ((verismo!tspec.fnspec.fn_spec_bitor_u64_u64_u64.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitor_u64_u64_u64.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ (UINT 64)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitor_u64_u64_u64.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%682.spec_bitor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%682.spec_bitor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ (UINT 64) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitor_u64_u64_u64.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%683.spec_bitor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%683.spec_bitor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitand_u64_u64_u64")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitand_u64_u64_u64.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitand_u64_u64_u64.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitand_u64_u64_u64.? no%param) (mk_fun (%%lambda%%16 64 64))) :pattern ((verismo!tspec.fnspec.fn_spec_bitand_u64_u64_u64.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitand_u64_u64_u64.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ (UINT 64)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitand_u64_u64_u64.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitand")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%684.spec_bitand.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%684.spec_bitand.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ (UINT 64) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitand_u64_u64_u64.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitand")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%685.spec_bitand.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%685.spec_bitand.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitxor_u64_u64_u64")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitxor_u64_u64_u64.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitxor_u64_u64_u64.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitxor_u64_u64_u64.? no%param) (mk_fun (%%lambda%%17 64 64))) :pattern ((verismo!tspec.fnspec.fn_spec_bitxor_u64_u64_u64.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitxor_u64_u64_u64.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ (UINT 64)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitxor_u64_u64_u64.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitxor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%686.spec_bitxor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%686.spec_bitxor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ (UINT 64) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitxor_u64_u64_u64.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitxor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%687.spec_bitxor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%687.spec_bitxor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_euclidean_div_u64_u64_u64")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.? no%param) (mk_fun (%%lambda%%18 64))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ (UINT 64)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%688.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%688.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ (UINT 64) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_u64_u64_u64.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%689.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%689.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_euclidean_mod_u64_u64_u64")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u64_u64_u64.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_u64_u64_u64.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_mod_u64_u64_u64.? no%param) (mk_fun (%%lambda%%19 64))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_mod_u64_u64_u64.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_mod_u64_u64_u64.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ (UINT 64)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_mod_u64_u64_u64.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%690.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%690.spec_euclidean_mod.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ (UINT 64) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_mod_u64_u64_u64.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%691.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%691.spec_euclidean_mod.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_shl_u64_u64_u64")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_shl_u64_u64_u64.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_shl_u64_u64_u64.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_shl_u64_u64_u64.? no%param) (mk_fun (%%lambda%%20 64 64))) :pattern ((verismo!tspec.fnspec.fn_spec_shl_u64_u64_u64.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shl_u64_u64_u64.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ (UINT 64)))) :pattern ((verismo!tspec.fnspec.fn_spec_shl_u64_u64_u64.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_shl")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%692.spec_shl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%692.spec_shl.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ (UINT 64) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shl_u64_u64_u64.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_shl")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%693.spec_shl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%693.spec_shl.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_shr_u64_u64_u64")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_shr_u64_u64_u64.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_shr_u64_u64_u64.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_shr_u64_u64_u64.? no%param) (mk_fun (%%lambda%%21 64 64))) :pattern ((verismo!tspec.fnspec.fn_spec_shr_u64_u64_u64.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shr_u64_u64_u64.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ (UINT 64)))) :pattern ((verismo!tspec.fnspec.fn_spec_shr_u64_u64_u64.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_shr")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%694.spec_shr.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%694.spec_shr.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ (UINT 64) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shr_u64_u64_u64.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_shr")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%695.spec_shr.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%695.spec_shr.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%700::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%701::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%704::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%705::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%712::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%713::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%716::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%717::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%720::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%721::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%724::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%725::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%728::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%729::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_add_usize_usize_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param) (mk_fun %%lambda%%13)) :pattern ((verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%730.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%730.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%731.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%731.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_mul_usize_usize_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? no%param) (mk_fun %%lambda%%14)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%734.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%734.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%735.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%735.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitor_usize_usize_usize")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitor_usize_usize_usize.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitor_usize_usize_usize.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitor_usize_usize_usize.? no%param) (mk_fun (%%lambda%%15 SZ SZ))) :pattern ((verismo!tspec.fnspec.fn_spec_bitor_usize_usize_usize.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitor_usize_usize_usize.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitor_usize_usize_usize.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%736.spec_bitor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%736.spec_bitor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ (UINT SZ) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitor_usize_usize_usize.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%737.spec_bitor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%737.spec_bitor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitOr.spec_bitor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitand_usize_usize_usize")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitand_usize_usize_usize.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitand_usize_usize_usize.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitand_usize_usize_usize.? no%param) (mk_fun (%%lambda%%16 SZ SZ))) :pattern ((verismo!tspec.fnspec.fn_spec_bitand_usize_usize_usize.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitand_usize_usize_usize.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitand_usize_usize_usize.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitand")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%738.spec_bitand.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%738.spec_bitand.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ (UINT SZ) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitand_usize_usize_usize.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitand")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%739.spec_bitand.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%739.spec_bitand.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_bitxor_usize_usize_usize")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_bitxor_usize_usize_usize.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_bitxor_usize_usize_usize.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_bitxor_usize_usize_usize.? no%param) (mk_fun (%%lambda%%17 SZ SZ))) :pattern ((verismo!tspec.fnspec.fn_spec_bitxor_usize_usize_usize.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitxor_usize_usize_usize.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((verismo!tspec.fnspec.fn_spec_bitxor_usize_usize_usize.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_bitxor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%740.spec_bitxor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%740.spec_bitxor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ (UINT SZ) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_bitxor_usize_usize_usize.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_bitxor")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%741.spec_bitxor.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%741.spec_bitxor.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_euclidean_div_usize_usize_usize")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.? no%param) (mk_fun (%%lambda%%18 SZ))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%742.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%742.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ (UINT SZ) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_usize_usize_usize.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%743.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%743.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_euclidean_mod_usize_usize_usize")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_usize_usize_usize.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_usize_usize_usize.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_mod_usize_usize_usize.? no%param) (mk_fun (%%lambda%%19 SZ))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_mod_usize_usize_usize.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_mod_usize_usize_usize.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_mod_usize_usize_usize.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%744.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%744.spec_euclidean_mod.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ (UINT SZ) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_mod_usize_usize_usize.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%745.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%745.spec_euclidean_mod.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_shl_usize_usize_usize")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_shl_usize_usize_usize.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_shl_usize_usize_usize.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_shl_usize_usize_usize.? no%param) (mk_fun (%%lambda%%20 SZ SZ))) :pattern ((verismo!tspec.fnspec.fn_spec_shl_usize_usize_usize.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shl_usize_usize_usize.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((verismo!tspec.fnspec.fn_spec_shl_usize_usize_usize.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_shl")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%746.spec_shl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%746.spec_shl.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ (UINT SZ) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shl_usize_usize_usize.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_shl")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%747.spec_shl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%747.spec_shl.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_shr_usize_usize_usize")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_shr_usize_usize_usize.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_shr_usize_usize_usize.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_shr_usize_usize_usize.? no%param) (mk_fun (%%lambda%%21 SZ SZ))) :pattern ((verismo!tspec.fnspec.fn_spec_shr_usize_usize_usize.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shr_usize_usize_usize.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((verismo!tspec.fnspec.fn_spec_shr_usize_usize_usize.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_shr")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%748.spec_shr.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%748.spec_shr.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ (UINT SZ) self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_shr_usize_usize_usize.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_shr")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%749.spec_shr.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%749.spec_shr.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%750.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%750.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%751.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%751.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%79.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%79.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%80.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%80.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%78.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%78.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%76.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%76.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%75.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%75.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%74.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%74.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%73.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%73.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_add_nat_nat_nat")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.))
(declare-fun %%lambda%%22 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%22 v1$ v2$) (I (nClip (Add (%I v1$) (%I v2$))))) :pattern ((%%apply%%1 %%lambda%%22 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param) (mk_fun %%lambda%%22)) :pattern ((verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param)) (TYPE%fun%2. $ NAT $ NAT $ NAT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%780.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%780.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ NAT M&. M& $ NAT $ NAT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%781.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%781.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_sub_nat_nat_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param) (mk_fun %%lambda%%10)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param)) (TYPE%fun%2. $ NAT $ NAT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%782.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%782.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ NAT M&. M& $ NAT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%783.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%783.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_mul_nat_nat_nat")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.))
(declare-fun %%lambda%%23 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%23 v1$ v2$) (I (nClip (Mul (%I v1$) (%I v2$))))) :pattern ((%%apply%%1 %%lambda%%23 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? no%param) (mk_fun %%lambda%%23)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? no%param)) (TYPE%fun%2. $ NAT $ NAT $ NAT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%784.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%784.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ NAT M&. M& $ NAT $ NAT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%785.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%785.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_euclidean_div_nat_nat_nat")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.))
(declare-fun %%lambda%%24 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%24 v1$ v2$) (I (nClip (EucDiv (%I v1$) (%I v2$))))) :pattern ((%%apply%%1 %%lambda%%24 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.? no%param) (mk_fun %%lambda%%24)) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.? no%param)) (TYPE%fun%2. $ NAT $ NAT $ NAT))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%786.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%786.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ NAT M&. M& $ NAT $ NAT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_nat_nat_nat.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%787.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%787.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_euclidean_mod_nat_nat_nat")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_nat_nat_nat.))
(declare-fun %%lambda%%25 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%25 v1$ v2$) (I (nClip (EucMod (%I v1$) (%I v2$))))) :pattern ((%%apply%%1 %%lambda%%25 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_nat_nat_nat.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_mod_nat_nat_nat.? no%param) (mk_fun %%lambda%%25)) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_mod_nat_nat_nat.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_mod_nat_nat_nat.? no%param)) (TYPE%fun%2. $ NAT $ NAT $ NAT))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_mod_nat_nat_nat.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%788.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%788.spec_euclidean_mod.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ NAT M&. M& $ NAT $ NAT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_mod_nat_nat_nat.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%789.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%789.spec_euclidean_mod.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%790.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%790.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%791.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%791.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%71.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%71.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%68.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%68.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%67.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%67.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%66.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%66.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%65.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%65.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_add_int_int_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param) (mk_fun %%lambda%%13)) :pattern ((verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param)) (TYPE%fun%2. $ INT $ INT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%820.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%820.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ INT M&. M& $ INT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_int_int_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%821.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%821.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_sub_int_int_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param) (mk_fun %%lambda%%10)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param)) (TYPE%fun%2. $ INT $ INT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%822.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%822.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ INT M&. M& $ INT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_int_int_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%823.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%823.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_mul_int_int_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_int_int_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_int_int_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_int_int_int.? no%param) (mk_fun %%lambda%%14)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_int_int_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_int_int_int.? no%param)) (TYPE%fun%2. $ INT $ INT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_int_int_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%824.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%824.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ INT M&. M& $ INT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_int_int_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%825.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%825.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_euclidean_div_int_int_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.))
(declare-fun %%lambda%%26 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%26 v1$ v2$) (I (EucDiv (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%26 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.? no%param) (mk_fun %%lambda%%26)) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.? no%param)) (TYPE%fun%2. $ INT $ INT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%826.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%826.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ INT M&. M& $ INT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_div_int_int_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%827.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%827.spec_euclidean_div.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_euclidean_mod_int_int_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_int_int_int.))
(declare-fun %%lambda%%27 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%27 v1$ v2$) (I (EucMod (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%27 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_euclidean_mod_int_int_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_euclidean_mod_int_int_int.? no%param) (mk_fun %%lambda%%27)) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_mod_int_int_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_mod_int_int_int.? no%param)) (TYPE%fun%2. $ INT $ INT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_euclidean_mod_int_int_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%828.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%828.spec_euclidean_mod.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ INT M&. M& $ INT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_euclidean_mod_int_int_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%829.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%829.spec_euclidean_mod.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%830::requires_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%830.requires_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%830.requires_not.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.VNot.requires_not.? $ BOOL self!) (B true)) :pattern ((verismo!tspec.security.sectype.VNot.requires_not.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%830::ensures_not")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%830.ensures_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%830.ensures_not.) (forall ((self! Poly) (ret! Poly)) (! (= (verismo!tspec.security.sectype.VNot.ensures_not.? $ BOOL self! ret!) (B (= (%B self!) (not (%B ret!))))) :pattern ((verismo!tspec.security.sectype.VNot.ensures_not.? $ BOOL self! ret!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::bool_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.bool_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.bool_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.bool_to_stream.? data!) (verismo!tspec.stream.basic.u8_to_stream.? (I (ite (%B data!) 1 0)))) :pattern ((verismo!tspec.stream.basic.bool_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::char_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.char_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.char_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.char_to_stream.? data!) (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (char%to_unicode (%C data!)))))) :pattern ((verismo!tspec.stream.basic.char_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u128_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u128_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u128_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u128_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))) 256))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296)))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296)))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296))))) 65536))))) 256)))))))))))))))))) :pattern ((verismo!tspec.stream.basic.u128_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::perm_s::PagePerm::as_int")
(assert (fuel_bool_default fuel%verismo!arch.rmp.perm_s.impl&%1.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.perm_s.impl&%1.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) self!) (I (let ((v1$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Read)) 1 0))) (let ((v2$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write)) 2 0))) (let ((v3$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeU)) 4 0))) (let ((v4$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeS)) 8 0))) (let ((v5$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Shadow)) 16 0))) (Add (Add (Add (Add v1$ v2$) v3$) v4$) v5$)))))))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%6::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%6.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%6.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 32) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%6::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%6.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%6.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 32) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 32) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%7::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%7.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%7.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 32) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%7::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%9 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%6::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%9 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%9::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%9.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%9.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 8) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%2.vspec_cast_to.))
(declare-fun %%choose%%2 (Type Dcr Type Dcr Type Poly Dcr Type Dcr Type) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type)) (! (=> (exists ((ret$ Poly)) (! (and (has_type ret$ %%hole%%0) (= %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 ret$))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 ret$)))) (exists ((ret$ Poly)) (! (and (and (has_type ret$ %%hole%%0) (= %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 ret$))) (= (%%choose%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9) ret$)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 ret$))))) :pattern ((%%choose%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9)))))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%2.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) self!) (as_type (%%choose%%2 (UINT 8) $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%4.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16) self!) (as_type (%%choose%%2 (UINT 16) $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 16))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%6.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32) self!) (as_type (%%choose%%2 (UINT 32) $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 32))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%8.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%8.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64) self!) (as_type (%%choose%%2 (UINT 64) $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 64))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%9::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%9.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%9.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))) 256))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296)))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296)))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296))))) 65536))))) 256))))))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%10.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%10.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128) self!) (as_type (%%choose%%2 (UINT 128) $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 128))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%12.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%12.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ) self!) (as_type (%%choose%%2 (UINT SZ) $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT SZ))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%13::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%13.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%13.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (char%to_unicode (%C self!))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%14.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%14.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR self!) (as_type (%%choose%%2 CHAR $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8))) CHAR)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%15::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%15.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%15.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (ite (%B self!) 1 0))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%16.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%16.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL self!) (as_type (%%choose%%2 BOOL $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8))) BOOL)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%21::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%21.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%21.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%29::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%29.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%29.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%37::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%37.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%37.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%45::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%45.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%45.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%49::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%49.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%49.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%50::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%50.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%50.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%51::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%51.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%51.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%52::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%52.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%52.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%53::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%53.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%53.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%54::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%54.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%54.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%55::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%55.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%55.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%56::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%56.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%56.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%61::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%61.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%61.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%69.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%69.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%77.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%77.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%81::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%81.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%81.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%82::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%82.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%82.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 8) self!) (as_type (%%choose%%2 (UINT 8) $ (UINT 8) $ BOOL self! $ (UINT 8) $ BOOL) (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%83::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%83.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%83.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%84::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%84.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%84.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 16) self!) (as_type (%%choose%%2 (UINT 16) $ (UINT 16) $ BOOL self! $ (UINT 16) $ BOOL) (UINT 16))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%85::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%85.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%85.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%86::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%86.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%86.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 32) self!) (as_type (%%choose%%2 (UINT 32) $ (UINT 32) $ BOOL self! $ (UINT 32) $ BOOL) (UINT 32))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%87::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%87.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%87.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%88::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%88.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%88.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 64) self!) (as_type (%%choose%%2 (UINT 64) $ (UINT 64) $ BOOL self! $ (UINT 64) $ BOOL) (UINT 64))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%89::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%89.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%89.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%90::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%90.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%90.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 128) self!) (as_type (%%choose%%2 (UINT 128) $ (UINT 128) $ BOOL self! $ (UINT 128) $ BOOL) (UINT 128))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%91::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%91.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%91.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%92::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%92.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%92.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT SZ) self!) (as_type (%%choose%%2 (UINT SZ) $ (UINT SZ) $ BOOL self! $ (UINT SZ) $ BOOL) (UINT SZ))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%93.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%93.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%94::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%94.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%94.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ INT self!) (as_type (%%choose%%2 INT $ INT $ BOOL self! $ INT $ BOOL) INT)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ INT self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%95.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%95.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%96::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%96.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%96.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ NAT self!) (as_type (%%choose%%2 NAT $ NAT $ BOOL self! $ NAT $ BOOL) NAT)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%97::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%97.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%97.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (UINT 8) self!) (I (uClip 8 (char%to_unicode (%C self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%98::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%98.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%98.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms builtin::Ghost::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%99.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%99.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%100.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%100.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%101.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%101.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms builtin::Ghost::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%1.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%1.spec_default.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? (GHOST T&.) T&) (vstd!pervasive.arbitrary.? (GHOST T&.) T&)) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? (GHOST T&.) T&))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%2.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%2.spec_default.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? (TRACKED T&.) T&) (vstd!pervasive.arbitrary.? (TRACKED T&.) T&)) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? (TRACKED T&.) T&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::default::impl&%3::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%3.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%3.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT 64)) (I (uClip 64 0)))))
(set-info :comment ";; Function-Axioms verismo::tspec::default::impl&%4::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%4.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%4.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT 32)) (I (uClip 32 0)))))
(set-info :comment ";; Function-Axioms verismo::tspec::default::impl&%5::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%5.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%5.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT 16)) (I (uClip 16 0)))))
(set-info :comment ";; Function-Axioms verismo::tspec::default::impl&%6::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%6.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%6.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT 8)) (I (uClip 8 0)))))
(set-info :comment ";; Function-Axioms builtin::int::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%8.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%8.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ INT) (I 0))))
(set-info :comment ";; Function-Axioms builtin::nat::spec_default")
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%9.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%9.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ NAT) (I 0))))
(set-info :comment ";; Function-Axioms builtin::Ghost::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%3.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%3.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? (GHOST T&.) T& self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? (GHOST T&.) T& self!))))))
(set-info :comment ";; Function-Axioms builtin::Ghost::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%3.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%3.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? (GHOST T&.) T& self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? (GHOST T&.) T& self! vmpl!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%4.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%4.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? (TRACKED T&.) T& self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? (TRACKED T&.) T& self!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%4.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%4.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? (TRACKED T&.) T& self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? (TRACKED T&.) T& self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%7::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%7.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%7.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 16) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%7::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%7.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%7.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 16) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 16) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%9::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%9.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%9.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 8) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 8) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%10::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%10.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%10.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ BOOL self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%10::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%10.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%10.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ BOOL self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ BOOL self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%11::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%11.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%11.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ CHAR self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ CHAR self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%11::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%11.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%11.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ CHAR self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ CHAR self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::impl&%0::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.ops.impl&%0.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.ops.impl&%0.spec_not.) (forall ((self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 64) self!) (I (uClip 64 (uintnot 64 (I (%I self!)))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::impl&%1::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.ops.impl&%1.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.ops.impl&%1.spec_not.) (forall ((self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 32) self!) (I (uClip 32 (uintnot 32 (I (%I self!)))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::impl&%2::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.ops.impl&%2.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.ops.impl&%2.spec_not.) (forall ((self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 16) self!) (I (uClip 16 (uintnot 16 (I (%I self!)))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::impl&%3::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.ops.impl&%3.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.ops.impl&%3.spec_not.) (forall ((self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT SZ) self!) (I (uClip SZ (uintnot SZ (I (%I self!)))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::impl&%4::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.ops.impl&%4.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.ops.impl&%4.spec_not.) (forall ((self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 8) self!) (I (uClip 8 (uintnot 8 (I (%I self!)))))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::impl&%5::spec_not")
(assert (fuel_bool_default fuel%verismo!tspec.ops.impl&%5.spec_not.))
(assert (=> (fuel_bool fuel%verismo!tspec.ops.impl&%5.spec_not.) (forall ((self! Poly)) (! (= (verismo!tspec.ops.VSpecNot.spec_not.? $ BOOL self!) (B (not (%B self!)))) :pattern ((verismo!tspec.ops.VSpecNot.spec_not.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_lt_u64_u64_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_lt_u64_u64_bool.))
(declare-fun %%lambda%%28 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%28 v1$ v2$) (B (< (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%28 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_lt_u64_u64_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_lt_u64_u64_bool.? no%param) (mk_fun %%lambda%%28)) :pattern ((verismo!tspec.fnspec.fn_spec_lt_u64_u64_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_lt_u64_u64_bool.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_lt_u64_u64_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_gt_u64_u64_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_gt_u64_u64_bool.))
(declare-fun %%lambda%%29 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%29 v1$ v2$) (B (> (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%29 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_gt_u64_u64_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_gt_u64_u64_bool.? no%param) (mk_fun %%lambda%%29)) :pattern ((verismo!tspec.fnspec.fn_spec_gt_u64_u64_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_gt_u64_u64_bool.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_gt_u64_u64_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_le_u64_u64_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_le_u64_u64_bool.))
(declare-fun %%lambda%%30 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%30 v1$ v2$) (B (<= (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%30 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_le_u64_u64_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_le_u64_u64_bool.? no%param) (mk_fun %%lambda%%30)) :pattern ((verismo!tspec.fnspec.fn_spec_le_u64_u64_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_le_u64_u64_bool.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_le_u64_u64_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_ge_u64_u64_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_ge_u64_u64_bool.))
(declare-fun %%lambda%%31 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%31 v1$ v2$) (B (>= (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%31 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_ge_u64_u64_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_ge_u64_u64_bool.? no%param) (mk_fun %%lambda%%31)) :pattern ((verismo!tspec.fnspec.fn_spec_ge_u64_u64_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_ge_u64_u64_bool.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_ge_u64_u64_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_eq_u64_u64_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_eq_u64_u64_bool.))
(declare-fun %%lambda%%32 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%32 v1$ v2$) (B (= v1$ v2$))) :pattern ((%%apply%%1 %%lambda%%32 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_eq_u64_u64_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_eq_u64_u64_bool.? no%param) (mk_fun %%lambda%%32)) :pattern ((verismo!tspec.fnspec.fn_spec_eq_u64_u64_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_eq_u64_u64_bool.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_eq_u64_u64_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_lt_u32_u32_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_lt_u32_u32_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_lt_u32_u32_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_lt_u32_u32_bool.? no%param) (mk_fun %%lambda%%28)) :pattern ((verismo!tspec.fnspec.fn_spec_lt_u32_u32_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_lt_u32_u32_bool.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_lt_u32_u32_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_gt_u32_u32_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_gt_u32_u32_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_gt_u32_u32_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_gt_u32_u32_bool.? no%param) (mk_fun %%lambda%%29)) :pattern ((verismo!tspec.fnspec.fn_spec_gt_u32_u32_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_gt_u32_u32_bool.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_gt_u32_u32_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_le_u32_u32_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_le_u32_u32_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_le_u32_u32_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_le_u32_u32_bool.? no%param) (mk_fun %%lambda%%30)) :pattern ((verismo!tspec.fnspec.fn_spec_le_u32_u32_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_le_u32_u32_bool.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_le_u32_u32_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_ge_u32_u32_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_ge_u32_u32_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_ge_u32_u32_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_ge_u32_u32_bool.? no%param) (mk_fun %%lambda%%31)) :pattern ((verismo!tspec.fnspec.fn_spec_ge_u32_u32_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_ge_u32_u32_bool.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_ge_u32_u32_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_eq_u32_u32_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_eq_u32_u32_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_eq_u32_u32_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_eq_u32_u32_bool.? no%param) (mk_fun %%lambda%%32)) :pattern ((verismo!tspec.fnspec.fn_spec_eq_u32_u32_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_eq_u32_u32_bool.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_eq_u32_u32_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_lt_u16_u16_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_lt_u16_u16_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_lt_u16_u16_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_lt_u16_u16_bool.? no%param) (mk_fun %%lambda%%28)) :pattern ((verismo!tspec.fnspec.fn_spec_lt_u16_u16_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_lt_u16_u16_bool.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_lt_u16_u16_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_gt_u16_u16_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_gt_u16_u16_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_gt_u16_u16_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_gt_u16_u16_bool.? no%param) (mk_fun %%lambda%%29)) :pattern ((verismo!tspec.fnspec.fn_spec_gt_u16_u16_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_gt_u16_u16_bool.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_gt_u16_u16_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_le_u16_u16_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_le_u16_u16_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_le_u16_u16_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_le_u16_u16_bool.? no%param) (mk_fun %%lambda%%30)) :pattern ((verismo!tspec.fnspec.fn_spec_le_u16_u16_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_le_u16_u16_bool.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_le_u16_u16_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_ge_u16_u16_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_ge_u16_u16_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_ge_u16_u16_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_ge_u16_u16_bool.? no%param) (mk_fun %%lambda%%31)) :pattern ((verismo!tspec.fnspec.fn_spec_ge_u16_u16_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_ge_u16_u16_bool.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_ge_u16_u16_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_eq_u16_u16_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_eq_u16_u16_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_eq_u16_u16_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_eq_u16_u16_bool.? no%param) (mk_fun %%lambda%%32)) :pattern ((verismo!tspec.fnspec.fn_spec_eq_u16_u16_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_eq_u16_u16_bool.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_eq_u16_u16_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_lt_u8_u8_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_lt_u8_u8_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_lt_u8_u8_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_lt_u8_u8_bool.? no%param) (mk_fun %%lambda%%28)) :pattern ((verismo!tspec.fnspec.fn_spec_lt_u8_u8_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_lt_u8_u8_bool.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_lt_u8_u8_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_gt_u8_u8_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_gt_u8_u8_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_gt_u8_u8_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_gt_u8_u8_bool.? no%param) (mk_fun %%lambda%%29)) :pattern ((verismo!tspec.fnspec.fn_spec_gt_u8_u8_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_gt_u8_u8_bool.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_gt_u8_u8_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_le_u8_u8_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_le_u8_u8_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_le_u8_u8_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_le_u8_u8_bool.? no%param) (mk_fun %%lambda%%30)) :pattern ((verismo!tspec.fnspec.fn_spec_le_u8_u8_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_le_u8_u8_bool.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_le_u8_u8_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_ge_u8_u8_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_ge_u8_u8_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_ge_u8_u8_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_ge_u8_u8_bool.? no%param) (mk_fun %%lambda%%31)) :pattern ((verismo!tspec.fnspec.fn_spec_ge_u8_u8_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_ge_u8_u8_bool.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_ge_u8_u8_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_eq_u8_u8_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_eq_u8_u8_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_eq_u8_u8_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_eq_u8_u8_bool.? no%param) (mk_fun %%lambda%%32)) :pattern ((verismo!tspec.fnspec.fn_spec_eq_u8_u8_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_eq_u8_u8_bool.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_eq_u8_u8_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_lt_usize_usize_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_lt_usize_usize_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_lt_usize_usize_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_lt_usize_usize_bool.? no%param) (mk_fun %%lambda%%28)) :pattern ((verismo!tspec.fnspec.fn_spec_lt_usize_usize_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_lt_usize_usize_bool.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_lt_usize_usize_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_gt_usize_usize_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_gt_usize_usize_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_gt_usize_usize_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_gt_usize_usize_bool.? no%param) (mk_fun %%lambda%%29)) :pattern ((verismo!tspec.fnspec.fn_spec_gt_usize_usize_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_gt_usize_usize_bool.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_gt_usize_usize_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_le_usize_usize_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_le_usize_usize_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_le_usize_usize_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_le_usize_usize_bool.? no%param) (mk_fun %%lambda%%30)) :pattern ((verismo!tspec.fnspec.fn_spec_le_usize_usize_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_le_usize_usize_bool.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_le_usize_usize_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_ge_usize_usize_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_ge_usize_usize_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_ge_usize_usize_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_ge_usize_usize_bool.? no%param) (mk_fun %%lambda%%31)) :pattern ((verismo!tspec.fnspec.fn_spec_ge_usize_usize_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_ge_usize_usize_bool.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_ge_usize_usize_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_eq_usize_usize_bool")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_eq_usize_usize_bool.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_eq_usize_usize_bool.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_eq_usize_usize_bool.? no%param) (mk_fun %%lambda%%32)) :pattern ((verismo!tspec.fnspec.fn_spec_eq_usize_usize_bool.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_eq_usize_usize_bool.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ BOOL))) :pattern ((verismo!tspec.fnspec.fn_spec_eq_usize_usize_bool.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_div_u64_u64_u64")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_div_u64_u64_u64.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_div_u64_u64_u64.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_div_u64_u64_u64.? no%param) (mk_fun (%%lambda%%18 64))) :pattern ((verismo!tspec.fnspec.fn_spec_div_u64_u64_u64.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_div_u64_u64_u64.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ (UINT 64)))) :pattern ((verismo!tspec.fnspec.fn_spec_div_u64_u64_u64.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_rem_u64_u64_u64")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_rem_u64_u64_u64.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_rem_u64_u64_u64.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_rem_u64_u64_u64.? no%param) (mk_fun (%%lambda%%19 64))) :pattern ((verismo!tspec.fnspec.fn_spec_rem_u64_u64_u64.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_rem_u64_u64_u64.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ (UINT 64)))) :pattern ((verismo!tspec.fnspec.fn_spec_rem_u64_u64_u64.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_div_u32_u32_u32")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_div_u32_u32_u32.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_div_u32_u32_u32.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_div_u32_u32_u32.? no%param) (mk_fun (%%lambda%%18 32))) :pattern ((verismo!tspec.fnspec.fn_spec_div_u32_u32_u32.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_div_u32_u32_u32.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ (UINT 32)))) :pattern ((verismo!tspec.fnspec.fn_spec_div_u32_u32_u32.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_rem_u32_u32_u32")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_rem_u32_u32_u32.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_rem_u32_u32_u32.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_rem_u32_u32_u32.? no%param) (mk_fun (%%lambda%%19 32))) :pattern ((verismo!tspec.fnspec.fn_spec_rem_u32_u32_u32.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_rem_u32_u32_u32.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ (UINT 32)))) :pattern ((verismo!tspec.fnspec.fn_spec_rem_u32_u32_u32.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_div_u16_u16_u16")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_div_u16_u16_u16.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_div_u16_u16_u16.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_div_u16_u16_u16.? no%param) (mk_fun (%%lambda%%18 16))) :pattern ((verismo!tspec.fnspec.fn_spec_div_u16_u16_u16.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_div_u16_u16_u16.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ (UINT 16)))) :pattern ((verismo!tspec.fnspec.fn_spec_div_u16_u16_u16.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_rem_u16_u16_u16")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_rem_u16_u16_u16.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_rem_u16_u16_u16.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_rem_u16_u16_u16.? no%param) (mk_fun (%%lambda%%19 16))) :pattern ((verismo!tspec.fnspec.fn_spec_rem_u16_u16_u16.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_rem_u16_u16_u16.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ (UINT 16)))) :pattern ((verismo!tspec.fnspec.fn_spec_rem_u16_u16_u16.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_div_u8_u8_u8")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_div_u8_u8_u8.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_div_u8_u8_u8.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_div_u8_u8_u8.? no%param) (mk_fun (%%lambda%%18 8))) :pattern ((verismo!tspec.fnspec.fn_spec_div_u8_u8_u8.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_div_u8_u8_u8.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ (UINT 8)))) :pattern ((verismo!tspec.fnspec.fn_spec_div_u8_u8_u8.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_rem_u8_u8_u8")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_rem_u8_u8_u8.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_rem_u8_u8_u8.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_rem_u8_u8_u8.? no%param) (mk_fun (%%lambda%%19 8))) :pattern ((verismo!tspec.fnspec.fn_spec_rem_u8_u8_u8.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_rem_u8_u8_u8.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ (UINT 8)))) :pattern ((verismo!tspec.fnspec.fn_spec_rem_u8_u8_u8.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_div_usize_usize_usize")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_div_usize_usize_usize.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_div_usize_usize_usize.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_div_usize_usize_usize.? no%param) (mk_fun (%%lambda%%18 SZ))) :pattern ((verismo!tspec.fnspec.fn_spec_div_usize_usize_usize.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_div_usize_usize_usize.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((verismo!tspec.fnspec.fn_spec_div_usize_usize_usize.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_rem_usize_usize_usize")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_rem_usize_usize_usize.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_rem_usize_usize_usize.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_rem_usize_usize_usize.? no%param) (mk_fun (%%lambda%%19 SZ))) :pattern ((verismo!tspec.fnspec.fn_spec_rem_usize_usize_usize.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_rem_usize_usize_usize.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ (UINT SZ)))) :pattern ((verismo!tspec.fnspec.fn_spec_rem_usize_usize_usize.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%2::T1::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%2.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%2.spec_sub.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& T1&. T1& $ INT self! rhs!) (I (Sub (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& T1&. T1& $ INT self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%3::T1::spec_euclidean_div")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%3.spec_euclidean_div.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%3.spec_euclidean_div.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (EucDiv (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%4::T1::spec_euclidean_mod")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%4.spec_euclidean_mod.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%4.spec_euclidean_mod.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (EucMod (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%5::T1::spec_mul")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%5.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%5.spec_mul.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (Mul (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%9::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%9.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%9.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 128)) (I 16))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%14::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%14.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%14.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ BOOL) (I 1))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%15::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%15.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%15.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ CHAR) (I 1))))
(set-info :comment ";; Function-Axioms builtin::Ghost::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%17.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%17.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? (GHOST T&.) T&) (I 0)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? (GHOST T&.) T&))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%18.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%18.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? (TRACKED T&.) T&) (I 0)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? (TRACKED T&.) T&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::ByteStream::spec_shr")
(assert (fuel_bool_default fuel%verismo!tspec.stream.impl&%0.spec_shr.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.impl&%0.spec_shr.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ NAT $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! rhs!) (vstd!seq.Seq.subrange.? $ (UINT 8) self! rhs! (I (Sub (vstd!seq.Seq.len.? $ (UINT 8) self!) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ NAT $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! rhs!))))))
(set-info :comment ";; Function-Axioms builtin::Ghost::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%4.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%4.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? (GHOST T&.) T& self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? (GHOST T&.) T& self!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%5.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%5.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? (TRACKED T&.) T& self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? (TRACKED T&.) T& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%8::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%8.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%8.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 16) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%10::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%10.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%10.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 8) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%11::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%11.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%11.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ BOOL self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%12::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%12.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%12.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ CHAR self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ CHAR self!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%3::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%9 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%5::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%9 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ CHAR $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ TYPE%tuple%0.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. (GHOST T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. (TRACKED T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. (GHOST T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. (TRACKED T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.ops.VSpecNot. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.ops.VSpecNot. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.ops.VSpecNot. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.ops.VSpecNot. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.ops.VSpecNot. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.ops.VSpecNot. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.security.sectype.IsFullSecret. T&. T&) (tr_bound%verismo!tspec.security.sectype.IsFullSecretToAll. T&. T&)) :pattern ((tr_bound%verismo!tspec.security.sectype.IsFullSecretToAll. T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.security.sectype.SecMemType. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M&) :pattern ((tr_bound%verismo!tspec.security.sectype.SecMemType. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T1&. T1& T2&. T2&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T1&. T1& T2&. T2&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Function-Specs verismo::tspec::setlib::lemma_setop_len")
(declare-fun req%verismo!tspec.setlib.lemma_setop_len. (Dcr Type Dcr Type Dcr Type Poly Poly %%Function%%) Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (s1! Poly) (s2! Poly) (op_fn! %%Function%%)) (! (= (req%verismo!tspec.setlib.lemma_setop_len. T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!) (and (=> %%global_location_label%%70 (vstd!set.impl&%0.finite.? T1&. T1& s1!)) (=> %%global_location_label%%71 (vstd!set.impl&%0.finite.? T2&. T2& s2!)))) :pattern ((req%verismo!tspec.setlib.lemma_setop_len. T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!)))))
(declare-fun ens%verismo!tspec.setlib.lemma_setop_len. (Dcr Type Dcr Type Dcr Type Poly Poly %%Function%% Poly) Bool)
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (s1! Poly) (s2! Poly) (op_fn! %%Function%%) (ret! Poly)) (! (= (ens%verismo!tspec.setlib.lemma_setop_len. T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn! ret!) (and (has_type ret! (TYPE%vstd!set.Set. T3&. T3&)) (ext_eq true (TYPE%vstd!set.Set. T3&. T3&) ret! (vstd!set.impl&%0.new.? T3&. T3& $ (TYPE%fun%1. T3&. T3& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%1 T1&. T1& s1! T2&. T2& s2! T1& T2& T1&. T1& s1! T2&. T2& s2! (%Poly%fun%2. (Poly%fun%2. op_fn!))))))) (= (= (vstd!set.impl&%0.len.? T3&. T3& ret!) 0) (or (= (vstd!set.impl&%0.len.? T1&. T1& s1!) 0) (= (vstd!set.impl&%0.len.? T2&. T2& s2!) 0))) (<= (vstd!set.impl&%0.len.? T3&. T3& ret!) (nClip (Mul (vstd!set.impl&%0.len.? T1&. T1& s1!) (vstd!set.impl&%0.len.? T2&. T2& s2!)))) (vstd!set.impl&%0.finite.? T3&. T3& ret!))) :pattern ((ens%verismo!tspec.setlib.lemma_setop_len. T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn! ret!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SpecSecType::proof_bop_new")
(declare-fun req%verismo!tspec.security.sectype.impl&%16.proof_bop_new. (Dcr Type Dcr Type Dcr Type Dcr Type verismo!tspec.security.sectype.SpecSecType. verismo!tspec.security.sectype.SpecSecType. %%Function%%) Bool)
(declare-const %%global_location_label%%72 Bool)
(declare-const %%global_location_label%%73 Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (Rhs&. Dcr) (Rhs& Type) (T2&. Dcr) (T2& Type) (self! verismo!tspec.security.sectype.SpecSecType.) (rhs! verismo!tspec.security.sectype.SpecSecType.) (op! %%Function%%)) (! (= (req%verismo!tspec.security.sectype.impl&%16.proof_bop_new. T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!) (and (=> %%global_location_label%%72 (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (=> %%global_location_label%%73 (verismo!tspec.security.sectype.impl&%16.wf_value.? Rhs&. Rhs& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%16.proof_bop_new. T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%16.proof_bop_new. (Dcr Type Dcr Type Dcr Type Dcr Type verismo!tspec.security.sectype.SpecSecType. verismo!tspec.security.sectype.SpecSecType. %%Function%% verismo!tspec.security.sectype.SpecSecType.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (Rhs&. Dcr) (Rhs& Type) (T2&. Dcr) (T2& Type) (self! verismo!tspec.security.sectype.SpecSecType.) (rhs! verismo!tspec.security.sectype.SpecSecType.) (op! %%Function%%) (ret! verismo!tspec.security.sectype.SpecSecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%16.proof_bop_new. T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. ret!) (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&)) (= ret! (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& (Poly%verismo!tspec.security.sectype.SpecSecType. self!) (Poly%verismo!tspec.security.sectype.SpecSecType. rhs!) (Poly%fun%2. op!))) (verismo!tspec.security.sectype.impl&%16.wf_value.? T2&. T2& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. ret!)) (=> (and (verismo!tspec.security.sectype.impl&%16._is_constant.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (verismo!tspec.security.sectype.impl&%16._is_constant.? Rhs&. Rhs& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. rhs!))) (verismo!tspec.security.sectype.impl&%16._is_constant.? T2&. T2& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%16.proof_bop_new. T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SpecSecType::proof_bop_new")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:310:5: 314:34 (#0)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SpecSecType::proof_uop_valset")
(declare-fun req%verismo!tspec.security.sectype.impl&%16.proof_uop_valset. (Dcr Type Dcr Type Dcr Type verismo!tspec.security.sectype.SpecSecType. %%Function%%) Bool)
(declare-const %%global_location_label%%74 Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (T2&. Dcr) (T2& Type) (self! verismo!tspec.security.sectype.SpecSecType.) (op! %%Function%%)) (! (= (req%verismo!tspec.security.sectype.impl&%16.proof_uop_valset. T&. T& M&. M& T2&. T2& self! op!) (=> %%global_location_label%%74 (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%16.proof_uop_valset. T&. T& M&. M& T2&. T2& self! op!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%16.proof_uop_valset. (Dcr Type Dcr Type Dcr Type verismo!tspec.security.sectype.SpecSecType. %%Function%% verismo!tspec.security.sectype.SpecSecType.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (T2&. Dcr) (T2& Type) (self! verismo!tspec.security.sectype.SpecSecType.) (op! %%Function%%) (ret! verismo!tspec.security.sectype.SpecSecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%16.proof_uop_valset. T&. T& M&. M& T2&. T2& self! op! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. ret!) (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&)) (= ret! (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& T&. T& T2&. T2& (Poly%verismo!tspec.security.sectype.SpecSecType. self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& (vstd!pervasive.arbitrary.? T&. T&))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T&. T& T&. T& T2&. T2& (Poly%fun%1. op!))))) (verismo!tspec.security.sectype.impl&%16.wf_value.? T2&. T2& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. ret!)) (=> (verismo!tspec.security.sectype.impl&%16._is_constant.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (verismo!tspec.security.sectype.impl&%16._is_constant.? T2&. T2& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%16.proof_uop_valset. T&. T& M&. M& T2&. T2& self! op! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SpecSecType::proof_uop_valset")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:348:5: 348:94 (#0)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_not")
(declare-fun ens%verismo!tspec.security.sectype.impl&%179._not. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%179._not. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%179._not. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_not")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:698:18: 698:53 (#1718)")
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::not")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:687:18: 687:47 (#1718)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.security.sectype.VNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.security.sectype.VNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_not")
(declare-fun ens%verismo!tspec.security.sectype.impl&%253._not. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%253._not. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%253._not. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_not")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:698:18: 698:53 (#1745)")
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::not")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:687:18: 687:47 (#1745)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.security.sectype.VNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.security.sectype.VNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_not")
(declare-fun ens%verismo!tspec.security.sectype.impl&%327._not. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%327._not. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%327._not. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_not")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:698:18: 698:53 (#1772)")
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::not")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:687:18: 687:47 (#1772)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.security.sectype.VNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.security.sectype.VNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_not")
(declare-fun ens%verismo!tspec.security.sectype.impl&%401._not. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%401._not. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%401._not. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_not")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:698:18: 698:53 (#1799)")
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::not")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:687:18: 687:47 (#1799)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.security.sectype.VNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.security.sectype.VNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_not")
(declare-fun ens%verismo!tspec.security.sectype.impl&%475._not. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%475._not. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%475._not. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_not")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:698:18: 698:53 (#1826)")
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::not")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:687:18: 687:47 (#1826)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.security.sectype.VNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.security.sectype.VNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ BOOL M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ BOOL M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&))))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_not")
(declare-fun ens%verismo!tspec.security.sectype.impl&%479._not. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%479._not. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.ops.VSpecNot.spec_not.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ BOOL M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%479._not. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_not")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:698:18: 698:53 (#1835)")
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::not")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:687:18: 687:47 (#1835)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.security.sectype.VNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&)) :pattern ((tr_bound%verismo!tspec.security.sectype.VNot. $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitOr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitAnd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecBitXor. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShl. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%830::not")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:1066:5: 1066:25 (#0)")
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.security.sectype.VNot. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecAdd. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. T1&. T1& $ INT T1&. T1&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& $ INT T1&. T1&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& T1&. T1& $ INT)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& T1&. T1& $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanDiv. T1&. T1& $ INT T1&. T1&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecEuclideanMod. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEuclideanMod. T1&. T1& $ INT T1&. T1&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecMul. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. T1&. T1& $ INT T1&. T1&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. (GHOST T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. (TRACKED T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%core!option.Option. T&. T&)) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.ops.VSpecShr. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ NAT $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. (GHOST T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. (TRACKED T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.entities.VMPL.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (tr_bound%verismo!primitives_e.sectype.FromSecSeq. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)) :pattern ((tr_bound%verismo!primitives_e.sectype.FromSecSeq. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%77.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%75 Bool)
(declare-const %%global_location_label%%76 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%77.into. M&. M& self!) (and (=> %%global_location_label%%75 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%76 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%77.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%77.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%77.into. M&. M& self! ret!) (and (uInv SZ ret!) (= ret! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (= ret! (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%77.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:721:13: 721:15 (#1667)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_div")
(declare-fun req%verismo!tspec.security.sectype.impl&%437._div. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%77 Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%437._div. M&. M& self! other!) (and (=> %%global_location_label%%77 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%78 (= (uClip SZ (uClip SZ (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (uClip SZ (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> %%global_location_label%%79 (not (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0))))) :pattern ((req%verismo!tspec.security.sectype.impl&%437._div. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%437._div. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%437._div. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT SZ) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip SZ (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%437._div. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_div")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1817)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::div")
(declare-fun req%verismo!tspec.security.sectype.impl&%438.div. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%438.div. M&. M& self! other!) (and (=> %%global_location_label%%80 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%81 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%82 (= (uClip SZ (uClip SZ (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (uClip SZ (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> %%global_location_label%%83 (not (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0))))) :pattern ((req%verismo!tspec.security.sectype.impl&%438.div. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%438.div. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%438.div. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT SZ) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip SZ (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%438.div. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::div")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1817)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_mul")
(declare-fun req%verismo!tspec.security.sectype.impl&%432._mul. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(declare-const %%global_location_label%%86 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%432._mul. M&. M& self! other!) (and (=> %%global_location_label%%84 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%85 (= (uClip SZ (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%86 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%432._mul. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%432._mul. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%432._mul. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%432._mul. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_mul")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1817)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::mul")
(declare-fun req%verismo!tspec.security.sectype.impl&%433.mul. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%87 Bool)
(declare-const %%global_location_label%%88 Bool)
(declare-const %%global_location_label%%89 Bool)
(declare-const %%global_location_label%%90 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%433.mul. M&. M& self! other!) (and (=> %%global_location_label%%87 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%88 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%89 (= (uClip SZ (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%90 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%433.mul. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%433.mul. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%433.mul. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%433.mul. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::mul")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1817)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::constant")
(declare-fun ens%verismo!tspec.security.sectype.impl&%17.constant. (Dcr Type Dcr Type Poly verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%17.constant. T&. T& M&. M& val! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))) (= ret! (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%17.constant. T&. T& M&. M& val! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::constant")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:393:5: 393:48 (#0)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::mul")
(declare-fun req%verismo!tspec.security.sectype.impl&%436.mul. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%91 Bool)
(declare-const %%global_location_label%%92 Bool)
(declare-const %%global_location_label%%93 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%436.mul. M&. M& self! other!) (and (=> %%global_location_label%%91 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%92 (= (uClip SZ (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) other!)) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) other!))) (=> %%global_location_label%%93 (>= other! 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%436.mul. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%436.mul. (Dcr Type verismo!tspec.security.sectype.SecType. Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%436.mul. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (I other!))))) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%436.mul. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::mul")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:636:22: 636:66 (#1817)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%23.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%94 Bool)
(declare-const %%global_location_label%%95 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%23.into. M&. M& self!) (and (=> %%global_location_label%%94 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%95 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%23.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%23.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%23.into. M&. M& self! ret!) (and (uInv SZ ret!) (= ret! (uClip SZ (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%23.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1643)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%80::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%80.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%80.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I (uClip 64 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%80.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%80::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1667)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_div")
(declare-fun req%verismo!tspec.security.sectype.impl&%363._div. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%96 Bool)
(declare-const %%global_location_label%%97 Bool)
(declare-const %%global_location_label%%98 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%363._div. M&. M& self! other!) (and (=> %%global_location_label%%96 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%97 (= (uClip 64 (uClip 64 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (uClip 64 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> %%global_location_label%%98 (not (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0))))) :pattern ((req%verismo!tspec.security.sectype.impl&%363._div. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%363._div. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%363._div. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 64 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%363._div. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_div")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1790)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::div")
(declare-fun req%verismo!tspec.security.sectype.impl&%364.div. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%99 Bool)
(declare-const %%global_location_label%%100 Bool)
(declare-const %%global_location_label%%101 Bool)
(declare-const %%global_location_label%%102 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%364.div. M&. M& self! other!) (and (=> %%global_location_label%%99 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%100 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%101 (= (uClip 64 (uClip 64 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (uClip 64 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> %%global_location_label%%102 (not (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0))))) :pattern ((req%verismo!tspec.security.sectype.impl&%364.div. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%364.div. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%364.div. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 64 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%364.div. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::div")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1790)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_mul")
(declare-fun req%verismo!tspec.security.sectype.impl&%358._mul. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%103 Bool)
(declare-const %%global_location_label%%104 Bool)
(declare-const %%global_location_label%%105 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%358._mul. M&. M& self! other!) (and (=> %%global_location_label%%103 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%104 (= (uClip 64 (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%105 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%358._mul. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%358._mul. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%358._mul. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%358._mul. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_mul")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1790)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::mul")
(declare-fun req%verismo!tspec.security.sectype.impl&%359.mul. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%106 Bool)
(declare-const %%global_location_label%%107 Bool)
(declare-const %%global_location_label%%108 Bool)
(declare-const %%global_location_label%%109 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%359.mul. M&. M& self! other!) (and (=> %%global_location_label%%106 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%107 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%108 (= (uClip 64 (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%109 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%359.mul. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%359.mul. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%359.mul. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%359.mul. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::mul")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1790)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::mul")
(declare-fun req%verismo!tspec.security.sectype.impl&%362.mul. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%110 Bool)
(declare-const %%global_location_label%%111 Bool)
(declare-const %%global_location_label%%112 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%362.mul. M&. M& self! other!) (and (=> %%global_location_label%%110 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%111 (= (uClip 64 (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) other!)) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) other!))) (=> %%global_location_label%%112 (>= other! 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%362.mul. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%362.mul. (Dcr Type verismo!tspec.security.sectype.SecType. Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%362.mul. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I other!))))) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%362.mul. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::mul")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:636:22: 636:66 (#1790)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SpecSecType::proof_constant")
(declare-fun req%verismo!tspec.security.sectype.impl&%13.proof_constant. (Dcr Type Dcr Type verismo!tspec.security.sectype.SpecSecType.) Bool)
(declare-const %%global_location_label%%113 Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SpecSecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%13.proof_constant. T&. T& M&. M& self!) (=> %%global_location_label%%113 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) (Poly%verismo!tspec.security.sectype.SpecSecType. self!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%13.proof_constant. T&. T& M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%13.proof_constant. (Dcr Type Dcr Type verismo!tspec.security.sectype.SpecSecType.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SpecSecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%13.proof_constant. T&. T& M&. M& self!) (= self! (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (Poly%verismo!tspec.security.sectype.SpecSecType. self!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%13.proof_constant. T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SpecSecType::proof_constant")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:214:5: 214:39 (#0)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::lt")
(declare-fun req%verismo!tspec.security.sectype.impl&%407.lt. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%114 Bool)
(declare-const %%global_location_label%%115 Bool)
(declare-const %%global_location_label%%116 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%407.lt. M&. M& self! rhs!) (and (=> %%global_location_label%%114 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT SZ) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))) (=> %%global_location_label%%115 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%116 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%407.lt. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%407.lt. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%407.lt. M&. M& self! rhs! ret!) (= (< (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%407.lt. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::lt")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:494:22: 494:76 (#1808)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::eq")
(declare-fun req%verismo!tspec.security.sectype.impl&%419.eq. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%117 Bool)
(declare-const %%global_location_label%%118 Bool)
(declare-const %%global_location_label%%119 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%419.eq. M&. M& self! rhs!) (and (=> %%global_location_label%%117 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT SZ) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))) (=> %%global_location_label%%118 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%119 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%419.eq. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%419.eq. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%419.eq. M&. M& self! rhs! ret!) (= (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%419.eq. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::eq")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:494:22: 494:76 (#1808)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_sub")
(declare-fun req%verismo!tspec.security.sectype.impl&%427._sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%120 Bool)
(declare-const %%global_location_label%%121 Bool)
(declare-const %%global_location_label%%122 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%427._sub. M&. M& self! other!) (and (=> %%global_location_label%%120 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%121 (= (uClip SZ (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%122 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%427._sub. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%427._sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%427._sub. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%427._sub. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_sub")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1817)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::sub")
(declare-fun req%verismo!tspec.security.sectype.impl&%428.sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%123 Bool)
(declare-const %%global_location_label%%124 Bool)
(declare-const %%global_location_label%%125 Bool)
(declare-const %%global_location_label%%126 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%428.sub. M&. M& self! other!) (and (=> %%global_location_label%%123 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%124 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%125 (= (uClip SZ (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%126 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%428.sub. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%428.sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%428.sub. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%428.sub. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::sub")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1817)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_add")
(declare-fun req%verismo!tspec.security.sectype.impl&%422._add. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%127 Bool)
(declare-const %%global_location_label%%128 Bool)
(declare-const %%global_location_label%%129 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%422._add. M&. M& self! other!) (and (=> %%global_location_label%%127 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%128 (= (uClip SZ (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%129 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%422._add. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%422._add. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%422._add. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%422._add. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_add")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1817)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::add")
(declare-fun req%verismo!tspec.security.sectype.impl&%423.add. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%130 Bool)
(declare-const %%global_location_label%%131 Bool)
(declare-const %%global_location_label%%132 Bool)
(declare-const %%global_location_label%%133 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%423.add. M&. M& self! other!) (and (=> %%global_location_label%%130 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%131 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%132 (= (uClip SZ (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%133 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%423.add. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%423.add. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%423.add. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%423.add. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::add")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1817)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_bitand")
(declare-fun req%verismo!tspec.security.sectype.impl&%393._bitand. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%134 Bool)
(declare-const %%global_location_label%%135 Bool)
(declare-const %%global_location_label%%136 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%393._bitand. M&. M& self! other!) (and (=> %%global_location_label%%134 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%135 (= (uClip 64 (uClip 64 (uintand 64 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (uClip 64 (uintand 64 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) (=> %%global_location_label%%136 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%393._bitand. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%393._bitand. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%393._bitand. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 64 (uintand 64 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%393._bitand. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_bitand")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1790)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::bitand")
(declare-fun req%verismo!tspec.security.sectype.impl&%394.bitand. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%137 Bool)
(declare-const %%global_location_label%%138 Bool)
(declare-const %%global_location_label%%139 Bool)
(declare-const %%global_location_label%%140 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%394.bitand. M&. M& self! other!) (and (=> %%global_location_label%%137 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%138 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%139 (= (uClip 64 (uClip 64 (uintand 64 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (uClip 64 (uintand 64 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) (=> %%global_location_label%%140 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%394.bitand. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%394.bitand. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%394.bitand. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 64) M&. M& (verismo!tspec.ops.VSpecBitAnd.spec_bitand.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 64 (uintand 64 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%394.bitand. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::bitand")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1790)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_sub")
(declare-fun req%verismo!tspec.security.sectype.impl&%353._sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%141 Bool)
(declare-const %%global_location_label%%142 Bool)
(declare-const %%global_location_label%%143 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%353._sub. M&. M& self! other!) (and (=> %%global_location_label%%141 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%142 (= (uClip 64 (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%143 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%353._sub. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%353._sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%353._sub. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%353._sub. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_sub")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1790)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::sub")
(declare-fun req%verismo!tspec.security.sectype.impl&%354.sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%144 Bool)
(declare-const %%global_location_label%%145 Bool)
(declare-const %%global_location_label%%146 Bool)
(declare-const %%global_location_label%%147 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%354.sub. M&. M& self! other!) (and (=> %%global_location_label%%144 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%145 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%146 (= (uClip 64 (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%147 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%354.sub. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%354.sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%354.sub. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%354.sub. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::sub")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1790)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::le")
(declare-fun req%verismo!tspec.security.sectype.impl&%411.le. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%148 Bool)
(declare-const %%global_location_label%%149 Bool)
(declare-const %%global_location_label%%150 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%411.le. M&. M& self! rhs!) (and (=> %%global_location_label%%148 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT SZ) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))) (=> %%global_location_label%%149 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%150 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%411.le. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%411.le. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%411.le. M&. M& self! rhs! ret!) (= (<= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%411.le. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::le")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:494:22: 494:76 (#1808)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%34::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%34.into. (Dcr Type Int) Bool)
(declare-const %%global_location_label%%151 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%34.into. M&. M& self!) (=> %%global_location_label%%151 (%B (B true)))) :pattern ((req%verismo!tspec.security.sectype.impl&%34.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%34.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%34.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%34.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%34::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:781:9: 781:50 (#1643)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%27::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%27.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%27.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (I (uClip 32 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%27.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%27::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1643)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%48::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%48.into. (Dcr Type Int) Bool)
(declare-const %%global_location_label%%152 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%48.into. M&. M& self!) (=> %%global_location_label%%152 (%B (B true)))) :pattern ((req%verismo!tspec.security.sectype.impl&%48.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%48.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%48.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (I self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%48.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%48::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:781:9: 781:50 (#1649)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%76::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%76.into. (Dcr Type Int) Bool)
(declare-const %%global_location_label%%153 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%76.into. M&. M& self!) (=> %%global_location_label%%153 (%B (B true)))) :pattern ((req%verismo!tspec.security.sectype.impl&%76.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%76.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%76.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%76.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%76::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:781:9: 781:50 (#1661)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%21.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%154 Bool)
(declare-const %%global_location_label%%155 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%21.into. M&. M& self!) (and (=> %%global_location_label%%154 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%155 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%21.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%21.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%21.into. M&. M& self! ret!) (and (uInv 64 ret!) (= ret! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (= ret! (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%21.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:721:13: 721:15 (#1643)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%32.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%156 Bool)
(declare-const %%global_location_label%%157 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%32.into. M&. M& self!) (and (=> %%global_location_label%%156 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%157 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%32.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%32.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%32.into. M&. M& self! ret!) (and (uInv 8 ret!) (= ret! (uClip 8 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%32.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1643)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%83::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%83.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%83.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (I (uClip 32 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%83.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%83::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1667)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%65.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%158 Bool)
(declare-const %%global_location_label%%159 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%65.into. M&. M& self!) (and (=> %%global_location_label%%158 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%159 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%65.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%65.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%65.into. M&. M& self! ret!) (and (uInv SZ ret!) (= ret! (uClip SZ (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%65.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1661)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%89::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%89.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%89.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I (uClip 8 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%89.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%89::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1667)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%33::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%33.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%33.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I (uClip 8 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%33.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%33::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1643)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%86::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%86.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%86.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (I (uClip 16 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%86.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%86::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1667)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%62::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%62.into. (Dcr Type Int) Bool)
(declare-const %%global_location_label%%160 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%62.into. M&. M& self!) (=> %%global_location_label%%160 (%B (B true)))) :pattern ((req%verismo!tspec.security.sectype.impl&%62.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%62.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%62.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (I self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%62.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%62::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:781:9: 781:50 (#1655)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_sub")
(declare-fun req%verismo!tspec.security.sectype.impl&%279._sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%161 Bool)
(declare-const %%global_location_label%%162 Bool)
(declare-const %%global_location_label%%163 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%279._sub. M&. M& self! other!) (and (=> %%global_location_label%%161 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%162 (= (uClip 32 (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%163 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%279._sub. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%279._sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%279._sub. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%279._sub. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_sub")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1763)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::sub")
(declare-fun req%verismo!tspec.security.sectype.impl&%280.sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%164 Bool)
(declare-const %%global_location_label%%165 Bool)
(declare-const %%global_location_label%%166 Bool)
(declare-const %%global_location_label%%167 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%280.sub. M&. M& self! other!) (and (=> %%global_location_label%%164 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%165 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%166 (= (uClip 32 (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%167 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%280.sub. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%280.sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%280.sub. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%280.sub. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::sub")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1763)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%30::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%30.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%30.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (I (uClip 16 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%30.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%30::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1643)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%63.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%168 Bool)
(declare-const %%global_location_label%%169 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%63.into. M&. M& self!) (and (=> %%global_location_label%%168 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%169 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%63.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%63.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%63.into. M&. M& self! ret!) (and (uInv 8 ret!) (= ret! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (= ret! (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%63.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:721:13: 721:15 (#1661)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%425::add")
(declare-fun req%verismo!tspec.security.sectype.impl&%425.add. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%170 Bool)
(declare-const %%global_location_label%%171 Bool)
(declare-const %%global_location_label%%172 Bool)
(declare-const %%global_location_label%%173 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%425.add. M&. M& self! other!) (and (=> %%global_location_label%%170 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%171 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (=> %%global_location_label%%172 (= (uClip SZ (Add self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Add self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%173 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%425.add. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%425.add. (Dcr Type Int verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%425.add. M&. M& self! other! ret!) (and (uInv SZ ret!) (= ret! (Add self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%425.add. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%425::add")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:620:22: 620:78 (#1817)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::le")
(declare-fun req%verismo!tspec.security.sectype.impl&%189.le. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%174 Bool)
(declare-const %%global_location_label%%175 Bool)
(declare-const %%global_location_label%%176 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%189.le. M&. M& self! rhs!) (and (=> %%global_location_label%%174 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 16) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))) (=> %%global_location_label%%175 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%176 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%189.le. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%189.le. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%189.le. M&. M& self! rhs! ret!) (= (<= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%189.le. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::le")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:494:22: 494:76 (#1727)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::eq")
(declare-fun req%verismo!tspec.security.sectype.impl&%345.eq. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%177 Bool)
(declare-const %%global_location_label%%178 Bool)
(declare-const %%global_location_label%%179 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%345.eq. M&. M& self! rhs!) (and (=> %%global_location_label%%177 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 64) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))) (=> %%global_location_label%%178 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%179 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%345.eq. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%345.eq. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%345.eq. M&. M& self! rhs! ret!) (= (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%345.eq. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::eq")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:494:22: 494:76 (#1781)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::eq")
(declare-fun req%verismo!tspec.security.sectype.impl&%346.eq. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%180 Bool)
(declare-const %%global_location_label%%181 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%346.eq. M&. M& self! rhs!) (and (=> %%global_location_label%%180 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 64) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I rhs!)))))))) (=> %%global_location_label%%181 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%346.eq. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%346.eq. (Dcr Type verismo!tspec.security.sectype.SecType. Int Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! Int) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%346.eq. M&. M& self! rhs! ret!) (= (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I rhs!))))))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%346.eq. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::eq")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:508:22: 508:64 (#1781)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::declassify")
(declare-fun req%verismo!tspec.security.sectype.impl&%9.declassify. (Dcr Type Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%182 Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%9.declassify. T&. T& M&. M& pre%self!) (=> %%global_location_label%%182 (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)))) :pattern ((req%verismo!tspec.security.sectype.impl&%9.declassify. T&. T& M&. M& pre%self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%9.declassify. (Dcr Type Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (self! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%9.declassify. T&. T& M&. M& pre%self! self!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. self!) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (is-verismo!tspec.security.sectype.DataLabel./Symbol_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (I 1)))) (is-verismo!tspec.security.sectype.DataLabel./Symbol_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (I 2)))) (is-verismo!tspec.security.sectype.DataLabel./Symbol_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (I 3)))) (is-verismo!tspec.security.sectype.DataLabel./Symbol_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (I 4)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (verismo!tspec.security.sectype.impl&%1.spec_set_labels.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%1.spec_set_valsets.? T&. T& M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%9.declassify. T&. T& M&. M& pre%self! self!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::declassify")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:145:5: 147:6 (#0)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::proof_constant_wf")
(declare-fun ens%verismo!tspec.security.sectype.impl&%14.proof_constant_wf. (Dcr Type Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (= (ens%verismo!tspec.security.sectype.impl&%14.proof_constant_wf. T&. T& M&. M& val!) (verismo!tspec.security.sectype.impl&%20.wf.? T&. T& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& $ TYPE%tuple%0. val!)))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%14.proof_constant_wf. T&. T& M&. M& val!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::proof_constant_wf")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:246:5: 246:43 (#0)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::new")
(declare-fun ens%verismo!tspec.security.sectype.impl&%17.new. (Dcr Type Dcr Type Poly verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%17.new. T&. T& M&. M& val! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%17.new. T&. T& M&. M& val! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::new")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:403:5: 403:43 (#0)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%24::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%24.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%24.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (I (uClip SZ self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%24.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%24::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1643)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%26.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%183 Bool)
(declare-const %%global_location_label%%184 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%26.into. M&. M& self!) (and (=> %%global_location_label%%183 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%184 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%26.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%26.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%26.into. M&. M& self! ret!) (and (uInv 32 ret!) (= ret! (uClip 32 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%26.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1643)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%29.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%185 Bool)
(declare-const %%global_location_label%%186 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%29.into. M&. M& self!) (and (=> %%global_location_label%%185 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%186 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%29.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%29.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%29.into. M&. M& self! ret!) (and (uInv 16 ret!) (= ret! (uClip 16 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%29.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1643)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%35.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%187 Bool)
(declare-const %%global_location_label%%188 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%35.into. M&. M& self!) (and (=> %%global_location_label%%187 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%188 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%35.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%35.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%35.into. M&. M& self! ret!) (and (uInv 32 ret!) (= ret! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (= ret! (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%35.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:721:13: 721:15 (#1649)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%37.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%189 Bool)
(declare-const %%global_location_label%%190 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%37.into. M&. M& self!) (and (=> %%global_location_label%%189 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%190 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%37.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%37.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%37.into. M&. M& self! ret!) (and (uInv SZ ret!) (= ret! (uClip SZ (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%37.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1649)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%38::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%38.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%38.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (I (uClip SZ self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%38.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%38::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1649)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%40.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%191 Bool)
(declare-const %%global_location_label%%192 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%40.into. M&. M& self!) (and (=> %%global_location_label%%191 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%192 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%40.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%40.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%40.into. M&. M& self! ret!) (and (uInv 64 ret!) (= ret! (uClip 64 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%40.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1649)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%41::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%41.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%41.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I (uClip 64 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%41.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%41::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1649)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%43.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%193 Bool)
(declare-const %%global_location_label%%194 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%43.into. M&. M& self!) (and (=> %%global_location_label%%193 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%194 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%43.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%43.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%43.into. M&. M& self! ret!) (and (uInv 16 ret!) (= ret! (uClip 16 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%43.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1649)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%44::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%44.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%44.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (I (uClip 16 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%44.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%44::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1649)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%46.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%195 Bool)
(declare-const %%global_location_label%%196 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%46.into. M&. M& self!) (and (=> %%global_location_label%%195 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%196 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%46.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%46.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%46.into. M&. M& self! ret!) (and (uInv 8 ret!) (= ret! (uClip 8 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%46.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1649)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%47::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%47.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%47.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I (uClip 8 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%47.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%47::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1649)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%49.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%197 Bool)
(declare-const %%global_location_label%%198 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%49.into. M&. M& self!) (and (=> %%global_location_label%%197 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%198 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%49.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%49.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%49.into. M&. M& self! ret!) (and (uInv 16 ret!) (= ret! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (= ret! (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%49.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:721:13: 721:15 (#1655)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%51.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%199 Bool)
(declare-const %%global_location_label%%200 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%51.into. M&. M& self!) (and (=> %%global_location_label%%199 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%200 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%51.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%51.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%51.into. M&. M& self! ret!) (and (uInv SZ ret!) (= ret! (uClip SZ (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%51.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1655)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%52::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%52.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%52.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (I (uClip SZ self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%52.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%52::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1655)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%54.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%201 Bool)
(declare-const %%global_location_label%%202 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%54.into. M&. M& self!) (and (=> %%global_location_label%%201 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%202 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%54.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%54.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%54.into. M&. M& self! ret!) (and (uInv 64 ret!) (= ret! (uClip 64 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%54.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1655)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%55::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%55.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%55.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I (uClip 64 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%55.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%55::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1655)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%57.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%203 Bool)
(declare-const %%global_location_label%%204 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%57.into. M&. M& self!) (and (=> %%global_location_label%%203 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%204 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%57.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%57.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%57.into. M&. M& self! ret!) (and (uInv 32 ret!) (= ret! (uClip 32 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%57.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1655)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%58::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%58.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%58.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (I (uClip 32 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%58.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%58::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1655)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%60.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%205 Bool)
(declare-const %%global_location_label%%206 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%60.into. M&. M& self!) (and (=> %%global_location_label%%205 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%206 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%60.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%60.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%60.into. M&. M& self! ret!) (and (uInv 8 ret!) (= ret! (uClip 8 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%60.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1655)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%61::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%61.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%61.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I (uClip 8 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%61.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%61::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1655)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%66::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%66.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%66.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (I (uClip SZ self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%66.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%66::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1661)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%68.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%207 Bool)
(declare-const %%global_location_label%%208 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%68.into. M&. M& self!) (and (=> %%global_location_label%%207 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%208 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%68.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%68.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%68.into. M&. M& self! ret!) (and (uInv 64 ret!) (= ret! (uClip 64 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%68.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1661)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%69::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%69.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%69.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I (uClip 64 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%69.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%69::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1661)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%71.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%209 Bool)
(declare-const %%global_location_label%%210 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%71.into. M&. M& self!) (and (=> %%global_location_label%%209 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%210 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%71.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%71.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%71.into. M&. M& self! ret!) (and (uInv 32 ret!) (= ret! (uClip 32 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%71.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1661)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%72::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%72.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%72.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (I (uClip 32 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%72.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%72::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1661)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%74.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%211 Bool)
(declare-const %%global_location_label%%212 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%74.into. M&. M& self!) (and (=> %%global_location_label%%211 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%212 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%74.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%74.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%74.into. M&. M& self! ret!) (and (uInv 16 ret!) (= ret! (uClip 16 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%74.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1661)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%75::into")
(declare-fun ens%verismo!tspec.security.sectype.impl&%75.into. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%75.into. M&. M& self! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (= ret! (%Poly%verismo!tspec.security.sectype.SecType. (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) (I self!)))))))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (I (uClip 16 self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%75.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%75::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:765:13: 765:52 (#1661)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%79.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%213 Bool)
(declare-const %%global_location_label%%214 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%79.into. M&. M& self!) (and (=> %%global_location_label%%213 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%214 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%79.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%79.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%79.into. M&. M& self! ret!) (and (uInv 64 ret!) (= ret! (uClip 64 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%79.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1667)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%82.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%215 Bool)
(declare-const %%global_location_label%%216 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%82.into. M&. M& self!) (and (=> %%global_location_label%%215 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%216 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%82.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%82.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%82.into. M&. M& self! ret!) (and (uInv 32 ret!) (= ret! (uClip 32 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%82.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1667)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%85.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%217 Bool)
(declare-const %%global_location_label%%218 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%85.into. M&. M& self!) (and (=> %%global_location_label%%217 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%218 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%85.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%85.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%85.into. M&. M& self! ret!) (and (uInv 16 ret!) (= ret! (uClip 16 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%85.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1667)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::into")
(declare-fun req%verismo!tspec.security.sectype.impl&%88.into. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%219 Bool)
(declare-const %%global_location_label%%220 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%88.into. M&. M& self!) (and (=> %%global_location_label%%219 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%220 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))))) :pattern ((req%verismo!tspec.security.sectype.impl&%88.into. M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%88.into. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%88.into. M&. M& self! ret!) (and (uInv 8 ret!) (= ret! (uClip 8 (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%88.into. M&. M& self! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::into")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:753:13: 753:15 (#1667)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::default")
(declare-fun ens%verismo!tspec.security.sectype.impl&%91.default. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%91.default. M&. M& ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I 0)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%91.default. M&. M& ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::default")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:804:9: 804:35 (#1673)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::default")
(declare-fun ens%verismo!tspec.security.sectype.impl&%94.default. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%94.default. M&. M& ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (I 0)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%94.default. M&. M& ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::default")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:804:9: 804:35 (#1673)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::default")
(declare-fun ens%verismo!tspec.security.sectype.impl&%97.default. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%97.default. M&. M& ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (I 0)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%97.default. M&. M& ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::default")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:804:9: 804:35 (#1673)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::default")
(declare-fun ens%verismo!tspec.security.sectype.impl&%100.default. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%100.default. M&. M& ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I 0)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%100.default. M&. M& ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::default")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:804:9: 804:35 (#1673)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::default")
(declare-fun ens%verismo!tspec.security.sectype.impl&%103.default. (Dcr Type verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%103.default. M&. M& ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (I 0)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%103.default. M&. M& ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::default")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:804:9: 804:35 (#1673)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SpecSecType::lemma_const_is_secure_gt")
(declare-fun ens%verismo!tspec.security.sectype.impl&%106.lemma_const_is_secure_gt. (Dcr Type verismo!tspec.security.sectype.SpecSecType. verismo!tspec.security.sectype.SpecSecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SpecSecType.) (other! verismo!tspec.security.sectype.SpecSecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%106.lemma_const_is_secure_gt. M&. M& self! other!) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SpecSecType. other!)))) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. self!) (Poly%verismo!tspec.security.sectype.SpecSecType. other!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%106.lemma_const_is_secure_gt. M&. M& self! other!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SpecSecType::lemma_const_is_secure_gt")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:486:17: 486:98 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::gt")
(declare-fun req%verismo!tspec.security.sectype.impl&%107.gt. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%221 Bool)
(declare-const %%global_location_label%%222 Bool)
(declare-const %%global_location_label%%223 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%107.gt. M&. M& self! rhs!) (and (=> %%global_location_label%%221 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))) (=> %%global_location_label%%222 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%223 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%107.gt. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%107.gt. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%107.gt. M&. M& self! rhs! ret!) (= (> (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%107.gt. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::gt")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:494:22: 494:76 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::gt")
(declare-fun req%verismo!tspec.security.sectype.impl&%108.gt. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%224 Bool)
(declare-const %%global_location_label%%225 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%108.gt. M&. M& self! rhs!) (and (=> %%global_location_label%%224 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I rhs!)))))))) (=> %%global_location_label%%225 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%108.gt. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%108.gt. (Dcr Type verismo!tspec.security.sectype.SecType. Int Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! Int) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%108.gt. M&. M& self! rhs! ret!) (= (> (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I rhs!)))))))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%108.gt. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::gt")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:508:22: 508:64 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::sec_gt")
(declare-fun req%verismo!tspec.security.sectype.impl&%109.sec_gt. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%226 Bool)
(declare-const %%global_location_label%%227 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%109.sec_gt. M&. M& self! rhs!) (and (=> %%global_location_label%%226 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%227 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%109.sec_gt. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%109.sec_gt. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%109.sec_gt. M&. M& self! rhs! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ BOOL (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)) (Poly%fun%2. (mk_fun %%lambda%%29)))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ BOOL (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)) (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_gt_u8_u8_bool.? (I 0))))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%109.sec_gt. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::sec_gt")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:521:17: 521:101 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SpecSecType::lemma_const_is_secure_lt")
(declare-fun ens%verismo!tspec.security.sectype.impl&%110.lemma_const_is_secure_lt. (Dcr Type verismo!tspec.security.sectype.SpecSecType. verismo!tspec.security.sectype.SpecSecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SpecSecType.) (other! verismo!tspec.security.sectype.SpecSecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%110.lemma_const_is_secure_lt. M&. M& self! other!) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SpecSecType. other!)))) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. self!) (Poly%verismo!tspec.security.sectype.SpecSecType. other!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%110.lemma_const_is_secure_lt. M&. M& self! other!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SpecSecType::lemma_const_is_secure_lt")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:486:17: 486:98 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::lt")
(declare-fun req%verismo!tspec.security.sectype.impl&%111.lt. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%228 Bool)
(declare-const %%global_location_label%%229 Bool)
(declare-const %%global_location_label%%230 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%111.lt. M&. M& self! rhs!) (and (=> %%global_location_label%%228 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))) (=> %%global_location_label%%229 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%230 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%111.lt. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%111.lt. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%111.lt. M&. M& self! rhs! ret!) (= (< (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%111.lt. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::lt")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:494:22: 494:76 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::lt")
(declare-fun req%verismo!tspec.security.sectype.impl&%112.lt. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%231 Bool)
(declare-const %%global_location_label%%232 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%112.lt. M&. M& self! rhs!) (and (=> %%global_location_label%%231 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I rhs!)))))))) (=> %%global_location_label%%232 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%112.lt. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%112.lt. (Dcr Type verismo!tspec.security.sectype.SecType. Int Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! Int) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%112.lt. M&. M& self! rhs! ret!) (= (< (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I rhs!)))))))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%112.lt. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::lt")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:508:22: 508:64 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::sec_lt")
(declare-fun req%verismo!tspec.security.sectype.impl&%113.sec_lt. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%233 Bool)
(declare-const %%global_location_label%%234 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%113.sec_lt. M&. M& self! rhs!) (and (=> %%global_location_label%%233 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%234 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%113.sec_lt. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%113.sec_lt. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%113.sec_lt. M&. M& self! rhs! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ BOOL (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)) (Poly%fun%2. (mk_fun %%lambda%%28)))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ BOOL (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)) (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_lt_u8_u8_bool.? (I 0))))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%113.sec_lt. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::sec_lt")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:521:17: 521:101 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SpecSecType::lemma_const_is_secure_le")
(declare-fun ens%verismo!tspec.security.sectype.impl&%114.lemma_const_is_secure_le. (Dcr Type verismo!tspec.security.sectype.SpecSecType. verismo!tspec.security.sectype.SpecSecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SpecSecType.) (other! verismo!tspec.security.sectype.SpecSecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%114.lemma_const_is_secure_le. M&. M& self! other!) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SpecSecType. other!)))) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. self!) (Poly%verismo!tspec.security.sectype.SpecSecType. other!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%114.lemma_const_is_secure_le. M&. M& self! other!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SpecSecType::lemma_const_is_secure_le")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:486:17: 486:98 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::le")
(declare-fun req%verismo!tspec.security.sectype.impl&%115.le. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%235 Bool)
(declare-const %%global_location_label%%236 Bool)
(declare-const %%global_location_label%%237 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%115.le. M&. M& self! rhs!) (and (=> %%global_location_label%%235 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))) (=> %%global_location_label%%236 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%237 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%115.le. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%115.le. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%115.le. M&. M& self! rhs! ret!) (= (<= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%115.le. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::le")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:494:22: 494:76 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::le")
(declare-fun req%verismo!tspec.security.sectype.impl&%116.le. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%238 Bool)
(declare-const %%global_location_label%%239 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%116.le. M&. M& self! rhs!) (and (=> %%global_location_label%%238 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I rhs!)))))))) (=> %%global_location_label%%239 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%116.le. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%116.le. (Dcr Type verismo!tspec.security.sectype.SecType. Int Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! Int) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%116.le. M&. M& self! rhs! ret!) (= (<= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I rhs!)))))))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%116.le. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::le")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:508:22: 508:64 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::sec_le")
(declare-fun req%verismo!tspec.security.sectype.impl&%117.sec_le. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%240 Bool)
(declare-const %%global_location_label%%241 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%117.sec_le. M&. M& self! rhs!) (and (=> %%global_location_label%%240 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%241 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%117.sec_le. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%117.sec_le. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%117.sec_le. M&. M& self! rhs! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ BOOL (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)) (Poly%fun%2. (mk_fun %%lambda%%30)))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ BOOL (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)) (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_le_u8_u8_bool.? (I 0))))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%117.sec_le. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::sec_le")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:521:17: 521:101 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SpecSecType::lemma_const_is_secure_ge")
(declare-fun ens%verismo!tspec.security.sectype.impl&%118.lemma_const_is_secure_ge. (Dcr Type verismo!tspec.security.sectype.SpecSecType. verismo!tspec.security.sectype.SpecSecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SpecSecType.) (other! verismo!tspec.security.sectype.SpecSecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%118.lemma_const_is_secure_ge. M&. M& self! other!) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SpecSecType. other!)))) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. self!) (Poly%verismo!tspec.security.sectype.SpecSecType. other!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%118.lemma_const_is_secure_ge. M&. M& self! other!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SpecSecType::lemma_const_is_secure_ge")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:486:17: 486:98 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::ge")
(declare-fun req%verismo!tspec.security.sectype.impl&%119.ge. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%242 Bool)
(declare-const %%global_location_label%%243 Bool)
(declare-const %%global_location_label%%244 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%119.ge. M&. M& self! rhs!) (and (=> %%global_location_label%%242 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))) (=> %%global_location_label%%243 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%244 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%119.ge. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%119.ge. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%119.ge. M&. M& self! rhs! ret!) (= (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%119.ge. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::ge")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:494:22: 494:76 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::ge")
(declare-fun req%verismo!tspec.security.sectype.impl&%120.ge. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%245 Bool)
(declare-const %%global_location_label%%246 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%120.ge. M&. M& self! rhs!) (and (=> %%global_location_label%%245 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I rhs!)))))))) (=> %%global_location_label%%246 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%120.ge. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%120.ge. (Dcr Type verismo!tspec.security.sectype.SecType. Int Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! Int) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%120.ge. M&. M& self! rhs! ret!) (= (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I rhs!)))))))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%120.ge. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::ge")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:508:22: 508:64 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::sec_ge")
(declare-fun req%verismo!tspec.security.sectype.impl&%121.sec_ge. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%247 Bool)
(declare-const %%global_location_label%%248 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%121.sec_ge. M&. M& self! rhs!) (and (=> %%global_location_label%%247 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%248 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%121.sec_ge. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%121.sec_ge. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%121.sec_ge. M&. M& self! rhs! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ BOOL (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)) (Poly%fun%2. (mk_fun %%lambda%%31)))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ BOOL (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)) (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_ge_u8_u8_bool.? (I 0))))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%121.sec_ge. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::sec_ge")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:521:17: 521:101 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SpecSecType::lemma_const_is_secure_eq")
(declare-fun ens%verismo!tspec.security.sectype.impl&%122.lemma_const_is_secure_eq. (Dcr Type verismo!tspec.security.sectype.SpecSecType. verismo!tspec.security.sectype.SpecSecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SpecSecType.) (other! verismo!tspec.security.sectype.SpecSecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%122.lemma_const_is_secure_eq. M&. M& self! other!) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SpecSecType. other!)))) (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. self!) (Poly%verismo!tspec.security.sectype.SpecSecType. other!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%122.lemma_const_is_secure_eq. M&. M& self! other!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SpecSecType::lemma_const_is_secure_eq")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:486:17: 486:98 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::eq")
(declare-fun req%verismo!tspec.security.sectype.impl&%123.eq. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%249 Bool)
(declare-const %%global_location_label%%250 Bool)
(declare-const %%global_location_label%%251 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%123.eq. M&. M& self! rhs!) (and (=> %%global_location_label%%249 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)))) (=> %%global_location_label%%250 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%251 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%123.eq. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%123.eq. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%123.eq. M&. M& self! rhs! ret!) (= (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%123.eq. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::eq")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:494:22: 494:76 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::eq")
(declare-fun req%verismo!tspec.security.sectype.impl&%124.eq. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%252 Bool)
(declare-const %%global_location_label%%253 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%124.eq. M&. M& self! rhs!) (and (=> %%global_location_label%%252 (verismo!tspec.security.sectype.impl&%16.sec_eq.? $ (UINT 8) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I rhs!)))))))) (=> %%global_location_label%%253 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%124.eq. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%124.eq. (Dcr Type verismo!tspec.security.sectype.SecType. Int Bool) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! Int) (ret! Bool)) (! (= (ens%verismo!tspec.security.sectype.impl&%124.eq. M&. M& self! rhs! ret!) (= (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I rhs!))))))))) ret!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%124.eq. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::eq")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:508:22: 508:64 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::sec_eq")
(declare-fun req%verismo!tspec.security.sectype.impl&%125.sec_eq. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%254 Bool)
(declare-const %%global_location_label%%255 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%125.sec_eq. M&. M& self! rhs!) (and (=> %%global_location_label%%254 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%255 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!))))) :pattern ((req%verismo!tspec.security.sectype.impl&%125.sec_eq. M&. M& self! rhs!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%125.sec_eq. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (rhs! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%125.sec_eq. M&. M& self! rhs! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ BOOL (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)) (Poly%fun%2. (mk_fun %%lambda%%32)))) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ BOOL M&. M&) $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ BOOL (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. rhs!)) (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_eq_u8_u8_bool.? (I 0))))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ BOOL M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%125.sec_eq. M&. M& self! rhs! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::sec_eq")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:521:17: 521:101 (#1700)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_add")
(declare-fun req%verismo!tspec.security.sectype.impl&%126._add. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%256 Bool)
(declare-const %%global_location_label%%257 Bool)
(declare-const %%global_location_label%%258 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%126._add. M&. M& self! other!) (and (=> %%global_location_label%%256 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%257 (= (uClip 8 (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%258 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%126._add. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%126._add. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%126._add. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%126._add. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_add")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::add")
(declare-fun req%verismo!tspec.security.sectype.impl&%127.add. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%259 Bool)
(declare-const %%global_location_label%%260 Bool)
(declare-const %%global_location_label%%261 Bool)
(declare-const %%global_location_label%%262 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%127.add. M&. M& self! other!) (and (=> %%global_location_label%%259 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%260 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%261 (= (uClip 8 (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%262 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%127.add. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%127.add. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%127.add. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%127.add. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::add")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::add_assign")
(declare-fun req%verismo!tspec.security.sectype.impl&%128.add_assign. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%263 Bool)
(declare-const %%global_location_label%%264 Bool)
(declare-const %%global_location_label%%265 Bool)
(declare-const %%global_location_label%%266 Bool)
(assert (forall ((M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%128.add_assign. M&. M& pre%self! other!) (and (=> %%global_location_label%%263 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))) (=> %%global_location_label%%264 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%265 (= (uClip 8 (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%266 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%128.add_assign. M&. M& pre%self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%128.add_assign. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%128.add_assign. M&. M& pre%self! self! other!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. self!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. pre%self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%128.add_assign. M&. M& pre%self! self! other!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::add_assign")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:602:17: 602:76 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%129::add")
(declare-fun req%verismo!tspec.security.sectype.impl&%129.add. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%267 Bool)
(declare-const %%global_location_label%%268 Bool)
(declare-const %%global_location_label%%269 Bool)
(declare-const %%global_location_label%%270 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%129.add. M&. M& self! other!) (and (=> %%global_location_label%%267 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%268 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (=> %%global_location_label%%269 (= (uClip 8 (Add self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Add self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%270 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%129.add. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%129.add. (Dcr Type Int verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%129.add. M&. M& self! other! ret!) (and (uInv 8 ret!) (= ret! (Add self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%129.add. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%129::add")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:620:22: 620:78 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::add")
(declare-fun req%verismo!tspec.security.sectype.impl&%130.add. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%271 Bool)
(declare-const %%global_location_label%%272 Bool)
(declare-const %%global_location_label%%273 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%130.add. M&. M& self! other!) (and (=> %%global_location_label%%271 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%272 (= (uClip 8 (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) other!)) (Add (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) other!))) (=> %%global_location_label%%273 (>= other! 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%130.add. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%130.add. (Dcr Type verismo!tspec.security.sectype.SecType. Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%130.add. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I other!))))) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%130.add. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::add")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:636:22: 636:66 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_sub")
(declare-fun req%verismo!tspec.security.sectype.impl&%131._sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%274 Bool)
(declare-const %%global_location_label%%275 Bool)
(declare-const %%global_location_label%%276 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%131._sub. M&. M& self! other!) (and (=> %%global_location_label%%274 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%275 (= (uClip 8 (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%276 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%131._sub. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%131._sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%131._sub. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%131._sub. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_sub")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::sub")
(declare-fun req%verismo!tspec.security.sectype.impl&%132.sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%277 Bool)
(declare-const %%global_location_label%%278 Bool)
(declare-const %%global_location_label%%279 Bool)
(declare-const %%global_location_label%%280 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%132.sub. M&. M& self! other!) (and (=> %%global_location_label%%277 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%278 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%279 (= (uClip 8 (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%280 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%132.sub. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%132.sub. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%132.sub. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%132.sub. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::sub")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::sub_assign")
(declare-fun req%verismo!tspec.security.sectype.impl&%133.sub_assign. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%281 Bool)
(declare-const %%global_location_label%%282 Bool)
(declare-const %%global_location_label%%283 Bool)
(declare-const %%global_location_label%%284 Bool)
(assert (forall ((M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%133.sub_assign. M&. M& pre%self! other!) (and (=> %%global_location_label%%281 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))) (=> %%global_location_label%%282 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%283 (= (uClip 8 (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%284 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%133.sub_assign. M&. M& pre%self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%133.sub_assign. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%133.sub_assign. M&. M& pre%self! self! other!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. self!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. pre%self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%133.sub_assign. M&. M& pre%self! self! other!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::sub_assign")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:602:17: 602:76 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%134::sub")
(declare-fun req%verismo!tspec.security.sectype.impl&%134.sub. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%285 Bool)
(declare-const %%global_location_label%%286 Bool)
(declare-const %%global_location_label%%287 Bool)
(declare-const %%global_location_label%%288 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%134.sub. M&. M& self! other!) (and (=> %%global_location_label%%285 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%286 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (=> %%global_location_label%%287 (= (uClip 8 (Sub self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Sub self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%288 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%134.sub. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%134.sub. (Dcr Type Int verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%134.sub. M&. M& self! other! ret!) (and (uInv 8 ret!) (= ret! (Sub self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%134.sub. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%134::sub")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:620:22: 620:78 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::sub")
(declare-fun req%verismo!tspec.security.sectype.impl&%135.sub. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%289 Bool)
(declare-const %%global_location_label%%290 Bool)
(declare-const %%global_location_label%%291 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%135.sub. M&. M& self! other!) (and (=> %%global_location_label%%289 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%290 (= (uClip 8 (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) other!)) (Sub (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) other!))) (=> %%global_location_label%%291 (>= other! 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%135.sub. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%135.sub. (Dcr Type verismo!tspec.security.sectype.SecType. Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%135.sub. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I other!))))) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%135.sub. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::sub")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:636:22: 636:66 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_mul")
(declare-fun req%verismo!tspec.security.sectype.impl&%136._mul. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%292 Bool)
(declare-const %%global_location_label%%293 Bool)
(declare-const %%global_location_label%%294 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%136._mul. M&. M& self! other!) (and (=> %%global_location_label%%292 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%293 (= (uClip 8 (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%294 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%136._mul. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%136._mul. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%136._mul. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%136._mul. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_mul")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::mul")
(declare-fun req%verismo!tspec.security.sectype.impl&%137.mul. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%295 Bool)
(declare-const %%global_location_label%%296 Bool)
(declare-const %%global_location_label%%297 Bool)
(declare-const %%global_location_label%%298 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%137.mul. M&. M& self! other!) (and (=> %%global_location_label%%295 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%296 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%297 (= (uClip 8 (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%298 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%137.mul. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%137.mul. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%137.mul. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%137.mul. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::mul")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::mul_assign")
(declare-fun req%verismo!tspec.security.sectype.impl&%138.mul_assign. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%299 Bool)
(declare-const %%global_location_label%%300 Bool)
(declare-const %%global_location_label%%301 Bool)
(declare-const %%global_location_label%%302 Bool)
(assert (forall ((M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%138.mul_assign. M&. M& pre%self! other!) (and (=> %%global_location_label%%299 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))) (=> %%global_location_label%%300 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%301 (= (uClip 8 (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%302 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%138.mul_assign. M&. M& pre%self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%138.mul_assign. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%138.mul_assign. M&. M& pre%self! self! other!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. self!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. pre%self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%138.mul_assign. M&. M& pre%self! self! other!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::mul_assign")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:602:17: 602:76 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%139::mul")
(declare-fun req%verismo!tspec.security.sectype.impl&%139.mul. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%303 Bool)
(declare-const %%global_location_label%%304 Bool)
(declare-const %%global_location_label%%305 Bool)
(declare-const %%global_location_label%%306 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%139.mul. M&. M& self! other!) (and (=> %%global_location_label%%303 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%304 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (=> %%global_location_label%%305 (= (uClip 8 (Mul self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (Mul self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> %%global_location_label%%306 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%139.mul. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%139.mul. (Dcr Type Int verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%139.mul. M&. M& self! other! ret!) (and (uInv 8 ret!) (= ret! (Mul self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%139.mul. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%139::mul")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:620:22: 620:78 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::mul")
(declare-fun req%verismo!tspec.security.sectype.impl&%140.mul. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%307 Bool)
(declare-const %%global_location_label%%308 Bool)
(declare-const %%global_location_label%%309 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%140.mul. M&. M& self! other!) (and (=> %%global_location_label%%307 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%308 (= (uClip 8 (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) other!)) (Mul (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) other!))) (=> %%global_location_label%%309 (>= other! 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%140.mul. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%140.mul. (Dcr Type verismo!tspec.security.sectype.SecType. Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%140.mul. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I other!))))) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%140.mul. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::mul")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:636:22: 636:66 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_div")
(declare-fun req%verismo!tspec.security.sectype.impl&%141._div. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%310 Bool)
(declare-const %%global_location_label%%311 Bool)
(declare-const %%global_location_label%%312 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%141._div. M&. M& self! other!) (and (=> %%global_location_label%%310 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%311 (= (uClip 8 (uClip 8 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (uClip 8 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> %%global_location_label%%312 (not (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0))))) :pattern ((req%verismo!tspec.security.sectype.impl&%141._div. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%141._div. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%141._div. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 8 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%141._div. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_div")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::div")
(declare-fun req%verismo!tspec.security.sectype.impl&%142.div. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%313 Bool)
(declare-const %%global_location_label%%314 Bool)
(declare-const %%global_location_label%%315 Bool)
(declare-const %%global_location_label%%316 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%142.div. M&. M& self! other!) (and (=> %%global_location_label%%313 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%314 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%315 (= (uClip 8 (uClip 8 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (uClip 8 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> %%global_location_label%%316 (not (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0))))) :pattern ((req%verismo!tspec.security.sectype.impl&%142.div. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%142.div. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%142.div. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 8 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%142.div. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::div")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::div_assign")
(declare-fun req%verismo!tspec.security.sectype.impl&%143.div_assign. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%317 Bool)
(declare-const %%global_location_label%%318 Bool)
(declare-const %%global_location_label%%319 Bool)
(declare-const %%global_location_label%%320 Bool)
(assert (forall ((M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%143.div_assign. M&. M& pre%self! other!) (and (=> %%global_location_label%%317 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))) (=> %%global_location_label%%318 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%319 (= (uClip 8 (uClip 8 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (uClip 8 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> %%global_location_label%%320 (not (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0))))) :pattern ((req%verismo!tspec.security.sectype.impl&%143.div_assign. M&. M& pre%self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%143.div_assign. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%143.div_assign. M&. M& pre%self! self! other!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. self!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. pre%self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%143.div_assign. M&. M& pre%self! self! other!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::div_assign")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:602:17: 602:76 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%144::div")
(declare-fun req%verismo!tspec.security.sectype.impl&%144.div. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%321 Bool)
(declare-const %%global_location_label%%322 Bool)
(declare-const %%global_location_label%%323 Bool)
(declare-const %%global_location_label%%324 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%144.div. M&. M& self! other!) (and (=> %%global_location_label%%321 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%322 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (=> %%global_location_label%%323 (= (uClip 8 (uClip 8 (EucDiv self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (uClip 8 (EucDiv self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> %%global_location_label%%324 (not (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0))))) :pattern ((req%verismo!tspec.security.sectype.impl&%144.div. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%144.div. (Dcr Type Int verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%144.div. M&. M& self! other! ret!) (and (uInv 8 ret!) (= ret! (uClip 8 (EucDiv self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%144.div. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%144::div")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:620:22: 620:78 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::div")
(declare-fun req%verismo!tspec.security.sectype.impl&%145.div. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%325 Bool)
(declare-const %%global_location_label%%326 Bool)
(declare-const %%global_location_label%%327 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%145.div. M&. M& self! other!) (and (=> %%global_location_label%%325 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%326 (= (uClip 8 (uClip 8 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) other!))) (uClip 8 (EucDiv (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) other!)))) (=> %%global_location_label%%327 (not (= other! 0))))) :pattern ((req%verismo!tspec.security.sectype.impl&%145.div. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%145.div. (Dcr Type verismo!tspec.security.sectype.SecType. Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%145.div. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecEuclideanDiv.spec_euclidean_div.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I other!))))) (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%145.div. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::div")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:636:22: 636:66 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_rem")
(declare-fun req%verismo!tspec.security.sectype.impl&%146._rem. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%328 Bool)
(declare-const %%global_location_label%%329 Bool)
(declare-const %%global_location_label%%330 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%146._rem. M&. M& self! other!) (and (=> %%global_location_label%%328 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%329 (= (uClip 8 (uClip 8 (EucMod (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (uClip 8 (EucMod (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> %%global_location_label%%330 (not (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0))))) :pattern ((req%verismo!tspec.security.sectype.impl&%146._rem. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%146._rem. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%146._rem. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 8 (EucMod (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%146._rem. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_rem")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::rem")
(declare-fun req%verismo!tspec.security.sectype.impl&%147.rem. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%331 Bool)
(declare-const %%global_location_label%%332 Bool)
(declare-const %%global_location_label%%333 Bool)
(declare-const %%global_location_label%%334 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%147.rem. M&. M& self! other!) (and (=> %%global_location_label%%331 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%332 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%333 (= (uClip 8 (uClip 8 (EucMod (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (uClip 8 (EucMod (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> %%global_location_label%%334 (not (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0))))) :pattern ((req%verismo!tspec.security.sectype.impl&%147.rem. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%147.rem. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%147.rem. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 8 (EucMod (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%147.rem. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::rem")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::rem_assign")
(declare-fun req%verismo!tspec.security.sectype.impl&%148.rem_assign. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%335 Bool)
(declare-const %%global_location_label%%336 Bool)
(declare-const %%global_location_label%%337 Bool)
(declare-const %%global_location_label%%338 Bool)
(assert (forall ((M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%148.rem_assign. M&. M& pre%self! other!) (and (=> %%global_location_label%%335 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))) (=> %%global_location_label%%336 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%337 (= (uClip 8 (uClip 8 (EucMod (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (uClip 8 (EucMod (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))))) (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> %%global_location_label%%338 (not (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0))))) :pattern ((req%verismo!tspec.security.sectype.impl&%148.rem_assign. M&. M& pre%self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%148.rem_assign. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%148.rem_assign. M&. M& pre%self! self! other!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. self!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. pre%self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%148.rem_assign. M&. M& pre%self! self! other!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::rem_assign")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:602:17: 602:76 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%149::rem")
(declare-fun req%verismo!tspec.security.sectype.impl&%149.rem. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%339 Bool)
(declare-const %%global_location_label%%340 Bool)
(declare-const %%global_location_label%%341 Bool)
(declare-const %%global_location_label%%342 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%149.rem. M&. M& self! other!) (and (=> %%global_location_label%%339 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%340 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (=> %%global_location_label%%341 (= (uClip 8 (uClip 8 (EucMod self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))) (uClip 8 (EucMod self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> %%global_location_label%%342 (not (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0))))) :pattern ((req%verismo!tspec.security.sectype.impl&%149.rem. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%149.rem. (Dcr Type Int verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%149.rem. M&. M& self! other! ret!) (and (uInv 8 ret!) (= ret! (uClip 8 (EucMod self! (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%149.rem. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%149::rem")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:620:22: 620:78 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::rem")
(declare-fun req%verismo!tspec.security.sectype.impl&%150.rem. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%343 Bool)
(declare-const %%global_location_label%%344 Bool)
(declare-const %%global_location_label%%345 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%150.rem. M&. M& self! other!) (and (=> %%global_location_label%%343 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%344 (= (uClip 8 (uClip 8 (EucMod (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) other!))) (uClip 8 (EucMod (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))))) other!)))) (=> %%global_location_label%%345 (not (= other! 0))))) :pattern ((req%verismo!tspec.security.sectype.impl&%150.rem. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%150.rem. (Dcr Type verismo!tspec.security.sectype.SecType. Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%150.rem. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecEuclideanMod.spec_euclidean_mod.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I other!))))) (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%150.rem. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::rem")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:636:22: 636:66 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_shr")
(declare-fun req%verismo!tspec.security.sectype.impl&%151._shr. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%346 Bool)
(declare-const %%global_location_label%%347 Bool)
(declare-const %%global_location_label%%348 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%151._shr. M&. M& self! other!) (and (=> %%global_location_label%%346 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%347 (= (uClip 8 (uClip 8 (uintshr 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (uClip 8 (uintshr 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) (=> %%global_location_label%%348 (< (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (nClip (Mul 8 (verismo!tspec.size_s.spec_size.? $ (UINT 8)))))))) :pattern ((req%verismo!tspec.security.sectype.impl&%151._shr. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%151._shr. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%151._shr. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 8 (uintshr 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%151._shr. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_shr")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::shr")
(declare-fun req%verismo!tspec.security.sectype.impl&%152.shr. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%349 Bool)
(declare-const %%global_location_label%%350 Bool)
(declare-const %%global_location_label%%351 Bool)
(declare-const %%global_location_label%%352 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%152.shr. M&. M& self! other!) (and (=> %%global_location_label%%349 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%350 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%351 (= (uClip 8 (uClip 8 (uintshr 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (uClip 8 (uintshr 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) (=> %%global_location_label%%352 (< (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (nClip (Mul 8 (verismo!tspec.size_s.spec_size.? $ (UINT 8)))))))) :pattern ((req%verismo!tspec.security.sectype.impl&%152.shr. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%152.shr. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%152.shr. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 8 (uintshr 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%152.shr. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::shr")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::shr_assign")
(declare-fun req%verismo!tspec.security.sectype.impl&%153.shr_assign. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%353 Bool)
(declare-const %%global_location_label%%354 Bool)
(declare-const %%global_location_label%%355 Bool)
(declare-const %%global_location_label%%356 Bool)
(assert (forall ((M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%153.shr_assign. M&. M& pre%self! other!) (and (=> %%global_location_label%%353 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))) (=> %%global_location_label%%354 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%355 (= (uClip 8 (uClip 8 (uintshr 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (uClip 8 (uintshr 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) (=> %%global_location_label%%356 (< (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (nClip (Mul 8 (verismo!tspec.size_s.spec_size.? $ (UINT 8)))))))) :pattern ((req%verismo!tspec.security.sectype.impl&%153.shr_assign. M&. M& pre%self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%153.shr_assign. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%153.shr_assign. M&. M& pre%self! self! other!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. self!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. pre%self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%153.shr_assign. M&. M& pre%self! self! other!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::shr_assign")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:602:17: 602:76 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%154::shr")
(declare-fun req%verismo!tspec.security.sectype.impl&%154.shr. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%357 Bool)
(declare-const %%global_location_label%%358 Bool)
(declare-const %%global_location_label%%359 Bool)
(declare-const %%global_location_label%%360 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%154.shr. M&. M& self! other!) (and (=> %%global_location_label%%357 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%358 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (=> %%global_location_label%%359 (= (uClip 8 (uClip 8 (uintshr 8 (I self!) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (uClip 8 (uintshr 8 (I self!) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) (=> %%global_location_label%%360 (< (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (nClip (Mul 8 (verismo!tspec.size_s.spec_size.? $ (UINT 8)))))))) :pattern ((req%verismo!tspec.security.sectype.impl&%154.shr. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%154.shr. (Dcr Type Int verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%154.shr. M&. M& self! other! ret!) (and (uInv 8 ret!) (= ret! (uClip 8 (uintshr 8 (I self!) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%154.shr. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%154::shr")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:620:22: 620:78 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::shr")
(declare-fun req%verismo!tspec.security.sectype.impl&%155.shr. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%361 Bool)
(declare-const %%global_location_label%%362 Bool)
(declare-const %%global_location_label%%363 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%155.shr. M&. M& self! other!) (and (=> %%global_location_label%%361 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%362 (= (uClip 8 (uClip 8 (uintshr 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I other!)))) (uClip 8 (uintshr 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I other!))))) (=> %%global_location_label%%363 (< other! (nClip (Mul 8 (verismo!tspec.size_s.spec_size.? $ (UINT 8)))))))) :pattern ((req%verismo!tspec.security.sectype.impl&%155.shr. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%155.shr. (Dcr Type verismo!tspec.security.sectype.SecType. Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%155.shr. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecShr.spec_shr.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I other!))))) (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%155.shr. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::shr")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:636:22: 636:66 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_shl")
(declare-fun req%verismo!tspec.security.sectype.impl&%156._shl. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%364 Bool)
(declare-const %%global_location_label%%365 Bool)
(declare-const %%global_location_label%%366 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%156._shl. M&. M& self! other!) (and (=> %%global_location_label%%364 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%365 (= (uClip 8 (uClip 8 (uintshl 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (uClip 8 (uintshl 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) (=> %%global_location_label%%366 (< (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (nClip (Mul 8 (verismo!tspec.size_s.spec_size.? $ (UINT 8)))))))) :pattern ((req%verismo!tspec.security.sectype.impl&%156._shl. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%156._shl. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%156._shl. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 8 (uintshl 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%156._shl. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_shl")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::shl")
(declare-fun req%verismo!tspec.security.sectype.impl&%157.shl. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%367 Bool)
(declare-const %%global_location_label%%368 Bool)
(declare-const %%global_location_label%%369 Bool)
(declare-const %%global_location_label%%370 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%157.shl. M&. M& self! other!) (and (=> %%global_location_label%%367 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%368 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%369 (= (uClip 8 (uClip 8 (uintshl 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (uClip 8 (uintshl 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) (=> %%global_location_label%%370 (< (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (nClip (Mul 8 (verismo!tspec.size_s.spec_size.? $ (UINT 8)))))))) :pattern ((req%verismo!tspec.security.sectype.impl&%157.shl. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%157.shl. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%157.shl. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 8 (uintshl 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%157.shl. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::shl")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::shl_assign")
(declare-fun req%verismo!tspec.security.sectype.impl&%158.shl_assign. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%371 Bool)
(declare-const %%global_location_label%%372 Bool)
(declare-const %%global_location_label%%373 Bool)
(declare-const %%global_location_label%%374 Bool)
(assert (forall ((M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%158.shl_assign. M&. M& pre%self! other!) (and (=> %%global_location_label%%371 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!))) (=> %%global_location_label%%372 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%373 (= (uClip 8 (uClip 8 (uintshl 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (uClip 8 (uintshl 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) (=> %%global_location_label%%374 (< (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (nClip (Mul 8 (verismo!tspec.size_s.spec_size.? $ (UINT 8)))))))) :pattern ((req%verismo!tspec.security.sectype.impl&%158.shl_assign. M&. M& pre%self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%158.shl_assign. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (pre%self! verismo!tspec.security.sectype.SecType.) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%158.shl_assign. M&. M& pre%self! self! other!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. self!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. pre%self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))) (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. pre%self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%158.shl_assign. M&. M& pre%self! self! other!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::shl_assign")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:602:17: 602:76 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::impl&%159::shl")
(declare-fun req%verismo!tspec.security.sectype.impl&%159.shl. (Dcr Type Int verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%375 Bool)
(declare-const %%global_location_label%%376 Bool)
(declare-const %%global_location_label%%377 Bool)
(declare-const %%global_location_label%%378 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%159.shl. M&. M& self! other!) (and (=> %%global_location_label%%375 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%376 (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (=> %%global_location_label%%377 (= (uClip 8 (uClip 8 (uintshl 8 (I self!) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (uClip 8 (uintshl 8 (I self!) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) (=> %%global_location_label%%378 (< (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (nClip (Mul 8 (verismo!tspec.size_s.spec_size.? $ (UINT 8)))))))) :pattern ((req%verismo!tspec.security.sectype.impl&%159.shl. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%159.shl. (Dcr Type Int verismo!tspec.security.sectype.SecType. Int) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! Int) (other! verismo!tspec.security.sectype.SecType.) (ret! Int)) (! (= (ens%verismo!tspec.security.sectype.impl&%159.shl. M&. M& self! other! ret!) (and (uInv 8 ret!) (= ret! (uClip 8 (uintshl 8 (I self!) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%159.shl. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::impl&%159::shl")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:620:22: 620:78 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::shl")
(declare-fun req%verismo!tspec.security.sectype.impl&%160.shl. (Dcr Type verismo!tspec.security.sectype.SecType. Int) Bool)
(declare-const %%global_location_label%%379 Bool)
(declare-const %%global_location_label%%380 Bool)
(declare-const %%global_location_label%%381 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int)) (! (= (req%verismo!tspec.security.sectype.impl&%160.shl. M&. M& self! other!) (and (=> %%global_location_label%%379 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%380 (= (uClip 8 (uClip 8 (uintshl 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I other!)))) (uClip 8 (uintshl 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I other!))))) (=> %%global_location_label%%381 (< other! (nClip (Mul 8 (verismo!tspec.size_s.spec_size.? $ (UINT 8)))))))) :pattern ((req%verismo!tspec.security.sectype.impl&%160.shl. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%160.shl. (Dcr Type verismo!tspec.security.sectype.SecType. Int verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! Int) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%160.shl. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecShl.spec_shl.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I other!))))) (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%160.shl. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::shl")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:636:22: 636:66 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::_bitxor")
(declare-fun req%verismo!tspec.security.sectype.impl&%161._bitxor. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%382 Bool)
(declare-const %%global_location_label%%383 Bool)
(declare-const %%global_location_label%%384 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%161._bitxor. M&. M& self! other!) (and (=> %%global_location_label%%382 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%383 (= (uClip 8 (uClip 8 (uintxor 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (uClip 8 (uintxor 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) (=> %%global_location_label%%384 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%161._bitxor. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%161._bitxor. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%161._bitxor. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 8 (uintxor 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))))) :pattern ((ens%verismo!tspec.security.sectype.impl&%161._bitxor. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::_bitxor")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:550:17: 550:65 (#1709)")
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::bitxor")
(declare-fun req%verismo!tspec.security.sectype.impl&%162.bitxor. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(declare-const %%global_location_label%%385 Bool)
(declare-const %%global_location_label%%386 Bool)
(declare-const %%global_location_label%%387 Bool)
(declare-const %%global_location_label%%388 Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.)) (! (= (req%verismo!tspec.security.sectype.impl&%162.bitxor. M&. M& self! other!) (and (=> %%global_location_label%%385 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!))) (=> %%global_location_label%%386 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))) (=> %%global_location_label%%387 (= (uClip 8 (uClip 8 (uintxor 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (uClip 8 (uintxor 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) (=> %%global_location_label%%388 (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0)))) :pattern ((req%verismo!tspec.security.sectype.impl&%162.bitxor. M&. M& self! other!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%162.bitxor. (Dcr Type verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType. verismo!tspec.security.sectype.SecType.) Bool)
(assert (forall ((M&. Dcr) (M& Type) (self! verismo!tspec.security.sectype.SecType.) (other! verismo!tspec.security.sectype.SecType.) (ret! verismo!tspec.security.sectype.SecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%162.bitxor. M&. M& self! other! ret!) (and (has_type (Poly%verismo!tspec.security.sectype.SecType. ret!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 8 (uintxor 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!)))) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!)))) :pattern ((ens%verismo!tspec.security.sectype.impl&%162.bitxor. M&. M& self! other! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::security::sectype::SecType::bitxor")
(set-info :comment ";; verismo/src/tspec/security/sectype.rs:581:22: 581:64 (#1709)")
(declare-const M&. Dcr)
(declare-const M& Type)
(declare-const ret! verismo!tspec.security.sectype.SecType.)
(declare-const self! verismo!tspec.security.sectype.SecType.)
(declare-const other! verismo!tspec.security.sectype.SecType.)
(declare-const tmp%1 verismo!tspec.security.sectype.SpecSecType.)
(declare-const tmp%2 verismo!tspec.security.sectype.SpecSecType.)
(declare-const tmp%3 verismo!tspec.security.sectype.SpecSecType.)
(declare-const tmp%4 %%Function%%)
(declare-const tmp%5 verismo!tspec.security.sectype.SpecSecType.)
(declare-const tmp%6 %%Function%%)
(declare-const ret@ verismo!tspec.security.sectype.SpecSecType.)
(declare-const tmp%7 verismo!tspec.security.sectype.SecType.)
(assert fuel_defaults)
(assert (has_type (Poly%verismo!tspec.security.sectype.SecType. self!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)))
(assert (has_type (Poly%verismo!tspec.security.sectype.SecType. other!) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)))
(assert (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))
(assert (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))
(assert (= (uClip 8 (uClip 8 (uintxor 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))) (uClip 8 (uintxor 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))))))))
(assert (>= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) 0))
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; precondition not satisfied")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%6 Bool)
(assert (not (=> (= tmp%2 (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))) (=> (= tmp%3 (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))) (=> (= tmp%4 (verismo!tspec.fnspec.fn_spec_bitxor_u8_u8_u8.? (I 0))) (and (=> %%location_label%%0 (req%verismo!tspec.security.sectype.impl&%16.proof_bop_new. $ (UINT 8) M&. M& $ (UINT 8) $ (UINT 8) tmp%2 tmp%3 tmp%4)) (=> (ens%verismo!tspec.security.sectype.impl&%16.proof_bop_new. $ (UINT 8) M&. M& $ (UINT 8) $ (UINT 8) tmp%2 tmp%3 tmp%4 tmp%1) (=> (= tmp%5 (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!))))) (=> (= tmp%6 (verismo!tspec.cast.fn_vspec_cast_to.? $ (UINT 8) $ (UINT 8))) (and (=> %%location_label%%1 (req%verismo!tspec.security.sectype.impl&%16.proof_uop_valset. $ (UINT 8) M&. M& $ (UINT 8) tmp%5 tmp%6)) (=> (ens%verismo!tspec.security.sectype.impl&%16.proof_uop_valset. $ (UINT 8) M&. M& $ (UINT 8) tmp%5 tmp%6 ret@) (and (=> %%location_label%%2 (req%verismo!tspec.security.sectype.impl&%161._bitxor. M&. M& self! other!)) (=> (ens%verismo!tspec.security.sectype.impl&%161._bitxor. M&. M& self! other! tmp%7) (=> (= ret! tmp%7) (and (=> %%location_label%%3 (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))) (verismo!tspec.security.sectype.impl&%16.call_self.? $ (UINT 8) M&. M& (verismo!tspec.ops.VSpecBitXor.spec_bitxor.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))) (and (=> %%location_label%%4 (= (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (uClip 8 (uintxor 8 (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. self!)))))) (I (%I (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. other!)))))))))) (and (=> %%location_label%%5 (=> (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. other!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) (Poly%verismo!tspec.security.sectype.SecType. ret!))))) (=> %%location_label%%6 (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SecType. ret!))))))))))))))))))))
(check-sat)
(exit)
