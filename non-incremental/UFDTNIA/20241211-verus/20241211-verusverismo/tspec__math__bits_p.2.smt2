(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verismo (https://www.usenix.org/conference/osdi24/presentation/zhou) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module tspec::math::bits_p'")
(set-info :comment ";; Fuel")
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit64. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit_set. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit_clear. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_has_bit_set. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.slow_bit_range_req. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2. FuelId)
(assert (distinct fuel%verismo!tspec.math.bits_p.spec_bit64. fuel%verismo!tspec.math.bits_p.spec_bit_set. fuel%verismo!tspec.math.bits_p.spec_bit_clear. fuel%verismo!tspec.math.bits_p.spec_has_bit_set. fuel%verismo!tspec.math.bits_p.slow_bit_range_req. fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties. fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties. fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.))
(set-info :comment ";; Datatypes")
(declare-datatypes ((tuple%0. 0)) (((tuple%0./tuple%0 ))))
(declare-const TYPE%tuple%0. Type)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::spec_bit64")
(declare-fun verismo!tspec.math.bits_p.spec_bit64.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::spec_bit_set")
(declare-fun verismo!tspec.math.bits_p.spec_bit_set.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::spec_bit_clear")
(declare-fun verismo!tspec.math.bits_p.spec_bit_clear.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::spec_has_bit_set")
(declare-fun verismo!tspec.math.bits_p.spec_has_bit_set.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::slow_bit_range_req")
(declare-fun verismo!tspec.math.bits_p.slow_bit_range_req.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::spec_bit64_or_properties")
(declare-fun verismo!tspec.math.bits_p.spec_bit64_or_properties.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::spec_bit64_not_properties")
(declare-fun verismo!tspec.math.bits_p.spec_bit64_not_properties.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::math::pow_s::spec_bit64_is_pow_of_2")
(declare-fun verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? (Poly) Bool)
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::spec_bit_set")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit_set.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit_set.) (forall ((val! Poly) (bit! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit_set.? val! bit!) (uClip 64 (uintor 64 (I (%I val!)) (I (uClip 64 (uintshl 64 (I 1) (I (%I bit!)))))))) :pattern ((verismo!tspec.math.bits_p.spec_bit_set.? val! bit!))))))
(assert (forall ((val! Poly) (bit! Poly)) (! (=> (and (has_type val! (UINT 64)) (has_type bit! (UINT 64))) (uInv 64 (verismo!tspec.math.bits_p.spec_bit_set.? val! bit!))) :pattern ((verismo!tspec.math.bits_p.spec_bit_set.? val! bit!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::spec_has_bit_set")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_has_bit_set.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_has_bit_set.) (forall ((val! Poly) (bit! Poly)) (! (= (verismo!tspec.math.bits_p.spec_has_bit_set.? val! bit!) (= (uClip 64 (uintshl 64 (I 1) (I (%I bit!)))) (uClip 64 (uintand 64 (I (%I val!)) (I (uClip 64 (uintshl 64 (I 1) (I (%I bit!))))))))) :pattern ((verismo!tspec.math.bits_p.spec_has_bit_set.? val! bit!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::pow_s::spec_bit64_is_pow_of_2")
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.) (forall ((val! Poly)) (! (= (verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? val!) (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (or (= (%I val!) 1) (= (%I val!) 2)) (= (%I val!) 4)) (= (%I val!) 8)) (= (%I val!) 16)) (= (%I val!) 32)) (= (%I val!) 64)) (= (%I val!) 128)) (= (%I val!) 256)) (= (%I val!) 512)) (= (%I val!) 1024)) (= (%I val!) 2048)) (= (%I val!) 4096)) (= (%I val!) 8192)) (= (%I val!) 16384)) (= (%I val!) 32768)) (= (%I val!) 65536)) (= (%I val!) 131072)) (= (%I val!) 262144)) (= (%I val!) 524288)) (= (%I val!) 1048576)) (= (%I val!) 2097152)) (= (%I val!) 4194304)) (= (%I val!) 8388608)) (= (%I val!) 16777216)) (= (%I val!) 33554432)) (= (%I val!) 67108864)) (= (%I val!) 134217728)) (= (%I val!) 268435456)) (= (%I val!) 536870912)) (= (%I val!) 1073741824)) (= (%I val!) 2147483648)) (= (%I val!) 4294967296)) (= (%I val!) 8589934592)) (= (%I val!) 17179869184)) (= (%I val!) 34359738368)) (= (%I val!) 68719476736)) (= (%I val!) 137438953472)) (= (%I val!) 274877906944)) (= (%I val!) 549755813888)) (= (%I val!) 1099511627776)) (= (%I val!) 2199023255552)) (= (%I val!) 4398046511104)) (= (%I val!) 8796093022208)) (= (%I val!) 17592186044416)) (= (%I val!) 35184372088832)) (= (%I val!) 70368744177664)) (= (%I val!) 140737488355328)) (= (%I val!) 281474976710656)) (= (%I val!) 562949953421312)) (= (%I val!) 1125899906842624)) (= (%I val!) 2251799813685248)) (= (%I val!) 4503599627370496)) (= (%I val!) 9007199254740992)) (= (%I val!) 18014398509481984)) (= (%I val!) 36028797018963968)) (= (%I val!) 72057594037927936)) (= (%I val!) 144115188075855872)) (= (%I val!) 288230376151711744)) (= (%I val!) 576460752303423488)) (= (%I val!) 1152921504606846976)) (= (%I val!) 2305843009213693952)) (= (%I val!) 4611686018427387904)) (= (%I val!) 9223372036854775808))) :pattern ((verismo!tspec.math.pow_s.spec_bit64_is_pow_of_2.? val!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::spec_bit64")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit64.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit64.) (forall ((val! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit64.? val!) (uClip 64 (uintshl 64 (I 1) (I (%I val!))))) :pattern ((verismo!tspec.math.bits_p.spec_bit64.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (uInv 64 (verismo!tspec.math.bits_p.spec_bit64.? val!))) :pattern ((verismo!tspec.math.bits_p.spec_bit64.? val!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::spec_bit_clear")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit_clear.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit_clear.) (forall ((val! Poly) (bit! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit_clear.? val! bit!) (uClip 64 (uintand 64 (I (%I val!)) (I (uClip 64 (uintnot 64 (I (uClip 64 (uintshl 64 (I 1) (I (%I bit!))))))))))) :pattern ((verismo!tspec.math.bits_p.spec_bit_clear.? val! bit!))))))
(assert (forall ((val! Poly) (bit! Poly)) (! (=> (and (has_type val! (UINT 64)) (has_type bit! (UINT 64))) (uInv 64 (verismo!tspec.math.bits_p.spec_bit_clear.? val! bit!))) :pattern ((verismo!tspec.math.bits_p.spec_bit_clear.? val! bit!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::slow_bit_range_req")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.slow_bit_range_req.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.slow_bit_range_req.) (forall ((bits! Poly)) (! (= (verismo!tspec.math.bits_p.slow_bit_range_req.? bits!) (or (or (= (%I bits!) 2) (= (%I bits!) 3)) (= (%I bits!) 12))) :pattern ((verismo!tspec.math.bits_p.slow_bit_range_req.? bits!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::spec_bit64_or_properties")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit64_or_properties.) (forall ((a! Poly) (b! Poly) (ret! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit64_or_properties.? a! b! ret!) (and (and (and (and (and (and (= (%I ret!) (uClip 64 (uintor 64 (I (%I a!)) (I (%I b!))))) (= (%I ret!) (uClip 64 (uintor 64 (I (%I b!)) (I (%I a!)))))) (and (<= 0 (%I ret!)) (<= (%I ret!) 18446744073709551615))) (= (uClip 64 (uintand 64 (I (%I ret!)) (I (%I b!)))) (%I b!))) (>= (%I ret!) (%I a!))) (>= (%I ret!) (%I b!))) (= (uClip 64 (uintand 64 (I (%I ret!)) (I (uClip 64 (uintnot 64 (I (%I b!))))))) (uClip 64 (uintand 64 (I (%I a!)) (I (uClip 64 (uintnot 64 (I (%I b!)))))))))) :pattern ((verismo!tspec.math.bits_p.spec_bit64_or_properties.? a! b! ret!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::spec_bit64_not_properties")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit64_not_properties.) (forall ((a! Poly) (ret! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit64_not_properties.? a! ret!) (and (and (and (and (= (%I ret!) (uClip 64 (uintnot 64 (I (%I a!))))) (= (uClip 64 (uintand 64 (I (%I ret!)) (I (%I a!)))) 0)) (= (%I ret!) (uClip 64 (Sub 18446744073709551615 (%I a!))))) (and (<= 0 (%I ret!)) (<= (%I ret!) 18446744073709551615))) (= (uClip 64 (uintnot 64 (I (%I ret!)))) (%I a!)))) :pattern ((verismo!tspec.math.bits_p.spec_bit64_not_properties.? a! ret!))))))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_shl_auto")
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shl_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shl_auto. no%param) (and (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (= (uClip 64 (uintshl 64 (I (%I a$)) (I 0))) (%I a$))) :pattern ((uClip 64 (uintshl 64 (I (%I a$)) (I 0)))))) (forall ((a$ Poly)) (! (=> (has_type a$ (UINT 64)) (=> (< (%I a$) 64) (> (uClip 64 (uintshl 64 (I 1) (I (%I a$)))) 0))) :pattern ((uClip 64 (uintshl 64 (I 1) (I (%I a$))))))) (forall ((a$ Poly) (b$ Poly)) (! (=> (and (has_type a$ (UINT 64)) (has_type b$ (UINT 64))) (=> (< (%I b$) 64) (or (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintshl 64 (I 1) (I (%I b$))))))) (uClip 64 (uintshl 64 (I 1) (I (%I b$))))) (= (uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintshl 64 (I 1) (I (%I b$))))))) 0)))) :pattern ((uClip 64 (uintand 64 (I (%I a$)) (I (uClip 64 (uintshl 64 (I 1) (I (%I b$)))))))))) (=> (< 0 64) (= (uClip 64 (uintshl 64 (I 1) (I 0))) 1)) (=> (< 1 64) (= (uClip 64 (uintshl 64 (I 1) (I 1))) 2)) (=> (< 2 64) (= (uClip 64 (uintshl 64 (I 1) (I 2))) 4)) (=> (< 3 64) (= (uClip 64 (uintshl 64 (I 1) (I 3))) 8)) (=> (< 4 64) (= (uClip 64 (uintshl 64 (I 1) (I 4))) 16)) (=> (< 5 64) (= (uClip 64 (uintshl 64 (I 1) (I 5))) 32)) (=> (< 6 64) (= (uClip 64 (uintshl 64 (I 1) (I 6))) 64)) (=> (< 7 64) (= (uClip 64 (uintshl 64 (I 1) (I 7))) 128)) (=> (< 8 64) (= (uClip 64 (uintshl 64 (I 1) (I 8))) 256)) (=> (< 9 64) (= (uClip 64 (uintshl 64 (I 1) (I 9))) 512)) (=> (< 10 64) (= (uClip 64 (uintshl 64 (I 1) (I 10))) 1024)) (=> (< 11 64) (= (uClip 64 (uintshl 64 (I 1) (I 11))) 2048)) (=> (< 12 64) (= (uClip 64 (uintshl 64 (I 1) (I 12))) 4096)) (=> (< 13 64) (= (uClip 64 (uintshl 64 (I 1) (I 13))) 8192)) (=> (< 14 64) (= (uClip 64 (uintshl 64 (I 1) (I 14))) 16384)) (=> (< 15 64) (= (uClip 64 (uintshl 64 (I 1) (I 15))) 32768)) (=> (< 16 64) (= (uClip 64 (uintshl 64 (I 1) (I 16))) 65536)) (=> (< 17 64) (= (uClip 64 (uintshl 64 (I 1) (I 17))) 131072)) (=> (< 18 64) (= (uClip 64 (uintshl 64 (I 1) (I 18))) 262144)) (=> (< 19 64) (= (uClip 64 (uintshl 64 (I 1) (I 19))) 524288)) (=> (< 20 64) (= (uClip 64 (uintshl 64 (I 1) (I 20))) 1048576)) (=> (< 21 64) (= (uClip 64 (uintshl 64 (I 1) (I 21))) 2097152)) (=> (< 22 64) (= (uClip 64 (uintshl 64 (I 1) (I 22))) 4194304)) (=> (< 23 64) (= (uClip 64 (uintshl 64 (I 1) (I 23))) 8388608)) (=> (< 24 64) (= (uClip 64 (uintshl 64 (I 1) (I 24))) 16777216)) (=> (< 25 64) (= (uClip 64 (uintshl 64 (I 1) (I 25))) 33554432)) (=> (< 26 64) (= (uClip 64 (uintshl 64 (I 1) (I 26))) 67108864)) (=> (< 27 64) (= (uClip 64 (uintshl 64 (I 1) (I 27))) 134217728)) (=> (< 28 64) (= (uClip 64 (uintshl 64 (I 1) (I 28))) 268435456)) (=> (< 29 64) (= (uClip 64 (uintshl 64 (I 1) (I 29))) 536870912)) (=> (< 30 64) (= (uClip 64 (uintshl 64 (I 1) (I 30))) 1073741824)) (=> (< 31 64) (= (uClip 64 (uintshl 64 (I 1) (I 31))) 2147483648)) (=> (< 32 64) (= (uClip 64 (uintshl 64 (I 1) (I 32))) 4294967296)) (=> (< 33 64) (= (uClip 64 (uintshl 64 (I 1) (I 33))) 8589934592)) (=> (< 34 64) (= (uClip 64 (uintshl 64 (I 1) (I 34))) 17179869184)) (=> (< 35 64) (= (uClip 64 (uintshl 64 (I 1) (I 35))) 34359738368)) (=> (< 36 64) (= (uClip 64 (uintshl 64 (I 1) (I 36))) 68719476736)) (=> (< 37 64) (= (uClip 64 (uintshl 64 (I 1) (I 37))) 137438953472)) (=> (< 38 64) (= (uClip 64 (uintshl 64 (I 1) (I 38))) 274877906944)) (=> (< 39 64) (= (uClip 64 (uintshl 64 (I 1) (I 39))) 549755813888)) (=> (< 40 64) (= (uClip 64 (uintshl 64 (I 1) (I 40))) 1099511627776)) (=> (< 41 64) (= (uClip 64 (uintshl 64 (I 1) (I 41))) 2199023255552)) (=> (< 42 64) (= (uClip 64 (uintshl 64 (I 1) (I 42))) 4398046511104)) (=> (< 43 64) (= (uClip 64 (uintshl 64 (I 1) (I 43))) 8796093022208)) (=> (< 44 64) (= (uClip 64 (uintshl 64 (I 1) (I 44))) 17592186044416)) (=> (< 45 64) (= (uClip 64 (uintshl 64 (I 1) (I 45))) 35184372088832)) (=> (< 46 64) (= (uClip 64 (uintshl 64 (I 1) (I 46))) 70368744177664)) (=> (< 47 64) (= (uClip 64 (uintshl 64 (I 1) (I 47))) 140737488355328)) (=> (< 48 64) (= (uClip 64 (uintshl 64 (I 1) (I 48))) 281474976710656)) (=> (< 49 64) (= (uClip 64 (uintshl 64 (I 1) (I 49))) 562949953421312)) (=> (< 50 64) (= (uClip 64 (uintshl 64 (I 1) (I 50))) 1125899906842624)) (=> (< 51 64) (= (uClip 64 (uintshl 64 (I 1) (I 51))) 2251799813685248)) (=> (< 52 64) (= (uClip 64 (uintshl 64 (I 1) (I 52))) 4503599627370496)) (=> (< 53 64) (= (uClip 64 (uintshl 64 (I 1) (I 53))) 9007199254740992)) (=> (< 54 64) (= (uClip 64 (uintshl 64 (I 1) (I 54))) 18014398509481984)) (=> (< 55 64) (= (uClip 64 (uintshl 64 (I 1) (I 55))) 36028797018963968)) (=> (< 56 64) (= (uClip 64 (uintshl 64 (I 1) (I 56))) 72057594037927936)) (=> (< 57 64) (= (uClip 64 (uintshl 64 (I 1) (I 57))) 144115188075855872)) (=> (< 58 64) (= (uClip 64 (uintshl 64 (I 1) (I 58))) 288230376151711744)) (=> (< 59 64) (= (uClip 64 (uintshl 64 (I 1) (I 59))) 576460752303423488)) (=> (< 60 64) (= (uClip 64 (uintshl 64 (I 1) (I 60))) 1152921504606846976)) (=> (< 61 64) (= (uClip 64 (uintshl 64 (I 1) (I 61))) 2305843009213693952)) (=> (< 62 64) (= (uClip 64 (uintshl 64 (I 1) (I 62))) 4611686018427387904)) (=> (< 63 64) (= (uClip 64 (uintshl 64 (I 1) (I 63))) 9223372036854775808)))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shl_auto. no%param)))))
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_shl_values_auto")
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. no%param) (and (=> (< 0 64) (= (uClip 64 (uintshl 64 (I 1) (I 0))) 1)) (=> (< 1 64) (= (uClip 64 (uintshl 64 (I 1) (I 1))) 2)) (=> (< 2 64) (= (uClip 64 (uintshl 64 (I 1) (I 2))) 4)) (=> (< 3 64) (= (uClip 64 (uintshl 64 (I 1) (I 3))) 8)) (=> (< 4 64) (= (uClip 64 (uintshl 64 (I 1) (I 4))) 16)) (=> (< 5 64) (= (uClip 64 (uintshl 64 (I 1) (I 5))) 32)) (=> (< 6 64) (= (uClip 64 (uintshl 64 (I 1) (I 6))) 64)) (=> (< 7 64) (= (uClip 64 (uintshl 64 (I 1) (I 7))) 128)) (=> (< 8 64) (= (uClip 64 (uintshl 64 (I 1) (I 8))) 256)) (=> (< 9 64) (= (uClip 64 (uintshl 64 (I 1) (I 9))) 512)) (=> (< 10 64) (= (uClip 64 (uintshl 64 (I 1) (I 10))) 1024)) (=> (< 11 64) (= (uClip 64 (uintshl 64 (I 1) (I 11))) 2048)) (=> (< 12 64) (= (uClip 64 (uintshl 64 (I 1) (I 12))) 4096)) (=> (< 13 64) (= (uClip 64 (uintshl 64 (I 1) (I 13))) 8192)) (=> (< 14 64) (= (uClip 64 (uintshl 64 (I 1) (I 14))) 16384)) (=> (< 15 64) (= (uClip 64 (uintshl 64 (I 1) (I 15))) 32768)) (=> (< 16 64) (= (uClip 64 (uintshl 64 (I 1) (I 16))) 65536)) (=> (< 17 64) (= (uClip 64 (uintshl 64 (I 1) (I 17))) 131072)) (=> (< 18 64) (= (uClip 64 (uintshl 64 (I 1) (I 18))) 262144)) (=> (< 19 64) (= (uClip 64 (uintshl 64 (I 1) (I 19))) 524288)) (=> (< 20 64) (= (uClip 64 (uintshl 64 (I 1) (I 20))) 1048576)) (=> (< 21 64) (= (uClip 64 (uintshl 64 (I 1) (I 21))) 2097152)) (=> (< 22 64) (= (uClip 64 (uintshl 64 (I 1) (I 22))) 4194304)) (=> (< 23 64) (= (uClip 64 (uintshl 64 (I 1) (I 23))) 8388608)) (=> (< 24 64) (= (uClip 64 (uintshl 64 (I 1) (I 24))) 16777216)) (=> (< 25 64) (= (uClip 64 (uintshl 64 (I 1) (I 25))) 33554432)) (=> (< 26 64) (= (uClip 64 (uintshl 64 (I 1) (I 26))) 67108864)) (=> (< 27 64) (= (uClip 64 (uintshl 64 (I 1) (I 27))) 134217728)) (=> (< 28 64) (= (uClip 64 (uintshl 64 (I 1) (I 28))) 268435456)) (=> (< 29 64) (= (uClip 64 (uintshl 64 (I 1) (I 29))) 536870912)) (=> (< 30 64) (= (uClip 64 (uintshl 64 (I 1) (I 30))) 1073741824)) (=> (< 31 64) (= (uClip 64 (uintshl 64 (I 1) (I 31))) 2147483648)) (=> (< 32 64) (= (uClip 64 (uintshl 64 (I 1) (I 32))) 4294967296)) (=> (< 33 64) (= (uClip 64 (uintshl 64 (I 1) (I 33))) 8589934592)) (=> (< 34 64) (= (uClip 64 (uintshl 64 (I 1) (I 34))) 17179869184)) (=> (< 35 64) (= (uClip 64 (uintshl 64 (I 1) (I 35))) 34359738368)) (=> (< 36 64) (= (uClip 64 (uintshl 64 (I 1) (I 36))) 68719476736)) (=> (< 37 64) (= (uClip 64 (uintshl 64 (I 1) (I 37))) 137438953472)) (=> (< 38 64) (= (uClip 64 (uintshl 64 (I 1) (I 38))) 274877906944)) (=> (< 39 64) (= (uClip 64 (uintshl 64 (I 1) (I 39))) 549755813888)) (=> (< 40 64) (= (uClip 64 (uintshl 64 (I 1) (I 40))) 1099511627776)) (=> (< 41 64) (= (uClip 64 (uintshl 64 (I 1) (I 41))) 2199023255552)) (=> (< 42 64) (= (uClip 64 (uintshl 64 (I 1) (I 42))) 4398046511104)) (=> (< 43 64) (= (uClip 64 (uintshl 64 (I 1) (I 43))) 8796093022208)) (=> (< 44 64) (= (uClip 64 (uintshl 64 (I 1) (I 44))) 17592186044416)) (=> (< 45 64) (= (uClip 64 (uintshl 64 (I 1) (I 45))) 35184372088832)) (=> (< 46 64) (= (uClip 64 (uintshl 64 (I 1) (I 46))) 70368744177664)) (=> (< 47 64) (= (uClip 64 (uintshl 64 (I 1) (I 47))) 140737488355328)) (=> (< 48 64) (= (uClip 64 (uintshl 64 (I 1) (I 48))) 281474976710656)) (=> (< 49 64) (= (uClip 64 (uintshl 64 (I 1) (I 49))) 562949953421312)) (=> (< 50 64) (= (uClip 64 (uintshl 64 (I 1) (I 50))) 1125899906842624)) (=> (< 51 64) (= (uClip 64 (uintshl 64 (I 1) (I 51))) 2251799813685248)) (=> (< 52 64) (= (uClip 64 (uintshl 64 (I 1) (I 52))) 4503599627370496)) (=> (< 53 64) (= (uClip 64 (uintshl 64 (I 1) (I 53))) 9007199254740992)) (=> (< 54 64) (= (uClip 64 (uintshl 64 (I 1) (I 54))) 18014398509481984)) (=> (< 55 64) (= (uClip 64 (uintshl 64 (I 1) (I 55))) 36028797018963968)) (=> (< 56 64) (= (uClip 64 (uintshl 64 (I 1) (I 56))) 72057594037927936)) (=> (< 57 64) (= (uClip 64 (uintshl 64 (I 1) (I 57))) 144115188075855872)) (=> (< 58 64) (= (uClip 64 (uintshl 64 (I 1) (I 58))) 288230376151711744)) (=> (< 59 64) (= (uClip 64 (uintshl 64 (I 1) (I 59))) 576460752303423488)) (=> (< 60 64) (= (uClip 64 (uintshl 64 (I 1) (I 60))) 1152921504606846976)) (=> (< 61 64) (= (uClip 64 (uintshl 64 (I 1) (I 61))) 2305843009213693952)) (=> (< 62 64) (= (uClip 64 (uintshl 64 (I 1) (I 62))) 4611686018427387904)) (=> (< 63 64) (= (uClip 64 (uintshl 64 (I 1) (I 63))) 9223372036854775808)))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. no%param)))))
(set-info :comment ";; Function-Def verismo::tspec::math::bits_p::bit64_shl_values_auto")
(set-info :comment ";; verismo/src/tspec/math/bits_p.rs:394:5: 394:29 (#84)")
(set-info :comment ";; Function-Specs verismo::tspec::math::bits_p::bit64_shr_div_rel")
(declare-fun req%verismo!tspec.math.bits_p.bit64_shr_div_rel. (Int Int) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((b! Int) (a! Int)) (! (= (req%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a!) (=> %%global_location_label%%0 (< a! 64))) :pattern ((req%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a!)))))
(declare-fun ens%verismo!tspec.math.bits_p.bit64_shr_div_rel. (Int Int Int) Bool)
(assert (forall ((b! Int) (a! Int) (ret! Int)) (! (= (ens%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a! ret!) (and (uInv 64 ret!) (= ret! (uClip 64 (uintshr 64 (I b!) (I a!)))) (<= (Mul ret! (uClip 64 (uintshl 64 (I 1) (I a!)))) 18446744073709551615) (= (uClip 64 (uintshr 64 (I b!) (I a!))) (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I a!)))))))) :pattern ((ens%verismo!tspec.math.bits_p.bit64_shr_div_rel. b! a! ret!)))))
(set-info :comment ";; Function-Def verismo::tspec::math::bits_p::bit64_shr_div_rel")
(set-info :comment ";; verismo/src/tspec/math/bits_p.rs:486:5: 486:64 (#0)")
(declare-const ret! Int)
(declare-const b! Int)
(declare-const a! Int)
(declare-const tmp%1 Bool)
(declare-const tmp%2 Bool)
(declare-const tmp%3 Bool)
(declare-const tmp%4 Bool)
(declare-const tmp%5 Bool)
(declare-const tmp%6 Bool)
(declare-const tmp%7 Bool)
(declare-const tmp%8 Bool)
(declare-const tmp%9 Bool)
(declare-const tmp%10 Bool)
(declare-const tmp%11 Bool)
(declare-const tmp%12 Bool)
(declare-const tmp%13 Bool)
(declare-const tmp%14 Bool)
(declare-const tmp%15 Bool)
(declare-const tmp%16 Bool)
(declare-const tmp%17 Bool)
(declare-const tmp%18 Bool)
(declare-const tmp%19 Bool)
(declare-const tmp%20 Bool)
(declare-const tmp%21 Bool)
(declare-const tmp%22 Bool)
(declare-const tmp%23 Bool)
(declare-const tmp%24 Bool)
(declare-const tmp%25 Bool)
(declare-const tmp%26 Bool)
(declare-const tmp%27 Bool)
(declare-const tmp%28 Bool)
(declare-const tmp%29 Bool)
(declare-const tmp%30 Bool)
(declare-const tmp%31 Bool)
(declare-const tmp%32 Bool)
(declare-const tmp%33 Bool)
(declare-const tmp%34 Bool)
(declare-const tmp%35 Bool)
(declare-const tmp%36 Bool)
(declare-const tmp%37 Bool)
(declare-const tmp%38 Bool)
(declare-const tmp%39 Bool)
(declare-const tmp%40 Bool)
(declare-const tmp%41 Bool)
(declare-const tmp%42 Bool)
(declare-const tmp%43 Bool)
(declare-const tmp%44 Bool)
(declare-const tmp%45 Bool)
(declare-const tmp%46 Bool)
(declare-const tmp%47 Bool)
(declare-const tmp%48 Bool)
(declare-const tmp%49 Bool)
(declare-const tmp%50 Bool)
(declare-const tmp%51 Bool)
(declare-const tmp%52 Bool)
(declare-const tmp%53 Bool)
(declare-const tmp%54 Bool)
(declare-const tmp%55 Bool)
(declare-const tmp%56 Bool)
(declare-const tmp%57 Bool)
(declare-const tmp%58 Bool)
(declare-const tmp%59 Bool)
(declare-const tmp%60 Bool)
(declare-const tmp%61 Bool)
(declare-const tmp%62 Bool)
(declare-const tmp%63 Bool)
(declare-const tmp%64 Bool)
(declare-const tmp%65 Bool)
(declare-const tmp%66 Bool)
(declare-const tmp%67 Bool)
(declare-const tmp%68 Bool)
(declare-const tmp%69 Bool)
(declare-const tmp%70 Bool)
(declare-const tmp%71 Bool)
(declare-const tmp%72 Bool)
(declare-const tmp%73 Bool)
(declare-const tmp%74 Bool)
(declare-const tmp%75 Bool)
(declare-const tmp%76 Bool)
(declare-const tmp%77 Bool)
(declare-const tmp%78 Bool)
(declare-const tmp%79 Bool)
(declare-const tmp%80 Bool)
(declare-const tmp%81 Bool)
(declare-const tmp%82 Bool)
(declare-const tmp%83 Bool)
(declare-const tmp%84 Bool)
(declare-const tmp%85 Bool)
(declare-const tmp%86 Bool)
(declare-const tmp%87 Bool)
(declare-const tmp%88 Bool)
(declare-const tmp%89 Bool)
(declare-const tmp%90 Bool)
(declare-const tmp%91 Bool)
(declare-const tmp%92 Bool)
(declare-const tmp%93 Bool)
(declare-const tmp%94 Bool)
(declare-const tmp%95 Bool)
(declare-const tmp%96 Bool)
(declare-const tmp%97 Bool)
(declare-const tmp%98 Bool)
(declare-const tmp%99 Bool)
(declare-const tmp%100 Bool)
(declare-const tmp%101 Bool)
(declare-const tmp%102 Bool)
(declare-const tmp%103 Bool)
(declare-const tmp%104 Bool)
(declare-const tmp%105 Bool)
(declare-const tmp%106 Bool)
(declare-const tmp%107 Bool)
(declare-const tmp%108 Bool)
(declare-const tmp%109 Bool)
(declare-const tmp%110 Bool)
(declare-const tmp%111 Bool)
(declare-const tmp%112 Bool)
(declare-const tmp%113 Bool)
(declare-const tmp%114 Bool)
(declare-const tmp%115 Bool)
(declare-const tmp%116 Bool)
(declare-const tmp%117 Bool)
(declare-const tmp%118 Bool)
(declare-const tmp%119 Bool)
(declare-const tmp%120 Bool)
(declare-const tmp%121 Bool)
(declare-const tmp%122 Bool)
(declare-const tmp%123 Bool)
(declare-const tmp%124 Bool)
(declare-const tmp%125 Bool)
(declare-const tmp%126 Bool)
(declare-const tmp%127 Bool)
(declare-const tmp%128 Bool)
(declare-const ret@ Int)
(assert fuel_defaults)
(assert (uInv 64 b!))
(assert (uInv 64 a!))
(assert (< a! 64))
(declare-const %%switch_label%%0 Bool)
(declare-const %%switch_label%%1 Bool)
(declare-const %%switch_label%%2 Bool)
(declare-const %%switch_label%%3 Bool)
(declare-const %%switch_label%%4 Bool)
(declare-const %%switch_label%%5 Bool)
(declare-const %%switch_label%%6 Bool)
(declare-const %%switch_label%%7 Bool)
(declare-const %%switch_label%%8 Bool)
(declare-const %%switch_label%%9 Bool)
(declare-const %%switch_label%%10 Bool)
(declare-const %%switch_label%%11 Bool)
(declare-const %%switch_label%%12 Bool)
(declare-const %%switch_label%%13 Bool)
(declare-const %%switch_label%%14 Bool)
(declare-const %%switch_label%%15 Bool)
(declare-const %%switch_label%%16 Bool)
(declare-const %%switch_label%%17 Bool)
(declare-const %%switch_label%%18 Bool)
(declare-const %%switch_label%%19 Bool)
(declare-const %%switch_label%%20 Bool)
(declare-const %%switch_label%%21 Bool)
(declare-const %%switch_label%%22 Bool)
(declare-const %%switch_label%%23 Bool)
(declare-const %%switch_label%%24 Bool)
(declare-const %%switch_label%%25 Bool)
(declare-const %%switch_label%%26 Bool)
(declare-const %%switch_label%%27 Bool)
(declare-const %%switch_label%%28 Bool)
(declare-const %%switch_label%%29 Bool)
(declare-const %%switch_label%%30 Bool)
(declare-const %%switch_label%%31 Bool)
(declare-const %%switch_label%%32 Bool)
(declare-const %%switch_label%%33 Bool)
(declare-const %%switch_label%%34 Bool)
(declare-const %%switch_label%%35 Bool)
(declare-const %%switch_label%%36 Bool)
(declare-const %%switch_label%%37 Bool)
(declare-const %%switch_label%%38 Bool)
(declare-const %%switch_label%%39 Bool)
(declare-const %%switch_label%%40 Bool)
(declare-const %%switch_label%%41 Bool)
(declare-const %%switch_label%%42 Bool)
(declare-const %%switch_label%%43 Bool)
(declare-const %%switch_label%%44 Bool)
(declare-const %%switch_label%%45 Bool)
(declare-const %%switch_label%%46 Bool)
(declare-const %%switch_label%%47 Bool)
(declare-const %%switch_label%%48 Bool)
(declare-const %%switch_label%%49 Bool)
(declare-const %%switch_label%%50 Bool)
(declare-const %%switch_label%%51 Bool)
(declare-const %%switch_label%%52 Bool)
(declare-const %%switch_label%%53 Bool)
(declare-const %%switch_label%%54 Bool)
(declare-const %%switch_label%%55 Bool)
(declare-const %%switch_label%%56 Bool)
(declare-const %%switch_label%%57 Bool)
(declare-const %%switch_label%%58 Bool)
(declare-const %%switch_label%%59 Bool)
(declare-const %%switch_label%%60 Bool)
(declare-const %%switch_label%%61 Bool)
(declare-const %%switch_label%%62 Bool)
(declare-const %%switch_label%%63 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%4 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%5 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%6 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%7 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%8 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%9 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%10 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%11 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%12 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%13 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%14 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%15 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%16 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%17 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%18 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%19 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%20 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%21 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%22 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%23 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%24 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%25 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%26 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%27 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%28 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%29 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%30 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%31 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%32 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%33 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%34 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%35 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%36 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%37 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%38 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%39 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%40 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%41 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%42 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%43 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%44 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%45 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%46 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%47 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%48 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%49 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%50 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%51 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%52 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%53 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%54 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%55 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%56 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%57 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%58 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%59 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%60 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%61 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%62 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%63 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%64 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%65 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%66 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%67 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%68 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%69 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%70 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%71 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%72 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%73 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%74 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%75 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%76 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%77 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%78 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%79 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%80 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%81 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%82 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%83 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%84 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%85 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%86 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%87 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%88 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%89 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%90 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%91 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%92 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%93 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%94 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%95 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%96 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%97 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%98 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%99 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%100 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%101 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%102 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%103 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%104 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%105 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%106 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%107 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%108 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%109 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%110 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%111 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%112 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%113 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%114 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%115 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%116 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%117 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%118 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%119 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%120 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%121 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%122 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%123 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%124 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%125 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%126 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%127 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%128 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%129 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%130 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%131 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%132 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%133 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%134 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%135 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%136 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%137 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%138 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%139 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%140 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%141 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%142 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%143 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%144 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%145 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%146 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%147 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%148 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%149 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%150 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%151 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%152 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%153 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%154 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%155 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%156 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%157 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%158 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%159 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%160 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%161 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%162 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%163 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%164 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%165 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%166 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%167 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%168 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%169 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%170 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%171 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%172 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%173 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%174 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%175 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%176 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%177 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%178 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%179 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%180 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%181 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%182 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%183 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%184 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%185 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%186 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%187 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%188 Bool)
(set-info :comment ";; requires not satisfied")
(declare-const %%location_label%%189 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%190 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%191 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%192 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%193 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%194 Bool)
(assert (not (=> (= ret@ (uClip 64 (uintshr 64 (I b!) (I a!)))) (or (and (=> (= a! 0) (and (=> %%location_label%%0 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 0))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 0)))))) (=> (= tmp%1 (<= b! 18446744073709551615)) (and (=> %%location_label%%1 tmp%1) (=> tmp%1 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%2 (<= (Mul (uClip 64 (EucDiv b! 1)) 1) 18446744073709551615)) (and (=> %%location_label%%2 tmp%2) (=> tmp%2 %%switch_label%%63)))))))))) (=> (not (= a! 0)) %%switch_label%%63)) (and (not %%switch_label%%63) (or (and (=> (= a! 1) (and (=> %%location_label%%3 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 1))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 1)))))) (=> (= tmp%3 (<= b! 18446744073709551615)) (and (=> %%location_label%%4 tmp%3) (=> tmp%3 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%4 (<= (Mul (uClip 64 (EucDiv b! 2)) 2) 18446744073709551615)) (and (=> %%location_label%%5 tmp%4) (=> tmp%4 %%switch_label%%62)))))))))) (=> (not (= a! 1)) %%switch_label%%62)) (and (not %%switch_label%%62) (or (and (=> (= a! 2) (and (=> %%location_label%%6 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 2))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 2)))))) (=> (= tmp%5 (<= b! 18446744073709551615)) (and (=> %%location_label%%7 tmp%5) (=> tmp%5 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%6 (<= (Mul (uClip 64 (EucDiv b! 4)) 4) 18446744073709551615)) (and (=> %%location_label%%8 tmp%6) (=> tmp%6 %%switch_label%%61)))))))))) (=> (not (= a! 2)) %%switch_label%%61)) (and (not %%switch_label%%61) (or (and (=> (= a! 3) (and (=> %%location_label%%9 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 3))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 3)))))) (=> (= tmp%7 (<= b! 18446744073709551615)) (and (=> %%location_label%%10 tmp%7) (=> tmp%7 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%8 (<= (Mul (uClip 64 (EucDiv b! 8)) 8) 18446744073709551615)) (and (=> %%location_label%%11 tmp%8) (=> tmp%8 %%switch_label%%60)))))))))) (=> (not (= a! 3)) %%switch_label%%60)) (and (not %%switch_label%%60) (or (and (=> (= a! 4) (and (=> %%location_label%%12 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 4))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 4)))))) (=> (= tmp%9 (<= b! 18446744073709551615)) (and (=> %%location_label%%13 tmp%9) (=> tmp%9 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%10 (<= (Mul (uClip 64 (EucDiv b! 16)) 16) 18446744073709551615)) (and (=> %%location_label%%14 tmp%10) (=> tmp%10 %%switch_label%%59)))))))))) (=> (not (= a! 4)) %%switch_label%%59)) (and (not %%switch_label%%59) (or (and (=> (= a! 5) (and (=> %%location_label%%15 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 5))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 5)))))) (=> (= tmp%11 (<= b! 18446744073709551615)) (and (=> %%location_label%%16 tmp%11) (=> tmp%11 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%12 (<= (Mul (uClip 64 (EucDiv b! 32)) 32) 18446744073709551615)) (and (=> %%location_label%%17 tmp%12) (=> tmp%12 %%switch_label%%58)))))))))) (=> (not (= a! 5)) %%switch_label%%58)) (and (not %%switch_label%%58) (or (and (=> (= a! 6) (and (=> %%location_label%%18 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 6))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 6)))))) (=> (= tmp%13 (<= b! 18446744073709551615)) (and (=> %%location_label%%19 tmp%13) (=> tmp%13 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%14 (<= (Mul (uClip 64 (EucDiv b! 64)) 64) 18446744073709551615)) (and (=> %%location_label%%20 tmp%14) (=> tmp%14 %%switch_label%%57)))))))))) (=> (not (= a! 6)) %%switch_label%%57)) (and (not %%switch_label%%57) (or (and (=> (= a! 7) (and (=> %%location_label%%21 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 7))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 7)))))) (=> (= tmp%15 (<= b! 18446744073709551615)) (and (=> %%location_label%%22 tmp%15) (=> tmp%15 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%16 (<= (Mul (uClip 64 (EucDiv b! 128)) 128) 18446744073709551615)) (and (=> %%location_label%%23 tmp%16) (=> tmp%16 %%switch_label%%56)))))))))) (=> (not (= a! 7)) %%switch_label%%56)) (and (not %%switch_label%%56) (or (and (=> (= a! 8) (and (=> %%location_label%%24 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 8))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 8)))))) (=> (= tmp%17 (<= b! 18446744073709551615)) (and (=> %%location_label%%25 tmp%17) (=> tmp%17 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%18 (<= (Mul (uClip 64 (EucDiv b! 256)) 256) 18446744073709551615)) (and (=> %%location_label%%26 tmp%18) (=> tmp%18 %%switch_label%%55)))))))))) (=> (not (= a! 8)) %%switch_label%%55)) (and (not %%switch_label%%55) (or (and (=> (= a! 9) (and (=> %%location_label%%27 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 9))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 9)))))) (=> (= tmp%19 (<= b! 18446744073709551615)) (and (=> %%location_label%%28 tmp%19) (=> tmp%19 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%20 (<= (Mul (uClip 64 (EucDiv b! 512)) 512) 18446744073709551615)) (and (=> %%location_label%%29 tmp%20) (=> tmp%20 %%switch_label%%54)))))))))) (=> (not (= a! 9)) %%switch_label%%54)) (and (not %%switch_label%%54) (or (and (=> (= a! 10) (and (=> %%location_label%%30 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 10))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 10)))))) (=> (= tmp%21 (<= b! 18446744073709551615)) (and (=> %%location_label%%31 tmp%21) (=> tmp%21 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%22 (<= (Mul (uClip 64 (EucDiv b! 1024)) 1024) 18446744073709551615)) (and (=> %%location_label%%32 tmp%22) (=> tmp%22 %%switch_label%%53)))))))))) (=> (not (= a! 10)) %%switch_label%%53)) (and (not %%switch_label%%53) (or (and (=> (= a! 11) (and (=> %%location_label%%33 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 11))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 11)))))) (=> (= tmp%23 (<= b! 18446744073709551615)) (and (=> %%location_label%%34 tmp%23) (=> tmp%23 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%24 (<= (Mul (uClip 64 (EucDiv b! 2048)) 2048) 18446744073709551615)) (and (=> %%location_label%%35 tmp%24) (=> tmp%24 %%switch_label%%52)))))))))) (=> (not (= a! 11)) %%switch_label%%52)) (and (not %%switch_label%%52) (or (and (=> (= a! 12) (and (=> %%location_label%%36 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 12))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 12)))))) (=> (= tmp%25 (<= b! 18446744073709551615)) (and (=> %%location_label%%37 tmp%25) (=> tmp%25 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%26 (<= (Mul (uClip 64 (EucDiv b! 4096)) 4096) 18446744073709551615)) (and (=> %%location_label%%38 tmp%26) (=> tmp%26 %%switch_label%%51)))))))))) (=> (not (= a! 12)) %%switch_label%%51)) (and (not %%switch_label%%51) (or (and (=> (= a! 13) (and (=> %%location_label%%39 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 13))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 13)))))) (=> (= tmp%27 (<= b! 18446744073709551615)) (and (=> %%location_label%%40 tmp%27) (=> tmp%27 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%28 (<= (Mul (uClip 64 (EucDiv b! 8192)) 8192) 18446744073709551615)) (and (=> %%location_label%%41 tmp%28) (=> tmp%28 %%switch_label%%50)))))))))) (=> (not (= a! 13)) %%switch_label%%50)) (and (not %%switch_label%%50) (or (and (=> (= a! 14) (and (=> %%location_label%%42 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 14))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 14)))))) (=> (= tmp%29 (<= b! 18446744073709551615)) (and (=> %%location_label%%43 tmp%29) (=> tmp%29 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%30 (<= (Mul (uClip 64 (EucDiv b! 16384)) 16384) 18446744073709551615)) (and (=> %%location_label%%44 tmp%30) (=> tmp%30 %%switch_label%%49)))))))))) (=> (not (= a! 14)) %%switch_label%%49)) (and (not %%switch_label%%49) (or (and (=> (= a! 15) (and (=> %%location_label%%45 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 15))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 15)))))) (=> (= tmp%31 (<= b! 18446744073709551615)) (and (=> %%location_label%%46 tmp%31) (=> tmp%31 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%32 (<= (Mul (uClip 64 (EucDiv b! 32768)) 32768) 18446744073709551615)) (and (=> %%location_label%%47 tmp%32) (=> tmp%32 %%switch_label%%48)))))))))) (=> (not (= a! 15)) %%switch_label%%48)) (and (not %%switch_label%%48) (or (and (=> (= a! 16) (and (=> %%location_label%%48 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 16))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 16)))))) (=> (= tmp%33 (<= b! 18446744073709551615)) (and (=> %%location_label%%49 tmp%33) (=> tmp%33 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%34 (<= (Mul (uClip 64 (EucDiv b! 65536)) 65536) 18446744073709551615)) (and (=> %%location_label%%50 tmp%34) (=> tmp%34 %%switch_label%%47)))))))))) (=> (not (= a! 16)) %%switch_label%%47)) (and (not %%switch_label%%47) (or (and (=> (= a! 17) (and (=> %%location_label%%51 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 17))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 17)))))) (=> (= tmp%35 (<= b! 18446744073709551615)) (and (=> %%location_label%%52 tmp%35) (=> tmp%35 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%36 (<= (Mul (uClip 64 (EucDiv b! 131072)) 131072) 18446744073709551615)) (and (=> %%location_label%%53 tmp%36) (=> tmp%36 %%switch_label%%46)))))))))) (=> (not (= a! 17)) %%switch_label%%46)) (and (not %%switch_label%%46) (or (and (=> (= a! 18) (and (=> %%location_label%%54 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 18))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 18)))))) (=> (= tmp%37 (<= b! 18446744073709551615)) (and (=> %%location_label%%55 tmp%37) (=> tmp%37 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%38 (<= (Mul (uClip 64 (EucDiv b! 262144)) 262144) 18446744073709551615)) (and (=> %%location_label%%56 tmp%38) (=> tmp%38 %%switch_label%%45)))))))))) (=> (not (= a! 18)) %%switch_label%%45)) (and (not %%switch_label%%45) (or (and (=> (= a! 19) (and (=> %%location_label%%57 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 19))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 19)))))) (=> (= tmp%39 (<= b! 18446744073709551615)) (and (=> %%location_label%%58 tmp%39) (=> tmp%39 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%40 (<= (Mul (uClip 64 (EucDiv b! 524288)) 524288) 18446744073709551615)) (and (=> %%location_label%%59 tmp%40) (=> tmp%40 %%switch_label%%44)))))))))) (=> (not (= a! 19)) %%switch_label%%44)) (and (not %%switch_label%%44) (or (and (=> (= a! 20) (and (=> %%location_label%%60 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 20))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 20)))))) (=> (= tmp%41 (<= b! 18446744073709551615)) (and (=> %%location_label%%61 tmp%41) (=> tmp%41 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%42 (<= (Mul (uClip 64 (EucDiv b! 1048576)) 1048576) 18446744073709551615)) (and (=> %%location_label%%62 tmp%42) (=> tmp%42 %%switch_label%%43)))))))))) (=> (not (= a! 20)) %%switch_label%%43)) (and (not %%switch_label%%43) (or (and (=> (= a! 21) (and (=> %%location_label%%63 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 21))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 21)))))) (=> (= tmp%43 (<= b! 18446744073709551615)) (and (=> %%location_label%%64 tmp%43) (=> tmp%43 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%44 (<= (Mul (uClip 64 (EucDiv b! 2097152)) 2097152) 18446744073709551615)) (and (=> %%location_label%%65 tmp%44) (=> tmp%44 %%switch_label%%42)))))))))) (=> (not (= a! 21)) %%switch_label%%42)) (and (not %%switch_label%%42) (or (and (=> (= a! 22) (and (=> %%location_label%%66 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 22))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 22)))))) (=> (= tmp%45 (<= b! 18446744073709551615)) (and (=> %%location_label%%67 tmp%45) (=> tmp%45 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%46 (<= (Mul (uClip 64 (EucDiv b! 4194304)) 4194304) 18446744073709551615)) (and (=> %%location_label%%68 tmp%46) (=> tmp%46 %%switch_label%%41)))))))))) (=> (not (= a! 22)) %%switch_label%%41)) (and (not %%switch_label%%41) (or (and (=> (= a! 23) (and (=> %%location_label%%69 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 23))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 23)))))) (=> (= tmp%47 (<= b! 18446744073709551615)) (and (=> %%location_label%%70 tmp%47) (=> tmp%47 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%48 (<= (Mul (uClip 64 (EucDiv b! 8388608)) 8388608) 18446744073709551615)) (and (=> %%location_label%%71 tmp%48) (=> tmp%48 %%switch_label%%40)))))))))) (=> (not (= a! 23)) %%switch_label%%40)) (and (not %%switch_label%%40) (or (and (=> (= a! 24) (and (=> %%location_label%%72 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 24))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 24)))))) (=> (= tmp%49 (<= b! 18446744073709551615)) (and (=> %%location_label%%73 tmp%49) (=> tmp%49 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%50 (<= (Mul (uClip 64 (EucDiv b! 16777216)) 16777216) 18446744073709551615)) (and (=> %%location_label%%74 tmp%50) (=> tmp%50 %%switch_label%%39)))))))))) (=> (not (= a! 24)) %%switch_label%%39)) (and (not %%switch_label%%39) (or (and (=> (= a! 25) (and (=> %%location_label%%75 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 25))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 25)))))) (=> (= tmp%51 (<= b! 18446744073709551615)) (and (=> %%location_label%%76 tmp%51) (=> tmp%51 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%52 (<= (Mul (uClip 64 (EucDiv b! 33554432)) 33554432) 18446744073709551615)) (and (=> %%location_label%%77 tmp%52) (=> tmp%52 %%switch_label%%38)))))))))) (=> (not (= a! 25)) %%switch_label%%38)) (and (not %%switch_label%%38) (or (and (=> (= a! 26) (and (=> %%location_label%%78 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 26))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 26)))))) (=> (= tmp%53 (<= b! 18446744073709551615)) (and (=> %%location_label%%79 tmp%53) (=> tmp%53 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%54 (<= (Mul (uClip 64 (EucDiv b! 67108864)) 67108864) 18446744073709551615)) (and (=> %%location_label%%80 tmp%54) (=> tmp%54 %%switch_label%%37)))))))))) (=> (not (= a! 26)) %%switch_label%%37)) (and (not %%switch_label%%37) (or (and (=> (= a! 27) (and (=> %%location_label%%81 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 27))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 27)))))) (=> (= tmp%55 (<= b! 18446744073709551615)) (and (=> %%location_label%%82 tmp%55) (=> tmp%55 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%56 (<= (Mul (uClip 64 (EucDiv b! 134217728)) 134217728) 18446744073709551615)) (and (=> %%location_label%%83 tmp%56) (=> tmp%56 %%switch_label%%36)))))))))) (=> (not (= a! 27)) %%switch_label%%36)) (and (not %%switch_label%%36) (or (and (=> (= a! 28) (and (=> %%location_label%%84 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 28))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 28)))))) (=> (= tmp%57 (<= b! 18446744073709551615)) (and (=> %%location_label%%85 tmp%57) (=> tmp%57 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%58 (<= (Mul (uClip 64 (EucDiv b! 268435456)) 268435456) 18446744073709551615)) (and (=> %%location_label%%86 tmp%58) (=> tmp%58 %%switch_label%%35)))))))))) (=> (not (= a! 28)) %%switch_label%%35)) (and (not %%switch_label%%35) (or (and (=> (= a! 29) (and (=> %%location_label%%87 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 29))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 29)))))) (=> (= tmp%59 (<= b! 18446744073709551615)) (and (=> %%location_label%%88 tmp%59) (=> tmp%59 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%60 (<= (Mul (uClip 64 (EucDiv b! 536870912)) 536870912) 18446744073709551615)) (and (=> %%location_label%%89 tmp%60) (=> tmp%60 %%switch_label%%34)))))))))) (=> (not (= a! 29)) %%switch_label%%34)) (and (not %%switch_label%%34) (or (and (=> (= a! 30) (and (=> %%location_label%%90 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 30))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 30)))))) (=> (= tmp%61 (<= b! 18446744073709551615)) (and (=> %%location_label%%91 tmp%61) (=> tmp%61 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%62 (<= (Mul (uClip 64 (EucDiv b! 1073741824)) 1073741824) 18446744073709551615)) (and (=> %%location_label%%92 tmp%62) (=> tmp%62 %%switch_label%%33)))))))))) (=> (not (= a! 30)) %%switch_label%%33)) (and (not %%switch_label%%33) (or (and (=> (= a! 31) (and (=> %%location_label%%93 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 31))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 31)))))) (=> (= tmp%63 (<= b! 18446744073709551615)) (and (=> %%location_label%%94 tmp%63) (=> tmp%63 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%64 (<= (Mul (uClip 64 (EucDiv b! 2147483648)) 2147483648) 18446744073709551615)) (and (=> %%location_label%%95 tmp%64) (=> tmp%64 %%switch_label%%32)))))))))) (=> (not (= a! 31)) %%switch_label%%32)) (and (not %%switch_label%%32) (or (and (=> (= a! 32) (and (=> %%location_label%%96 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 32))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 32)))))) (=> (= tmp%65 (<= b! 18446744073709551615)) (and (=> %%location_label%%97 tmp%65) (=> tmp%65 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%66 (<= (Mul (uClip 64 (EucDiv b! 4294967296)) 4294967296) 18446744073709551615)) (and (=> %%location_label%%98 tmp%66) (=> tmp%66 %%switch_label%%31)))))))))) (=> (not (= a! 32)) %%switch_label%%31)) (and (not %%switch_label%%31) (or (and (=> (= a! 33) (and (=> %%location_label%%99 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 33))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 33)))))) (=> (= tmp%67 (<= b! 18446744073709551615)) (and (=> %%location_label%%100 tmp%67) (=> tmp%67 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%68 (<= (Mul (uClip 64 (EucDiv b! 8589934592)) 8589934592) 18446744073709551615)) (and (=> %%location_label%%101 tmp%68) (=> tmp%68 %%switch_label%%30)))))))))) (=> (not (= a! 33)) %%switch_label%%30)) (and (not %%switch_label%%30) (or (and (=> (= a! 34) (and (=> %%location_label%%102 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 34))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 34)))))) (=> (= tmp%69 (<= b! 18446744073709551615)) (and (=> %%location_label%%103 tmp%69) (=> tmp%69 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%70 (<= (Mul (uClip 64 (EucDiv b! 17179869184)) 17179869184) 18446744073709551615)) (and (=> %%location_label%%104 tmp%70) (=> tmp%70 %%switch_label%%29)))))))))) (=> (not (= a! 34)) %%switch_label%%29)) (and (not %%switch_label%%29) (or (and (=> (= a! 35) (and (=> %%location_label%%105 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 35))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 35)))))) (=> (= tmp%71 (<= b! 18446744073709551615)) (and (=> %%location_label%%106 tmp%71) (=> tmp%71 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%72 (<= (Mul (uClip 64 (EucDiv b! 34359738368)) 34359738368) 18446744073709551615)) (and (=> %%location_label%%107 tmp%72) (=> tmp%72 %%switch_label%%28)))))))))) (=> (not (= a! 35)) %%switch_label%%28)) (and (not %%switch_label%%28) (or (and (=> (= a! 36) (and (=> %%location_label%%108 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 36))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 36)))))) (=> (= tmp%73 (<= b! 18446744073709551615)) (and (=> %%location_label%%109 tmp%73) (=> tmp%73 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%74 (<= (Mul (uClip 64 (EucDiv b! 68719476736)) 68719476736) 18446744073709551615)) (and (=> %%location_label%%110 tmp%74) (=> tmp%74 %%switch_label%%27)))))))))) (=> (not (= a! 36)) %%switch_label%%27)) (and (not %%switch_label%%27) (or (and (=> (= a! 37) (and (=> %%location_label%%111 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 37))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 37)))))) (=> (= tmp%75 (<= b! 18446744073709551615)) (and (=> %%location_label%%112 tmp%75) (=> tmp%75 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%76 (<= (Mul (uClip 64 (EucDiv b! 137438953472)) 137438953472) 18446744073709551615)) (and (=> %%location_label%%113 tmp%76) (=> tmp%76 %%switch_label%%26)))))))))) (=> (not (= a! 37)) %%switch_label%%26)) (and (not %%switch_label%%26) (or (and (=> (= a! 38) (and (=> %%location_label%%114 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 38))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 38)))))) (=> (= tmp%77 (<= b! 18446744073709551615)) (and (=> %%location_label%%115 tmp%77) (=> tmp%77 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%78 (<= (Mul (uClip 64 (EucDiv b! 274877906944)) 274877906944) 18446744073709551615)) (and (=> %%location_label%%116 tmp%78) (=> tmp%78 %%switch_label%%25)))))))))) (=> (not (= a! 38)) %%switch_label%%25)) (and (not %%switch_label%%25) (or (and (=> (= a! 39) (and (=> %%location_label%%117 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 39))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 39)))))) (=> (= tmp%79 (<= b! 18446744073709551615)) (and (=> %%location_label%%118 tmp%79) (=> tmp%79 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%80 (<= (Mul (uClip 64 (EucDiv b! 549755813888)) 549755813888) 18446744073709551615)) (and (=> %%location_label%%119 tmp%80) (=> tmp%80 %%switch_label%%24)))))))))) (=> (not (= a! 39)) %%switch_label%%24)) (and (not %%switch_label%%24) (or (and (=> (= a! 40) (and (=> %%location_label%%120 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 40))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 40)))))) (=> (= tmp%81 (<= b! 18446744073709551615)) (and (=> %%location_label%%121 tmp%81) (=> tmp%81 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%82 (<= (Mul (uClip 64 (EucDiv b! 1099511627776)) 1099511627776) 18446744073709551615)) (and (=> %%location_label%%122 tmp%82) (=> tmp%82 %%switch_label%%23)))))))))) (=> (not (= a! 40)) %%switch_label%%23)) (and (not %%switch_label%%23) (or (and (=> (= a! 41) (and (=> %%location_label%%123 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 41))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 41)))))) (=> (= tmp%83 (<= b! 18446744073709551615)) (and (=> %%location_label%%124 tmp%83) (=> tmp%83 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%84 (<= (Mul (uClip 64 (EucDiv b! 2199023255552)) 2199023255552) 18446744073709551615)) (and (=> %%location_label%%125 tmp%84) (=> tmp%84 %%switch_label%%22)))))))))) (=> (not (= a! 41)) %%switch_label%%22)) (and (not %%switch_label%%22) (or (and (=> (= a! 42) (and (=> %%location_label%%126 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 42))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 42)))))) (=> (= tmp%85 (<= b! 18446744073709551615)) (and (=> %%location_label%%127 tmp%85) (=> tmp%85 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%86 (<= (Mul (uClip 64 (EucDiv b! 4398046511104)) 4398046511104) 18446744073709551615)) (and (=> %%location_label%%128 tmp%86) (=> tmp%86 %%switch_label%%21)))))))))) (=> (not (= a! 42)) %%switch_label%%21)) (and (not %%switch_label%%21) (or (and (=> (= a! 43) (and (=> %%location_label%%129 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 43))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 43)))))) (=> (= tmp%87 (<= b! 18446744073709551615)) (and (=> %%location_label%%130 tmp%87) (=> tmp%87 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%88 (<= (Mul (uClip 64 (EucDiv b! 8796093022208)) 8796093022208) 18446744073709551615)) (and (=> %%location_label%%131 tmp%88) (=> tmp%88 %%switch_label%%20)))))))))) (=> (not (= a! 43)) %%switch_label%%20)) (and (not %%switch_label%%20) (or (and (=> (= a! 44) (and (=> %%location_label%%132 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 44))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 44)))))) (=> (= tmp%89 (<= b! 18446744073709551615)) (and (=> %%location_label%%133 tmp%89) (=> tmp%89 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%90 (<= (Mul (uClip 64 (EucDiv b! 17592186044416)) 17592186044416) 18446744073709551615)) (and (=> %%location_label%%134 tmp%90) (=> tmp%90 %%switch_label%%19)))))))))) (=> (not (= a! 44)) %%switch_label%%19)) (and (not %%switch_label%%19) (or (and (=> (= a! 45) (and (=> %%location_label%%135 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 45))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 45)))))) (=> (= tmp%91 (<= b! 18446744073709551615)) (and (=> %%location_label%%136 tmp%91) (=> tmp%91 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%92 (<= (Mul (uClip 64 (EucDiv b! 35184372088832)) 35184372088832) 18446744073709551615)) (and (=> %%location_label%%137 tmp%92) (=> tmp%92 %%switch_label%%18)))))))))) (=> (not (= a! 45)) %%switch_label%%18)) (and (not %%switch_label%%18) (or (and (=> (= a! 46) (and (=> %%location_label%%138 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 46))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 46)))))) (=> (= tmp%93 (<= b! 18446744073709551615)) (and (=> %%location_label%%139 tmp%93) (=> tmp%93 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%94 (<= (Mul (uClip 64 (EucDiv b! 70368744177664)) 70368744177664) 18446744073709551615)) (and (=> %%location_label%%140 tmp%94) (=> tmp%94 %%switch_label%%17)))))))))) (=> (not (= a! 46)) %%switch_label%%17)) (and (not %%switch_label%%17) (or (and (=> (= a! 47) (and (=> %%location_label%%141 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 47))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 47)))))) (=> (= tmp%95 (<= b! 18446744073709551615)) (and (=> %%location_label%%142 tmp%95) (=> tmp%95 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%96 (<= (Mul (uClip 64 (EucDiv b! 140737488355328)) 140737488355328) 18446744073709551615)) (and (=> %%location_label%%143 tmp%96) (=> tmp%96 %%switch_label%%16)))))))))) (=> (not (= a! 47)) %%switch_label%%16)) (and (not %%switch_label%%16) (or (and (=> (= a! 48) (and (=> %%location_label%%144 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 48))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 48)))))) (=> (= tmp%97 (<= b! 18446744073709551615)) (and (=> %%location_label%%145 tmp%97) (=> tmp%97 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%98 (<= (Mul (uClip 64 (EucDiv b! 281474976710656)) 281474976710656) 18446744073709551615)) (and (=> %%location_label%%146 tmp%98) (=> tmp%98 %%switch_label%%15)))))))))) (=> (not (= a! 48)) %%switch_label%%15)) (and (not %%switch_label%%15) (or (and (=> (= a! 49) (and (=> %%location_label%%147 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 49))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 49)))))) (=> (= tmp%99 (<= b! 18446744073709551615)) (and (=> %%location_label%%148 tmp%99) (=> tmp%99 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%100 (<= (Mul (uClip 64 (EucDiv b! 562949953421312)) 562949953421312) 18446744073709551615)) (and (=> %%location_label%%149 tmp%100) (=> tmp%100 %%switch_label%%14)))))))))) (=> (not (= a! 49)) %%switch_label%%14)) (and (not %%switch_label%%14) (or (and (=> (= a! 50) (and (=> %%location_label%%150 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 50))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 50)))))) (=> (= tmp%101 (<= b! 18446744073709551615)) (and (=> %%location_label%%151 tmp%101) (=> tmp%101 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%102 (<= (Mul (uClip 64 (EucDiv b! 1125899906842624)) 1125899906842624) 18446744073709551615)) (and (=> %%location_label%%152 tmp%102) (=> tmp%102 %%switch_label%%13)))))))))) (=> (not (= a! 50)) %%switch_label%%13)) (and (not %%switch_label%%13) (or (and (=> (= a! 51) (and (=> %%location_label%%153 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 51))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 51)))))) (=> (= tmp%103 (<= b! 18446744073709551615)) (and (=> %%location_label%%154 tmp%103) (=> tmp%103 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%104 (<= (Mul (uClip 64 (EucDiv b! 2251799813685248)) 2251799813685248) 18446744073709551615)) (and (=> %%location_label%%155 tmp%104) (=> tmp%104 %%switch_label%%12)))))))))) (=> (not (= a! 51)) %%switch_label%%12)) (and (not %%switch_label%%12) (or (and (=> (= a! 52) (and (=> %%location_label%%156 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 52))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 52)))))) (=> (= tmp%105 (<= b! 18446744073709551615)) (and (=> %%location_label%%157 tmp%105) (=> tmp%105 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%106 (<= (Mul (uClip 64 (EucDiv b! 4503599627370496)) 4503599627370496) 18446744073709551615)) (and (=> %%location_label%%158 tmp%106) (=> tmp%106 %%switch_label%%11)))))))))) (=> (not (= a! 52)) %%switch_label%%11)) (and (not %%switch_label%%11) (or (and (=> (= a! 53) (and (=> %%location_label%%159 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 53))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 53)))))) (=> (= tmp%107 (<= b! 18446744073709551615)) (and (=> %%location_label%%160 tmp%107) (=> tmp%107 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%108 (<= (Mul (uClip 64 (EucDiv b! 9007199254740992)) 9007199254740992) 18446744073709551615)) (and (=> %%location_label%%161 tmp%108) (=> tmp%108 %%switch_label%%10)))))))))) (=> (not (= a! 53)) %%switch_label%%10)) (and (not %%switch_label%%10) (or (and (=> (= a! 54) (and (=> %%location_label%%162 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 54))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 54)))))) (=> (= tmp%109 (<= b! 18446744073709551615)) (and (=> %%location_label%%163 tmp%109) (=> tmp%109 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%110 (<= (Mul (uClip 64 (EucDiv b! 18014398509481984)) 18014398509481984) 18446744073709551615)) (and (=> %%location_label%%164 tmp%110) (=> tmp%110 %%switch_label%%9)))))))))) (=> (not (= a! 54)) %%switch_label%%9)) (and (not %%switch_label%%9) (or (and (=> (= a! 55) (and (=> %%location_label%%165 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 55))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 55)))))) (=> (= tmp%111 (<= b! 18446744073709551615)) (and (=> %%location_label%%166 tmp%111) (=> tmp%111 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%112 (<= (Mul (uClip 64 (EucDiv b! 36028797018963968)) 36028797018963968) 18446744073709551615)) (and (=> %%location_label%%167 tmp%112) (=> tmp%112 %%switch_label%%8)))))))))) (=> (not (= a! 55)) %%switch_label%%8)) (and (not %%switch_label%%8) (or (and (=> (= a! 56) (and (=> %%location_label%%168 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 56))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 56)))))) (=> (= tmp%113 (<= b! 18446744073709551615)) (and (=> %%location_label%%169 tmp%113) (=> tmp%113 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%114 (<= (Mul (uClip 64 (EucDiv b! 72057594037927936)) 72057594037927936) 18446744073709551615)) (and (=> %%location_label%%170 tmp%114) (=> tmp%114 %%switch_label%%7)))))))))) (=> (not (= a! 56)) %%switch_label%%7)) (and (not %%switch_label%%7) (or (and (=> (= a! 57) (and (=> %%location_label%%171 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 57))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 57)))))) (=> (= tmp%115 (<= b! 18446744073709551615)) (and (=> %%location_label%%172 tmp%115) (=> tmp%115 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%116 (<= (Mul (uClip 64 (EucDiv b! 144115188075855872)) 144115188075855872) 18446744073709551615)) (and (=> %%location_label%%173 tmp%116) (=> tmp%116 %%switch_label%%6)))))))))) (=> (not (= a! 57)) %%switch_label%%6)) (and (not %%switch_label%%6) (or (and (=> (= a! 58) (and (=> %%location_label%%174 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 58))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 58)))))) (=> (= tmp%117 (<= b! 18446744073709551615)) (and (=> %%location_label%%175 tmp%117) (=> tmp%117 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%118 (<= (Mul (uClip 64 (EucDiv b! 288230376151711744)) 288230376151711744) 18446744073709551615)) (and (=> %%location_label%%176 tmp%118) (=> tmp%118 %%switch_label%%5)))))))))) (=> (not (= a! 58)) %%switch_label%%5)) (and (not %%switch_label%%5) (or (and (=> (= a! 59) (and (=> %%location_label%%177 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 59))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 59)))))) (=> (= tmp%119 (<= b! 18446744073709551615)) (and (=> %%location_label%%178 tmp%119) (=> tmp%119 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%120 (<= (Mul (uClip 64 (EucDiv b! 576460752303423488)) 576460752303423488) 18446744073709551615)) (and (=> %%location_label%%179 tmp%120) (=> tmp%120 %%switch_label%%4)))))))))) (=> (not (= a! 59)) %%switch_label%%4)) (and (not %%switch_label%%4) (or (and (=> (= a! 60) (and (=> %%location_label%%180 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 60))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 60)))))) (=> (= tmp%121 (<= b! 18446744073709551615)) (and (=> %%location_label%%181 tmp%121) (=> tmp%121 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%122 (<= (Mul (uClip 64 (EucDiv b! 1152921504606846976)) 1152921504606846976) 18446744073709551615)) (and (=> %%location_label%%182 tmp%122) (=> tmp%122 %%switch_label%%3)))))))))) (=> (not (= a! 60)) %%switch_label%%3)) (and (not %%switch_label%%3) (or (and (=> (= a! 61) (and (=> %%location_label%%183 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 61))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 61)))))) (=> (= tmp%123 (<= b! 18446744073709551615)) (and (=> %%location_label%%184 tmp%123) (=> tmp%123 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%124 (<= (Mul (uClip 64 (EucDiv b! 2305843009213693952)) 2305843009213693952) 18446744073709551615)) (and (=> %%location_label%%185 tmp%124) (=> tmp%124 %%switch_label%%2)))))))))) (=> (not (= a! 61)) %%switch_label%%2)) (and (not %%switch_label%%2) (or (and (=> (= a! 62) (and (=> %%location_label%%186 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 62))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 62)))))) (=> (= tmp%125 (<= b! 18446744073709551615)) (and (=> %%location_label%%187 tmp%125) (=> tmp%125 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%126 (<= (Mul (uClip 64 (EucDiv b! 4611686018427387904)) 4611686018427387904) 18446744073709551615)) (and (=> %%location_label%%188 tmp%126) (=> tmp%126 %%switch_label%%1)))))))))) (=> (not (= a! 62)) %%switch_label%%1)) (and (not %%switch_label%%1) (or (and (=> (= a! 63) (and (=> %%location_label%%189 (= ret@ (uClip 64 (uintshr 64 (I b!) (I 63))))) (=> (= ret@ (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I 63)))))) (=> (= tmp%127 (<= b! 18446744073709551615)) (and (=> %%location_label%%190 tmp%127) (=> tmp%127 (=> (ens%verismo!tspec.math.bits_p.bit64_shl_values_auto. 0) (=> (= tmp%128 (<= (Mul (uClip 64 (EucDiv b! 9223372036854775808)) 9223372036854775808) 18446744073709551615)) (and (=> %%location_label%%191 tmp%128) (=> tmp%128 %%switch_label%%0)))))))))) (=> (not (= a! 63)) %%switch_label%%0)) (and (not %%switch_label%%0) (=> (= ret! ret@) (and (=> %%location_label%%192 (= ret! (uClip 64 (uintshr 64 (I b!) (I a!))))) (and (=> %%location_label%%193 (<= (Mul ret! (uClip 64 (uintshl 64 (I 1) (I a!)))) 18446744073709551615)) (=> %%location_label%%194 (= (uClip 64 (uintshr 64 (I b!) (I a!))) (uClip 64 (EucDiv b! (uClip 64 (uintshl 64 (I 1) (I a!)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
