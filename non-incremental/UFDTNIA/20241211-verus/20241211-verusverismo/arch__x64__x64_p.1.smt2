(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verismo (https://www.usenix.org/conference/osdi24/presentation/zhou) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(set-option :auto_config false)
(set-option :smt.mbqi false)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100.0)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :pi.enabled false)
(set-option :rewriter.sort_disjunctions false)
(set-info :comment ";; Prelude")
(set-info :comment ";; AIR prelude")
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; MODULE 'module arch::x64::x64_p'")
(set-info :comment ";; Fuel")
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!set.impl&%0.full. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit_set. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_int_pow2. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_nat_pow2. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_Secret. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_val. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec__unused. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_labels. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%12.is_constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%15.is_constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.wf_value. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.bop_new. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.uop_new. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%20.wf. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%480.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%481.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%514.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%515.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%516.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%517.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%534.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%535.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%568.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%569.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%570.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%571.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%588.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%589.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%622.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%623.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%624.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%625.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%642.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%643.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%676.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%677.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%678.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%679.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%696.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%697.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%730.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%731.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%732.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%733.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%750.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%751.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%780.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%781.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%782.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%783.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%790.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%791.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%820.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%821.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%822.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%823.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.seq.fn_spec_to_seq_index. FuelId)
(declare-const fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.bool_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.char_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u8_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u16_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u32_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u64_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u128_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.usize_to_stream. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%6.spec_size_def. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%7.wf. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%11.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%14.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%15.spec_size_def. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%16.wf. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%20.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%23.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%24.spec_size_def. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%25.wf. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.PAGE_SIZE. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%36.as_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%36.from_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%37.ord_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%38.spec_from_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.value. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.to_page. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.to_offset. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.new2. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.new. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.null. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.to_mem. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.value. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.is_valid. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.new. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.new2. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.to_addr. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.to_mem. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.valid_as_size. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%4.from_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%5.as_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%5.from_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%6.ord_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%7.ord_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.from_range. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.convert. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.is_aligned. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.is_valid. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.spec_index. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.first. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.offset. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.len. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.to_page. FuelId)
(declare-const fuel%verismo!arch.entities.memid.impl&%0.is_Guest. FuelId)
(declare-const fuel%verismo!arch.entities.memid.impl&%0.is_Hv. FuelId)
(declare-const fuel%verismo!arch.entities.memid.impl&%2.cpu. FuelId)
(declare-const fuel%verismo!arch.entities.memid.impl&%2.memid. FuelId)
(declare-const fuel%verismo!arch.entities.memid.impl&%3.is_sm. FuelId)
(declare-const fuel%verismo!arch.entities.memid.impl&%3.is_vmpl0. FuelId)
(declare-const fuel%verismo!arch.entities.memid.impl&%3.to_asid. FuelId)
(declare-const fuel%verismo!arch.entities.memid.impl&%3.to_vmpl. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%4.from_int. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%5.ord_int. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%6.spec_from_int. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%7.is_L0. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%8.is_PTE. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%8.get_PTE_0. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivData. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivCode. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivStack. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%8.is_SmBootData. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%8.is_SmVmplPage. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%10.is_sm_int. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%10.is_vm_int. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.impl&%10.need_c_bit. FuelId)
(declare-const fuel%verismo!arch.entities.memtype.memtype. FuelId)
(declare-const fuel%verismo!arch.crypto.encdec.impl&%1.decrypt. FuelId)
(declare-const fuel%verismo!arch.rmp.access_u.impl&%0.view. FuelId)
(declare-const fuel%verismo!arch.rmp.db_s.rmp_check_access. FuelId)
(declare-const fuel%verismo!arch.rmp.db_u.rmp_reverse. FuelId)
(declare-const fuel%verismo!arch.rmp.db_u.rmp_reverse_mem. FuelId)
(declare-const fuel%verismo!arch.rmp.db_u.rmp_has_gpn_memid. FuelId)
(declare-const fuel%verismo!arch.rmp.db_u.rmp_inv_sw. FuelId)
(declare-const fuel%verismo!arch.rmp.db_u.rmp_inv_memid_int. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_size. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%3.spec_val. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.RMP_FAIL_INPUT. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH. FuelId)
(declare-const fuel%verismo!arch.rmp.entry_s.impl&%0.spec_perm. FuelId)
(declare-const fuel%verismo!arch.rmp.entry_s.impl&%0.check_vmpl. FuelId)
(declare-const fuel%verismo!arch.rmp.perm_s.impl&%1.as_int. FuelId)
(declare-const fuel%verismo!arch.rmp.perm_s.impl&%1.from_int. FuelId)
(declare-const fuel%verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid. FuelId)
(declare-const fuel%verismo!arch.rmp.rmpop_u.impl&%1.set_gpn. FuelId)
(declare-const fuel%verismo!arch.rmp.rmpop_u.impl&%2.gp_op_requires. FuelId)
(declare-const fuel%verismo!arch.rmp.rmpop_u.impl&%2.set_spn. FuelId)
(declare-const fuel%verismo!arch.rmp.rmpop_u.impl&%3.op_requires_stateless. FuelId)
(declare-const fuel%verismo!arch.rmp.rmpop_u.impl&%3.sp_op_requires. FuelId)
(declare-const fuel%verismo!arch.memop.gvmemop.impl&%0.translate_gpn. FuelId)
(declare-const fuel%verismo!arch.memop.memop.impl&%0.to_addr_memid. FuelId)
(declare-const fuel%verismo!arch.memop.memop.impl&%0.to_memid. FuelId)
(declare-const fuel%verismo!arch.memop.memop.impl&%0.to_mem. FuelId)
(declare-const fuel%verismo!arch.memop.memop.impl&%0.to_page. FuelId)
(declare-const fuel%verismo!arch.memop.memop.impl&%0.use_gmap. FuelId)
(declare-const fuel%verismo!arch.memop.memop.impl&%0.is_valid. FuelId)
(declare-const fuel%verismo!arch.ramdb.def.impl&%0.spec_data. FuelId)
(declare-const fuel%verismo!arch.ramdb.def.impl&%0.spec_write_count. FuelId)
(declare-const fuel%verismo!arch.ramdb.def.impl&%0.spec_crypto_mask. FuelId)
(declare-const fuel%verismo!arch.ramdb.ram_s.MEM_UNIT_SIZE. FuelId)
(declare-const fuel%verismo!arch.ramdb.ram_s.idx2. FuelId)
(declare-const fuel%verismo!arch.ramdb.ram_s.idx. FuelId)
(declare-const fuel%verismo!arch.ramdb.ram_s.impl&%0.read_one_byte. FuelId)
(declare-const fuel%verismo!arch.ramdb.ram_s.impl&%0.read_bytes_by_asid. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.PT_ENTRY_SIZE. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.L3_PGSIZE. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.L2_PGSIZE. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.L1_PGSIZE. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.L0_PGSIZE. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.PT_ENTRY_NUM. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.impl&%4.from_int. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.impl&%5.ord_int. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.impl&%6.spec_from_int. FuelId)
(declare-const fuel%verismo!arch.pgtable.def.impl&%8.spec_value. FuelId)
(declare-const fuel%verismo!arch.pgtable.def_e.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.pgtable.def_e.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.pgtable.def_e.impl&%4.spec_size_def. FuelId)
(declare-const fuel%verismo!arch.pgtable.def_e.impl&%5.wf. FuelId)
(declare-const fuel%verismo!arch.pgtable.def_e.impl&%6.is_constant. FuelId)
(declare-const fuel%verismo!arch.pgtable.def_e.impl&%6.is_constant_to. FuelId)
(declare-const fuel%verismo!arch.pgtable.def_e.impl&%7.view. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%0.parent_lvl. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_table_index. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.new_val. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.contains_flag. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_ppn. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.is_encrypted. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.is_present. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_addr. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page. FuelId)
(declare-const fuel%verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx. FuelId)
(declare-const fuel%verismo!arch.pgtable.memmap_s.impl&%0.spec_index. FuelId)
(declare-const fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_valid. FuelId)
(declare-const fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted. FuelId)
(declare-const fuel%verismo!arch.pgtable.memmap_s.impl&%0.translate. FuelId)
(declare-const fuel%verismo!arch.pgtable.memmap_s.impl&%0.translate_addr_seq. FuelId)
(declare-const fuel%verismo!arch.tlb.def_s.impl&%0.spec_set_db. FuelId)
(declare-const fuel%verismo!arch.tlb.def_s.impl&%2.spec_db. FuelId)
(declare-const fuel%verismo!arch.tlb.tlb_s.impl&%0.to_mem_map. FuelId)
(declare-const fuel%verismo!arch.tlb.tlb_s.impl&%0.load. FuelId)
(declare-const fuel%verismo!arch.tlb.tlb_s.impl&%0.invlpg. FuelId)
(declare-const fuel%verismo!arch.tlb.tlb_s.impl&%0.flush_memid. FuelId)
(declare-const fuel%verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem. FuelId)
(declare-const fuel%verismo!arch.vram.def.impl&%2.spec_sram. FuelId)
(declare-const fuel%verismo!arch.vram.def.impl&%2.spec_rmp. FuelId)
(declare-const fuel%verismo!arch.vram.vram_s.impl&%2.pte_write_requires_nosysmap. FuelId)
(declare-const fuel%verismo!arch.vram.vram_s.impl&%2.gpwrite_requires. FuelId)
(declare-const fuel%verismo!arch.vram.vram_s.impl&%2.gpmemop_requires. FuelId)
(declare-const fuel%verismo!arch.vram.vram_s.impl&%2.inv. FuelId)
(declare-const fuel%verismo!arch.vram.vram_s.impl&%2.inv_sw. FuelId)
(declare-const fuel%verismo!arch.vram.vram_s.impl&%2.inv_memid_int. FuelId)
(declare-const fuel%verismo!arch.vram.vram_s.impl&%2.get. FuelId)
(declare-const fuel%verismo!arch.vram.vram_s.impl&%2.get_enc_bytes_ok. FuelId)
(declare-const fuel%verismo!arch.vram.vram_s.impl&%2.get_enc_data_ok. FuelId)
(declare-const fuel%verismo!arch.vram.vram_s.impl&%2.get_bytes. FuelId)
(declare-const fuel%verismo!arch.vram.vram_s.impl&%2.read_bytes. FuelId)
(declare-const fuel%verismo!arch.ptram.def_s.impl&%0.spec_ram. FuelId)
(declare-const fuel%verismo!arch.ptram.def_s.impl&%0.spec_l0_entry. FuelId)
(declare-const fuel%verismo!arch.ptram.def_s.impl&%1.spec_set_ram. FuelId)
(declare-const fuel%verismo!arch.ptram.def_s.impl&%1.spec_set_l0_entry. FuelId)
(declare-const fuel%verismo!arch.ptram.ptram_s.impl&%0.hw_read_pte. FuelId)
(declare-const fuel%verismo!arch.ptram.ptram_s.impl&%0.map_entry_gpa. FuelId)
(declare-const fuel%verismo!arch.ptram.ptram_s.impl&%0.map_entry. FuelId)
(declare-const fuel%verismo!arch.ptram.ptram_s.impl&%0.to_mem_map. FuelId)
(declare-const fuel%verismo!arch.ptram.ptram_u.impl&%2.pgtb_walk_addrs_recursive_ok. FuelId)
(declare-const fuel%verismo!arch.ptram.ptram_u.impl&%2.valid_access. FuelId)
(declare-const fuel%verismo!arch.ptram.ptram_u.impl&%2.l0_entry. FuelId)
(declare-const fuel%verismo!arch.ptram.ptram_u.impl&%2.inv. FuelId)
(declare-const fuel%verismo!arch.ptram.ptram_u.impl&%2.inv_dom_ok. FuelId)
(declare-const fuel%verismo!arch.ptram.ptram_u.impl&%2.map_entry_gpa_ok. FuelId)
(declare-const fuel%verismo!arch.ptram.ptram_u.impl&%2.map_entry_ok. FuelId)
(declare-const fuel%verismo!arch.ptram.ptram_u.impl&%2.map_entry_exe_ok. FuelId)
(declare-const fuel%verismo!arch.ptram.ptram_u.impl&%2.to_mem_map_ok. FuelId)
(declare-const fuel%verismo!arch.mem.def_s.impl&%0.spec_vram. FuelId)
(declare-const fuel%verismo!arch.mem.def_s.impl&%0.spec_l0_entry. FuelId)
(declare-const fuel%verismo!arch.mem.def_s.impl&%0.spec_sysmap. FuelId)
(declare-const fuel%verismo!arch.mem.def_s.impl&%0.spec_tlb. FuelId)
(declare-const fuel%verismo!arch.mem.def_s.impl&%1.spec_set_vram. FuelId)
(declare-const fuel%verismo!arch.mem.def_s.impl&%1.spec_set_tlb. FuelId)
(declare-const fuel%verismo!arch.mem.mem_s.impl&%0.spec_g_page_table. FuelId)
(declare-const fuel%verismo!arch.mem.mem_s.impl&%0.to_mem_map. FuelId)
(declare-const fuel%verismo!arch.mem.mem_s.impl&%0.to_gpop. FuelId)
(declare-const fuel%verismo!arch.mem.mem_s.impl&%0.op. FuelId)
(declare-const fuel%verismo!arch.mem.mem_s.impl&%0.op_invlpg. FuelId)
(declare-const fuel%verismo!arch.mem.mem_s.impl&%0.op_flush. FuelId)
(declare-const fuel%verismo!arch.mem.mem_s.impl&%0.op_by_gpn_memtype. FuelId)
(declare-const fuel%verismo!arch.mem.mem_s.impl&%0.op_pvalidate. FuelId)
(declare-const fuel%verismo!arch.mem.mem_s.impl&%0.op_rmpadjust. FuelId)
(declare-const fuel%verismo!arch.mem.mem_s.impl&%0.op_rmpupdate. FuelId)
(declare-const fuel%verismo!arch.mem.mem_u.impl&%0.to_gpop_ok. FuelId)
(declare-const fuel%verismo!arch.mem.mem_u.impl&%0.vop_requires. FuelId)
(declare-const fuel%verismo!arch.mem.mem_u.impl&%0.inv. FuelId)
(declare-const fuel%verismo!arch.mem.mem_u.impl&%0.to_mem_map_ok. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%0.is_MemOp. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%0.get_MemOp_0. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%4.spec_memdb. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%4.spec_regdb. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%4.spec_entities. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%5.spec_set_memdb. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%5.spec_set_regdb. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%5.spec_set_entities. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%0.is_valid. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%0.start_cpu_with_vmsa. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%0.cpu_memid. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%0.cpu. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%0.to_memid. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%0.memop. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.spec_cpu. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.is_run. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.is_stop. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.stop_cpu. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.start_cpu. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.spec_vc_handle. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.spec_exception_handle. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.handle_mem_err. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.op. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.op_write_reg. FuelId)
(declare-const fuel%verismo!arch.x64.x64_u.impl&%1.inv_regdb. FuelId)
(declare-const fuel%verismo!arch.x64.x64_u.impl&%1.inv_regdb_any_cpu. FuelId)
(declare-const fuel%verismo!arch.x64.x64_u.impl&%1.inv. FuelId)
(declare-const fuel%verismo!arch.x64.x64_u.impl&%2.reg_write_requires. FuelId)
(declare-const fuel%verismo!arch.x64.x64_u.impl&%2.op_requires. FuelId)
(declare-const fuel%verismo!tspec.cast.proof_field_set_constant. FuelId)
(declare-const fuel%verismo!tspec.cast.fn_vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%1.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%7.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%8.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%9.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%10.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%11.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%12.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%13.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%14.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%15.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%16.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%17.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%18.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%19.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%20.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%21.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%22.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%23.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%24.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%25.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%26.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%27.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%28.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%29.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%30.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%31.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%32.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%33.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%34.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%35.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%36.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%37.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%38.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%39.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%40.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%41.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%42.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%43.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%44.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%45.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%46.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%47.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%48.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%49.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%50.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%51.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%52.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%53.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%54.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%55.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%56.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%57.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%58.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%59.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%60.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%61.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%62.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%63.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%64.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%65.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%66.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%67.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%68.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%69.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%70.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%71.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%72.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%73.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%74.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%75.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%76.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%77.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%78.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%79.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%80.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%81.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%82.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%83.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%84.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%85.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%86.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%87.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%88.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%89.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%90.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%91.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%92.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%93.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%94.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%95.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%96.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%97.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%98.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%99.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%100.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%101.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.fmap.impl&%1.spec_set_map. FuelId)
(declare-const fuel%verismo!tspec.fmap.impl&%3.insert. FuelId)
(declare-const fuel%verismo!tspec.fmap.impl&%3.spec_index. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%0.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%0.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%1.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%1.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%2.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%2.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%3.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%3.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%4.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%4.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%5.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%5.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%6.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%6.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%7.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%7.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%8.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%8.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%9.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%9.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%10.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%10.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%11.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%11.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%0.spec_add. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%1.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%2.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%6.spec_ge. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%8.spec_ge. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%9.spec_ge. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%10.spec_ge. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%11.spec_ge. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%12.spec_ge. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%13.spec_ge. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%14.spec_ge. FuelId)
(declare-const fuel%verismo!tspec.setlib.uop_to_bop. FuelId)
(declare-const fuel%verismo!tspec.setlib.set_op. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%8.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%9.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%10.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%12.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%13.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%14.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%15.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%16.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%17.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%18.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%19.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.stream.stream_to_data. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%0.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%1.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%3.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%4.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%5.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%6.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%7.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%8.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%9.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%10.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%11.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%12.wf. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%4.from_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%5.ord_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%6.spec_from_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%9.is_VMPL0. FuelId)
(declare-const fuel%verismo!arch.memop.impl&%0.is_Read. FuelId)
(declare-const fuel%verismo!arch.memop.impl&%0.is_Write. FuelId)
(declare-const fuel%verismo!arch.memop.impl&%0.is_RmpOp. FuelId)
(declare-const fuel%verismo!arch.errors.impl&%0.is_RmpOp. FuelId)
(declare-const fuel%verismo!arch.errors.impl&%0.get_RmpOp_0. FuelId)
(declare-const fuel%verismo!arch.errors.impl&%2.is_DoubleVal. FuelId)
(declare-const fuel%verismo!arch.errors.impl&%3.trigger_trap. FuelId)
(declare-const fuel%verismo!arch.errors.impl&%3.with_param. FuelId)
(declare-const fuel%verismo!arch.reg.impl&%3.as_int. FuelId)
(declare-const fuel%verismo!arch.reg.impl&%3.from_int. FuelId)
(declare-const fuel%verismo!arch.reg.impl&%4.ord_int. FuelId)
(declare-const fuel%verismo!arch.reg.impl&%5.spec_from_int. FuelId)
(declare-const fuel%verismo!arch.reg.impl&%7.reg_inv. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%0.wf. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%1.wf. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%0.wf. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%1.is_constant. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%1.is_constant_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.recursive_sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.spec_unused. FuelId)
(declare-const fuel%verismo!tspec.impl&%0.is_Ok. FuelId)
(declare-const fuel%verismo!tspec.impl&%3.is_Ok. FuelId)
(declare-const fuel%verismo!tspec.impl&%3.get_Error_1. FuelId)
(declare-const fuel%verismo!tspec.impl&%5.replace_err. FuelId)
(declare-const fuel%verismo!tspec.impl&%5.to_result. FuelId)
(declare-const fuel%verismo!tspec.impl&%5.to_err. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.Seq.last. fuel%vstd!set.impl&%0.full. fuel%vstd!set.impl&%0.choose. fuel%verismo!tspec.math.bits_p.spec_bit_set. fuel%verismo!tspec.math.pow_s.spec_int_pow2. fuel%verismo!tspec.math.pow_s.spec_nat_pow2. fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol. fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom. fuel%verismo!tspec.security.sectype.impl&%0.is_Secret. fuel%verismo!tspec.security.sectype.impl&%3.spec_val. fuel%verismo!tspec.security.sectype.impl&%3.spec__unused. fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets. fuel%verismo!tspec.security.sectype.impl&%3.spec_labels. fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to. fuel%verismo!tspec.security.sectype.impl&%12.is_constant. fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to. fuel%verismo!tspec.security.sectype.impl&%15.is_constant. fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl. fuel%verismo!tspec.security.sectype.impl&%16.wf_value. fuel%verismo!tspec.security.sectype.impl&%16.bop_new. fuel%verismo!tspec.security.sectype.impl&%16.uop_new. fuel%verismo!tspec.security.sectype.impl&%16.constant. fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%20.wf. fuel%verismo!tspec.security.sectype.impl&%480.ord_int. fuel%verismo!tspec.security.sectype.impl&%481.ord_int. fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%514.spec_add. fuel%verismo!tspec.security.sectype.impl&%515.spec_add. fuel%verismo!tspec.security.sectype.impl&%516.spec_sub. fuel%verismo!tspec.security.sectype.impl&%517.spec_sub. fuel%verismo!tspec.security.sectype.impl&%534.ord_int. fuel%verismo!tspec.security.sectype.impl&%535.ord_int. fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%568.spec_add. fuel%verismo!tspec.security.sectype.impl&%569.spec_add. fuel%verismo!tspec.security.sectype.impl&%570.spec_sub. fuel%verismo!tspec.security.sectype.impl&%571.spec_sub. fuel%verismo!tspec.security.sectype.impl&%588.ord_int. fuel%verismo!tspec.security.sectype.impl&%589.ord_int. fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%622.spec_add. fuel%verismo!tspec.security.sectype.impl&%623.spec_add. fuel%verismo!tspec.security.sectype.impl&%624.spec_sub. fuel%verismo!tspec.security.sectype.impl&%625.spec_sub. fuel%verismo!tspec.security.sectype.impl&%642.ord_int. fuel%verismo!tspec.security.sectype.impl&%643.ord_int. fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%676.spec_add. fuel%verismo!tspec.security.sectype.impl&%677.spec_add. fuel%verismo!tspec.security.sectype.impl&%678.spec_sub. fuel%verismo!tspec.security.sectype.impl&%679.spec_sub. fuel%verismo!tspec.security.sectype.impl&%696.ord_int. fuel%verismo!tspec.security.sectype.impl&%697.ord_int. fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%730.spec_add. fuel%verismo!tspec.security.sectype.impl&%731.spec_add. fuel%verismo!tspec.security.sectype.impl&%732.spec_sub. fuel%verismo!tspec.security.sectype.impl&%733.spec_sub. fuel%verismo!tspec.security.sectype.impl&%750.ord_int. fuel%verismo!tspec.security.sectype.impl&%751.ord_int. fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%780.spec_add. fuel%verismo!tspec.security.sectype.impl&%781.spec_add. fuel%verismo!tspec.security.sectype.impl&%782.spec_sub. fuel%verismo!tspec.security.sectype.impl&%783.spec_sub. fuel%verismo!tspec.security.sectype.impl&%790.ord_int. fuel%verismo!tspec.security.sectype.impl&%791.ord_int. fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%820.spec_add. fuel%verismo!tspec.security.sectype.impl&%821.spec_add. fuel%verismo!tspec.security.sectype.impl&%822.spec_sub. fuel%verismo!tspec.security.sectype.impl&%823.spec_sub. fuel%verismo!tspec.security.seq.fn_spec_to_seq_index. fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to. fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to. fuel%verismo!tspec.stream.basic.bool_to_stream. fuel%verismo!tspec.stream.basic.char_to_stream. fuel%verismo!tspec.stream.basic.u8_to_stream. fuel%verismo!tspec.stream.basic.u16_to_stream. fuel%verismo!tspec.stream.basic.u32_to_stream. fuel%verismo!tspec.stream.basic.u64_to_stream. fuel%verismo!tspec.stream.basic.u128_to_stream. fuel%verismo!tspec.stream.basic.usize_to_stream. fuel%verismo!arch.addr_s.def_s.impl&%2.vspec_cast_to. fuel%verismo!arch.addr_s.def_s.impl&%5.vspec_cast_to. fuel%verismo!arch.addr_s.def_s.impl&%6.spec_size_def. fuel%verismo!arch.addr_s.def_s.impl&%7.wf. fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant. fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant_to. fuel%verismo!arch.addr_s.def_s.impl&%11.vspec_cast_to. fuel%verismo!arch.addr_s.def_s.impl&%14.vspec_cast_to. fuel%verismo!arch.addr_s.def_s.impl&%15.spec_size_def. fuel%verismo!arch.addr_s.def_s.impl&%16.wf. fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant. fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant_to. fuel%verismo!arch.addr_s.def_s.impl&%20.vspec_cast_to. fuel%verismo!arch.addr_s.def_s.impl&%23.vspec_cast_to. fuel%verismo!arch.addr_s.def_s.impl&%24.spec_size_def. fuel%verismo!arch.addr_s.def_s.impl&%25.wf. fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant. fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant_to. fuel%verismo!arch.addr_s.def_s.PAGE_SIZE. fuel%verismo!arch.addr_s.def_s.impl&%36.as_int. fuel%verismo!arch.addr_s.def_s.impl&%36.from_int. fuel%verismo!arch.addr_s.def_s.impl&%37.ord_int. fuel%verismo!arch.addr_s.def_s.impl&%38.spec_from_int. fuel%verismo!arch.addr_s.page.impl&%2.value. fuel%verismo!arch.addr_s.page.impl&%2.to_page. fuel%verismo!arch.addr_s.page.impl&%2.to_offset. fuel%verismo!arch.addr_s.page.impl&%2.new2. fuel%verismo!arch.addr_s.page.impl&%2.new. fuel%verismo!arch.addr_s.page.impl&%2.null. fuel%verismo!arch.addr_s.page.impl&%2.to_mem. fuel%verismo!arch.addr_s.page.impl&%3.value. fuel%verismo!arch.addr_s.page.impl&%3.is_valid. fuel%verismo!arch.addr_s.page.impl&%3.new. fuel%verismo!arch.addr_s.page.impl&%3.new2. fuel%verismo!arch.addr_s.page.impl&%3.to_addr. fuel%verismo!arch.addr_s.page.impl&%3.to_mem. fuel%verismo!arch.addr_s.page.impl&%3.valid_as_size. fuel%verismo!arch.addr_s.page.impl&%4.as_int. fuel%verismo!arch.addr_s.page.impl&%4.from_int. fuel%verismo!arch.addr_s.page.impl&%5.as_int. fuel%verismo!arch.addr_s.page.impl&%5.from_int. fuel%verismo!arch.addr_s.page.impl&%6.ord_int. fuel%verismo!arch.addr_s.page.impl&%7.ord_int. fuel%verismo!arch.addr_s.page.impl&%8.from_range. fuel%verismo!arch.addr_s.page.impl&%8.convert. fuel%verismo!arch.addr_s.page.impl&%8.is_aligned. fuel%verismo!arch.addr_s.page.impl&%8.is_valid. fuel%verismo!arch.addr_s.page.impl&%8.spec_index. fuel%verismo!arch.addr_s.page.impl&%8.first. fuel%verismo!arch.addr_s.page.impl&%8.offset. fuel%verismo!arch.addr_s.page.impl&%8.len. fuel%verismo!arch.addr_s.page.impl&%8.to_page. fuel%verismo!arch.entities.memid.impl&%0.is_Guest. fuel%verismo!arch.entities.memid.impl&%0.is_Hv. fuel%verismo!arch.entities.memid.impl&%2.cpu. fuel%verismo!arch.entities.memid.impl&%2.memid. fuel%verismo!arch.entities.memid.impl&%3.is_sm. fuel%verismo!arch.entities.memid.impl&%3.is_vmpl0. fuel%verismo!arch.entities.memid.impl&%3.to_asid. fuel%verismo!arch.entities.memid.impl&%3.to_vmpl. fuel%verismo!arch.entities.memtype.impl&%4.as_int. fuel%verismo!arch.entities.memtype.impl&%4.from_int. fuel%verismo!arch.entities.memtype.impl&%5.ord_int. fuel%verismo!arch.entities.memtype.impl&%6.spec_from_int. fuel%verismo!arch.entities.memtype.impl&%7.is_L0. fuel%verismo!arch.entities.memtype.impl&%8.is_PTE. fuel%verismo!arch.entities.memtype.impl&%8.get_PTE_0. fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivData. fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivCode. fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivStack. fuel%verismo!arch.entities.memtype.impl&%8.is_SmBootData. fuel%verismo!arch.entities.memtype.impl&%8.is_SmVmplPage. fuel%verismo!arch.entities.memtype.impl&%10.is_sm_int. fuel%verismo!arch.entities.memtype.impl&%10.is_vm_int. fuel%verismo!arch.entities.memtype.impl&%10.need_c_bit. fuel%verismo!arch.entities.memtype.memtype. fuel%verismo!arch.crypto.encdec.impl&%1.decrypt. fuel%verismo!arch.rmp.access_u.impl&%0.view. fuel%verismo!arch.rmp.db_s.rmp_check_access. fuel%verismo!arch.rmp.db_u.rmp_reverse. fuel%verismo!arch.rmp.db_u.rmp_reverse_mem. fuel%verismo!arch.rmp.db_u.rmp_has_gpn_memid. fuel%verismo!arch.rmp.db_u.rmp_inv_sw. fuel%verismo!arch.rmp.db_u.rmp_inv_memid_int. fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable. fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned. fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated. fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa. fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid. fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn. fuel%verismo!arch.rmp.def_s.impl&%0.spec_size. fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms. fuel%verismo!arch.rmp.def_s.impl&%3.spec_val. fuel%verismo!arch.rmp.def_s.RMP_FAIL_INPUT. fuel%verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION. fuel%verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH. fuel%verismo!arch.rmp.entry_s.impl&%0.spec_perm. fuel%verismo!arch.rmp.entry_s.impl&%0.check_vmpl. fuel%verismo!arch.rmp.perm_s.impl&%1.as_int. fuel%verismo!arch.rmp.perm_s.impl&%1.from_int. fuel%verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid. fuel%verismo!arch.rmp.rmpop_u.impl&%1.set_gpn. fuel%verismo!arch.rmp.rmpop_u.impl&%2.gp_op_requires. fuel%verismo!arch.rmp.rmpop_u.impl&%2.set_spn. fuel%verismo!arch.rmp.rmpop_u.impl&%3.op_requires_stateless. fuel%verismo!arch.rmp.rmpop_u.impl&%3.sp_op_requires. fuel%verismo!arch.memop.gvmemop.impl&%0.translate_gpn. fuel%verismo!arch.memop.memop.impl&%0.to_addr_memid. fuel%verismo!arch.memop.memop.impl&%0.to_memid. fuel%verismo!arch.memop.memop.impl&%0.to_mem. fuel%verismo!arch.memop.memop.impl&%0.to_page. fuel%verismo!arch.memop.memop.impl&%0.use_gmap. fuel%verismo!arch.memop.memop.impl&%0.is_valid. fuel%verismo!arch.ramdb.def.impl&%0.spec_data. fuel%verismo!arch.ramdb.def.impl&%0.spec_write_count. fuel%verismo!arch.ramdb.def.impl&%0.spec_crypto_mask. fuel%verismo!arch.ramdb.ram_s.MEM_UNIT_SIZE. fuel%verismo!arch.ramdb.ram_s.idx2. fuel%verismo!arch.ramdb.ram_s.idx. fuel%verismo!arch.ramdb.ram_s.impl&%0.read_one_byte. fuel%verismo!arch.ramdb.ram_s.impl&%0.read_bytes_by_asid. fuel%verismo!arch.pgtable.def.PT_ENTRY_SIZE. fuel%verismo!arch.pgtable.def.L3_PGSIZE. fuel%verismo!arch.pgtable.def.L2_PGSIZE. fuel%verismo!arch.pgtable.def.L1_PGSIZE. fuel%verismo!arch.pgtable.def.L0_PGSIZE. fuel%verismo!arch.pgtable.def.PT_ENTRY_NUM. fuel%verismo!arch.pgtable.def.impl&%4.as_int. fuel%verismo!arch.pgtable.def.impl&%4.from_int. fuel%verismo!arch.pgtable.def.impl&%5.ord_int. fuel%verismo!arch.pgtable.def.impl&%6.spec_from_int. fuel%verismo!arch.pgtable.def.impl&%8.spec_value. fuel%verismo!arch.pgtable.def_e.impl&%2.vspec_cast_to. fuel%verismo!arch.pgtable.def_e.impl&%3.vspec_cast_to. fuel%verismo!arch.pgtable.def_e.impl&%4.spec_size_def. fuel%verismo!arch.pgtable.def_e.impl&%5.wf. fuel%verismo!arch.pgtable.def_e.impl&%6.is_constant. fuel%verismo!arch.pgtable.def_e.impl&%6.is_constant_to. fuel%verismo!arch.pgtable.def_e.impl&%7.view. fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize. fuel%verismo!arch.pgtable.entry_s.impl&%0.parent_lvl. fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_table_index. fuel%verismo!arch.pgtable.entry_s.impl&%1.new_val. fuel%verismo!arch.pgtable.entry_s.impl&%1.contains_flag. fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_ppn. fuel%verismo!arch.pgtable.entry_s.impl&%1.is_encrypted. fuel%verismo!arch.pgtable.entry_s.impl&%1.is_present. fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_addr. fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page. fuel%verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx. fuel%verismo!arch.pgtable.memmap_s.impl&%0.spec_index. fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_valid. fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted. fuel%verismo!arch.pgtable.memmap_s.impl&%0.translate. fuel%verismo!arch.pgtable.memmap_s.impl&%0.translate_addr_seq. fuel%verismo!arch.tlb.def_s.impl&%0.spec_set_db. fuel%verismo!arch.tlb.def_s.impl&%2.spec_db. fuel%verismo!arch.tlb.tlb_s.impl&%0.to_mem_map. fuel%verismo!arch.tlb.tlb_s.impl&%0.load. fuel%verismo!arch.tlb.tlb_s.impl&%0.invlpg. fuel%verismo!arch.tlb.tlb_s.impl&%0.flush_memid. fuel%verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem. fuel%verismo!arch.vram.def.impl&%2.spec_sram. fuel%verismo!arch.vram.def.impl&%2.spec_rmp. fuel%verismo!arch.vram.vram_s.impl&%2.pte_write_requires_nosysmap. fuel%verismo!arch.vram.vram_s.impl&%2.gpwrite_requires. fuel%verismo!arch.vram.vram_s.impl&%2.gpmemop_requires. fuel%verismo!arch.vram.vram_s.impl&%2.inv. fuel%verismo!arch.vram.vram_s.impl&%2.inv_sw. fuel%verismo!arch.vram.vram_s.impl&%2.inv_memid_int. fuel%verismo!arch.vram.vram_s.impl&%2.get. fuel%verismo!arch.vram.vram_s.impl&%2.get_enc_bytes_ok. fuel%verismo!arch.vram.vram_s.impl&%2.get_enc_data_ok. fuel%verismo!arch.vram.vram_s.impl&%2.get_bytes. fuel%verismo!arch.vram.vram_s.impl&%2.read_bytes. fuel%verismo!arch.ptram.def_s.impl&%0.spec_ram. fuel%verismo!arch.ptram.def_s.impl&%0.spec_l0_entry. fuel%verismo!arch.ptram.def_s.impl&%1.spec_set_ram. fuel%verismo!arch.ptram.def_s.impl&%1.spec_set_l0_entry. fuel%verismo!arch.ptram.ptram_s.impl&%0.hw_read_pte. fuel%verismo!arch.ptram.ptram_s.impl&%0.map_entry_gpa. fuel%verismo!arch.ptram.ptram_s.impl&%0.map_entry. fuel%verismo!arch.ptram.ptram_s.impl&%0.to_mem_map. fuel%verismo!arch.ptram.ptram_u.impl&%2.pgtb_walk_addrs_recursive_ok. fuel%verismo!arch.ptram.ptram_u.impl&%2.valid_access. fuel%verismo!arch.ptram.ptram_u.impl&%2.l0_entry. fuel%verismo!arch.ptram.ptram_u.impl&%2.inv. fuel%verismo!arch.ptram.ptram_u.impl&%2.inv_dom_ok. fuel%verismo!arch.ptram.ptram_u.impl&%2.map_entry_gpa_ok. fuel%verismo!arch.ptram.ptram_u.impl&%2.map_entry_ok. fuel%verismo!arch.ptram.ptram_u.impl&%2.map_entry_exe_ok. fuel%verismo!arch.ptram.ptram_u.impl&%2.to_mem_map_ok. fuel%verismo!arch.mem.def_s.impl&%0.spec_vram. fuel%verismo!arch.mem.def_s.impl&%0.spec_l0_entry. fuel%verismo!arch.mem.def_s.impl&%0.spec_sysmap. fuel%verismo!arch.mem.def_s.impl&%0.spec_tlb. fuel%verismo!arch.mem.def_s.impl&%1.spec_set_vram. fuel%verismo!arch.mem.def_s.impl&%1.spec_set_tlb. fuel%verismo!arch.mem.mem_s.impl&%0.spec_g_page_table. fuel%verismo!arch.mem.mem_s.impl&%0.to_mem_map. fuel%verismo!arch.mem.mem_s.impl&%0.to_gpop. fuel%verismo!arch.mem.mem_s.impl&%0.op. fuel%verismo!arch.mem.mem_s.impl&%0.op_invlpg. fuel%verismo!arch.mem.mem_s.impl&%0.op_flush. fuel%verismo!arch.mem.mem_s.impl&%0.op_by_gpn_memtype. fuel%verismo!arch.mem.mem_s.impl&%0.op_pvalidate. fuel%verismo!arch.mem.mem_s.impl&%0.op_rmpadjust. fuel%verismo!arch.mem.mem_s.impl&%0.op_rmpupdate. fuel%verismo!arch.mem.mem_u.impl&%0.to_gpop_ok. fuel%verismo!arch.mem.mem_u.impl&%0.vop_requires. fuel%verismo!arch.mem.mem_u.impl&%0.inv. fuel%verismo!arch.mem.mem_u.impl&%0.to_mem_map_ok. fuel%verismo!arch.x64.def_s.impl&%0.is_MemOp. fuel%verismo!arch.x64.def_s.impl&%0.get_MemOp_0. fuel%verismo!arch.x64.def_s.impl&%4.spec_memdb. fuel%verismo!arch.x64.def_s.impl&%4.spec_regdb. fuel%verismo!arch.x64.def_s.impl&%4.spec_entities. fuel%verismo!arch.x64.def_s.impl&%5.spec_set_memdb. fuel%verismo!arch.x64.def_s.impl&%5.spec_set_regdb. fuel%verismo!arch.x64.def_s.impl&%5.spec_set_entities. fuel%verismo!arch.x64.x64_s.impl&%0.is_valid. fuel%verismo!arch.x64.x64_s.impl&%0.start_cpu_with_vmsa. fuel%verismo!arch.x64.x64_s.impl&%0.cpu_memid. fuel%verismo!arch.x64.x64_s.impl&%0.cpu. fuel%verismo!arch.x64.x64_s.impl&%0.to_memid. fuel%verismo!arch.x64.x64_s.impl&%0.memop. fuel%verismo!arch.x64.x64_s.impl&%1.spec_cpu. fuel%verismo!arch.x64.x64_s.impl&%1.is_run. fuel%verismo!arch.x64.x64_s.impl&%1.is_stop. fuel%verismo!arch.x64.x64_s.impl&%1.stop_cpu. fuel%verismo!arch.x64.x64_s.impl&%1.start_cpu. fuel%verismo!arch.x64.x64_s.impl&%1.spec_vc_handle. fuel%verismo!arch.x64.x64_s.impl&%1.spec_exception_handle. fuel%verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle. fuel%verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn. fuel%verismo!arch.x64.x64_s.impl&%1.handle_mem_err. fuel%verismo!arch.x64.x64_s.impl&%1.op. fuel%verismo!arch.x64.x64_s.impl&%1.op_write_reg. fuel%verismo!arch.x64.x64_u.impl&%1.inv_regdb. fuel%verismo!arch.x64.x64_u.impl&%1.inv_regdb_any_cpu. fuel%verismo!arch.x64.x64_u.impl&%1.inv. fuel%verismo!arch.x64.x64_u.impl&%2.reg_write_requires. fuel%verismo!arch.x64.x64_u.impl&%2.op_requires. fuel%verismo!tspec.cast.proof_field_set_constant. fuel%verismo!tspec.cast.fn_vspec_cast_to. fuel%verismo!tspec.cast.impl&%1.vspec_cast_to. fuel%verismo!tspec.cast.impl&%2.vspec_cast_to. fuel%verismo!tspec.cast.impl&%3.vspec_cast_to. fuel%verismo!tspec.cast.impl&%4.vspec_cast_to. fuel%verismo!tspec.cast.impl&%5.vspec_cast_to. fuel%verismo!tspec.cast.impl&%6.vspec_cast_to. fuel%verismo!tspec.cast.impl&%7.vspec_cast_to. fuel%verismo!tspec.cast.impl&%8.vspec_cast_to. fuel%verismo!tspec.cast.impl&%9.vspec_cast_to. fuel%verismo!tspec.cast.impl&%10.vspec_cast_to. fuel%verismo!tspec.cast.impl&%11.vspec_cast_to. fuel%verismo!tspec.cast.impl&%12.vspec_cast_to. fuel%verismo!tspec.cast.impl&%13.vspec_cast_to. fuel%verismo!tspec.cast.impl&%14.vspec_cast_to. fuel%verismo!tspec.cast.impl&%15.vspec_cast_to. fuel%verismo!tspec.cast.impl&%16.vspec_cast_to. fuel%verismo!tspec.cast.impl&%17.vspec_cast_to. fuel%verismo!tspec.cast.impl&%18.vspec_cast_to. fuel%verismo!tspec.cast.impl&%19.vspec_cast_to. fuel%verismo!tspec.cast.impl&%20.vspec_cast_to. fuel%verismo!tspec.cast.impl&%21.vspec_cast_to. fuel%verismo!tspec.cast.impl&%22.vspec_cast_to. fuel%verismo!tspec.cast.impl&%23.vspec_cast_to. fuel%verismo!tspec.cast.impl&%24.vspec_cast_to. fuel%verismo!tspec.cast.impl&%25.vspec_cast_to. fuel%verismo!tspec.cast.impl&%26.vspec_cast_to. fuel%verismo!tspec.cast.impl&%27.vspec_cast_to. fuel%verismo!tspec.cast.impl&%28.vspec_cast_to. fuel%verismo!tspec.cast.impl&%29.vspec_cast_to. fuel%verismo!tspec.cast.impl&%30.vspec_cast_to. fuel%verismo!tspec.cast.impl&%31.vspec_cast_to. fuel%verismo!tspec.cast.impl&%32.vspec_cast_to. fuel%verismo!tspec.cast.impl&%33.vspec_cast_to. fuel%verismo!tspec.cast.impl&%34.vspec_cast_to. fuel%verismo!tspec.cast.impl&%35.vspec_cast_to. fuel%verismo!tspec.cast.impl&%36.vspec_cast_to. fuel%verismo!tspec.cast.impl&%37.vspec_cast_to. fuel%verismo!tspec.cast.impl&%38.vspec_cast_to. fuel%verismo!tspec.cast.impl&%39.vspec_cast_to. fuel%verismo!tspec.cast.impl&%40.vspec_cast_to. fuel%verismo!tspec.cast.impl&%41.vspec_cast_to. fuel%verismo!tspec.cast.impl&%42.vspec_cast_to. fuel%verismo!tspec.cast.impl&%43.vspec_cast_to. fuel%verismo!tspec.cast.impl&%44.vspec_cast_to. fuel%verismo!tspec.cast.impl&%45.vspec_cast_to. fuel%verismo!tspec.cast.impl&%46.vspec_cast_to. fuel%verismo!tspec.cast.impl&%47.vspec_cast_to. fuel%verismo!tspec.cast.impl&%48.vspec_cast_to. fuel%verismo!tspec.cast.impl&%49.vspec_cast_to. fuel%verismo!tspec.cast.impl&%50.vspec_cast_to. fuel%verismo!tspec.cast.impl&%51.vspec_cast_to. fuel%verismo!tspec.cast.impl&%52.vspec_cast_to. fuel%verismo!tspec.cast.impl&%53.vspec_cast_to. fuel%verismo!tspec.cast.impl&%54.vspec_cast_to. fuel%verismo!tspec.cast.impl&%55.vspec_cast_to. fuel%verismo!tspec.cast.impl&%56.vspec_cast_to. fuel%verismo!tspec.cast.impl&%57.vspec_cast_to. fuel%verismo!tspec.cast.impl&%58.vspec_cast_to. fuel%verismo!tspec.cast.impl&%59.vspec_cast_to. fuel%verismo!tspec.cast.impl&%60.vspec_cast_to. fuel%verismo!tspec.cast.impl&%61.vspec_cast_to. fuel%verismo!tspec.cast.impl&%62.vspec_cast_to. fuel%verismo!tspec.cast.impl&%63.vspec_cast_to. fuel%verismo!tspec.cast.impl&%64.vspec_cast_to. fuel%verismo!tspec.cast.impl&%65.vspec_cast_to. fuel%verismo!tspec.cast.impl&%66.vspec_cast_to. fuel%verismo!tspec.cast.impl&%67.vspec_cast_to. fuel%verismo!tspec.cast.impl&%68.vspec_cast_to. fuel%verismo!tspec.cast.impl&%69.vspec_cast_to. fuel%verismo!tspec.cast.impl&%70.vspec_cast_to. fuel%verismo!tspec.cast.impl&%71.vspec_cast_to. fuel%verismo!tspec.cast.impl&%72.vspec_cast_to. fuel%verismo!tspec.cast.impl&%73.vspec_cast_to. fuel%verismo!tspec.cast.impl&%74.vspec_cast_to. fuel%verismo!tspec.cast.impl&%75.vspec_cast_to. fuel%verismo!tspec.cast.impl&%76.vspec_cast_to. fuel%verismo!tspec.cast.impl&%77.vspec_cast_to. fuel%verismo!tspec.cast.impl&%78.vspec_cast_to. fuel%verismo!tspec.cast.impl&%79.vspec_cast_to. fuel%verismo!tspec.cast.impl&%80.vspec_cast_to. fuel%verismo!tspec.cast.impl&%81.vspec_cast_to. fuel%verismo!tspec.cast.impl&%82.vspec_cast_to. fuel%verismo!tspec.cast.impl&%83.vspec_cast_to. fuel%verismo!tspec.cast.impl&%84.vspec_cast_to. fuel%verismo!tspec.cast.impl&%85.vspec_cast_to. fuel%verismo!tspec.cast.impl&%86.vspec_cast_to. fuel%verismo!tspec.cast.impl&%87.vspec_cast_to. fuel%verismo!tspec.cast.impl&%88.vspec_cast_to. fuel%verismo!tspec.cast.impl&%89.vspec_cast_to. fuel%verismo!tspec.cast.impl&%90.vspec_cast_to. fuel%verismo!tspec.cast.impl&%91.vspec_cast_to. fuel%verismo!tspec.cast.impl&%92.vspec_cast_to. fuel%verismo!tspec.cast.impl&%93.vspec_cast_to. fuel%verismo!tspec.cast.impl&%94.vspec_cast_to. fuel%verismo!tspec.cast.impl&%95.vspec_cast_to. fuel%verismo!tspec.cast.impl&%96.vspec_cast_to. fuel%verismo!tspec.cast.impl&%97.vspec_cast_to. fuel%verismo!tspec.cast.impl&%98.vspec_cast_to. fuel%verismo!tspec.cast.impl&%99.vspec_cast_to. fuel%verismo!tspec.cast.impl&%100.vspec_cast_to. fuel%verismo!tspec.cast.impl&%101.vspec_cast_to. fuel%verismo!tspec.fmap.impl&%1.spec_set_map. fuel%verismo!tspec.fmap.impl&%3.insert. fuel%verismo!tspec.fmap.impl&%3.spec_index. fuel%verismo!tspec.isconst.impl&%0.is_constant. fuel%verismo!tspec.isconst.impl&%0.is_constant_to. fuel%verismo!tspec.isconst.impl&%1.is_constant. fuel%verismo!tspec.isconst.impl&%1.is_constant_to. fuel%verismo!tspec.isconst.impl&%2.is_constant. fuel%verismo!tspec.isconst.impl&%2.is_constant_to. fuel%verismo!tspec.isconst.impl&%3.is_constant. fuel%verismo!tspec.isconst.impl&%3.is_constant_to. fuel%verismo!tspec.isconst.impl&%4.is_constant. fuel%verismo!tspec.isconst.impl&%4.is_constant_to. fuel%verismo!tspec.isconst.impl&%5.is_constant. fuel%verismo!tspec.isconst.impl&%5.is_constant_to. fuel%verismo!tspec.isconst.impl&%6.is_constant. fuel%verismo!tspec.isconst.impl&%6.is_constant_to. fuel%verismo!tspec.isconst.impl&%7.is_constant. fuel%verismo!tspec.isconst.impl&%7.is_constant_to. fuel%verismo!tspec.isconst.impl&%8.is_constant. fuel%verismo!tspec.isconst.impl&%8.is_constant_to. fuel%verismo!tspec.isconst.impl&%9.is_constant. fuel%verismo!tspec.isconst.impl&%9.is_constant_to. fuel%verismo!tspec.isconst.impl&%10.is_constant. fuel%verismo!tspec.isconst.impl&%10.is_constant_to. fuel%verismo!tspec.isconst.impl&%11.is_constant. fuel%verismo!tspec.isconst.impl&%11.is_constant_to. fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int. fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int. fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int. fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int. fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int. fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int. fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int. fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int. fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat. fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int. fuel%verismo!tspec.integer.impl&%0.spec_add. fuel%verismo!tspec.integer.impl&%1.spec_sub. fuel%verismo!tspec.integer.impl&%2.spec_sub. fuel%verismo!tspec.integer.impl&%6.spec_ge. fuel%verismo!tspec.integer.impl&%8.spec_ge. fuel%verismo!tspec.integer.impl&%9.spec_ge. fuel%verismo!tspec.integer.impl&%10.spec_ge. fuel%verismo!tspec.integer.impl&%11.spec_ge. fuel%verismo!tspec.integer.impl&%12.spec_ge. fuel%verismo!tspec.integer.impl&%13.spec_ge. fuel%verismo!tspec.integer.impl&%14.spec_ge. fuel%verismo!tspec.setlib.uop_to_bop. fuel%verismo!tspec.setlib.set_op. fuel%verismo!tspec.size_s.impl&%8.spec_size_def. fuel%verismo!tspec.size_s.impl&%9.spec_size_def. fuel%verismo!tspec.size_s.impl&%10.spec_size_def. fuel%verismo!tspec.size_s.impl&%11.spec_size_def. fuel%verismo!tspec.size_s.impl&%12.spec_size_def. fuel%verismo!tspec.size_s.impl&%13.spec_size_def. fuel%verismo!tspec.size_s.impl&%14.spec_size_def. fuel%verismo!tspec.size_s.impl&%15.spec_size_def. fuel%verismo!tspec.size_s.impl&%16.spec_size_def. fuel%verismo!tspec.size_s.impl&%17.spec_size_def. fuel%verismo!tspec.size_s.impl&%18.spec_size_def. fuel%verismo!tspec.size_s.impl&%19.spec_size_def. fuel%verismo!tspec.stream.stream_to_data. fuel%verismo!tspec.wellformed.impl&%0.wf. fuel%verismo!tspec.wellformed.impl&%1.wf. fuel%verismo!tspec.wellformed.impl&%3.wf. fuel%verismo!tspec.wellformed.impl&%4.wf. fuel%verismo!tspec.wellformed.impl&%5.wf. fuel%verismo!tspec.wellformed.impl&%6.wf. fuel%verismo!tspec.wellformed.impl&%7.wf. fuel%verismo!tspec.wellformed.impl&%8.wf. fuel%verismo!tspec.wellformed.impl&%9.wf. fuel%verismo!tspec.wellformed.impl&%10.wf. fuel%verismo!tspec.wellformed.impl&%11.wf. fuel%verismo!tspec.wellformed.impl&%12.wf. fuel%verismo!arch.entities.impl&%4.as_int. fuel%verismo!arch.entities.impl&%4.from_int. fuel%verismo!arch.entities.impl&%5.ord_int. fuel%verismo!arch.entities.impl&%6.spec_from_int. fuel%verismo!arch.entities.impl&%9.is_VMPL0. fuel%verismo!arch.memop.impl&%0.is_Read. fuel%verismo!arch.memop.impl&%0.is_Write. fuel%verismo!arch.memop.impl&%0.is_RmpOp. fuel%verismo!arch.errors.impl&%0.is_RmpOp. fuel%verismo!arch.errors.impl&%0.get_RmpOp_0. fuel%verismo!arch.errors.impl&%2.is_DoubleVal. fuel%verismo!arch.errors.impl&%3.trigger_trap. fuel%verismo!arch.errors.impl&%3.with_param. fuel%verismo!arch.reg.impl&%3.as_int. fuel%verismo!arch.reg.impl&%3.from_int. fuel%verismo!arch.reg.impl&%4.ord_int. fuel%verismo!arch.reg.impl&%5.spec_from_int. fuel%verismo!arch.reg.impl&%7.reg_inv. fuel%verismo!primitives_e.sectype.impl&%0.wf. fuel%verismo!primitives_e.sectype.impl&%1.wf. fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes. fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes. fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to. fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%0.wf. fuel%verismo!primitives_e.seq.impl&%1.is_constant. fuel%verismo!primitives_e.seq.impl&%1.is_constant_to. fuel%verismo!primitives_e.seq.recursive_sec_bytes. fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to. fuel%verismo!tspec.spec_unused. fuel%verismo!tspec.impl&%0.is_Ok. fuel%verismo!tspec.impl&%3.is_Ok. fuel%verismo!tspec.impl&%3.get_Error_1. fuel%verismo!tspec.impl&%5.replace_err. fuel%verismo!tspec.impl&%5.to_result. fuel%verismo!tspec.impl&%5.to_err.))
(set-info :comment ";; Datatypes")
(declare-sort verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. 0)
(declare-sort verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<u64./tuple%0.>. 0)
(declare-sort vstd!map.Map<nat./bool.>. 0)
(declare-sort vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. 0)
(declare-sort vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. 0)
(declare-sort vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. 0)
(declare-sort vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. 0)
(declare-sort vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. 0)
(declare-sort vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. 0)
(declare-sort vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. 0)
(declare-sort vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. 0)
(declare-sort vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. 0)
(declare-sort vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>.>. 0)
(declare-sort vstd!set.Set<verismo!arch.entities.VMPL.>. 0)
(declare-sort vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. 0)
(declare-sort vstd!set.Set<verismo!arch.entities.memid.MemID.>. 0)
(declare-sort vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. 0)
(declare-datatypes ((core!option.Option. 0) (verismo!tspec.security.sectype.DataLabel. 0) (verismo!tspec.security.sectype.SpecSecType. 0) (verismo!arch.addr_s.def_s.GuestVir. 0) (verismo!arch.addr_s.def_s.GuestPhy. 0) (verismo!arch.addr_s.def_s.SysPhy. 0) (verismo!arch.addr_s.def_s.SpecPage. 0) (verismo!arch.addr_s.def_s.SpecAddr. 0) (verismo!arch.addr_s.def_s.SpecMem. 0) (verismo!arch.addr_s.def_s.PageSize. 0) (verismo!arch.entities.memid.MemID. 0) (verismo!arch.entities.memid.CpuMemID. 0) (verismo!arch.entities.memtype.PTLevel. 0) (verismo!arch.entities.memtype.MemType. 0) (verismo!arch.entities.params.AddrMemID. 0) (verismo!arch.entities.params.PageID. 0) (verismo!arch.entities.params.AddrID. 0) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. 0) (verismo!arch.rmp.def_s.RmpEntry. 0) (verismo!arch.rmp.def_s.RmpAdjustParam. 0) (verismo!arch.rmp.def_s.PvalidateParam. 0) (verismo!arch.rmp.def_s.RmpOp. 0) (verismo!arch.rmp.perm_s.Perm. 0) (verismo!arch.ramdb.def.RamDB. 0) (verismo!arch.pgtable.def.MemMap. 0) (verismo!arch.pgtable.def.PteFlag. 0) (verismo!arch.pgtable.def.SpecPageTableEntry. 0) (verismo!arch.pgtable.def_e.PageTableEntry. 0) (verismo!arch.tlb.def_s.TLB. 0) (verismo!arch.tlb.def_s.TLBIdx. 0) (verismo!arch.vram.def.VRamDB. 0) (verismo!arch.ptram.def_s.GuestPTRam. 0) (verismo!arch.mem.def_s.MemDB. 0) (verismo!arch.x64.def_s.Archx64Op. 0) (verismo!arch.x64.def_s.Archx64. 0) (verismo!arch.x64.def_s.AECode. 0) (verismo!arch.x64.def_s.NAECode. 0) (verismo!arch.x64.def_s.ExceptionCode. 0) (verismo!arch.entities.VMPL. 0) (verismo!arch.crypto.CryptoMask. 0) (verismo!arch.crypto.SymKey. 0) (verismo!arch.crypto.Encrypted. 0) (verismo!arch.memop.MemOp. 0) (verismo!arch.errors.MemError. 0) (verismo!arch.errors.RmpFault. 0) (verismo!arch.reg.RegName. 0) (verismo!arch.reg.RflagBit. 0) (verismo!tspec.ResultOrErr. 0) (verismo!tspec.ResultWithErr. 0) (tuple%0. 0) (tuple%2. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((verismo!tspec.security.sectype.DataLabel./Symbol ) (verismo!tspec.security.sectype.DataLabel./Unknown ) (verismo!tspec.security.sectype.DataLabel./TrustedRandom ) (verismo!tspec.security.sectype.DataLabel./Secret )) ((verismo!tspec.security.sectype.SpecSecType./SpecSecType (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?val Poly) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?_unused core!option.Option.) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?valsets Poly) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?labels vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.))) ((verismo!arch.addr_s.def_s.GuestVir./GuestVir )) ((verismo!arch.addr_s.def_s.GuestPhy./GuestPhy )) ((verismo!arch.addr_s.def_s.SysPhy./SysPhy )) ((verismo!arch.addr_s.def_s.SpecPage./SpecPage (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?value Int) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?dummy Poly))) ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?value Int) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?dummy Poly))) ((verismo!arch.addr_s.def_s.SpecMem./SpecMem (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?first verismo!arch.addr_s.def_s.SpecAddr.) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?size Int))) ((verismo!arch.addr_s.def_s.PageSize./Size4k ) (verismo!arch.addr_s.def_s.PageSize./Size2m )) ((verismo!arch.entities.memid.MemID./Guest (verismo!arch.entities.memid.MemID./Guest/?0 Int) (verismo!arch.entities.memid.MemID./Guest/?1 verismo!arch.entities.VMPL.)) (verismo!arch.entities.memid.MemID./Hv )) ((verismo!arch.entities.memid.CpuMemID./CpuMemID (verismo!arch.entities.memid.CpuMemID./CpuMemID/?0 Int) (verismo!arch.entities.memid.CpuMemID./CpuMemID/?1 verismo!arch.entities.memid.MemID.))) ((verismo!arch.entities.memtype.PTLevel./L3 ) (verismo!arch.entities.memtype.PTLevel./L2 ) (verismo!arch.entities.memtype.PTLevel./L1 ) (verismo!arch.entities.memtype.PTLevel./L0 )) ((verismo!arch.entities.memtype.MemType./PTE (verismo!arch.entities.memtype.MemType./PTE/?0 verismo!arch.entities.memtype.PTLevel.)) (verismo!arch.entities.memtype.MemType./SmPrivData ) (verismo!arch.entities.memtype.MemType./SmPrivCode ) (verismo!arch.entities.memtype.MemType./SmPrivStack ) (verismo!arch.entities.memtype.MemType./SmBootData ) (verismo!arch.entities.memtype.MemType./SmVmplPage ) (verismo!arch.entities.memtype.MemType./RichOSMem ) (verismo!arch.entities.memtype.MemType./HvShared )) ((verismo!arch.entities.params.AddrMemID./AddrMemID (verismo!arch.entities.params.AddrMemID./AddrMemID/?range verismo!arch.addr_s.def_s.SpecMem.) (verismo!arch.entities.params.AddrMemID./AddrMemID/?memid verismo!arch.entities.memid.MemID.))) ((verismo!arch.entities.params.PageID./PageID (verismo!arch.entities.params.PageID./PageID/?page verismo!arch.addr_s.def_s.SpecPage.) (verismo!arch.entities.params.PageID./PageID/?memid verismo!arch.entities.memid.MemID.))) ((verismo!arch.entities.params.AddrID./AddrID (verismo!arch.entities.params.AddrID./AddrID/?addr verismo!arch.addr_s.def_s.SpecAddr.) (verismo!arch.entities.params.AddrID./AddrID/?memid verismo!arch.entities.memid.MemID.))) ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?immutable Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?assigned Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?validated Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?vmsa Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?asid Int) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?gpn verismo!arch.addr_s.def_s.SpecPage.) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?size verismo!arch.addr_s.def_s.PageSize.) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?perms vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.))) ((verismo!arch.rmp.def_s.RmpEntry./RmpEntry (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/?val verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.))) ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?gpn verismo!arch.addr_s.def_s.SpecPage.) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?psize verismo!arch.addr_s.def_s.PageSize.) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?vmsa Bool) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?vmpl verismo!arch.entities.VMPL.) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?perms vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.))) ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?gpn verismo!arch.addr_s.def_s.SpecPage.) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?psize verismo!arch.addr_s.def_s.PageSize.) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?val Bool))) ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/?0 verismo!arch.entities.params.PageID.) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/?1 verismo!arch.rmp.def_s.RmpAdjustParam.)) (verismo!arch.rmp.def_s.RmpOp./Pvalidate (verismo!arch.rmp.def_s.RmpOp./Pvalidate/?0 verismo!arch.entities.params.PageID.) (verismo!arch.rmp.def_s.RmpOp./Pvalidate/?1 verismo!arch.rmp.def_s.PvalidateParam.)) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/?0 verismo!arch.entities.params.PageID.) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/?1 verismo!arch.rmp.def_s.RmpEntry.))) ((verismo!arch.rmp.perm_s.Perm./Read ) (verismo!arch.rmp.perm_s.Perm./Write ) (verismo!arch.rmp.perm_s.Perm./ExeU ) (verismo!arch.rmp.perm_s.Perm./ExeS ) (verismo!arch.rmp.perm_s.Perm./Shadow )) ((verismo!arch.ramdb.def.RamDB./RamDB (verismo!arch.ramdb.def.RamDB./RamDB/?data vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.) (verismo!arch.ramdb.def.RamDB./RamDB/?write_count Int) (verismo!arch.ramdb.def.RamDB./RamDB/?crypto_mask vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.))) ((verismo!arch.pgtable.def.MemMap./MemMap (verismo!arch.pgtable.def.MemMap./MemMap/?db Poly))) ((verismo!arch.pgtable.def.PteFlag./P ) (verismo!arch.pgtable.def.PteFlag./W ) (verismo!arch.pgtable.def.PteFlag./S ) (verismo!arch.pgtable.def.PteFlag./PWT ) (verismo!arch.pgtable.def.PteFlag./PCD ) (verismo!arch.pgtable.def.PteFlag./A ) (verismo!arch.pgtable.def.PteFlag./D ) (verismo!arch.pgtable.def.PteFlag./C ) (verismo!arch.pgtable.def.PteFlag./NX )) ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?value Int) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?dummy Poly))) ((verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/?value verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/?dummy Poly))) ((verismo!arch.tlb.def_s.TLB./TLB (verismo!arch.tlb.def_s.TLB./TLB/?db verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.))) ((verismo!arch.tlb.def_s.TLBIdx./TLBIdx (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/?0 verismo!arch.entities.memid.MemID.) (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/?1 verismo!arch.addr_s.def_s.SpecPage.))) ((verismo!arch.vram.def.VRamDB./VRamDB (verismo!arch.vram.def.VRamDB./VRamDB/?sram verismo!arch.ramdb.def.RamDB.) (verismo!arch.vram.def.VRamDB./VRamDB/?rmp vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.))) ((verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam (verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam/?ram verismo!arch.vram.def.VRamDB.) (verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam/?l0_entry vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.))) ((verismo!arch.mem.def_s.MemDB./MemDB (verismo!arch.mem.def_s.MemDB./MemDB/?vram verismo!arch.vram.def.VRamDB.) (verismo!arch.mem.def_s.MemDB./MemDB/?l0_entry vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.) (verismo!arch.mem.def_s.MemDB./MemDB/?sysmap vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.) (verismo!arch.mem.def_s.MemDB./MemDB/?tlb verismo!arch.tlb.def_s.TLB.))) ((verismo!arch.x64.def_s.Archx64Op./MemOp (verismo!arch.x64.def_s.Archx64Op./MemOp/?0 verismo!arch.memop.MemOp.) (verismo!arch.x64.def_s.Archx64Op./MemOp/?1 Int)) (verismo!arch.x64.def_s.Archx64Op./RegWrite (verismo!arch.x64.def_s.Archx64Op./RegWrite/?0 verismo!arch.entities.memid.CpuMemID.) (verismo!arch.x64.def_s.Archx64Op./RegWrite/?1 verismo!arch.reg.RegName.) (verismo!arch.x64.def_s.Archx64Op./RegWrite/?2 Int)) (verismo!arch.x64.def_s.Archx64Op./RegRead (verismo!arch.x64.def_s.Archx64Op./RegRead/?0 verismo!arch.entities.memid.CpuMemID.) (verismo!arch.x64.def_s.Archx64Op./RegRead/?1 verismo!arch.reg.RegName.)) (verismo!arch.x64.def_s.Archx64Op./VMGExit (verismo!arch.x64.def_s.Archx64Op./VMGExit/?0 verismo!arch.entities.memid.CpuMemID.)) (verismo!arch.x64.def_s.Archx64Op./LoopHalt (verismo!arch.x64.def_s.Archx64Op./LoopHalt/?0 verismo!arch.entities.memid.CpuMemID.))) ((verismo!arch.x64.def_s.Archx64./Archx64 (verismo!arch.x64.def_s.Archx64./Archx64/?memdb verismo!arch.mem.def_s.MemDB.) (verismo!arch.x64.def_s.Archx64./Archx64/?regdb vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.) (verismo!arch.x64.def_s.Archx64./Archx64/?entities vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.))) ((verismo!arch.x64.def_s.AECode./Mc ) (verismo!arch.x64.def_s.AECode./Intr ) (verismo!arch.x64.def_s.AECode./Nmi ) (verismo!arch.x64.def_s.AECode./Smi ) (verismo!arch.x64.def_s.AECode./Init ) (verismo!arch.x64.def_s.AECode./VIntr ) (verismo!arch.x64.def_s.AECode./Pause ) (verismo!arch.x64.def_s.AECode./Hlt ) (verismo!arch.x64.def_s.AECode./Npf ) (verismo!arch.x64.def_s.AECode./Vmmcall ) (verismo!arch.x64.def_s.AECode./VMGExit ) (verismo!arch.x64.def_s.AECode./Busy ) (verismo!arch.x64.def_s.AECode./Others )) ((verismo!arch.x64.def_s.NAECode./Npf ) (verismo!arch.x64.def_s.NAECode./Vmmcall ) (verismo!arch.x64.def_s.NAECode./Halt ) (verismo!arch.x64.def_s.NAECode./NotValidated (verismo!arch.x64.def_s.NAECode./NotValidated/?0 verismo!arch.x64.def_s.Archx64Op.)) (verismo!arch.x64.def_s.NAECode./Others )) ((verismo!arch.x64.def_s.ExceptionCode./PFault (verismo!arch.x64.def_s.ExceptionCode./PFault/?0 verismo!arch.x64.def_s.Archx64Op.)) (verismo!arch.x64.def_s.ExceptionCode./GP (verismo!arch.x64.def_s.ExceptionCode./GP/?0 verismo!arch.x64.def_s.Archx64Op.))) ((verismo!arch.entities.VMPL./VMPL0 ) (verismo!arch.entities.VMPL./VMPL1 ) (verismo!arch.entities.VMPL./VMPL2 ) (verismo!arch.entities.VMPL./VMPL3 )) ((verismo!arch.crypto.CryptoMask./CryptoMask (verismo!arch.crypto.CryptoMask./CryptoMask/?0 Int))) ((verismo!arch.crypto.SymKey./SymKey (verismo!arch.crypto.SymKey./SymKey/?key Poly))) ((verismo!arch.crypto.Encrypted./Encrypted (verismo!arch.crypto.Encrypted./Encrypted/?data Poly) (verismo!arch.crypto.Encrypted./Encrypted/?key Poly) (verismo!arch.crypto.Encrypted./Encrypted/?crypto_mask Poly))) ((verismo!arch.memop.MemOp./Read (verismo!arch.memop.MemOp./Read/?0 verismo!arch.entities.params.AddrMemID.) (verismo!arch.memop.MemOp./Read/?1 Bool)) (verismo!arch.memop.MemOp./Write (verismo!arch.memop.MemOp./Write/?0 verismo!arch.entities.params.AddrID.) (verismo!arch.memop.MemOp./Write/?1 Bool) (verismo!arch.memop.MemOp./Write/?2 vstd!seq.Seq<u8.>.)) (verismo!arch.memop.MemOp./InvlPage (verismo!arch.memop.MemOp./InvlPage/?0 verismo!arch.entities.params.AddrMemID.)) (verismo!arch.memop.MemOp./FlushAll (verismo!arch.memop.MemOp./FlushAll/?0 verismo!arch.entities.memid.MemID.)) (verismo!arch.memop.MemOp./RmpOp (verismo!arch.memop.MemOp./RmpOp/?0 verismo!arch.rmp.def_s.RmpOp.))) ((verismo!arch.errors.MemError./Others (verismo!arch.errors.MemError./Others/?0 Poly)) (verismo!arch.errors.MemError./NoRam (verismo!arch.errors.MemError./NoRam/?0 Poly)) (verismo!arch.errors.MemError./NotValidated (verismo!arch.errors.MemError./NotValidated/?0 Poly)) (verismo!arch.errors.MemError./NestedPF (verismo!arch.errors.MemError./NestedPF/?0 Poly)) (verismo!arch.errors.MemError./PageFault (verismo!arch.errors.MemError./PageFault/?0 Poly)) (verismo!arch.errors.MemError./RmpOp (verismo!arch.errors.MemError./RmpOp/?0 verismo!arch.errors.RmpFault.) (verismo!arch.errors.MemError./RmpOp/?1 Poly))) ((verismo!arch.errors.RmpFault./Unsupported ) (verismo!arch.errors.RmpFault./Size ) (verismo!arch.errors.RmpFault./Input ) (verismo!arch.errors.RmpFault./Perm ) (verismo!arch.errors.RmpFault./DoubleVal )) ((verismo!arch.reg.RegName./Rflags ) (verismo!arch.reg.RegName./Rax ) (verismo!arch.reg.RegName./Rsp ) (verismo!arch.reg.RegName./Cs ) (verismo!arch.reg.RegName./Ds ) (verismo!arch.reg.RegName./Ss ) (verismo!arch.reg.RegName./Es ) (verismo!arch.reg.RegName./Gs ) (verismo!arch.reg.RegName./Cpl ) (verismo!arch.reg.RegName./Cr0 ) (verismo!arch.reg.RegName./Cr1 ) (verismo!arch.reg.RegName./Cr2 ) (verismo!arch.reg.RegName./Cr3 ) (verismo!arch.reg.RegName./Cr4 ) (verismo!arch.reg.RegName./XCr0 ) (verismo!arch.reg.RegName./IdtrBaseLimit ) (verismo!arch.reg.RegName./GdtrBaseLimit ) (verismo!arch.reg.RegName./MSR (verismo!arch.reg.RegName./MSR/?0 Int))) ((verismo!arch.reg.RflagBit./CF ) (verismo!arch.reg.RflagBit./R1 ) (verismo!arch.reg.RflagBit./PF ) (verismo!arch.reg.RflagBit./R2 ) (verismo!arch.reg.RflagBit./AF ) (verismo!arch.reg.RflagBit./R3 ) (verismo!arch.reg.RflagBit./ZF ) (verismo!arch.reg.RflagBit./SF ) (verismo!arch.reg.RflagBit./TF ) (verismo!arch.reg.RflagBit./IF ) (verismo!arch.reg.RflagBit./DF ) (verismo!arch.reg.RflagBit./ID )) ((verismo!tspec.ResultOrErr./Ok (verismo!tspec.ResultOrErr./Ok/?0 Poly)) (verismo!tspec.ResultOrErr./Error (verismo!tspec.ResultOrErr./Error/?0 Poly))) ((verismo!tspec.ResultWithErr./Ok (verismo!tspec.ResultWithErr./Ok/?0 Poly)) (verismo!tspec.ResultWithErr./Error (verismo!tspec.ResultWithErr./Error/?0 Poly) (verismo!tspec.ResultWithErr./Error/?1 Poly))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (verismo!tspec.security.sectype.SpecSecType.) core!option.Option.)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (verismo!tspec.security.sectype.SpecSecType.) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(declare-fun verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (verismo!arch.addr_s.def_s.SpecPage.) Int)
(declare-fun verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (verismo!arch.addr_s.def_s.SpecPage.) Poly)
(declare-fun verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (verismo!arch.addr_s.def_s.SpecAddr.) Int)
(declare-fun verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (verismo!arch.addr_s.def_s.SpecAddr.) Poly)
(declare-fun verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (verismo!arch.addr_s.def_s.SpecMem.) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (verismo!arch.addr_s.def_s.SpecMem.) Int)
(declare-fun verismo!arch.entities.memid.MemID./Guest/0 (verismo!arch.entities.memid.MemID.) Int)
(declare-fun verismo!arch.entities.memid.MemID./Guest/1 (verismo!arch.entities.memid.MemID.) verismo!arch.entities.VMPL.)
(declare-fun verismo!arch.entities.memid.CpuMemID./CpuMemID/0 (verismo!arch.entities.memid.CpuMemID.) Int)
(declare-fun verismo!arch.entities.memid.CpuMemID./CpuMemID/1 (verismo!arch.entities.memid.CpuMemID.) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.entities.memtype.MemType./PTE/0 (verismo!arch.entities.memtype.MemType.) verismo!arch.entities.memtype.PTLevel.)
(declare-fun verismo!arch.entities.params.AddrMemID./AddrMemID/range (verismo!arch.entities.params.AddrMemID.) verismo!arch.addr_s.def_s.SpecMem.)
(declare-fun verismo!arch.entities.params.AddrMemID./AddrMemID/memid (verismo!arch.entities.params.AddrMemID.) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.entities.params.PageID./PageID/page (verismo!arch.entities.params.PageID.) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.entities.params.PageID./PageID/memid (verismo!arch.entities.params.PageID.) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.entities.params.AddrID./AddrID/addr (verismo!arch.entities.params.AddrID.) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.entities.params.AddrID./AddrID/memid (verismo!arch.entities.params.AddrID.) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Int)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(declare-fun verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (verismo!arch.rmp.def_s.RmpEntry.) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn (verismo!arch.rmp.def_s.RmpAdjustParam.) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/psize (verismo!arch.rmp.def_s.RmpAdjustParam.) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmsa (verismo!arch.rmp.def_s.RmpAdjustParam.) Bool)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmpl (verismo!arch.rmp.def_s.RmpAdjustParam.) verismo!arch.entities.VMPL.)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/perms (verismo!arch.rmp.def_s.RmpAdjustParam.) vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)
(declare-fun verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn (verismo!arch.rmp.def_s.PvalidateParam.) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/psize (verismo!arch.rmp.def_s.PvalidateParam.) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/val (verismo!arch.rmp.def_s.PvalidateParam.) Bool)
(declare-fun verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.entities.params.PageID.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.rmp.def_s.RmpAdjustParam.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.entities.params.PageID.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.rmp.def_s.PvalidateParam.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.entities.params.PageID.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun verismo!arch.ramdb.def.RamDB./RamDB/data (verismo!arch.ramdb.def.RamDB.) vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.)
(declare-fun verismo!arch.ramdb.def.RamDB./RamDB/write_count (verismo!arch.ramdb.def.RamDB.) Int)
(declare-fun verismo!arch.ramdb.def.RamDB./RamDB/crypto_mask (verismo!arch.ramdb.def.RamDB.) vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.)
(declare-fun verismo!arch.pgtable.def.MemMap./MemMap/db (verismo!arch.pgtable.def.MemMap.) Poly)
(declare-fun verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value (verismo!arch.pgtable.def.SpecPageTableEntry.) Int)
(declare-fun verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (verismo!arch.pgtable.def.SpecPageTableEntry.) Poly)
(declare-fun verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/value (verismo!arch.pgtable.def_e.PageTableEntry.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/dummy (verismo!arch.pgtable.def_e.PageTableEntry.) Poly)
(declare-fun verismo!arch.tlb.def_s.TLB./TLB/db (verismo!arch.tlb.def_s.TLB.) verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)
(declare-fun verismo!arch.tlb.def_s.TLBIdx./TLBIdx/0 (verismo!arch.tlb.def_s.TLBIdx.) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.tlb.def_s.TLBIdx./TLBIdx/1 (verismo!arch.tlb.def_s.TLBIdx.) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.vram.def.VRamDB./VRamDB/sram (verismo!arch.vram.def.VRamDB.) verismo!arch.ramdb.def.RamDB.)
(declare-fun verismo!arch.vram.def.VRamDB./VRamDB/rmp (verismo!arch.vram.def.VRamDB.) vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.)
(declare-fun verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam/ram (verismo!arch.ptram.def_s.GuestPTRam.) verismo!arch.vram.def.VRamDB.)
(declare-fun verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam/l0_entry (verismo!arch.ptram.def_s.GuestPTRam.) vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)
(declare-fun verismo!arch.mem.def_s.MemDB./MemDB/vram (verismo!arch.mem.def_s.MemDB.) verismo!arch.vram.def.VRamDB.)
(declare-fun verismo!arch.mem.def_s.MemDB./MemDB/l0_entry (verismo!arch.mem.def_s.MemDB.) vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)
(declare-fun verismo!arch.mem.def_s.MemDB./MemDB/sysmap (verismo!arch.mem.def_s.MemDB.) vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.)
(declare-fun verismo!arch.mem.def_s.MemDB./MemDB/tlb (verismo!arch.mem.def_s.MemDB.) verismo!arch.tlb.def_s.TLB.)
(declare-fun verismo!arch.x64.def_s.Archx64Op./MemOp/0 (verismo!arch.x64.def_s.Archx64Op.) verismo!arch.memop.MemOp.)
(declare-fun verismo!arch.x64.def_s.Archx64Op./MemOp/1 (verismo!arch.x64.def_s.Archx64Op.) Int)
(declare-fun verismo!arch.x64.def_s.Archx64Op./RegWrite/0 (verismo!arch.x64.def_s.Archx64Op.) verismo!arch.entities.memid.CpuMemID.)
(declare-fun verismo!arch.x64.def_s.Archx64Op./RegWrite/1 (verismo!arch.x64.def_s.Archx64Op.) verismo!arch.reg.RegName.)
(declare-fun verismo!arch.x64.def_s.Archx64Op./RegWrite/2 (verismo!arch.x64.def_s.Archx64Op.) Int)
(declare-fun verismo!arch.x64.def_s.Archx64Op./RegRead/0 (verismo!arch.x64.def_s.Archx64Op.) verismo!arch.entities.memid.CpuMemID.)
(declare-fun verismo!arch.x64.def_s.Archx64Op./RegRead/1 (verismo!arch.x64.def_s.Archx64Op.) verismo!arch.reg.RegName.)
(declare-fun verismo!arch.x64.def_s.Archx64Op./VMGExit/0 (verismo!arch.x64.def_s.Archx64Op.) verismo!arch.entities.memid.CpuMemID.)
(declare-fun verismo!arch.x64.def_s.Archx64Op./LoopHalt/0 (verismo!arch.x64.def_s.Archx64Op.) verismo!arch.entities.memid.CpuMemID.)
(declare-fun verismo!arch.x64.def_s.Archx64./Archx64/memdb (verismo!arch.x64.def_s.Archx64.) verismo!arch.mem.def_s.MemDB.)
(declare-fun verismo!arch.x64.def_s.Archx64./Archx64/regdb (verismo!arch.x64.def_s.Archx64.) vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.)
(declare-fun verismo!arch.x64.def_s.Archx64./Archx64/entities (verismo!arch.x64.def_s.Archx64.) vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.)
(declare-fun verismo!arch.x64.def_s.NAECode./NotValidated/0 (verismo!arch.x64.def_s.NAECode.) verismo!arch.x64.def_s.Archx64Op.)
(declare-fun verismo!arch.x64.def_s.ExceptionCode./PFault/0 (verismo!arch.x64.def_s.ExceptionCode.) verismo!arch.x64.def_s.Archx64Op.)
(declare-fun verismo!arch.x64.def_s.ExceptionCode./GP/0 (verismo!arch.x64.def_s.ExceptionCode.) verismo!arch.x64.def_s.Archx64Op.)
(declare-fun verismo!arch.crypto.CryptoMask./CryptoMask/0 (verismo!arch.crypto.CryptoMask.) Int)
(declare-fun verismo!arch.crypto.SymKey./SymKey/key (verismo!arch.crypto.SymKey.) Poly)
(declare-fun verismo!arch.crypto.Encrypted./Encrypted/data (verismo!arch.crypto.Encrypted.) Poly)
(declare-fun verismo!arch.crypto.Encrypted./Encrypted/key (verismo!arch.crypto.Encrypted.) Poly)
(declare-fun verismo!arch.crypto.Encrypted./Encrypted/crypto_mask (verismo!arch.crypto.Encrypted.) Poly)
(declare-fun verismo!arch.memop.MemOp./Read/0 (verismo!arch.memop.MemOp.) verismo!arch.entities.params.AddrMemID.)
(declare-fun verismo!arch.memop.MemOp./Read/1 (verismo!arch.memop.MemOp.) Bool)
(declare-fun verismo!arch.memop.MemOp./Write/0 (verismo!arch.memop.MemOp.) verismo!arch.entities.params.AddrID.)
(declare-fun verismo!arch.memop.MemOp./Write/1 (verismo!arch.memop.MemOp.) Bool)
(declare-fun verismo!arch.memop.MemOp./Write/2 (verismo!arch.memop.MemOp.) vstd!seq.Seq<u8.>.)
(declare-fun verismo!arch.memop.MemOp./InvlPage/0 (verismo!arch.memop.MemOp.) verismo!arch.entities.params.AddrMemID.)
(declare-fun verismo!arch.memop.MemOp./FlushAll/0 (verismo!arch.memop.MemOp.) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.memop.MemOp./RmpOp/0 (verismo!arch.memop.MemOp.) verismo!arch.rmp.def_s.RmpOp.)
(declare-fun verismo!arch.errors.MemError./Others/0 (verismo!arch.errors.MemError.) Poly)
(declare-fun verismo!arch.errors.MemError./NoRam/0 (verismo!arch.errors.MemError.) Poly)
(declare-fun verismo!arch.errors.MemError./NotValidated/0 (verismo!arch.errors.MemError.) Poly)
(declare-fun verismo!arch.errors.MemError./NestedPF/0 (verismo!arch.errors.MemError.) Poly)
(declare-fun verismo!arch.errors.MemError./PageFault/0 (verismo!arch.errors.MemError.) Poly)
(declare-fun verismo!arch.errors.MemError./RmpOp/0 (verismo!arch.errors.MemError.) verismo!arch.errors.RmpFault.)
(declare-fun verismo!arch.errors.MemError./RmpOp/1 (verismo!arch.errors.MemError.) Poly)
(declare-fun verismo!arch.reg.RegName./MSR/0 (verismo!arch.reg.RegName.) Int)
(declare-fun verismo!tspec.ResultOrErr./Ok/0 (verismo!tspec.ResultOrErr.) Poly)
(declare-fun verismo!tspec.ResultOrErr./Error/0 (verismo!tspec.ResultOrErr.) Poly)
(declare-fun verismo!tspec.ResultWithErr./Ok/0 (verismo!tspec.ResultWithErr.) Poly)
(declare-fun verismo!tspec.ResultWithErr./Error/0 (verismo!tspec.ResultWithErr.) Poly)
(declare-fun verismo!tspec.ResultWithErr./Error/1 (verismo!tspec.ResultWithErr.) Poly)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%verismo!tspec.security.sectype.SecType. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!tspec.security.sectype.DataLabel. Type)
(declare-fun TYPE%verismo!tspec.security.sectype.SpecSecType. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.GuestVir. Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.GuestPhy. Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.SysPhy. Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecPage. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecAddr. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecMem. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.PageSize. Type)
(declare-const TYPE%verismo!arch.entities.memid.MemID. Type)
(declare-const TYPE%verismo!arch.entities.memid.CpuMemID. Type)
(declare-const TYPE%verismo!arch.entities.memtype.PTLevel. Type)
(declare-const TYPE%verismo!arch.entities.memtype.MemType. Type)
(declare-fun TYPE%verismo!arch.entities.params.AddrMemID. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.entities.params.PageID. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.entities.params.AddrID. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. Type)
(declare-const TYPE%verismo!arch.rmp.def_s.RmpEntry. Type)
(declare-const TYPE%verismo!arch.rmp.def_s.RmpAdjustParam. Type)
(declare-const TYPE%verismo!arch.rmp.def_s.PvalidateParam. Type)
(declare-fun TYPE%verismo!arch.rmp.def_s.RmpOp. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.rmp.perm_s.Perm. Type)
(declare-const TYPE%verismo!arch.ramdb.def.RamDB. Type)
(declare-fun TYPE%verismo!arch.pgtable.def.MemMap. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!arch.pgtable.def.PteFlag. Type)
(declare-fun TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.pgtable.def_e.PageTableEntry. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.tlb.def_s.TLB. Type)
(declare-const TYPE%verismo!arch.tlb.def_s.TLBIdx. Type)
(declare-const TYPE%verismo!arch.vram.def.VRamDB. Type)
(declare-const TYPE%verismo!arch.ptram.def_s.GuestPTRam. Type)
(declare-const TYPE%verismo!arch.mem.def_s.MemDB. Type)
(declare-const TYPE%verismo!arch.x64.def_s.Archx64Op. Type)
(declare-const TYPE%verismo!arch.x64.def_s.Archx64. Type)
(declare-const TYPE%verismo!arch.x64.def_s.AECode. Type)
(declare-const TYPE%verismo!arch.x64.def_s.NAECode. Type)
(declare-const TYPE%verismo!arch.x64.def_s.ExceptionCode. Type)
(declare-fun TYPE%verismo!tspec.fmap.FMap. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!arch.entities.VMPL. Type)
(declare-const TYPE%verismo!arch.crypto.CryptoMask. Type)
(declare-fun TYPE%verismo!arch.crypto.SymKey. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.crypto.Encrypted. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%verismo!arch.memop.MemOp. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.errors.MemError. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.errors.RmpFault. Type)
(declare-const TYPE%verismo!arch.reg.RegName. Type)
(declare-const TYPE%verismo!arch.reg.RflagBit. Type)
(declare-fun TYPE%verismo!tspec.ResultOrErr. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%verismo!tspec.ResultWithErr. (Dcr Type Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.) Poly)
(declare-fun %Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (Poly) verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)
(declare-fun Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. (verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.) Poly)
(declare-fun %Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. (Poly) verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun Poly%vstd!map.Map<nat./bool.>. (vstd!map.Map<nat./bool.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./bool.>. (Poly) vstd!map.Map<nat./bool.>.)
(declare-fun Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (Poly) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (Poly) vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. (vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. (Poly) vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (Poly) vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. (vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. (Poly) vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (Poly) vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (Poly) vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. (vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. (Poly) vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. (vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. (Poly) vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>.>. (vstd!set.Set<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>.>. (Poly) vstd!set.Set<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (vstd!set.Set<verismo!arch.entities.VMPL.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (Poly) vstd!set.Set<verismo!arch.entities.VMPL.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. (vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. (Poly) vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. (vstd!set.Set<verismo!arch.entities.memid.MemID.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. (Poly) vstd!set.Set<verismo!arch.entities.memid.MemID.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (Poly) vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%verismo!tspec.security.sectype.DataLabel. (verismo!tspec.security.sectype.DataLabel.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.DataLabel. (Poly) verismo!tspec.security.sectype.DataLabel.)
(declare-fun Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SpecSecType. (Poly) verismo!tspec.security.sectype.SpecSecType.)
(declare-fun Poly%verismo!arch.addr_s.def_s.GuestVir. (verismo!arch.addr_s.def_s.GuestVir.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.GuestVir. (Poly) verismo!arch.addr_s.def_s.GuestVir.)
(declare-fun Poly%verismo!arch.addr_s.def_s.GuestPhy. (verismo!arch.addr_s.def_s.GuestPhy.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.GuestPhy. (Poly) verismo!arch.addr_s.def_s.GuestPhy.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SysPhy. (verismo!arch.addr_s.def_s.SysPhy.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SysPhy. (Poly) verismo!arch.addr_s.def_s.SysPhy.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly) verismo!arch.addr_s.def_s.SpecMem.)
(declare-fun Poly%verismo!arch.addr_s.def_s.PageSize. (verismo!arch.addr_s.def_s.PageSize.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.PageSize. (Poly) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.MemID.) Poly)
(declare-fun %Poly%verismo!arch.entities.memid.MemID. (Poly) verismo!arch.entities.memid.MemID.)
(declare-fun Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.entities.memid.CpuMemID.) Poly)
(declare-fun %Poly%verismo!arch.entities.memid.CpuMemID. (Poly) verismo!arch.entities.memid.CpuMemID.)
(declare-fun Poly%verismo!arch.entities.memtype.PTLevel. (verismo!arch.entities.memtype.PTLevel.) Poly)
(declare-fun %Poly%verismo!arch.entities.memtype.PTLevel. (Poly) verismo!arch.entities.memtype.PTLevel.)
(declare-fun Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.MemType.) Poly)
(declare-fun %Poly%verismo!arch.entities.memtype.MemType. (Poly) verismo!arch.entities.memtype.MemType.)
(declare-fun Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.entities.params.AddrMemID.) Poly)
(declare-fun %Poly%verismo!arch.entities.params.AddrMemID. (Poly) verismo!arch.entities.params.AddrMemID.)
(declare-fun Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID.) Poly)
(declare-fun %Poly%verismo!arch.entities.params.PageID. (Poly) verismo!arch.entities.params.PageID.)
(declare-fun Poly%verismo!arch.entities.params.AddrID. (verismo!arch.entities.params.AddrID.) Poly)
(declare-fun %Poly%verismo!arch.entities.params.AddrID. (Poly) verismo!arch.entities.params.AddrID.)
(declare-fun Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpEntry.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.RmpEntry. (Poly) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpAdjustParam.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly) verismo!arch.rmp.def_s.RmpAdjustParam.)
(declare-fun Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.PvalidateParam.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly) verismo!arch.rmp.def_s.PvalidateParam.)
(declare-fun Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.RmpOp. (Poly) verismo!arch.rmp.def_s.RmpOp.)
(declare-fun Poly%verismo!arch.rmp.perm_s.Perm. (verismo!arch.rmp.perm_s.Perm.) Poly)
(declare-fun %Poly%verismo!arch.rmp.perm_s.Perm. (Poly) verismo!arch.rmp.perm_s.Perm.)
(declare-fun Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.ramdb.def.RamDB.) Poly)
(declare-fun %Poly%verismo!arch.ramdb.def.RamDB. (Poly) verismo!arch.ramdb.def.RamDB.)
(declare-fun Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.pgtable.def.MemMap.) Poly)
(declare-fun %Poly%verismo!arch.pgtable.def.MemMap. (Poly) verismo!arch.pgtable.def.MemMap.)
(declare-fun Poly%verismo!arch.pgtable.def.PteFlag. (verismo!arch.pgtable.def.PteFlag.) Poly)
(declare-fun %Poly%verismo!arch.pgtable.def.PteFlag. (Poly) verismo!arch.pgtable.def.PteFlag.)
(declare-fun Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def.SpecPageTableEntry.) Poly)
(declare-fun %Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (Poly) verismo!arch.pgtable.def.SpecPageTableEntry.)
(declare-fun Poly%verismo!arch.pgtable.def_e.PageTableEntry. (verismo!arch.pgtable.def_e.PageTableEntry.) Poly)
(declare-fun %Poly%verismo!arch.pgtable.def_e.PageTableEntry. (Poly) verismo!arch.pgtable.def_e.PageTableEntry.)
(declare-fun Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.tlb.def_s.TLB.) Poly)
(declare-fun %Poly%verismo!arch.tlb.def_s.TLB. (Poly) verismo!arch.tlb.def_s.TLB.)
(declare-fun Poly%verismo!arch.tlb.def_s.TLBIdx. (verismo!arch.tlb.def_s.TLBIdx.) Poly)
(declare-fun %Poly%verismo!arch.tlb.def_s.TLBIdx. (Poly) verismo!arch.tlb.def_s.TLBIdx.)
(declare-fun Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.vram.def.VRamDB.) Poly)
(declare-fun %Poly%verismo!arch.vram.def.VRamDB. (Poly) verismo!arch.vram.def.VRamDB.)
(declare-fun Poly%verismo!arch.ptram.def_s.GuestPTRam. (verismo!arch.ptram.def_s.GuestPTRam.) Poly)
(declare-fun %Poly%verismo!arch.ptram.def_s.GuestPTRam. (Poly) verismo!arch.ptram.def_s.GuestPTRam.)
(declare-fun Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.MemDB.) Poly)
(declare-fun %Poly%verismo!arch.mem.def_s.MemDB. (Poly) verismo!arch.mem.def_s.MemDB.)
(declare-fun Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op.) Poly)
(declare-fun %Poly%verismo!arch.x64.def_s.Archx64Op. (Poly) verismo!arch.x64.def_s.Archx64Op.)
(declare-fun Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.Archx64.) Poly)
(declare-fun %Poly%verismo!arch.x64.def_s.Archx64. (Poly) verismo!arch.x64.def_s.Archx64.)
(declare-fun Poly%verismo!arch.x64.def_s.AECode. (verismo!arch.x64.def_s.AECode.) Poly)
(declare-fun %Poly%verismo!arch.x64.def_s.AECode. (Poly) verismo!arch.x64.def_s.AECode.)
(declare-fun Poly%verismo!arch.x64.def_s.NAECode. (verismo!arch.x64.def_s.NAECode.) Poly)
(declare-fun %Poly%verismo!arch.x64.def_s.NAECode. (Poly) verismo!arch.x64.def_s.NAECode.)
(declare-fun Poly%verismo!arch.x64.def_s.ExceptionCode. (verismo!arch.x64.def_s.ExceptionCode.) Poly)
(declare-fun %Poly%verismo!arch.x64.def_s.ExceptionCode. (Poly) verismo!arch.x64.def_s.ExceptionCode.)
(declare-fun Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.VMPL.) Poly)
(declare-fun %Poly%verismo!arch.entities.VMPL. (Poly) verismo!arch.entities.VMPL.)
(declare-fun Poly%verismo!arch.crypto.CryptoMask. (verismo!arch.crypto.CryptoMask.) Poly)
(declare-fun %Poly%verismo!arch.crypto.CryptoMask. (Poly) verismo!arch.crypto.CryptoMask.)
(declare-fun Poly%verismo!arch.crypto.SymKey. (verismo!arch.crypto.SymKey.) Poly)
(declare-fun %Poly%verismo!arch.crypto.SymKey. (Poly) verismo!arch.crypto.SymKey.)
(declare-fun Poly%verismo!arch.crypto.Encrypted. (verismo!arch.crypto.Encrypted.) Poly)
(declare-fun %Poly%verismo!arch.crypto.Encrypted. (Poly) verismo!arch.crypto.Encrypted.)
(declare-fun Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp.) Poly)
(declare-fun %Poly%verismo!arch.memop.MemOp. (Poly) verismo!arch.memop.MemOp.)
(declare-fun Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError.) Poly)
(declare-fun %Poly%verismo!arch.errors.MemError. (Poly) verismo!arch.errors.MemError.)
(declare-fun Poly%verismo!arch.errors.RmpFault. (verismo!arch.errors.RmpFault.) Poly)
(declare-fun %Poly%verismo!arch.errors.RmpFault. (Poly) verismo!arch.errors.RmpFault.)
(declare-fun Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName.) Poly)
(declare-fun %Poly%verismo!arch.reg.RegName. (Poly) verismo!arch.reg.RegName.)
(declare-fun Poly%verismo!arch.reg.RflagBit. (verismo!arch.reg.RflagBit.) Poly)
(declare-fun %Poly%verismo!arch.reg.RflagBit. (Poly) verismo!arch.reg.RflagBit.)
(declare-fun Poly%verismo!tspec.ResultOrErr. (verismo!tspec.ResultOrErr.) Poly)
(declare-fun %Poly%verismo!tspec.ResultOrErr. (Poly) verismo!tspec.ResultOrErr.)
(declare-fun Poly%verismo!tspec.ResultWithErr. (verismo!tspec.ResultWithErr.) Poly)
(declare-fun %Poly%verismo!tspec.ResultWithErr. (Poly) verismo!tspec.ResultWithErr.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)))) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1)))))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)) (! (= x (%Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x))) :pattern ((Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) (= x (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (%Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))))))))
(assert (forall ((x verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)) (! (has_type (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x) (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) :pattern ((has_type (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x) (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))))))))
(assert (forall ((x verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.)) (! (= x (%Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. (Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. x))) :pattern ((Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64))) (= x (Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. (%Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)))))))
(assert (forall ((x verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.)) (! (has_type (Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. x) (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64))) :pattern ((has_type (Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. x) (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))))))
(assert (forall ((x vstd!map.Map<nat./bool.>.)) (! (= x (%Poly%vstd!map.Map<nat./bool.>. (Poly%vstd!map.Map<nat./bool.>. x))) :pattern ((Poly%vstd!map.Map<nat./bool.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ BOOL)) (= x (Poly%vstd!map.Map<nat./bool.>. (%Poly%vstd!map.Map<nat./bool.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ BOOL))))))
(assert (forall ((x vstd!map.Map<nat./bool.>.)) (! (has_type (Poly%vstd!map.Map<nat./bool.>. x) (TYPE%vstd!map.Map. $ NAT $ BOOL)) :pattern ((has_type (Poly%vstd!map.Map<nat./bool.>. x) (TYPE%vstd!map.Map. $ NAT $ BOOL))))))
(assert (forall ((x vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (= x (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x))) :pattern ((Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.)) (= x (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))))))
(assert (forall ((x vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (has_type (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.)) :pattern ((has_type (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))))))
(assert (forall ((x vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (= x (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (%Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x) (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x) (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry.)) (= x (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. (%Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry.))))))
(assert (forall ((x vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. x) (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. x) (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry.))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) (= x (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)))) (= x (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64))))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64))))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) (= x (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (= x (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL))) (= x (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL)))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. (Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%verismo!arch.crypto.CryptoMask.)) (= x (Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. (%Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%verismo!arch.crypto.CryptoMask.))))))
(assert (forall ((x vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. x) (TYPE%vstd!seq.Seq. $ TYPE%verismo!arch.crypto.CryptoMask.)) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. x) (TYPE%vstd!seq.Seq. $ TYPE%verismo!arch.crypto.CryptoMask.))))))
(assert (forall ((x vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!arch.crypto.Encrypted. $ (TYPE%verismo!arch.crypto.SymKey. $ (TYPE%tuple%2. $ NAT $ INT)) $ (UINT 8)))) (= x (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. (%Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!arch.crypto.Encrypted. $ (TYPE%verismo!arch.crypto.SymKey. $ (TYPE%tuple%2. $ NAT $ INT)) $ (UINT 8))))))))
(assert (forall ((x vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!arch.crypto.Encrypted. $ (TYPE%verismo!arch.crypto.SymKey. $ (TYPE%tuple%2. $ NAT $ INT)) $ (UINT 8)))) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!arch.crypto.Encrypted. $ (TYPE%verismo!arch.crypto.SymKey. $ (TYPE%tuple%2. $ NAT $ INT)) $ (UINT 8))))))))
(assert (forall ((x vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (= x (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((x vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>.>. (Poly%vstd!set.Set<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) (= x (Poly%vstd!set.Set<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>.>. (%Poly%vstd!set.Set<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)))))))
(assert (forall ((x vstd!set.Set<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>.>. x) (TYPE%vstd!set.Set. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.VMPL.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.)) (= x (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (%Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.VMPL.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. (Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.CpuMemID.)) (= x (Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. (%Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.CpuMemID.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.CpuMemID.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.CpuMemID.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.memid.MemID.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. (Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.MemID.)) (= x (Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. (%Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.MemID.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.memid.MemID.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.MemID.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (= x (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x verismo!tspec.security.sectype.DataLabel.)) (! (= x (%Poly%verismo!tspec.security.sectype.DataLabel. (Poly%verismo!tspec.security.sectype.DataLabel. x))) :pattern ((Poly%verismo!tspec.security.sectype.DataLabel. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!tspec.security.sectype.DataLabel.) (= x (Poly%verismo!tspec.security.sectype.DataLabel. (%Poly%verismo!tspec.security.sectype.DataLabel. x)))) :pattern ((has_type x TYPE%verismo!tspec.security.sectype.DataLabel.)))))
(assert (forall ((x verismo!tspec.security.sectype.DataLabel.)) (! (has_type (Poly%verismo!tspec.security.sectype.DataLabel. x) TYPE%verismo!tspec.security.sectype.DataLabel.) :pattern ((has_type (Poly%verismo!tspec.security.sectype.DataLabel. x) TYPE%verismo!tspec.security.sectype.DataLabel.)))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= x (%Poly%verismo!tspec.security.sectype.SpecSecType. (Poly%verismo!tspec.security.sectype.SpecSecType. x))) :pattern ((Poly%verismo!tspec.security.sectype.SpecSecType. x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (= x (Poly%verismo!tspec.security.sectype.SpecSecType. (%Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (_val! Poly) (__unused! core!option.Option.) (_valsets! Poly) (_labels! vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (=> (and (has_type _val! T&) (has_type (Poly%core!option.Option. __unused!) (TYPE%core!option.Option. M&. M&)) (has_type _valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType./SpecSecType _val! __unused! _valsets! _labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType./SpecSecType _val! __unused! _valsets! _labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?val x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) T&)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?_unused x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. x))) (TYPE%core!option.Option. M&. M&))) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?valsets x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?labels x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels x)))))
(define-fun is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ ((c verismo!tspec.security.sectype.SpecSecType.)) Bool ((_ is verismo!tspec.security.sectype.SpecSecType./SpecSecType) c))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x)) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x))) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x)))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x)) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x))))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestVir.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.GuestVir. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.GuestVir. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.GuestVir.) (= x (Poly%verismo!arch.addr_s.def_s.GuestVir. (%Poly%verismo!arch.addr_s.def_s.GuestVir. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.GuestVir.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestVir.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.GuestVir. x) TYPE%verismo!arch.addr_s.def_s.GuestVir.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.GuestVir. x) TYPE%verismo!arch.addr_s.def_s.GuestVir.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestPhy.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.GuestPhy. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.GuestPhy. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (= x (Poly%verismo!arch.addr_s.def_s.GuestPhy. (%Poly%verismo!arch.addr_s.def_s.GuestPhy. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestPhy.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.GuestPhy. x) TYPE%verismo!arch.addr_s.def_s.GuestPhy.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.GuestPhy. x) TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SysPhy.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SysPhy. (Poly%verismo!arch.addr_s.def_s.SysPhy. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SysPhy. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.SysPhy.) (= x (Poly%verismo!arch.addr_s.def_s.SysPhy. (%Poly%verismo!arch.addr_s.def_s.SysPhy. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.SysPhy.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SysPhy.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.SysPhy. x) TYPE%verismo!arch.addr_s.def_s.SysPhy.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SysPhy. x) TYPE%verismo!arch.addr_s.def_s.SysPhy.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly%verismo!arch.addr_s.def_s.SpecPage. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecPage. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecPage. (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (and (<= 0 _value!) (has_type _dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage./SpecPage _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage./SpecPage _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value x) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?value x)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?dummy x)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) T&)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecPage./SpecPage_ ((c verismo!arch.addr_s.def_s.SpecPage.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecPage./SpecPage) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecPage./SpecPage_ x) (height_lt (height (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x)) (height (Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((height (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x))))))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type y (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. y))) (ext_eq deep T& (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. y)))) (ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) x y)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly%verismo!arch.addr_s.def_s.SpecAddr. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecAddr. (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (and (<= 0 _value!) (has_type _dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value x) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?value x)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?dummy x)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) T&)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecAddr./SpecAddr_ ((c verismo!arch.addr_s.def_s.SpecAddr.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecAddr./SpecAddr) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecAddr./SpecAddr_ x) (height_lt (height (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x)) (height (Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((height (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x))))))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type y (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. y))) (ext_eq deep T& (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. y)))) (ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) x y)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecMem. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecMem. (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_first! verismo!arch.addr_s.def_s.SpecAddr.) (_size! Int)) (! (=> (and (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. _first!) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (<= 0 _size!)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem./SpecMem _first! _size!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem./SpecMem _first! _size!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?first x)) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. x))) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size x) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?size x)) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/size x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecMem./SpecMem_ ((c verismo!arch.addr_s.def_s.SpecMem.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecMem./SpecMem) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecMem./SpecMem_ x) (height_lt (height (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x))) (height (Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((height (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x)))))))
(assert (forall ((x verismo!arch.addr_s.def_s.PageSize.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.PageSize. (Poly%verismo!arch.addr_s.def_s.PageSize. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.PageSize. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.PageSize.) (= x (Poly%verismo!arch.addr_s.def_s.PageSize. (%Poly%verismo!arch.addr_s.def_s.PageSize. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.PageSize.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.PageSize.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.PageSize. x) TYPE%verismo!arch.addr_s.def_s.PageSize.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.PageSize. x) TYPE%verismo!arch.addr_s.def_s.PageSize.)))))
(assert (forall ((x verismo!arch.entities.memid.MemID.)) (! (= x (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. x))) :pattern ((Poly%verismo!arch.entities.memid.MemID. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memid.MemID.) (= x (Poly%verismo!arch.entities.memid.MemID. (%Poly%verismo!arch.entities.memid.MemID. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.memid.MemID.)))))
(assert (forall ((_0! Int) (_1! verismo!arch.entities.VMPL.)) (! (=> (<= 0 _0!) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.MemID./Guest _0! _1!)) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.MemID./Guest _0! _1!)) TYPE%verismo!arch.entities.memid.MemID.)))))
(assert (forall ((x verismo!arch.entities.memid.MemID.)) (! (= (verismo!arch.entities.memid.MemID./Guest/0 x) (verismo!arch.entities.memid.MemID./Guest/?0 x)) :pattern ((verismo!arch.entities.memid.MemID./Guest/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memid.MemID.) (<= 0 (verismo!arch.entities.memid.MemID./Guest/0 (%Poly%verismo!arch.entities.memid.MemID. x)))) :pattern ((verismo!arch.entities.memid.MemID./Guest/0 (%Poly%verismo!arch.entities.memid.MemID. x)) (has_type x TYPE%verismo!arch.entities.memid.MemID.)))))
(assert (forall ((x verismo!arch.entities.memid.MemID.)) (! (= (verismo!arch.entities.memid.MemID./Guest/1 x) (verismo!arch.entities.memid.MemID./Guest/?1 x)) :pattern ((verismo!arch.entities.memid.MemID./Guest/1 x)))))
(assert (has_type (Poly%verismo!arch.entities.memid.MemID. verismo!arch.entities.memid.MemID./Hv) TYPE%verismo!arch.entities.memid.MemID.))
(assert (forall ((x verismo!arch.entities.memid.CpuMemID.)) (! (= x (%Poly%verismo!arch.entities.memid.CpuMemID. (Poly%verismo!arch.entities.memid.CpuMemID. x))) :pattern ((Poly%verismo!arch.entities.memid.CpuMemID. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memid.CpuMemID.) (= x (Poly%verismo!arch.entities.memid.CpuMemID. (%Poly%verismo!arch.entities.memid.CpuMemID. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.memid.CpuMemID.)))))
(assert (forall ((_0! Int) (_1! verismo!arch.entities.memid.MemID.)) (! (=> (and (<= 0 _0!) (has_type (Poly%verismo!arch.entities.memid.MemID. _1!) TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.entities.memid.CpuMemID./CpuMemID _0! _1!)) TYPE%verismo!arch.entities.memid.CpuMemID.)) :pattern ((has_type (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.entities.memid.CpuMemID./CpuMemID _0! _1!)) TYPE%verismo!arch.entities.memid.CpuMemID.)))))
(assert (forall ((x verismo!arch.entities.memid.CpuMemID.)) (! (= (verismo!arch.entities.memid.CpuMemID./CpuMemID/0 x) (verismo!arch.entities.memid.CpuMemID./CpuMemID/?0 x)) :pattern ((verismo!arch.entities.memid.CpuMemID./CpuMemID/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memid.CpuMemID.) (<= 0 (verismo!arch.entities.memid.CpuMemID./CpuMemID/0 (%Poly%verismo!arch.entities.memid.CpuMemID. x)))) :pattern ((verismo!arch.entities.memid.CpuMemID./CpuMemID/0 (%Poly%verismo!arch.entities.memid.CpuMemID. x)) (has_type x TYPE%verismo!arch.entities.memid.CpuMemID.)))))
(assert (forall ((x verismo!arch.entities.memid.CpuMemID.)) (! (= (verismo!arch.entities.memid.CpuMemID./CpuMemID/1 x) (verismo!arch.entities.memid.CpuMemID./CpuMemID/?1 x)) :pattern ((verismo!arch.entities.memid.CpuMemID./CpuMemID/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memid.CpuMemID.) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.CpuMemID./CpuMemID/1 (%Poly%verismo!arch.entities.memid.CpuMemID. x))) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.entities.memid.CpuMemID./CpuMemID/1 (%Poly%verismo!arch.entities.memid.CpuMemID. x)) (has_type x TYPE%verismo!arch.entities.memid.CpuMemID.)))))
(assert (forall ((x verismo!arch.entities.memtype.PTLevel.)) (! (= x (%Poly%verismo!arch.entities.memtype.PTLevel. (Poly%verismo!arch.entities.memtype.PTLevel. x))) :pattern ((Poly%verismo!arch.entities.memtype.PTLevel. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memtype.PTLevel.) (= x (Poly%verismo!arch.entities.memtype.PTLevel. (%Poly%verismo!arch.entities.memtype.PTLevel. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.memtype.PTLevel.)))))
(assert (forall ((x verismo!arch.entities.memtype.PTLevel.)) (! (has_type (Poly%verismo!arch.entities.memtype.PTLevel. x) TYPE%verismo!arch.entities.memtype.PTLevel.) :pattern ((has_type (Poly%verismo!arch.entities.memtype.PTLevel. x) TYPE%verismo!arch.entities.memtype.PTLevel.)))))
(assert (forall ((x verismo!arch.entities.memtype.MemType.)) (! (= x (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. x))) :pattern ((Poly%verismo!arch.entities.memtype.MemType. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memtype.MemType.) (= x (Poly%verismo!arch.entities.memtype.MemType. (%Poly%verismo!arch.entities.memtype.MemType. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.memtype.MemType.)))))
(assert (forall ((x verismo!arch.entities.memtype.MemType.)) (! (= (verismo!arch.entities.memtype.MemType./PTE/0 x) (verismo!arch.entities.memtype.MemType./PTE/?0 x)) :pattern ((verismo!arch.entities.memtype.MemType./PTE/0 x)))))
(assert (forall ((x verismo!arch.entities.memtype.MemType.)) (! (has_type (Poly%verismo!arch.entities.memtype.MemType. x) TYPE%verismo!arch.entities.memtype.MemType.) :pattern ((has_type (Poly%verismo!arch.entities.memtype.MemType. x) TYPE%verismo!arch.entities.memtype.MemType.)))))
(assert (forall ((x verismo!arch.entities.params.AddrMemID.)) (! (= x (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. x))) :pattern ((Poly%verismo!arch.entities.params.AddrMemID. x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&)) (= x (Poly%verismo!arch.entities.params.AddrMemID. (%Poly%verismo!arch.entities.params.AddrMemID. x)))) :pattern ((has_type x (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_range! verismo!arch.addr_s.def_s.SpecMem.) (_memid! verismo!arch.entities.memid.MemID.)) (! (=> (and (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. _range!) (TYPE%verismo!arch.addr_s.def_s.SpecMem. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. _memid!) TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.entities.params.AddrMemID./AddrMemID _range! _memid!)) (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.entities.params.AddrMemID./AddrMemID _range! _memid!)) (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.entities.params.AddrMemID.)) (! (= (verismo!arch.entities.params.AddrMemID./AddrMemID/range x) (verismo!arch.entities.params.AddrMemID./AddrMemID/?range x)) :pattern ((verismo!arch.entities.params.AddrMemID./AddrMemID/range x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. x))) (TYPE%verismo!arch.addr_s.def_s.SpecMem. AddrT&. AddrT&))) :pattern ((verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. x)) (has_type x (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.entities.params.AddrMemID.)) (! (= (verismo!arch.entities.params.AddrMemID./AddrMemID/memid x) (verismo!arch.entities.params.AddrMemID./AddrMemID/?memid x)) :pattern ((verismo!arch.entities.params.AddrMemID./AddrMemID/memid x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. x))) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. x)) (has_type x (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))))))
(define-fun is-verismo!arch.entities.params.AddrMemID./AddrMemID_ ((c verismo!arch.entities.params.AddrMemID.)) Bool ((_ is verismo!arch.entities.params.AddrMemID./AddrMemID) c))
(assert (forall ((x verismo!arch.entities.params.AddrMemID.)) (! (=> (is-verismo!arch.entities.params.AddrMemID./AddrMemID_ x) (height_lt (height (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.entities.params.AddrMemID./AddrMemID/range x))) (height (Poly%verismo!arch.entities.params.AddrMemID. x)))) :pattern ((height (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.entities.params.AddrMemID./AddrMemID/range x)))))))
(assert (forall ((x verismo!arch.entities.params.PageID.)) (! (= x (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. x))) :pattern ((Poly%verismo!arch.entities.params.PageID. x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (= x (Poly%verismo!arch.entities.params.PageID. (%Poly%verismo!arch.entities.params.PageID. x)))) :pattern ((has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_page! verismo!arch.addr_s.def_s.SpecPage.) (_memid! verismo!arch.entities.memid.MemID.)) (! (=> (and (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. _page!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. _memid!) TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID./PageID _page! _memid!)) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID./PageID _page! _memid!)) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.entities.params.PageID.)) (! (= (verismo!arch.entities.params.PageID./PageID/page x) (verismo!arch.entities.params.PageID./PageID/?page x)) :pattern ((verismo!arch.entities.params.PageID./PageID/page x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.entities.params.PageID./PageID/page (%Poly%verismo!arch.entities.params.PageID. x))) (TYPE%verismo!arch.addr_s.def_s.SpecPage. AddrT&. AddrT&))) :pattern ((verismo!arch.entities.params.PageID./PageID/page (%Poly%verismo!arch.entities.params.PageID. x)) (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.entities.params.PageID.)) (! (= (verismo!arch.entities.params.PageID./PageID/memid x) (verismo!arch.entities.params.PageID./PageID/?memid x)) :pattern ((verismo!arch.entities.params.PageID./PageID/memid x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. x))) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. x)) (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))))))
(define-fun is-verismo!arch.entities.params.PageID./PageID_ ((c verismo!arch.entities.params.PageID.)) Bool ((_ is verismo!arch.entities.params.PageID./PageID) c))
(assert (forall ((x verismo!arch.entities.params.PageID.)) (! (=> (is-verismo!arch.entities.params.PageID./PageID_ x) (height_lt (height (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.entities.params.PageID./PageID/page x))) (height (Poly%verismo!arch.entities.params.PageID. x)))) :pattern ((height (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.entities.params.PageID./PageID/page x)))))))
(assert (forall ((x verismo!arch.entities.params.AddrID.)) (! (= x (%Poly%verismo!arch.entities.params.AddrID. (Poly%verismo!arch.entities.params.AddrID. x))) :pattern ((Poly%verismo!arch.entities.params.AddrID. x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&)) (= x (Poly%verismo!arch.entities.params.AddrID. (%Poly%verismo!arch.entities.params.AddrID. x)))) :pattern ((has_type x (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_addr! verismo!arch.addr_s.def_s.SpecAddr.) (_memid! verismo!arch.entities.memid.MemID.)) (! (=> (and (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. _addr!) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. _memid!) TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.entities.params.AddrID. (verismo!arch.entities.params.AddrID./AddrID _addr! _memid!)) (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.entities.params.AddrID. (verismo!arch.entities.params.AddrID./AddrID _addr! _memid!)) (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.entities.params.AddrID.)) (! (= (verismo!arch.entities.params.AddrID./AddrID/addr x) (verismo!arch.entities.params.AddrID./AddrID/?addr x)) :pattern ((verismo!arch.entities.params.AddrID./AddrID/addr x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.entities.params.AddrID./AddrID/addr (%Poly%verismo!arch.entities.params.AddrID. x))) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. AddrT&. AddrT&))) :pattern ((verismo!arch.entities.params.AddrID./AddrID/addr (%Poly%verismo!arch.entities.params.AddrID. x)) (has_type x (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.entities.params.AddrID.)) (! (= (verismo!arch.entities.params.AddrID./AddrID/memid x) (verismo!arch.entities.params.AddrID./AddrID/?memid x)) :pattern ((verismo!arch.entities.params.AddrID./AddrID/memid x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrID./AddrID/memid (%Poly%verismo!arch.entities.params.AddrID. x))) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.entities.params.AddrID./AddrID/memid (%Poly%verismo!arch.entities.params.AddrID. x)) (has_type x (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&))))))
(define-fun is-verismo!arch.entities.params.AddrID./AddrID_ ((c verismo!arch.entities.params.AddrID.)) Bool ((_ is verismo!arch.entities.params.AddrID./AddrID) c))
(assert (forall ((x verismo!arch.entities.params.AddrID.)) (! (=> (is-verismo!arch.entities.params.AddrID./AddrID_ x) (height_lt (height (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.entities.params.AddrID./AddrID/addr x))) (height (Poly%verismo!arch.entities.params.AddrID. x)))) :pattern ((height (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.entities.params.AddrID./AddrID/addr x)))))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= x (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x))) :pattern ((Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (= x (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)))))
(assert (forall ((_immutable! Bool) (_assigned! Bool) (_validated! Bool) (_vmsa! Bool) (_asid! Int) (_gpn! verismo!arch.addr_s.def_s.SpecPage.) (_size! verismo!arch.addr_s.def_s.PageSize.) (_perms! vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (=> (and (<= 0 _asid!) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. _gpn!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP _immutable! _assigned! _validated! _vmsa! _asid! _gpn! _size! _perms!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP _immutable! _assigned! _validated! _vmsa! _asid! _gpn! _size! _perms!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?immutable x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?assigned x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?validated x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?vmsa x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?asid x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (<= 0 (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)))) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)) (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?gpn x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x))) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)) (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?size x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?perms x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms x)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpEntry.)) (! (= x (%Poly%verismo!arch.rmp.def_s.RmpEntry. (Poly%verismo!arch.rmp.def_s.RmpEntry. x))) :pattern ((Poly%verismo!arch.rmp.def_s.RmpEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.) (= x (Poly%verismo!arch.rmp.def_s.RmpEntry. (%Poly%verismo!arch.rmp.def_s.RmpEntry. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.)))))
(assert (forall ((_val! verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (=> (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. _val!) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpEntry./RmpEntry _val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpEntry./RmpEntry _val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpEntry.)) (! (= (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val x) (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/?val x)) :pattern ((verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (%Poly%verismo!arch.rmp.def_s.RmpEntry. x))) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (%Poly%verismo!arch.rmp.def_s.RmpEntry. x)) (has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= x (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x))) :pattern ((Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.) (= x (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)))))
(assert (forall ((_gpn! verismo!arch.addr_s.def_s.SpecPage.) (_psize! verismo!arch.addr_s.def_s.PageSize.) (_vmsa! Bool) (_vmpl! verismo!arch.entities.VMPL.) (_perms! vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (=> (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. _gpn!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam _gpn! _psize! _vmsa! _vmpl! _perms!)) TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam _gpn! _psize! _vmsa! _vmpl! _perms!)) TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?gpn x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x))) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x)) (has_type x TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/psize x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?psize x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/psize x)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmsa x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?vmsa x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmsa x)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmpl x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?vmpl x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmpl x)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/perms x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?perms x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/perms x)))))
(assert (forall ((x verismo!arch.rmp.def_s.PvalidateParam.)) (! (= x (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. x))) :pattern ((Poly%verismo!arch.rmp.def_s.PvalidateParam. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.PvalidateParam.) (= x (Poly%verismo!arch.rmp.def_s.PvalidateParam. (%Poly%verismo!arch.rmp.def_s.PvalidateParam. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.def_s.PvalidateParam.)))))
(assert (forall ((_gpn! verismo!arch.addr_s.def_s.SpecPage.) (_psize! verismo!arch.addr_s.def_s.PageSize.) (_val! Bool)) (! (=> (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. _gpn!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam _gpn! _psize! _val!)) TYPE%verismo!arch.rmp.def_s.PvalidateParam.)) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam _gpn! _psize! _val!)) TYPE%verismo!arch.rmp.def_s.PvalidateParam.)))))
(assert (forall ((x verismo!arch.rmp.def_s.PvalidateParam.)) (! (= (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn x) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?gpn x)) :pattern ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.PvalidateParam.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn (%Poly%verismo!arch.rmp.def_s.PvalidateParam. x))) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn (%Poly%verismo!arch.rmp.def_s.PvalidateParam. x)) (has_type x TYPE%verismo!arch.rmp.def_s.PvalidateParam.)))))
(assert (forall ((x verismo!arch.rmp.def_s.PvalidateParam.)) (! (= (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/psize x) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?psize x)) :pattern ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/psize x)))))
(assert (forall ((x verismo!arch.rmp.def_s.PvalidateParam.)) (! (= (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/val x) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?val x)) :pattern ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/val x)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= x (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. x))) :pattern ((Poly%verismo!arch.rmp.def_s.RmpOp. x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (= x (Poly%verismo!arch.rmp.def_s.RmpOp. (%Poly%verismo!arch.rmp.def_s.RmpOp. x)))) :pattern ((has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.PageID.) (_1! verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (=> (and (has_type (Poly%verismo!arch.entities.params.PageID. _0!) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. _1!) TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 x) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/?0 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 x) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/?1 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.PageID.) (_1! verismo!arch.rmp.def_s.PvalidateParam.)) (! (=> (and (has_type (Poly%verismo!arch.entities.params.PageID. _0!) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.PvalidateParam. _1!) TYPE%verismo!arch.rmp.def_s.PvalidateParam.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./Pvalidate _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./Pvalidate _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 x) (verismo!arch.rmp.def_s.RmpOp./Pvalidate/?0 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 x) (verismo!arch.rmp.def_s.RmpOp./Pvalidate/?1 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) TYPE%verismo!arch.rmp.def_s.PvalidateParam.)) :pattern ((verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.PageID.) (_1! verismo!arch.rmp.def_s.RmpEntry.)) (! (=> (and (has_type (Poly%verismo!arch.entities.params.PageID. _0!) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. _1!) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 x) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/?0 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 x) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/?1 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(define-fun is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ ((c verismo!arch.rmp.def_s.RmpOp.)) Bool ((_ is verismo!arch.rmp.def_s.RmpOp./RmpAdjust) c))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (=> (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ x) (height_lt (height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 x))) (height (Poly%verismo!arch.rmp.def_s.RmpOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 x)))))))
(define-fun is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ ((c verismo!arch.rmp.def_s.RmpOp.)) Bool ((_ is verismo!arch.rmp.def_s.RmpOp./Pvalidate) c))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (=> (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ x) (height_lt (height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 x))) (height (Poly%verismo!arch.rmp.def_s.RmpOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 x)))))))
(define-fun is-verismo!arch.rmp.def_s.RmpOp./RmpUpdate_ ((c verismo!arch.rmp.def_s.RmpOp.)) Bool ((_ is verismo!arch.rmp.def_s.RmpOp./RmpUpdate) c))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (=> (is-verismo!arch.rmp.def_s.RmpOp./RmpUpdate_ x) (height_lt (height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 x))) (height (Poly%verismo!arch.rmp.def_s.RmpOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 x)))))))
(assert (forall ((x verismo!arch.rmp.perm_s.Perm.)) (! (= x (%Poly%verismo!arch.rmp.perm_s.Perm. (Poly%verismo!arch.rmp.perm_s.Perm. x))) :pattern ((Poly%verismo!arch.rmp.perm_s.Perm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.perm_s.Perm.) (= x (Poly%verismo!arch.rmp.perm_s.Perm. (%Poly%verismo!arch.rmp.perm_s.Perm. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.perm_s.Perm.)))))
(assert (forall ((x verismo!arch.rmp.perm_s.Perm.)) (! (has_type (Poly%verismo!arch.rmp.perm_s.Perm. x) TYPE%verismo!arch.rmp.perm_s.Perm.) :pattern ((has_type (Poly%verismo!arch.rmp.perm_s.Perm. x) TYPE%verismo!arch.rmp.perm_s.Perm.)))))
(assert (forall ((x verismo!arch.ramdb.def.RamDB.)) (! (= x (%Poly%verismo!arch.ramdb.def.RamDB. (Poly%verismo!arch.ramdb.def.RamDB. x))) :pattern ((Poly%verismo!arch.ramdb.def.RamDB. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.ramdb.def.RamDB.) (= x (Poly%verismo!arch.ramdb.def.RamDB. (%Poly%verismo!arch.ramdb.def.RamDB. x)))) :pattern ((has_type x TYPE%verismo!arch.ramdb.def.RamDB.)))))
(assert (forall ((x verismo!arch.ramdb.def.RamDB.)) (! (= (verismo!arch.ramdb.def.RamDB./RamDB/data x) (verismo!arch.ramdb.def.RamDB./RamDB/?data x)) :pattern ((verismo!arch.ramdb.def.RamDB./RamDB/data x)))))
(assert (forall ((x verismo!arch.ramdb.def.RamDB.)) (! (= (verismo!arch.ramdb.def.RamDB./RamDB/write_count x) (verismo!arch.ramdb.def.RamDB./RamDB/?write_count x)) :pattern ((verismo!arch.ramdb.def.RamDB./RamDB/write_count x)))))
(assert (forall ((x verismo!arch.ramdb.def.RamDB.)) (! (= (verismo!arch.ramdb.def.RamDB./RamDB/crypto_mask x) (verismo!arch.ramdb.def.RamDB./RamDB/?crypto_mask x)) :pattern ((verismo!arch.ramdb.def.RamDB./RamDB/crypto_mask x)))))
(assert (forall ((x verismo!arch.ramdb.def.RamDB.)) (! (has_type (Poly%verismo!arch.ramdb.def.RamDB. x) TYPE%verismo!arch.ramdb.def.RamDB.) :pattern ((has_type (Poly%verismo!arch.ramdb.def.RamDB. x) TYPE%verismo!arch.ramdb.def.RamDB.)))))
(assert (forall ((x verismo!arch.pgtable.def.MemMap.)) (! (= x (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. x))) :pattern ((Poly%verismo!arch.pgtable.def.MemMap. x)))))
(assert (forall ((T&. Dcr) (T& Type) (PT&. Dcr) (PT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&)) (= x (Poly%verismo!arch.pgtable.def.MemMap. (%Poly%verismo!arch.pgtable.def.MemMap. x)))) :pattern ((has_type x (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&))))))
(assert (forall ((T&. Dcr) (T& Type) (PT&. Dcr) (PT& Type) (_db! Poly)) (! (=> (has_type _db! (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&))) (has_type (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.pgtable.def.MemMap./MemMap _db!)) (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&))) :pattern ((has_type (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.pgtable.def.MemMap./MemMap _db!)) (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&))))))
(assert (forall ((x verismo!arch.pgtable.def.MemMap.)) (! (= (verismo!arch.pgtable.def.MemMap./MemMap/db x) (verismo!arch.pgtable.def.MemMap./MemMap/?db x)) :pattern ((verismo!arch.pgtable.def.MemMap./MemMap/db x)))))
(assert (forall ((T&. Dcr) (T& Type) (PT&. Dcr) (PT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&)) (has_type (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. x)) (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&)))) :pattern ((verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. x)) (has_type x (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&))))))
(define-fun is-verismo!arch.pgtable.def.MemMap./MemMap_ ((c verismo!arch.pgtable.def.MemMap.)) Bool ((_ is verismo!arch.pgtable.def.MemMap./MemMap) c))
(assert (forall ((x verismo!arch.pgtable.def.MemMap.)) (! (=> (is-verismo!arch.pgtable.def.MemMap./MemMap_ x) (height_lt (height (verismo!arch.pgtable.def.MemMap./MemMap/db x)) (height (Poly%verismo!arch.pgtable.def.MemMap. x)))) :pattern ((height (verismo!arch.pgtable.def.MemMap./MemMap/db x))))))
(assert (forall ((x verismo!arch.pgtable.def.PteFlag.)) (! (= x (%Poly%verismo!arch.pgtable.def.PteFlag. (Poly%verismo!arch.pgtable.def.PteFlag. x))) :pattern ((Poly%verismo!arch.pgtable.def.PteFlag. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.pgtable.def.PteFlag.) (= x (Poly%verismo!arch.pgtable.def.PteFlag. (%Poly%verismo!arch.pgtable.def.PteFlag. x)))) :pattern ((has_type x TYPE%verismo!arch.pgtable.def.PteFlag.)))))
(assert (forall ((x verismo!arch.pgtable.def.PteFlag.)) (! (has_type (Poly%verismo!arch.pgtable.def.PteFlag. x) TYPE%verismo!arch.pgtable.def.PteFlag.) :pattern ((has_type (Poly%verismo!arch.pgtable.def.PteFlag. x) TYPE%verismo!arch.pgtable.def.PteFlag.)))))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (= x (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x))) :pattern ((Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (= x (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)))) :pattern ((has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (has_type _dummy! T&) (has_type (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry _value! _dummy!)) (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))) :pattern ((has_type (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry _value! _dummy!)) (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))))))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (= (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value x) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?value x)) :pattern ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value x)))))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (= (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?dummy x)) :pattern ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (has_type (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)) T&)) :pattern ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)) (has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))))))
(define-fun is-verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry_ ((c verismo!arch.pgtable.def.SpecPageTableEntry.)) Bool ((_ is verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry) c))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (=> (is-verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry_ x) (height_lt (height (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x)) (height (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)))) :pattern ((height (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x))))))
(assert (forall ((x verismo!arch.pgtable.def_e.PageTableEntry.)) (! (= x (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. (Poly%verismo!arch.pgtable.def_e.PageTableEntry. x))) :pattern ((Poly%verismo!arch.pgtable.def_e.PageTableEntry. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&)) (= x (Poly%verismo!arch.pgtable.def_e.PageTableEntry. (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. x)))) :pattern ((has_type x (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_dummy! Poly)) (! (=> (has_type _dummy! T&) (has_type (Poly%verismo!arch.pgtable.def_e.PageTableEntry. (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry _value! _dummy!)) (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&))) :pattern ((has_type (Poly%verismo!arch.pgtable.def_e.PageTableEntry. (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry _value! _dummy!)) (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&))))))
(assert (forall ((x verismo!arch.pgtable.def_e.PageTableEntry.)) (! (= (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/value x) (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/?value x)) :pattern ((verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/value x)))))
(assert (forall ((x verismo!arch.pgtable.def_e.PageTableEntry.)) (! (= (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/dummy x) (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/?dummy x)) :pattern ((verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&)) (has_type (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/dummy (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. x)) T&)) :pattern ((verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/dummy (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. x)) (has_type x (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&))))))
(define-fun is-verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry_ ((c verismo!arch.pgtable.def_e.PageTableEntry.)) Bool ((_ is verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry) c))
(assert (forall ((x verismo!arch.pgtable.def_e.PageTableEntry.)) (! (=> (is-verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry_ x) (height_lt (height (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/dummy x)) (height (Poly%verismo!arch.pgtable.def_e.PageTableEntry. x)))) :pattern ((height (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/dummy x))))))
(assert (forall ((x verismo!arch.tlb.def_s.TLB.)) (! (= x (%Poly%verismo!arch.tlb.def_s.TLB. (Poly%verismo!arch.tlb.def_s.TLB. x))) :pattern ((Poly%verismo!arch.tlb.def_s.TLB. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.tlb.def_s.TLB.) (= x (Poly%verismo!arch.tlb.def_s.TLB. (%Poly%verismo!arch.tlb.def_s.TLB. x)))) :pattern ((has_type x TYPE%verismo!arch.tlb.def_s.TLB.)))))
(assert (forall ((x verismo!arch.tlb.def_s.TLB.)) (! (= (verismo!arch.tlb.def_s.TLB./TLB/db x) (verismo!arch.tlb.def_s.TLB./TLB/?db x)) :pattern ((verismo!arch.tlb.def_s.TLB./TLB/db x)))))
(assert (forall ((x verismo!arch.tlb.def_s.TLB.)) (! (has_type (Poly%verismo!arch.tlb.def_s.TLB. x) TYPE%verismo!arch.tlb.def_s.TLB.) :pattern ((has_type (Poly%verismo!arch.tlb.def_s.TLB. x) TYPE%verismo!arch.tlb.def_s.TLB.)))))
(assert (forall ((x verismo!arch.tlb.def_s.TLBIdx.)) (! (= x (%Poly%verismo!arch.tlb.def_s.TLBIdx. (Poly%verismo!arch.tlb.def_s.TLBIdx. x))) :pattern ((Poly%verismo!arch.tlb.def_s.TLBIdx. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.tlb.def_s.TLBIdx.) (= x (Poly%verismo!arch.tlb.def_s.TLBIdx. (%Poly%verismo!arch.tlb.def_s.TLBIdx. x)))) :pattern ((has_type x TYPE%verismo!arch.tlb.def_s.TLBIdx.)))))
(assert (forall ((_0! verismo!arch.entities.memid.MemID.) (_1! verismo!arch.addr_s.def_s.SpecPage.)) (! (=> (and (has_type (Poly%verismo!arch.entities.memid.MemID. _0!) TYPE%verismo!arch.entities.memid.MemID.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. _1!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) (has_type (Poly%verismo!arch.tlb.def_s.TLBIdx. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx _0! _1!)) TYPE%verismo!arch.tlb.def_s.TLBIdx.)) :pattern ((has_type (Poly%verismo!arch.tlb.def_s.TLBIdx. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx _0! _1!)) TYPE%verismo!arch.tlb.def_s.TLBIdx.)))))
(assert (forall ((x verismo!arch.tlb.def_s.TLBIdx.)) (! (= (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/0 x) (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/?0 x)) :pattern ((verismo!arch.tlb.def_s.TLBIdx./TLBIdx/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.tlb.def_s.TLBIdx.) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/0 (%Poly%verismo!arch.tlb.def_s.TLBIdx. x))) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.tlb.def_s.TLBIdx./TLBIdx/0 (%Poly%verismo!arch.tlb.def_s.TLBIdx. x)) (has_type x TYPE%verismo!arch.tlb.def_s.TLBIdx.)))))
(assert (forall ((x verismo!arch.tlb.def_s.TLBIdx.)) (! (= (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/1 x) (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/?1 x)) :pattern ((verismo!arch.tlb.def_s.TLBIdx./TLBIdx/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.tlb.def_s.TLBIdx.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/1 (%Poly%verismo!arch.tlb.def_s.TLBIdx. x))) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) :pattern ((verismo!arch.tlb.def_s.TLBIdx./TLBIdx/1 (%Poly%verismo!arch.tlb.def_s.TLBIdx. x)) (has_type x TYPE%verismo!arch.tlb.def_s.TLBIdx.)))))
(assert (forall ((x verismo!arch.vram.def.VRamDB.)) (! (= x (%Poly%verismo!arch.vram.def.VRamDB. (Poly%verismo!arch.vram.def.VRamDB. x))) :pattern ((Poly%verismo!arch.vram.def.VRamDB. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.vram.def.VRamDB.) (= x (Poly%verismo!arch.vram.def.VRamDB. (%Poly%verismo!arch.vram.def.VRamDB. x)))) :pattern ((has_type x TYPE%verismo!arch.vram.def.VRamDB.)))))
(assert (forall ((x verismo!arch.vram.def.VRamDB.)) (! (= (verismo!arch.vram.def.VRamDB./VRamDB/sram x) (verismo!arch.vram.def.VRamDB./VRamDB/?sram x)) :pattern ((verismo!arch.vram.def.VRamDB./VRamDB/sram x)))))
(assert (forall ((x verismo!arch.vram.def.VRamDB.)) (! (= (verismo!arch.vram.def.VRamDB./VRamDB/rmp x) (verismo!arch.vram.def.VRamDB./VRamDB/?rmp x)) :pattern ((verismo!arch.vram.def.VRamDB./VRamDB/rmp x)))))
(assert (forall ((x verismo!arch.vram.def.VRamDB.)) (! (has_type (Poly%verismo!arch.vram.def.VRamDB. x) TYPE%verismo!arch.vram.def.VRamDB.) :pattern ((has_type (Poly%verismo!arch.vram.def.VRamDB. x) TYPE%verismo!arch.vram.def.VRamDB.)))))
(assert (forall ((x verismo!arch.ptram.def_s.GuestPTRam.)) (! (= x (%Poly%verismo!arch.ptram.def_s.GuestPTRam. (Poly%verismo!arch.ptram.def_s.GuestPTRam. x))) :pattern ((Poly%verismo!arch.ptram.def_s.GuestPTRam. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (= x (Poly%verismo!arch.ptram.def_s.GuestPTRam. (%Poly%verismo!arch.ptram.def_s.GuestPTRam. x)))) :pattern ((has_type x TYPE%verismo!arch.ptram.def_s.GuestPTRam.)))))
(assert (forall ((x verismo!arch.ptram.def_s.GuestPTRam.)) (! (= (verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam/ram x) (verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam/?ram x)) :pattern ((verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam/ram x)))))
(assert (forall ((x verismo!arch.ptram.def_s.GuestPTRam.)) (! (= (verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam/l0_entry x) (verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam/?l0_entry x)) :pattern ((verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam/l0_entry x)))))
(assert (forall ((x verismo!arch.ptram.def_s.GuestPTRam.)) (! (has_type (Poly%verismo!arch.ptram.def_s.GuestPTRam. x) TYPE%verismo!arch.ptram.def_s.GuestPTRam.) :pattern ((has_type (Poly%verismo!arch.ptram.def_s.GuestPTRam. x) TYPE%verismo!arch.ptram.def_s.GuestPTRam.)))))
(assert (forall ((x verismo!arch.mem.def_s.MemDB.)) (! (= x (%Poly%verismo!arch.mem.def_s.MemDB. (Poly%verismo!arch.mem.def_s.MemDB. x))) :pattern ((Poly%verismo!arch.mem.def_s.MemDB. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.mem.def_s.MemDB.) (= x (Poly%verismo!arch.mem.def_s.MemDB. (%Poly%verismo!arch.mem.def_s.MemDB. x)))) :pattern ((has_type x TYPE%verismo!arch.mem.def_s.MemDB.)))))
(assert (forall ((x verismo!arch.mem.def_s.MemDB.)) (! (= (verismo!arch.mem.def_s.MemDB./MemDB/vram x) (verismo!arch.mem.def_s.MemDB./MemDB/?vram x)) :pattern ((verismo!arch.mem.def_s.MemDB./MemDB/vram x)))))
(assert (forall ((x verismo!arch.mem.def_s.MemDB.)) (! (= (verismo!arch.mem.def_s.MemDB./MemDB/l0_entry x) (verismo!arch.mem.def_s.MemDB./MemDB/?l0_entry x)) :pattern ((verismo!arch.mem.def_s.MemDB./MemDB/l0_entry x)))))
(assert (forall ((x verismo!arch.mem.def_s.MemDB.)) (! (= (verismo!arch.mem.def_s.MemDB./MemDB/sysmap x) (verismo!arch.mem.def_s.MemDB./MemDB/?sysmap x)) :pattern ((verismo!arch.mem.def_s.MemDB./MemDB/sysmap x)))))
(assert (forall ((x verismo!arch.mem.def_s.MemDB.)) (! (= (verismo!arch.mem.def_s.MemDB./MemDB/tlb x) (verismo!arch.mem.def_s.MemDB./MemDB/?tlb x)) :pattern ((verismo!arch.mem.def_s.MemDB./MemDB/tlb x)))))
(assert (forall ((x verismo!arch.mem.def_s.MemDB.)) (! (has_type (Poly%verismo!arch.mem.def_s.MemDB. x) TYPE%verismo!arch.mem.def_s.MemDB.) :pattern ((has_type (Poly%verismo!arch.mem.def_s.MemDB. x) TYPE%verismo!arch.mem.def_s.MemDB.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= x (%Poly%verismo!arch.x64.def_s.Archx64Op. (Poly%verismo!arch.x64.def_s.Archx64Op. x))) :pattern ((Poly%verismo!arch.x64.def_s.Archx64Op. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (= x (Poly%verismo!arch.x64.def_s.Archx64Op. (%Poly%verismo!arch.x64.def_s.Archx64Op. x)))) :pattern ((has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((_0! verismo!arch.memop.MemOp.) (_1! Int)) (! (=> (and (has_type (Poly%verismo!arch.memop.MemOp. _0!) (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (<= 0 _1!)) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./MemOp _0! _1!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./MemOp _0! _1!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./MemOp/0 x) (verismo!arch.x64.def_s.Archx64Op./MemOp/?0 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./MemOp/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x))) (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) :pattern ((verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./MemOp/1 x) (verismo!arch.x64.def_s.Archx64Op./MemOp/?1 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./MemOp/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (<= 0 (verismo!arch.x64.def_s.Archx64Op./MemOp/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)))) :pattern ((verismo!arch.x64.def_s.Archx64Op./MemOp/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((_0! verismo!arch.entities.memid.CpuMemID.) (_1! verismo!arch.reg.RegName.) (_2! Int)) (! (=> (and (has_type (Poly%verismo!arch.entities.memid.CpuMemID. _0!) TYPE%verismo!arch.entities.memid.CpuMemID.) (has_type (Poly%verismo!arch.reg.RegName. _1!) TYPE%verismo!arch.reg.RegName.) (uInv 64 _2!)) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./RegWrite _0! _1! _2!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./RegWrite _0! _1! _2!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./RegWrite/0 x) (verismo!arch.x64.def_s.Archx64Op./RegWrite/?0 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegWrite/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.def_s.Archx64Op./RegWrite/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x))) TYPE%verismo!arch.entities.memid.CpuMemID.)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegWrite/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./RegWrite/1 x) (verismo!arch.x64.def_s.Archx64Op./RegWrite/?1 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegWrite/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.reg.RegName. (verismo!arch.x64.def_s.Archx64Op./RegWrite/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. x))) TYPE%verismo!arch.reg.RegName.)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegWrite/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./RegWrite/2 x) (verismo!arch.x64.def_s.Archx64Op./RegWrite/?2 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegWrite/2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (uInv 64 (verismo!arch.x64.def_s.Archx64Op./RegWrite/2 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)))) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegWrite/2 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((_0! verismo!arch.entities.memid.CpuMemID.) (_1! verismo!arch.reg.RegName.)) (! (=> (and (has_type (Poly%verismo!arch.entities.memid.CpuMemID. _0!) TYPE%verismo!arch.entities.memid.CpuMemID.) (has_type (Poly%verismo!arch.reg.RegName. _1!) TYPE%verismo!arch.reg.RegName.)) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./RegRead _0! _1!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./RegRead _0! _1!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./RegRead/0 x) (verismo!arch.x64.def_s.Archx64Op./RegRead/?0 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegRead/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.def_s.Archx64Op./RegRead/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x))) TYPE%verismo!arch.entities.memid.CpuMemID.)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegRead/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./RegRead/1 x) (verismo!arch.x64.def_s.Archx64Op./RegRead/?1 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegRead/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.reg.RegName. (verismo!arch.x64.def_s.Archx64Op./RegRead/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. x))) TYPE%verismo!arch.reg.RegName.)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegRead/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((_0! verismo!arch.entities.memid.CpuMemID.)) (! (=> (has_type (Poly%verismo!arch.entities.memid.CpuMemID. _0!) TYPE%verismo!arch.entities.memid.CpuMemID.) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./VMGExit _0!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./VMGExit _0!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./VMGExit/0 x) (verismo!arch.x64.def_s.Archx64Op./VMGExit/?0 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./VMGExit/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.def_s.Archx64Op./VMGExit/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x))) TYPE%verismo!arch.entities.memid.CpuMemID.)) :pattern ((verismo!arch.x64.def_s.Archx64Op./VMGExit/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((_0! verismo!arch.entities.memid.CpuMemID.)) (! (=> (has_type (Poly%verismo!arch.entities.memid.CpuMemID. _0!) TYPE%verismo!arch.entities.memid.CpuMemID.) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./LoopHalt _0!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./LoopHalt _0!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./LoopHalt/0 x) (verismo!arch.x64.def_s.Archx64Op./LoopHalt/?0 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./LoopHalt/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.def_s.Archx64Op./LoopHalt/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x))) TYPE%verismo!arch.entities.memid.CpuMemID.)) :pattern ((verismo!arch.x64.def_s.Archx64Op./LoopHalt/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64.)) (! (= x (%Poly%verismo!arch.x64.def_s.Archx64. (Poly%verismo!arch.x64.def_s.Archx64. x))) :pattern ((Poly%verismo!arch.x64.def_s.Archx64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64.) (= x (Poly%verismo!arch.x64.def_s.Archx64. (%Poly%verismo!arch.x64.def_s.Archx64. x)))) :pattern ((has_type x TYPE%verismo!arch.x64.def_s.Archx64.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64.)) (! (= (verismo!arch.x64.def_s.Archx64./Archx64/memdb x) (verismo!arch.x64.def_s.Archx64./Archx64/?memdb x)) :pattern ((verismo!arch.x64.def_s.Archx64./Archx64/memdb x)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64.)) (! (= (verismo!arch.x64.def_s.Archx64./Archx64/regdb x) (verismo!arch.x64.def_s.Archx64./Archx64/?regdb x)) :pattern ((verismo!arch.x64.def_s.Archx64./Archx64/regdb x)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64.)) (! (= (verismo!arch.x64.def_s.Archx64./Archx64/entities x) (verismo!arch.x64.def_s.Archx64./Archx64/?entities x)) :pattern ((verismo!arch.x64.def_s.Archx64./Archx64/entities x)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64.)) (! (has_type (Poly%verismo!arch.x64.def_s.Archx64. x) TYPE%verismo!arch.x64.def_s.Archx64.) :pattern ((has_type (Poly%verismo!arch.x64.def_s.Archx64. x) TYPE%verismo!arch.x64.def_s.Archx64.)))))
(assert (forall ((x verismo!arch.x64.def_s.AECode.)) (! (= x (%Poly%verismo!arch.x64.def_s.AECode. (Poly%verismo!arch.x64.def_s.AECode. x))) :pattern ((Poly%verismo!arch.x64.def_s.AECode. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.AECode.) (= x (Poly%verismo!arch.x64.def_s.AECode. (%Poly%verismo!arch.x64.def_s.AECode. x)))) :pattern ((has_type x TYPE%verismo!arch.x64.def_s.AECode.)))))
(assert (forall ((x verismo!arch.x64.def_s.AECode.)) (! (has_type (Poly%verismo!arch.x64.def_s.AECode. x) TYPE%verismo!arch.x64.def_s.AECode.) :pattern ((has_type (Poly%verismo!arch.x64.def_s.AECode. x) TYPE%verismo!arch.x64.def_s.AECode.)))))
(assert (forall ((x verismo!arch.x64.def_s.NAECode.)) (! (= x (%Poly%verismo!arch.x64.def_s.NAECode. (Poly%verismo!arch.x64.def_s.NAECode. x))) :pattern ((Poly%verismo!arch.x64.def_s.NAECode. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.NAECode.) (= x (Poly%verismo!arch.x64.def_s.NAECode. (%Poly%verismo!arch.x64.def_s.NAECode. x)))) :pattern ((has_type x TYPE%verismo!arch.x64.def_s.NAECode.)))))
(assert (has_type (Poly%verismo!arch.x64.def_s.NAECode. verismo!arch.x64.def_s.NAECode./Npf) TYPE%verismo!arch.x64.def_s.NAECode.))
(assert (has_type (Poly%verismo!arch.x64.def_s.NAECode. verismo!arch.x64.def_s.NAECode./Vmmcall) TYPE%verismo!arch.x64.def_s.NAECode.))
(assert (has_type (Poly%verismo!arch.x64.def_s.NAECode. verismo!arch.x64.def_s.NAECode./Halt) TYPE%verismo!arch.x64.def_s.NAECode.))
(assert (forall ((_0! verismo!arch.x64.def_s.Archx64Op.)) (! (=> (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. _0!) TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.x64.def_s.NAECode. (verismo!arch.x64.def_s.NAECode./NotValidated _0!)) TYPE%verismo!arch.x64.def_s.NAECode.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.NAECode. (verismo!arch.x64.def_s.NAECode./NotValidated _0!)) TYPE%verismo!arch.x64.def_s.NAECode.)))))
(assert (forall ((x verismo!arch.x64.def_s.NAECode.)) (! (= (verismo!arch.x64.def_s.NAECode./NotValidated/0 x) (verismo!arch.x64.def_s.NAECode./NotValidated/?0 x)) :pattern ((verismo!arch.x64.def_s.NAECode./NotValidated/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.NAECode.) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.NAECode./NotValidated/0 (%Poly%verismo!arch.x64.def_s.NAECode. x))) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((verismo!arch.x64.def_s.NAECode./NotValidated/0 (%Poly%verismo!arch.x64.def_s.NAECode. x)) (has_type x TYPE%verismo!arch.x64.def_s.NAECode.)))))
(assert (has_type (Poly%verismo!arch.x64.def_s.NAECode. verismo!arch.x64.def_s.NAECode./Others) TYPE%verismo!arch.x64.def_s.NAECode.))
(assert (forall ((x verismo!arch.x64.def_s.ExceptionCode.)) (! (= x (%Poly%verismo!arch.x64.def_s.ExceptionCode. (Poly%verismo!arch.x64.def_s.ExceptionCode. x))) :pattern ((Poly%verismo!arch.x64.def_s.ExceptionCode. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.ExceptionCode.) (= x (Poly%verismo!arch.x64.def_s.ExceptionCode. (%Poly%verismo!arch.x64.def_s.ExceptionCode. x)))) :pattern ((has_type x TYPE%verismo!arch.x64.def_s.ExceptionCode.)))))
(assert (forall ((_0! verismo!arch.x64.def_s.Archx64Op.)) (! (=> (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. _0!) TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.x64.def_s.ExceptionCode. (verismo!arch.x64.def_s.ExceptionCode./PFault _0!)) TYPE%verismo!arch.x64.def_s.ExceptionCode.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.ExceptionCode. (verismo!arch.x64.def_s.ExceptionCode./PFault _0!)) TYPE%verismo!arch.x64.def_s.ExceptionCode.)))))
(assert (forall ((x verismo!arch.x64.def_s.ExceptionCode.)) (! (= (verismo!arch.x64.def_s.ExceptionCode./PFault/0 x) (verismo!arch.x64.def_s.ExceptionCode./PFault/?0 x)) :pattern ((verismo!arch.x64.def_s.ExceptionCode./PFault/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.ExceptionCode.) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.ExceptionCode./PFault/0 (%Poly%verismo!arch.x64.def_s.ExceptionCode. x))) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((verismo!arch.x64.def_s.ExceptionCode./PFault/0 (%Poly%verismo!arch.x64.def_s.ExceptionCode. x)) (has_type x TYPE%verismo!arch.x64.def_s.ExceptionCode.)))))
(assert (forall ((_0! verismo!arch.x64.def_s.Archx64Op.)) (! (=> (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. _0!) TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.x64.def_s.ExceptionCode. (verismo!arch.x64.def_s.ExceptionCode./GP _0!)) TYPE%verismo!arch.x64.def_s.ExceptionCode.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.ExceptionCode. (verismo!arch.x64.def_s.ExceptionCode./GP _0!)) TYPE%verismo!arch.x64.def_s.ExceptionCode.)))))
(assert (forall ((x verismo!arch.x64.def_s.ExceptionCode.)) (! (= (verismo!arch.x64.def_s.ExceptionCode./GP/0 x) (verismo!arch.x64.def_s.ExceptionCode./GP/?0 x)) :pattern ((verismo!arch.x64.def_s.ExceptionCode./GP/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.ExceptionCode.) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.ExceptionCode./GP/0 (%Poly%verismo!arch.x64.def_s.ExceptionCode. x))) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((verismo!arch.x64.def_s.ExceptionCode./GP/0 (%Poly%verismo!arch.x64.def_s.ExceptionCode. x)) (has_type x TYPE%verismo!arch.x64.def_s.ExceptionCode.)))))
(assert (forall ((x verismo!arch.entities.VMPL.)) (! (= x (%Poly%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. x))) :pattern ((Poly%verismo!arch.entities.VMPL. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.VMPL.) (= x (Poly%verismo!arch.entities.VMPL. (%Poly%verismo!arch.entities.VMPL. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.VMPL.)))))
(assert (forall ((x verismo!arch.entities.VMPL.)) (! (has_type (Poly%verismo!arch.entities.VMPL. x) TYPE%verismo!arch.entities.VMPL.) :pattern ((has_type (Poly%verismo!arch.entities.VMPL. x) TYPE%verismo!arch.entities.VMPL.)))))
(assert (forall ((x verismo!arch.crypto.CryptoMask.)) (! (= x (%Poly%verismo!arch.crypto.CryptoMask. (Poly%verismo!arch.crypto.CryptoMask. x))) :pattern ((Poly%verismo!arch.crypto.CryptoMask. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.crypto.CryptoMask.) (= x (Poly%verismo!arch.crypto.CryptoMask. (%Poly%verismo!arch.crypto.CryptoMask. x)))) :pattern ((has_type x TYPE%verismo!arch.crypto.CryptoMask.)))))
(assert (forall ((x verismo!arch.crypto.CryptoMask.)) (! (= (verismo!arch.crypto.CryptoMask./CryptoMask/0 x) (verismo!arch.crypto.CryptoMask./CryptoMask/?0 x)) :pattern ((verismo!arch.crypto.CryptoMask./CryptoMask/0 x)))))
(assert (forall ((x verismo!arch.crypto.CryptoMask.)) (! (has_type (Poly%verismo!arch.crypto.CryptoMask. x) TYPE%verismo!arch.crypto.CryptoMask.) :pattern ((has_type (Poly%verismo!arch.crypto.CryptoMask. x) TYPE%verismo!arch.crypto.CryptoMask.)))))
(assert (forall ((x verismo!arch.crypto.SymKey.)) (! (= x (%Poly%verismo!arch.crypto.SymKey. (Poly%verismo!arch.crypto.SymKey. x))) :pattern ((Poly%verismo!arch.crypto.SymKey. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.crypto.SymKey. T&. T&)) (= x (Poly%verismo!arch.crypto.SymKey. (%Poly%verismo!arch.crypto.SymKey. x)))) :pattern ((has_type x (TYPE%verismo!arch.crypto.SymKey. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_key! Poly)) (! (=> (has_type _key! T&) (has_type (Poly%verismo!arch.crypto.SymKey. (verismo!arch.crypto.SymKey./SymKey _key!)) (TYPE%verismo!arch.crypto.SymKey. T&. T&))) :pattern ((has_type (Poly%verismo!arch.crypto.SymKey. (verismo!arch.crypto.SymKey./SymKey _key!)) (TYPE%verismo!arch.crypto.SymKey. T&. T&))))))
(assert (forall ((x verismo!arch.crypto.SymKey.)) (! (= (verismo!arch.crypto.SymKey./SymKey/key x) (verismo!arch.crypto.SymKey./SymKey/?key x)) :pattern ((verismo!arch.crypto.SymKey./SymKey/key x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.crypto.SymKey. T&. T&)) (has_type (verismo!arch.crypto.SymKey./SymKey/key (%Poly%verismo!arch.crypto.SymKey. x)) T&)) :pattern ((verismo!arch.crypto.SymKey./SymKey/key (%Poly%verismo!arch.crypto.SymKey. x)) (has_type x (TYPE%verismo!arch.crypto.SymKey. T&. T&))))))
(define-fun is-verismo!arch.crypto.SymKey./SymKey_ ((c verismo!arch.crypto.SymKey.)) Bool ((_ is verismo!arch.crypto.SymKey./SymKey) c))
(assert (forall ((x verismo!arch.crypto.SymKey.)) (! (=> (is-verismo!arch.crypto.SymKey./SymKey_ x) (height_lt (height (verismo!arch.crypto.SymKey./SymKey/key x)) (height (Poly%verismo!arch.crypto.SymKey. x)))) :pattern ((height (verismo!arch.crypto.SymKey./SymKey/key x))))))
(assert (forall ((x verismo!arch.crypto.Encrypted.)) (! (= x (%Poly%verismo!arch.crypto.Encrypted. (Poly%verismo!arch.crypto.Encrypted. x))) :pattern ((Poly%verismo!arch.crypto.Encrypted. x)))))
(assert (forall ((K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&)) (= x (Poly%verismo!arch.crypto.Encrypted. (%Poly%verismo!arch.crypto.Encrypted. x)))) :pattern ((has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&))))))
(assert (forall ((K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (_data! Poly) (_key! Poly) (_crypto_mask! Poly)) (! (=> (and (has_type _data! T&) (has_type _key! K&) (has_type _crypto_mask! T&)) (has_type (Poly%verismo!arch.crypto.Encrypted. (verismo!arch.crypto.Encrypted./Encrypted _data! _key! _crypto_mask!)) (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&))) :pattern ((has_type (Poly%verismo!arch.crypto.Encrypted. (verismo!arch.crypto.Encrypted./Encrypted _data! _key! _crypto_mask!)) (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&))))))
(assert (forall ((x verismo!arch.crypto.Encrypted.)) (! (= (verismo!arch.crypto.Encrypted./Encrypted/data x) (verismo!arch.crypto.Encrypted./Encrypted/?data x)) :pattern ((verismo!arch.crypto.Encrypted./Encrypted/data x)))))
(assert (forall ((K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&)) (has_type (verismo!arch.crypto.Encrypted./Encrypted/data (%Poly%verismo!arch.crypto.Encrypted. x)) T&)) :pattern ((verismo!arch.crypto.Encrypted./Encrypted/data (%Poly%verismo!arch.crypto.Encrypted. x)) (has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&))))))
(assert (forall ((x verismo!arch.crypto.Encrypted.)) (! (= (verismo!arch.crypto.Encrypted./Encrypted/key x) (verismo!arch.crypto.Encrypted./Encrypted/?key x)) :pattern ((verismo!arch.crypto.Encrypted./Encrypted/key x)))))
(assert (forall ((K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&)) (has_type (verismo!arch.crypto.Encrypted./Encrypted/key (%Poly%verismo!arch.crypto.Encrypted. x)) K&)) :pattern ((verismo!arch.crypto.Encrypted./Encrypted/key (%Poly%verismo!arch.crypto.Encrypted. x)) (has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&))))))
(assert (forall ((x verismo!arch.crypto.Encrypted.)) (! (= (verismo!arch.crypto.Encrypted./Encrypted/crypto_mask x) (verismo!arch.crypto.Encrypted./Encrypted/?crypto_mask x)) :pattern ((verismo!arch.crypto.Encrypted./Encrypted/crypto_mask x)))))
(assert (forall ((K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&)) (has_type (verismo!arch.crypto.Encrypted./Encrypted/crypto_mask (%Poly%verismo!arch.crypto.Encrypted. x)) T&)) :pattern ((verismo!arch.crypto.Encrypted./Encrypted/crypto_mask (%Poly%verismo!arch.crypto.Encrypted. x)) (has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&))))))
(define-fun is-verismo!arch.crypto.Encrypted./Encrypted_ ((c verismo!arch.crypto.Encrypted.)) Bool ((_ is verismo!arch.crypto.Encrypted./Encrypted) c))
(assert (forall ((x verismo!arch.crypto.Encrypted.)) (! (=> (is-verismo!arch.crypto.Encrypted./Encrypted_ x) (height_lt (height (verismo!arch.crypto.Encrypted./Encrypted/data x)) (height (Poly%verismo!arch.crypto.Encrypted. x)))) :pattern ((height (verismo!arch.crypto.Encrypted./Encrypted/data x))))))
(assert (forall ((x verismo!arch.crypto.Encrypted.)) (! (=> (is-verismo!arch.crypto.Encrypted./Encrypted_ x) (height_lt (height (verismo!arch.crypto.Encrypted./Encrypted/key x)) (height (Poly%verismo!arch.crypto.Encrypted. x)))) :pattern ((height (verismo!arch.crypto.Encrypted./Encrypted/key x))))))
(assert (forall ((x verismo!arch.crypto.Encrypted.)) (! (=> (is-verismo!arch.crypto.Encrypted./Encrypted_ x) (height_lt (height (verismo!arch.crypto.Encrypted./Encrypted/crypto_mask x)) (height (Poly%verismo!arch.crypto.Encrypted. x)))) :pattern ((height (verismo!arch.crypto.Encrypted./Encrypted/crypto_mask x))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= x (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. x))) :pattern ((Poly%verismo!arch.memop.MemOp. x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (= x (Poly%verismo!arch.memop.MemOp. (%Poly%verismo!arch.memop.MemOp. x)))) :pattern ((has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.AddrMemID.) (_1! Bool)) (! (=> (has_type (Poly%verismo!arch.entities.params.AddrMemID. _0!) (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./Read _0! _1!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./Read _0! _1!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./Read/0 x) (verismo!arch.memop.MemOp./Read/?0 x)) :pattern ((verismo!arch.memop.MemOp./Read/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.MemOp./Read/0 (%Poly%verismo!arch.memop.MemOp. x))) (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))) :pattern ((verismo!arch.memop.MemOp./Read/0 (%Poly%verismo!arch.memop.MemOp. x)) (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./Read/1 x) (verismo!arch.memop.MemOp./Read/?1 x)) :pattern ((verismo!arch.memop.MemOp./Read/1 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.AddrID.) (_1! Bool) (_2! vstd!seq.Seq<u8.>.)) (! (=> (has_type (Poly%verismo!arch.entities.params.AddrID. _0!) (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./Write _0! _1! _2!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./Write _0! _1! _2!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./Write/0 x) (verismo!arch.memop.MemOp./Write/?0 x)) :pattern ((verismo!arch.memop.MemOp./Write/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.AddrID. (verismo!arch.memop.MemOp./Write/0 (%Poly%verismo!arch.memop.MemOp. x))) (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&))) :pattern ((verismo!arch.memop.MemOp./Write/0 (%Poly%verismo!arch.memop.MemOp. x)) (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./Write/1 x) (verismo!arch.memop.MemOp./Write/?1 x)) :pattern ((verismo!arch.memop.MemOp./Write/1 x)))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./Write/2 x) (verismo!arch.memop.MemOp./Write/?2 x)) :pattern ((verismo!arch.memop.MemOp./Write/2 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.AddrMemID.)) (! (=> (has_type (Poly%verismo!arch.entities.params.AddrMemID. _0!) (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./InvlPage _0!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./InvlPage _0!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./InvlPage/0 x) (verismo!arch.memop.MemOp./InvlPage/?0 x)) :pattern ((verismo!arch.memop.MemOp./InvlPage/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.MemOp./InvlPage/0 (%Poly%verismo!arch.memop.MemOp. x))) (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))) :pattern ((verismo!arch.memop.MemOp./InvlPage/0 (%Poly%verismo!arch.memop.MemOp. x)) (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.memid.MemID.)) (! (=> (has_type (Poly%verismo!arch.entities.memid.MemID. _0!) TYPE%verismo!arch.entities.memid.MemID.) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./FlushAll _0!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./FlushAll _0!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./FlushAll/0 x) (verismo!arch.memop.MemOp./FlushAll/?0 x)) :pattern ((verismo!arch.memop.MemOp./FlushAll/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.memop.MemOp./FlushAll/0 (%Poly%verismo!arch.memop.MemOp. x))) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.memop.MemOp./FlushAll/0 (%Poly%verismo!arch.memop.MemOp. x)) (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.rmp.def_s.RmpOp.)) (! (=> (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. _0!) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./RmpOp _0!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./RmpOp _0!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./RmpOp/0 x) (verismo!arch.memop.MemOp./RmpOp/?0 x)) :pattern ((verismo!arch.memop.MemOp./RmpOp/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. x))) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) :pattern ((verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. x)) (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(define-fun is-verismo!arch.memop.MemOp./Read_ ((c verismo!arch.memop.MemOp.)) Bool ((_ is verismo!arch.memop.MemOp./Read) c))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (=> (is-verismo!arch.memop.MemOp./Read_ x) (height_lt (height (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.MemOp./Read/0 x))) (height (Poly%verismo!arch.memop.MemOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.MemOp./Read/0 x)))))))
(define-fun is-verismo!arch.memop.MemOp./Write_ ((c verismo!arch.memop.MemOp.)) Bool ((_ is verismo!arch.memop.MemOp./Write) c))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (=> (is-verismo!arch.memop.MemOp./Write_ x) (height_lt (height (Poly%verismo!arch.entities.params.AddrID. (verismo!arch.memop.MemOp./Write/0 x))) (height (Poly%verismo!arch.memop.MemOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.AddrID. (verismo!arch.memop.MemOp./Write/0 x)))))))
(define-fun is-verismo!arch.memop.MemOp./InvlPage_ ((c verismo!arch.memop.MemOp.)) Bool ((_ is verismo!arch.memop.MemOp./InvlPage) c))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (=> (is-verismo!arch.memop.MemOp./InvlPage_ x) (height_lt (height (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.MemOp./InvlPage/0 x))) (height (Poly%verismo!arch.memop.MemOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.MemOp./InvlPage/0 x)))))))
(define-fun is-verismo!arch.memop.MemOp./RmpOp_ ((c verismo!arch.memop.MemOp.)) Bool ((_ is verismo!arch.memop.MemOp./RmpOp) c))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (=> (is-verismo!arch.memop.MemOp./RmpOp_ x) (height_lt (height (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 x))) (height (Poly%verismo!arch.memop.MemOp. x)))) :pattern ((height (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 x)))))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= x (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. x))) :pattern ((Poly%verismo!arch.errors.MemError. x)))))
(assert (forall ((Param&. Dcr) (Param& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (= x (Poly%verismo!arch.errors.MemError. (%Poly%verismo!arch.errors.MemError. x)))) :pattern ((has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((Param&. Dcr) (Param& Type) (_0! Poly)) (! (=> (has_type _0! Param&) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./Others _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))) :pattern ((has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./Others _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= (verismo!arch.errors.MemError./Others/0 x) (verismo!arch.errors.MemError./Others/?0 x)) :pattern ((verismo!arch.errors.MemError./Others/0 x)))))
(assert (forall ((Param&. Dcr) (Param& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (has_type (verismo!arch.errors.MemError./Others/0 (%Poly%verismo!arch.errors.MemError. x)) Param&)) :pattern ((verismo!arch.errors.MemError./Others/0 (%Poly%verismo!arch.errors.MemError. x)) (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((Param&. Dcr) (Param& Type) (_0! Poly)) (! (=> (has_type _0! Param&) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NoRam _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))) :pattern ((has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NoRam _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= (verismo!arch.errors.MemError./NoRam/0 x) (verismo!arch.errors.MemError./NoRam/?0 x)) :pattern ((verismo!arch.errors.MemError./NoRam/0 x)))))
(assert (forall ((Param&. Dcr) (Param& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (has_type (verismo!arch.errors.MemError./NoRam/0 (%Poly%verismo!arch.errors.MemError. x)) Param&)) :pattern ((verismo!arch.errors.MemError./NoRam/0 (%Poly%verismo!arch.errors.MemError. x)) (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((Param&. Dcr) (Param& Type) (_0! Poly)) (! (=> (has_type _0! Param&) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NotValidated _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))) :pattern ((has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NotValidated _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= (verismo!arch.errors.MemError./NotValidated/0 x) (verismo!arch.errors.MemError./NotValidated/?0 x)) :pattern ((verismo!arch.errors.MemError./NotValidated/0 x)))))
(assert (forall ((Param&. Dcr) (Param& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (has_type (verismo!arch.errors.MemError./NotValidated/0 (%Poly%verismo!arch.errors.MemError. x)) Param&)) :pattern ((verismo!arch.errors.MemError./NotValidated/0 (%Poly%verismo!arch.errors.MemError. x)) (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((Param&. Dcr) (Param& Type) (_0! Poly)) (! (=> (has_type _0! Param&) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NestedPF _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))) :pattern ((has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NestedPF _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= (verismo!arch.errors.MemError./NestedPF/0 x) (verismo!arch.errors.MemError./NestedPF/?0 x)) :pattern ((verismo!arch.errors.MemError./NestedPF/0 x)))))
(assert (forall ((Param&. Dcr) (Param& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (has_type (verismo!arch.errors.MemError./NestedPF/0 (%Poly%verismo!arch.errors.MemError. x)) Param&)) :pattern ((verismo!arch.errors.MemError./NestedPF/0 (%Poly%verismo!arch.errors.MemError. x)) (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((Param&. Dcr) (Param& Type) (_0! Poly)) (! (=> (has_type _0! Param&) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./PageFault _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))) :pattern ((has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./PageFault _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= (verismo!arch.errors.MemError./PageFault/0 x) (verismo!arch.errors.MemError./PageFault/?0 x)) :pattern ((verismo!arch.errors.MemError./PageFault/0 x)))))
(assert (forall ((Param&. Dcr) (Param& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (has_type (verismo!arch.errors.MemError./PageFault/0 (%Poly%verismo!arch.errors.MemError. x)) Param&)) :pattern ((verismo!arch.errors.MemError./PageFault/0 (%Poly%verismo!arch.errors.MemError. x)) (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((Param&. Dcr) (Param& Type) (_0! verismo!arch.errors.RmpFault.) (_1! Poly)) (! (=> (has_type _1! Param&) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp _0! _1!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))) :pattern ((has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp _0! _1!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= (verismo!arch.errors.MemError./RmpOp/0 x) (verismo!arch.errors.MemError./RmpOp/?0 x)) :pattern ((verismo!arch.errors.MemError./RmpOp/0 x)))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= (verismo!arch.errors.MemError./RmpOp/1 x) (verismo!arch.errors.MemError./RmpOp/?1 x)) :pattern ((verismo!arch.errors.MemError./RmpOp/1 x)))))
(assert (forall ((Param&. Dcr) (Param& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (has_type (verismo!arch.errors.MemError./RmpOp/1 (%Poly%verismo!arch.errors.MemError. x)) Param&)) :pattern ((verismo!arch.errors.MemError./RmpOp/1 (%Poly%verismo!arch.errors.MemError. x)) (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(define-fun is-verismo!arch.errors.MemError./Others_ ((c verismo!arch.errors.MemError.)) Bool ((_ is verismo!arch.errors.MemError./Others) c))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (=> (is-verismo!arch.errors.MemError./Others_ x) (height_lt (height (verismo!arch.errors.MemError./Others/0 x)) (height (Poly%verismo!arch.errors.MemError. x)))) :pattern ((height (verismo!arch.errors.MemError./Others/0 x))))))
(define-fun is-verismo!arch.errors.MemError./NoRam_ ((c verismo!arch.errors.MemError.)) Bool ((_ is verismo!arch.errors.MemError./NoRam) c))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (=> (is-verismo!arch.errors.MemError./NoRam_ x) (height_lt (height (verismo!arch.errors.MemError./NoRam/0 x)) (height (Poly%verismo!arch.errors.MemError. x)))) :pattern ((height (verismo!arch.errors.MemError./NoRam/0 x))))))
(define-fun is-verismo!arch.errors.MemError./NotValidated_ ((c verismo!arch.errors.MemError.)) Bool ((_ is verismo!arch.errors.MemError./NotValidated) c))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (=> (is-verismo!arch.errors.MemError./NotValidated_ x) (height_lt (height (verismo!arch.errors.MemError./NotValidated/0 x)) (height (Poly%verismo!arch.errors.MemError. x)))) :pattern ((height (verismo!arch.errors.MemError./NotValidated/0 x))))))
(define-fun is-verismo!arch.errors.MemError./NestedPF_ ((c verismo!arch.errors.MemError.)) Bool ((_ is verismo!arch.errors.MemError./NestedPF) c))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (=> (is-verismo!arch.errors.MemError./NestedPF_ x) (height_lt (height (verismo!arch.errors.MemError./NestedPF/0 x)) (height (Poly%verismo!arch.errors.MemError. x)))) :pattern ((height (verismo!arch.errors.MemError./NestedPF/0 x))))))
(define-fun is-verismo!arch.errors.MemError./PageFault_ ((c verismo!arch.errors.MemError.)) Bool ((_ is verismo!arch.errors.MemError./PageFault) c))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (=> (is-verismo!arch.errors.MemError./PageFault_ x) (height_lt (height (verismo!arch.errors.MemError./PageFault/0 x)) (height (Poly%verismo!arch.errors.MemError. x)))) :pattern ((height (verismo!arch.errors.MemError./PageFault/0 x))))))
(define-fun is-verismo!arch.errors.MemError./RmpOp_ ((c verismo!arch.errors.MemError.)) Bool ((_ is verismo!arch.errors.MemError./RmpOp) c))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (=> (is-verismo!arch.errors.MemError./RmpOp_ x) (height_lt (height (verismo!arch.errors.MemError./RmpOp/1 x)) (height (Poly%verismo!arch.errors.MemError. x)))) :pattern ((height (verismo!arch.errors.MemError./RmpOp/1 x))))))
(assert (forall ((x verismo!arch.errors.RmpFault.)) (! (= x (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. x))) :pattern ((Poly%verismo!arch.errors.RmpFault. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.errors.RmpFault.) (= x (Poly%verismo!arch.errors.RmpFault. (%Poly%verismo!arch.errors.RmpFault. x)))) :pattern ((has_type x TYPE%verismo!arch.errors.RmpFault.)))))
(assert (forall ((x verismo!arch.errors.RmpFault.)) (! (has_type (Poly%verismo!arch.errors.RmpFault. x) TYPE%verismo!arch.errors.RmpFault.) :pattern ((has_type (Poly%verismo!arch.errors.RmpFault. x) TYPE%verismo!arch.errors.RmpFault.)))))
(assert (forall ((x verismo!arch.reg.RegName.)) (! (= x (%Poly%verismo!arch.reg.RegName. (Poly%verismo!arch.reg.RegName. x))) :pattern ((Poly%verismo!arch.reg.RegName. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.reg.RegName.) (= x (Poly%verismo!arch.reg.RegName. (%Poly%verismo!arch.reg.RegName. x)))) :pattern ((has_type x TYPE%verismo!arch.reg.RegName.)))))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rsp) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cs) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Ds) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Ss) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Es) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Gs) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cpl) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr0) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr1) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr2) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr3) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr4) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./XCr0) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./IdtrBaseLimit) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./GdtrBaseLimit) TYPE%verismo!arch.reg.RegName.))
(assert (forall ((_0! Int)) (! (=> (uInv 32 _0!) (has_type (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR _0!)) TYPE%verismo!arch.reg.RegName.)) :pattern ((has_type (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR _0!)) TYPE%verismo!arch.reg.RegName.)))))
(assert (forall ((x verismo!arch.reg.RegName.)) (! (= (verismo!arch.reg.RegName./MSR/0 x) (verismo!arch.reg.RegName./MSR/?0 x)) :pattern ((verismo!arch.reg.RegName./MSR/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.reg.RegName.) (uInv 32 (verismo!arch.reg.RegName./MSR/0 (%Poly%verismo!arch.reg.RegName. x)))) :pattern ((verismo!arch.reg.RegName./MSR/0 (%Poly%verismo!arch.reg.RegName. x)) (has_type x TYPE%verismo!arch.reg.RegName.)))))
(assert (forall ((x verismo!arch.reg.RflagBit.)) (! (= x (%Poly%verismo!arch.reg.RflagBit. (Poly%verismo!arch.reg.RflagBit. x))) :pattern ((Poly%verismo!arch.reg.RflagBit. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.reg.RflagBit.) (= x (Poly%verismo!arch.reg.RflagBit. (%Poly%verismo!arch.reg.RflagBit. x)))) :pattern ((has_type x TYPE%verismo!arch.reg.RflagBit.)))))
(assert (forall ((x verismo!arch.reg.RflagBit.)) (! (has_type (Poly%verismo!arch.reg.RflagBit. x) TYPE%verismo!arch.reg.RflagBit.) :pattern ((has_type (Poly%verismo!arch.reg.RflagBit. x) TYPE%verismo!arch.reg.RflagBit.)))))
(assert (forall ((x verismo!tspec.ResultOrErr.)) (! (= x (%Poly%verismo!tspec.ResultOrErr. (Poly%verismo!tspec.ResultOrErr. x))) :pattern ((Poly%verismo!tspec.ResultOrErr. x)))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.ResultOrErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (= x (Poly%verismo!tspec.ResultOrErr. (%Poly%verismo!tspec.ResultOrErr. x)))) :pattern ((has_type x (TYPE%verismo!tspec.ResultOrErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (_0! Poly)) (! (=> (has_type _0! RetValue&) (has_type (Poly%verismo!tspec.ResultOrErr. (verismo!tspec.ResultOrErr./Ok _0!)) (TYPE%verismo!tspec.ResultOrErr. RetValue&. RetValue& ErrorID&. ErrorID&))) :pattern ((has_type (Poly%verismo!tspec.ResultOrErr. (verismo!tspec.ResultOrErr./Ok _0!)) (TYPE%verismo!tspec.ResultOrErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(assert (forall ((x verismo!tspec.ResultOrErr.)) (! (= (verismo!tspec.ResultOrErr./Ok/0 x) (verismo!tspec.ResultOrErr./Ok/?0 x)) :pattern ((verismo!tspec.ResultOrErr./Ok/0 x)))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.ResultOrErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (has_type (verismo!tspec.ResultOrErr./Ok/0 (%Poly%verismo!tspec.ResultOrErr. x)) RetValue&)) :pattern ((verismo!tspec.ResultOrErr./Ok/0 (%Poly%verismo!tspec.ResultOrErr. x)) (has_type x (TYPE%verismo!tspec.ResultOrErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (_0! Poly)) (! (=> (has_type _0! ErrorID&) (has_type (Poly%verismo!tspec.ResultOrErr. (verismo!tspec.ResultOrErr./Error _0!)) (TYPE%verismo!tspec.ResultOrErr. RetValue&. RetValue& ErrorID&. ErrorID&))) :pattern ((has_type (Poly%verismo!tspec.ResultOrErr. (verismo!tspec.ResultOrErr./Error _0!)) (TYPE%verismo!tspec.ResultOrErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(assert (forall ((x verismo!tspec.ResultOrErr.)) (! (= (verismo!tspec.ResultOrErr./Error/0 x) (verismo!tspec.ResultOrErr./Error/?0 x)) :pattern ((verismo!tspec.ResultOrErr./Error/0 x)))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.ResultOrErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (has_type (verismo!tspec.ResultOrErr./Error/0 (%Poly%verismo!tspec.ResultOrErr. x)) ErrorID&)) :pattern ((verismo!tspec.ResultOrErr./Error/0 (%Poly%verismo!tspec.ResultOrErr. x)) (has_type x (TYPE%verismo!tspec.ResultOrErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(define-fun is-verismo!tspec.ResultOrErr./Ok_ ((c verismo!tspec.ResultOrErr.)) Bool ((_ is verismo!tspec.ResultOrErr./Ok) c))
(assert (forall ((x verismo!tspec.ResultOrErr.)) (! (=> (is-verismo!tspec.ResultOrErr./Ok_ x) (height_lt (height (verismo!tspec.ResultOrErr./Ok/0 x)) (height (Poly%verismo!tspec.ResultOrErr. x)))) :pattern ((height (verismo!tspec.ResultOrErr./Ok/0 x))))))
(define-fun is-verismo!tspec.ResultOrErr./Error_ ((c verismo!tspec.ResultOrErr.)) Bool ((_ is verismo!tspec.ResultOrErr./Error) c))
(assert (forall ((x verismo!tspec.ResultOrErr.)) (! (=> (is-verismo!tspec.ResultOrErr./Error_ x) (height_lt (height (verismo!tspec.ResultOrErr./Error/0 x)) (height (Poly%verismo!tspec.ResultOrErr. x)))) :pattern ((height (verismo!tspec.ResultOrErr./Error/0 x))))))
(assert (forall ((x verismo!tspec.ResultWithErr.)) (! (= x (%Poly%verismo!tspec.ResultWithErr. (Poly%verismo!tspec.ResultWithErr. x))) :pattern ((Poly%verismo!tspec.ResultWithErr. x)))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (= x (Poly%verismo!tspec.ResultWithErr. (%Poly%verismo!tspec.ResultWithErr. x)))) :pattern ((has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (_0! Poly)) (! (=> (has_type _0! RetValue&) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!tspec.ResultWithErr./Ok _0!)) (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))) :pattern ((has_type (Poly%verismo!tspec.ResultWithErr. (verismo!tspec.ResultWithErr./Ok _0!)) (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(assert (forall ((x verismo!tspec.ResultWithErr.)) (! (= (verismo!tspec.ResultWithErr./Ok/0 x) (verismo!tspec.ResultWithErr./Ok/?0 x)) :pattern ((verismo!tspec.ResultWithErr./Ok/0 x)))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (has_type (verismo!tspec.ResultWithErr./Ok/0 (%Poly%verismo!tspec.ResultWithErr. x)) RetValue&)) :pattern ((verismo!tspec.ResultWithErr./Ok/0 (%Poly%verismo!tspec.ResultWithErr. x)) (has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! RetValue&) (has_type _1! ErrorID&)) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!tspec.ResultWithErr./Error _0! _1!)) (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))) :pattern ((has_type (Poly%verismo!tspec.ResultWithErr. (verismo!tspec.ResultWithErr./Error _0! _1!)) (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(assert (forall ((x verismo!tspec.ResultWithErr.)) (! (= (verismo!tspec.ResultWithErr./Error/0 x) (verismo!tspec.ResultWithErr./Error/?0 x)) :pattern ((verismo!tspec.ResultWithErr./Error/0 x)))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (has_type (verismo!tspec.ResultWithErr./Error/0 (%Poly%verismo!tspec.ResultWithErr. x)) RetValue&)) :pattern ((verismo!tspec.ResultWithErr./Error/0 (%Poly%verismo!tspec.ResultWithErr. x)) (has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(assert (forall ((x verismo!tspec.ResultWithErr.)) (! (= (verismo!tspec.ResultWithErr./Error/1 x) (verismo!tspec.ResultWithErr./Error/?1 x)) :pattern ((verismo!tspec.ResultWithErr./Error/1 x)))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (has_type (verismo!tspec.ResultWithErr./Error/1 (%Poly%verismo!tspec.ResultWithErr. x)) ErrorID&)) :pattern ((verismo!tspec.ResultWithErr./Error/1 (%Poly%verismo!tspec.ResultWithErr. x)) (has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(define-fun is-verismo!tspec.ResultWithErr./Ok_ ((c verismo!tspec.ResultWithErr.)) Bool ((_ is verismo!tspec.ResultWithErr./Ok) c))
(assert (forall ((x verismo!tspec.ResultWithErr.)) (! (=> (is-verismo!tspec.ResultWithErr./Ok_ x) (height_lt (height (verismo!tspec.ResultWithErr./Ok/0 x)) (height (Poly%verismo!tspec.ResultWithErr. x)))) :pattern ((height (verismo!tspec.ResultWithErr./Ok/0 x))))))
(define-fun is-verismo!tspec.ResultWithErr./Error_ ((c verismo!tspec.ResultWithErr.)) Bool ((_ is verismo!tspec.ResultWithErr./Error) c))
(assert (forall ((x verismo!tspec.ResultWithErr.)) (! (=> (is-verismo!tspec.ResultWithErr./Error_ x) (height_lt (height (verismo!tspec.ResultWithErr./Error/0 x)) (height (Poly%verismo!tspec.ResultWithErr. x)))) :pattern ((height (verismo!tspec.ResultWithErr./Error/0 x))))))
(assert (forall ((x verismo!tspec.ResultWithErr.)) (! (=> (is-verismo!tspec.ResultWithErr./Error_ x) (height_lt (height (verismo!tspec.ResultWithErr./Error/1 x)) (height (Poly%verismo!tspec.ResultWithErr. x)))) :pattern ((height (verismo!tspec.ResultWithErr./Error/1 x))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(set-info :comment ";; Traits")
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.cast.VTypeCast. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.isconst.IsConstant. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecOrd. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecAdd. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecSub. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.security.sectype.SecMemType. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.integer.IntValue. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.integer.IntOrd. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.size_s.SpecSize. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.wellformed.WellFormed. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!arch.addr_s.def_s.AddrType. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!arch.crypto.encdec.SpecEncrypt. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!primitives_e.sectype.ToSecSeq. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!primitives_e.sectype.FromSecSeq. (Dcr Type Dcr Type) Bool)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_Some")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::std_specs::option::OptionAdditionalFns::is_None")
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::layout::size_of")
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::empty")
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::new")
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::dom")
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::index")
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::spec_index")
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::insert")
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map::impl&%0::remove")
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::contains_key")
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::map_lib::impl&%0::union_prefer_right")
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::pervasive::arbitrary")
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::empty")
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::new")
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::len")
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::seq::Seq::index")
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_index")
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::push")
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::update")
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::subrange")
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::add")
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::impl&%0::spec_add")
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::seq::Seq::last")
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::empty")
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::new")
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::full")
(declare-fun vstd!set.impl&%0.full.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::contains")
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::insert")
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::remove")
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::union")
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::intersect")
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::difference")
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::complement")
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::finite")
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::len")
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::choose")
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl vstd::set::impl&%0::mk_map")
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::math::bits_p::spec_bit_set")
(declare-fun verismo!tspec.math.bits_p.spec_bit_set.? (Poly Poly) Int)
(set-info :comment ";; Function-Decl verismo::tspec::math::pow_s::spec_int_pow2")
(declare-fun verismo!tspec.math.pow_s.spec_int_pow2.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::tspec::math::pow_s::spec_nat_pow2")
(declare-fun verismo!tspec.math.pow_s.spec_nat_pow2.? (Poly) Int)
(declare-fun verismo!tspec.math.pow_s.rec%spec_nat_pow2.? (Poly Fuel) Int)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::DataLabel::is_Symbol")
(declare-fun verismo!tspec.security.sectype.impl&%0.is_Symbol.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::DataLabel::is_TrustedRandom")
(declare-fun verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::DataLabel::is_Secret")
(declare-fun verismo!tspec.security.sectype.impl&%0.is_Secret.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_new")
(declare-fun verismo!tspec.security.sectype.impl&%2.spec_new.? (Dcr Type Dcr Type Poly Poly Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_val")
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_val.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec__unused")
(declare-fun verismo!tspec.security.sectype.impl&%3.spec__unused.? (Dcr Type Dcr Type Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_valsets")
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_valsets.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::spec_labels")
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_labels.? (Dcr Type Dcr Type Poly) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SecMemType::view")
(declare-fun verismo!tspec.security.sectype.SecMemType.view.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.SecMemType.view%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SecType::spec_new")
(declare-fun verismo!tspec.security.sectype.impl&%9.spec_new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SecType::wf_value")
(declare-fun verismo!tspec.security.sectype.impl&%9.wf_value.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::wf_vmpl")
(declare-fun verismo!tspec.security.sectype.impl&%16.wf_vmpl.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::wf_value")
(declare-fun verismo!tspec.security.sectype.impl&%16.wf_value.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::bop_new")
(declare-fun verismo!tspec.security.sectype.impl&%16.bop_new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::uop_new")
(declare-fun verismo!tspec.security.sectype.impl&%16.uop_new.? (Dcr Type Dcr Type Dcr Type Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SpecSecType::constant")
(declare-fun verismo!tspec.security.sectype.impl&%16.constant.? (Dcr Type Dcr Type Poly) verismo!tspec.security.sectype.SpecSecType.)
(set-info :comment ";; Function-Decl verismo::tspec::security::sectype::SecType::wf")
(declare-fun verismo!tspec.security.sectype.impl&%20.wf.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::security::seq::fn_spec_to_seq_index")
(declare-fun verismo!tspec.security.seq.fn_spec_to_seq_index.? (Dcr Type Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::bool_to_stream")
(declare-fun verismo!tspec.stream.basic.bool_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::char_to_stream")
(declare-fun verismo!tspec.stream.basic.char_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u8_to_stream")
(declare-fun verismo!tspec.stream.basic.u8_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u16_to_stream")
(declare-fun verismo!tspec.stream.basic.u16_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u32_to_stream")
(declare-fun verismo!tspec.stream.basic.u32_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u64_to_stream")
(declare-fun verismo!tspec.stream.basic.u64_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::u128_to_stream")
(declare-fun verismo!tspec.stream.basic.u128_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::tspec::stream::basic::usize_to_stream")
(declare-fun verismo!tspec.stream.basic.usize_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::PAGE_SIZE")
(declare-fun verismo!arch.addr_s.def_s.PAGE_SIZE.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::PageSize::spec_from_int")
(declare-fun verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecAddr::value")
(declare-fun verismo!arch.addr_s.page.impl&%2.value.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecAddr::to_page")
(declare-fun verismo!arch.addr_s.page.impl&%2.to_page.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecPage.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecAddr::to_offset")
(declare-fun verismo!arch.addr_s.page.impl&%2.to_offset.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecAddr::new2")
(declare-fun verismo!arch.addr_s.page.impl&%2.new2.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecAddr::new")
(declare-fun verismo!arch.addr_s.page.impl&%2.new.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecAddr::null")
(declare-fun verismo!arch.addr_s.page.impl&%2.null.? (Dcr Type) verismo!arch.addr_s.def_s.SpecAddr.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecAddr::to_mem")
(declare-fun verismo!arch.addr_s.page.impl&%2.to_mem.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecMem.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecPage::value")
(declare-fun verismo!arch.addr_s.page.impl&%3.value.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecPage::is_valid")
(declare-fun verismo!arch.addr_s.page.impl&%3.is_valid.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecPage::new")
(declare-fun verismo!arch.addr_s.page.impl&%3.new.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecPage.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecPage::new2")
(declare-fun verismo!arch.addr_s.page.impl&%3.new2.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecPage.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecPage::to_addr")
(declare-fun verismo!arch.addr_s.page.impl&%3.to_addr.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecPage::to_mem")
(declare-fun verismo!arch.addr_s.page.impl&%3.to_mem.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecMem.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecPage::valid_as_size")
(declare-fun verismo!arch.addr_s.page.impl&%3.valid_as_size.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecMem::from_range")
(declare-fun verismo!arch.addr_s.page.impl&%8.from_range.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecMem.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecMem::convert")
(declare-fun verismo!arch.addr_s.page.impl&%8.convert.? (Dcr Type Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecMem.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecMem::is_aligned")
(declare-fun verismo!arch.addr_s.page.impl&%8.is_aligned.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecMem::is_valid")
(declare-fun verismo!arch.addr_s.page.impl&%8.is_valid.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecMem::spec_index")
(declare-fun verismo!arch.addr_s.page.impl&%8.spec_index.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecMem::first")
(declare-fun verismo!arch.addr_s.page.impl&%8.first.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecMem::offset")
(declare-fun verismo!arch.addr_s.page.impl&%8.offset.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecMem::len")
(declare-fun verismo!arch.addr_s.page.impl&%8.len.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::addr_s::def_s::SpecMem::to_page")
(declare-fun verismo!arch.addr_s.page.impl&%8.to_page.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecPage.)
(set-info :comment ";; Function-Decl verismo::arch::entities::memid::MemID::is_Guest")
(declare-fun verismo!arch.entities.memid.impl&%0.is_Guest.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memid::MemID::is_Hv")
(declare-fun verismo!arch.entities.memid.impl&%0.is_Hv.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memid::CpuMemID::cpu")
(declare-fun verismo!arch.entities.memid.impl&%2.cpu.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::entities::memid::CpuMemID::memid")
(declare-fun verismo!arch.entities.memid.impl&%2.memid.? (Poly) verismo!arch.entities.memid.MemID.)
(set-info :comment ";; Function-Decl verismo::arch::entities::memid::MemID::is_sm")
(declare-fun verismo!arch.entities.memid.impl&%3.is_sm.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memid::MemID::is_vmpl0")
(declare-fun verismo!arch.entities.memid.impl&%3.is_vmpl0.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memid::MemID::to_asid")
(declare-fun verismo!arch.entities.memid.impl&%3.to_asid.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::entities::memid::MemID::to_vmpl")
(declare-fun verismo!arch.entities.memid.impl&%3.to_vmpl.? (Poly) verismo!arch.entities.VMPL.)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::PTLevel::spec_from_int")
(declare-fun verismo!arch.entities.memtype.impl&%6.spec_from_int.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::PTLevel::is_L0")
(declare-fun verismo!arch.entities.memtype.impl&%7.is_L0.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_PTE")
(declare-fun verismo!arch.entities.memtype.impl&%8.is_PTE.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::get_PTE_0")
(declare-fun verismo!arch.entities.memtype.impl&%8.get_PTE_0.? (Poly) verismo!arch.entities.memtype.PTLevel.)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_SmPrivData")
(declare-fun verismo!arch.entities.memtype.impl&%8.is_SmPrivData.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_SmPrivCode")
(declare-fun verismo!arch.entities.memtype.impl&%8.is_SmPrivCode.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_SmPrivStack")
(declare-fun verismo!arch.entities.memtype.impl&%8.is_SmPrivStack.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_SmBootData")
(declare-fun verismo!arch.entities.memtype.impl&%8.is_SmBootData.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_SmVmplPage")
(declare-fun verismo!arch.entities.memtype.impl&%8.is_SmVmplPage.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_sm_int")
(declare-fun verismo!arch.entities.memtype.impl&%10.is_sm_int.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::is_vm_int")
(declare-fun verismo!arch.entities.memtype.impl&%10.is_vm_int.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::MemType::need_c_bit")
(declare-fun verismo!arch.entities.memtype.impl&%10.need_c_bit.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::memtype_inner")
(declare-fun verismo!arch.entities.memtype.memtype_inner.? (Poly) verismo!arch.entities.memtype.MemType.)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::memtype")
(declare-fun verismo!arch.entities.memtype.memtype.? (Poly Poly) verismo!arch.entities.memtype.MemType.)
(set-info :comment ";; Function-Decl verismo::arch::crypto::encdec::SpecEncrypt::decrypt")
(declare-fun verismo!arch.crypto.encdec.SpecEncrypt.decrypt.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!arch.crypto.encdec.SpecEncrypt.decrypt%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpEntry::view")
(declare-fun verismo!arch.rmp.access_u.impl&%0.view.? (Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::db_s::rmp_check_access")
(declare-fun verismo!arch.rmp.db_s.rmp_check_access.? (Poly Poly Poly Poly Poly Poly) verismo!tspec.ResultOrErr.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::db_u::rmp_inv")
(declare-fun verismo!arch.rmp.db_u.rmp_inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::db_u::rmp_reverse")
(declare-fun verismo!arch.rmp.db_u.rmp_reverse.? (Poly Poly Poly) verismo!arch.addr_s.def_s.SpecPage.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::db_u::rmp_reverse_mem")
(declare-fun verismo!arch.rmp.db_u.rmp_reverse_mem.? (Poly Poly Poly) verismo!arch.addr_s.def_s.SpecMem.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::db_u::rmp_has_gpn_memid")
(declare-fun verismo!arch.rmp.db_u.rmp_has_gpn_memid.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::db_u::rmp_inv_sw")
(declare-fun verismo!arch.rmp.db_u.rmp_inv_sw.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::db_u::rmp_inv_memid_int")
(declare-fun verismo!arch.rmp.db_u.rmp_inv_memid_int.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_immutable")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_immutable.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_assigned")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_assigned.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_validated")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_vmsa")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_asid")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_gpn")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly) verismo!arch.addr_s.def_s.SpecPage.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_size")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly) verismo!arch.addr_s.def_s.PageSize.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_perms")
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_new")
(declare-fun verismo!arch.rmp.def_s.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpEntry::spec_val")
(declare-fun verismo!arch.rmp.def_s.impl&%3.spec_val.? (Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpEntry::spec_new")
(declare-fun verismo!arch.rmp.def_s.impl&%5.spec_new.? (Poly) verismo!arch.rmp.def_s.RmpEntry.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RMP_FAIL_INPUT")
(declare-fun verismo!arch.rmp.def_s.RMP_FAIL_INPUT.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RMP_FAIL_PERMISSION")
(declare-fun verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RMP_FAIL_SIZEMISMATCH")
(declare-fun verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpEntry::check_access")
(declare-fun verismo!arch.rmp.access_s.impl&%0.check_access.? (Poly Poly Poly Poly Poly) verismo!tspec.ResultOrErr.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_perm")
(declare-fun verismo!arch.rmp.entry_s.impl&%0.spec_perm.? (Poly Poly) vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::check_vmpl")
(declare-fun verismo!arch.rmp.entry_s.impl&%0.check_vmpl.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::to_page_memid")
(declare-fun verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.? (Dcr Type Poly) verismo!arch.entities.params.PageID.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::set_gpn")
(declare-fun verismo!arch.rmp.rmpop_u.impl&%1.set_gpn.? (Poly Poly) verismo!arch.rmp.def_s.RmpOp.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::gp_op_requires")
(declare-fun verismo!arch.rmp.rmpop_u.impl&%2.gp_op_requires.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::set_spn")
(declare-fun verismo!arch.rmp.rmpop_u.impl&%2.set_spn.? (Poly Poly) verismo!arch.rmp.def_s.RmpOp.)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::op_requires_stateless")
(declare-fun verismo!arch.rmp.rmpop_u.impl&%3.op_requires_stateless.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::rmp::def_s::RmpOp::sp_op_requires")
(declare-fun verismo!arch.rmp.rmpop_u.impl&%3.sp_op_requires.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::memop::MemOp::translate_gpn")
(declare-fun verismo!arch.memop.gvmemop.impl&%0.translate_gpn.? (Poly Poly Poly) verismo!arch.memop.MemOp.)
(set-info :comment ";; Function-Decl verismo::arch::memop::MemOp::to_addr_memid")
(declare-fun verismo!arch.memop.memop.impl&%0.to_addr_memid.? (Dcr Type Poly) verismo!arch.entities.params.AddrMemID.)
(set-info :comment ";; Function-Decl verismo::arch::memop::MemOp::to_memid")
(declare-fun verismo!arch.memop.memop.impl&%0.to_memid.? (Dcr Type Poly) verismo!arch.entities.memid.MemID.)
(set-info :comment ";; Function-Decl verismo::arch::memop::MemOp::to_mem")
(declare-fun verismo!arch.memop.memop.impl&%0.to_mem.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecMem.)
(set-info :comment ";; Function-Decl verismo::arch::memop::MemOp::to_page")
(declare-fun verismo!arch.memop.memop.impl&%0.to_page.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecPage.)
(set-info :comment ";; Function-Decl verismo::arch::memop::MemOp::use_gmap")
(declare-fun verismo!arch.memop.memop.impl&%0.use_gmap.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::memop::MemOp::is_valid")
(declare-fun verismo!arch.memop.memop.impl&%0.is_valid.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::ramdb::def::RamDB::spec_data")
(declare-fun verismo!arch.ramdb.def.impl&%0.spec_data.? (Poly) vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.)
(set-info :comment ";; Function-Decl verismo::arch::ramdb::def::RamDB::spec_write_count")
(declare-fun verismo!arch.ramdb.def.impl&%0.spec_write_count.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::ramdb::def::RamDB::spec_crypto_mask")
(declare-fun verismo!arch.ramdb.def.impl&%0.spec_crypto_mask.? (Poly) vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.)
(set-info :comment ";; Function-Decl verismo::arch::ramdb::def::RamDB::spec_new")
(declare-fun verismo!arch.ramdb.def.impl&%2.spec_new.? (Poly Poly Poly) verismo!arch.ramdb.def.RamDB.)
(set-info :comment ";; Function-Decl verismo::arch::ramdb::ram_s::MEM_UNIT_SIZE")
(declare-fun verismo!arch.ramdb.ram_s.MEM_UNIT_SIZE.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::ramdb::ram_s::idx2")
(declare-fun verismo!arch.ramdb.ram_s.idx2.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::ramdb::ram_s::idx")
(declare-fun verismo!arch.ramdb.ram_s.idx.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::ramdb::def::RamDB::inv")
(declare-fun verismo!arch.ramdb.ram_s.impl&%0.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::ramdb::def::RamDB::read_one_byte")
(declare-fun verismo!arch.ramdb.ram_s.impl&%0.read_one_byte.? (Poly Poly Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::ramdb::def::RamDB::read_bytes_by_asid")
(declare-fun verismo!arch.ramdb.ram_s.impl&%0.read_bytes_by_asid.? (Poly Poly Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::PT_ENTRY_SIZE")
(declare-fun verismo!arch.pgtable.def.PT_ENTRY_SIZE.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::L3_PGSIZE")
(declare-fun verismo!arch.pgtable.def.L3_PGSIZE.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::L2_PGSIZE")
(declare-fun verismo!arch.pgtable.def.L2_PGSIZE.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::L1_PGSIZE")
(declare-fun verismo!arch.pgtable.def.L1_PGSIZE.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::L0_PGSIZE")
(declare-fun verismo!arch.pgtable.def.L0_PGSIZE.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::PT_ENTRY_NUM")
(declare-fun verismo!arch.pgtable.def.PT_ENTRY_NUM.? () Int)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::PteFlag::spec_from_int")
(declare-fun verismo!arch.pgtable.def.impl&%6.spec_from_int.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::spec_value")
(declare-fun verismo!arch.pgtable.def.impl&%8.spec_value.? (Dcr Type Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::spec_page_frame_bits")
(declare-fun verismo!arch.pgtable.def.spec_page_frame_bits.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def_e::PageTableEntry::view")
(declare-fun verismo!arch.pgtable.def_e.impl&%7.view.? (Dcr Type Poly) verismo!arch.pgtable.def.SpecPageTableEntry.)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::PTLevel::spec_pgsize")
(declare-fun verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::PTLevel::parent_lvl")
(declare-fun verismo!arch.pgtable.entry_s.impl&%0.parent_lvl.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::entities::memtype::PTLevel::spec_table_index")
(declare-fun verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.? (Dcr Type Poly Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::new_val")
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.new_val.? (Dcr Type Poly) verismo!arch.pgtable.def.SpecPageTableEntry.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::contains_flag")
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.contains_flag.? (Dcr Type Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::spec_ppn")
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecPage.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::is_encrypted")
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.is_encrypted.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::is_present")
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.is_present.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::spec_addr")
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.spec_addr.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::spec_translate_page")
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.? (Dcr Type Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::SpecPageTableEntry::addr_for_idx")
(declare-fun verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::MemMap::spec_index")
(declare-fun verismo!arch.pgtable.memmap_s.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::MemMap::is_valid")
(declare-fun verismo!arch.pgtable.memmap_s.impl&%0.is_valid.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::MemMap::is_encrypted")
(declare-fun verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.? (Dcr Type Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::MemMap::translate")
(declare-fun verismo!arch.pgtable.memmap_s.impl&%0.translate.? (Dcr Type Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::MemMap::translate_addr_seq")
(declare-fun verismo!arch.pgtable.memmap_s.impl&%0.translate_addr_seq.? (Dcr Type Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecMem.)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::MemMap::is_identity_map")
(declare-fun verismo!arch.pgtable.memmap_s.impl&%0.is_identity_map.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::pgtable::def::MemMap::inv_encrypted_priv_mem")
(declare-fun verismo!arch.pgtable.memmap_s.impl&%1.inv_encrypted_priv_mem.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::tlb::def_s::TLB::spec_set_db")
(declare-fun verismo!arch.tlb.def_s.impl&%0.spec_set_db.? (Poly Poly) verismo!arch.tlb.def_s.TLB.)
(set-info :comment ";; Function-Decl verismo::arch::tlb::def_s::TLB::spec_new")
(declare-fun verismo!arch.tlb.def_s.impl&%1.spec_new.? (Poly) verismo!arch.tlb.def_s.TLB.)
(set-info :comment ";; Function-Decl verismo::arch::tlb::def_s::TLB::spec_db")
(declare-fun verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly) verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)
(set-info :comment ";; Function-Decl verismo::arch::tlb::def_s::TLB::to_mem_map")
(declare-fun verismo!arch.tlb.tlb_s.impl&%0.to_mem_map.? (Poly Poly) verismo!arch.pgtable.def.MemMap.)
(set-info :comment ";; Function-Decl verismo::arch::tlb::def_s::TLB::load")
(declare-fun verismo!arch.tlb.tlb_s.impl&%0.load.? (Poly Poly Poly) verismo!arch.tlb.def_s.TLB.)
(set-info :comment ";; Function-Decl verismo::arch::tlb::def_s::TLB::invlpg")
(declare-fun verismo!arch.tlb.tlb_s.impl&%0.invlpg.? (Poly Poly) verismo!arch.tlb.def_s.TLB.)
(set-info :comment ";; Function-Decl verismo::arch::tlb::def_s::TLB::flush_memid")
(declare-fun verismo!arch.tlb.tlb_s.impl&%0.flush_memid.? (Poly Poly) verismo!arch.tlb.def_s.TLB.)
(set-info :comment ";; Function-Decl verismo::arch::tlb::def_s::TLB::inv_encrypted_priv_mem")
(declare-fun verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::spec_new")
(declare-fun verismo!arch.vram.def.impl&%1.spec_new.? (Poly Poly) verismo!arch.vram.def.VRamDB.)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::spec_sram")
(declare-fun verismo!arch.vram.def.impl&%2.spec_sram.? (Poly) verismo!arch.ramdb.def.RamDB.)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::spec_rmp")
(declare-fun verismo!arch.vram.def.impl&%2.spec_rmp.? (Poly) vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::pte_write_requires_nosysmap")
(declare-fun verismo!arch.vram.vram_s.impl&%2.pte_write_requires_nosysmap.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::gpwrite_requires")
(declare-fun verismo!arch.vram.vram_s.impl&%2.gpwrite_requires.? (Poly Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::gpmemop_requires")
(declare-fun verismo!arch.vram.vram_s.impl&%2.gpmemop_requires.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::inv")
(declare-fun verismo!arch.vram.vram_s.impl&%2.inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::inv_sw")
(declare-fun verismo!arch.vram.vram_s.impl&%2.inv_sw.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::inv_memid_int")
(declare-fun verismo!arch.vram.vram_s.impl&%2.inv_memid_int.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::get")
(declare-fun verismo!arch.vram.vram_s.impl&%2.get.? (Dcr Type Poly Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::get_enc_bytes_ok")
(declare-fun verismo!arch.vram.vram_s.impl&%2.get_enc_bytes_ok.? (Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::get_enc_data_ok")
(declare-fun verismo!arch.vram.vram_s.impl&%2.get_enc_data_ok.? (Dcr Type Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::get_bytes")
(declare-fun verismo!arch.vram.vram_s.impl&%2.get_bytes.? (Poly Poly Poly Poly) vstd!seq.Seq<u8.>.)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::read_bytes")
(declare-fun verismo!arch.vram.vram_s.impl&%2.read_bytes.? (Poly Poly Poly Poly) verismo!tspec.ResultOrErr.)
(set-info :comment ";; Function-Decl verismo::arch::vram::def::VRamDB::op")
(declare-fun verismo!arch.vram.vram_s.impl&%2.op.? (Poly Poly Poly) verismo!tspec.ResultWithErr.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::spec_ram")
(declare-fun verismo!arch.ptram.def_s.impl&%0.spec_ram.? (Poly) verismo!arch.vram.def.VRamDB.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::spec_l0_entry")
(declare-fun verismo!arch.ptram.def_s.impl&%0.spec_l0_entry.? (Poly) vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::spec_set_ram")
(declare-fun verismo!arch.ptram.def_s.impl&%1.spec_set_ram.? (Poly Poly) verismo!arch.ptram.def_s.GuestPTRam.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::spec_set_l0_entry")
(declare-fun verismo!arch.ptram.def_s.impl&%1.spec_set_l0_entry.? (Poly Poly) verismo!arch.ptram.def_s.GuestPTRam.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::spec_new")
(declare-fun verismo!arch.ptram.def_s.impl&%2.spec_new.? (Poly Poly) verismo!arch.ptram.def_s.GuestPTRam.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::pgtb_walk_addrs_recursive")
(declare-fun verismo!arch.ptram.ptram_s.impl&%0.pgtb_walk_addrs_recursive.? (Poly Poly Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::hw_read_pte")
(declare-fun verismo!arch.ptram.ptram_s.impl&%0.hw_read_pte.? (Poly Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::map_entry_gpa")
(declare-fun verismo!arch.ptram.ptram_s.impl&%0.map_entry_gpa.? (Poly Poly Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::map_entry")
(declare-fun verismo!arch.ptram.ptram_s.impl&%0.map_entry.? (Poly Poly Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::to_mem_map")
(declare-fun verismo!arch.ptram.ptram_s.impl&%0.to_mem_map.? (Poly Poly Poly) verismo!arch.pgtable.def.MemMap.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::pgtb_walk_addrs_recursive_ok")
(declare-fun verismo!arch.ptram.ptram_u.impl&%2.pgtb_walk_addrs_recursive_ok.? (Poly Poly Poly Poly) core!option.Option.)
(declare-fun verismo!arch.ptram.ptram_u.impl&%2.rec%pgtb_walk_addrs_recursive_ok.? (Poly Poly Poly Poly Fuel) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::valid_access")
(declare-fun verismo!arch.ptram.ptram_u.impl&%2.valid_access.? (Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::l0_entry")
(declare-fun verismo!arch.ptram.ptram_u.impl&%2.l0_entry.? (Poly Poly) verismo!arch.pgtable.def.SpecPageTableEntry.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::inv")
(declare-fun verismo!arch.ptram.ptram_u.impl&%2.inv.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::inv_dom_ok")
(declare-fun verismo!arch.ptram.ptram_u.impl&%2.inv_dom_ok.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::inv_content_ok")
(declare-fun verismo!arch.ptram.ptram_u.impl&%2.inv_content_ok.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::map_entry_gpa_ok")
(declare-fun verismo!arch.ptram.ptram_u.impl&%2.map_entry_gpa_ok.? (Poly Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::map_entry_ok")
(declare-fun verismo!arch.ptram.ptram_u.impl&%2.map_entry_ok.? (Poly Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::map_entry_exe_ok")
(declare-fun verismo!arch.ptram.ptram_u.impl&%2.map_entry_exe_ok.? (Poly Poly Poly Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::ptram::def_s::GuestPTRam::to_mem_map_ok")
(declare-fun verismo!arch.ptram.ptram_u.impl&%2.to_mem_map_ok.? (Poly Poly) verismo!arch.pgtable.def.MemMap.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::spec_vram")
(declare-fun verismo!arch.mem.def_s.impl&%0.spec_vram.? (Poly) verismo!arch.vram.def.VRamDB.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::spec_l0_entry")
(declare-fun verismo!arch.mem.def_s.impl&%0.spec_l0_entry.? (Poly) vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::spec_sysmap")
(declare-fun verismo!arch.mem.def_s.impl&%0.spec_sysmap.? (Poly) vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::spec_tlb")
(declare-fun verismo!arch.mem.def_s.impl&%0.spec_tlb.? (Poly) verismo!arch.tlb.def_s.TLB.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::spec_set_vram")
(declare-fun verismo!arch.mem.def_s.impl&%1.spec_set_vram.? (Poly Poly) verismo!arch.mem.def_s.MemDB.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::spec_set_tlb")
(declare-fun verismo!arch.mem.def_s.impl&%1.spec_set_tlb.? (Poly Poly) verismo!arch.mem.def_s.MemDB.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::spec_new")
(declare-fun verismo!arch.mem.def_s.impl&%2.spec_new.? (Poly Poly Poly Poly) verismo!arch.mem.def_s.MemDB.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::spec_g_page_table")
(declare-fun verismo!arch.mem.mem_s.impl&%0.spec_g_page_table.? (Poly Poly) verismo!arch.ptram.def_s.GuestPTRam.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::to_mem_map")
(declare-fun verismo!arch.mem.mem_s.impl&%0.to_mem_map.? (Poly Poly) verismo!arch.pgtable.def.MemMap.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::to_gpop")
(declare-fun verismo!arch.mem.mem_s.impl&%0.to_gpop.? (Poly Poly) verismo!arch.memop.MemOp.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::op")
(declare-fun verismo!arch.mem.mem_s.impl&%0.op.? (Poly Poly) verismo!tspec.ResultWithErr.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::op_invlpg")
(declare-fun verismo!arch.mem.mem_s.impl&%0.op_invlpg.? (Poly Poly) verismo!tspec.ResultWithErr.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::op_flush")
(declare-fun verismo!arch.mem.mem_s.impl&%0.op_flush.? (Poly Poly) verismo!tspec.ResultWithErr.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::op_by_gpn_memtype")
(declare-fun verismo!arch.mem.mem_s.impl&%0.op_by_gpn_memtype.? (Poly Poly) verismo!tspec.ResultWithErr.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::op_pvalidate")
(declare-fun verismo!arch.mem.mem_s.impl&%0.op_pvalidate.? (Poly Poly) verismo!tspec.ResultWithErr.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::op_rmpadjust")
(declare-fun verismo!arch.mem.mem_s.impl&%0.op_rmpadjust.? (Poly Poly) verismo!tspec.ResultWithErr.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::op_rmpupdate")
(declare-fun verismo!arch.mem.mem_s.impl&%0.op_rmpupdate.? (Poly Poly) verismo!tspec.ResultWithErr.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::to_gpop_ok")
(declare-fun verismo!arch.mem.mem_u.impl&%0.to_gpop_ok.? (Poly Poly) verismo!arch.memop.MemOp.)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::vop_requires")
(declare-fun verismo!arch.mem.mem_u.impl&%0.vop_requires.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::inv")
(declare-fun verismo!arch.mem.mem_u.impl&%0.inv.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::mem::def_s::MemDB::to_mem_map_ok")
(declare-fun verismo!arch.mem.mem_u.impl&%0.to_mem_map_ok.? (Poly Poly) verismo!arch.pgtable.def.MemMap.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64Op::is_MemOp")
(declare-fun verismo!arch.x64.def_s.impl&%0.is_MemOp.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64Op::get_MemOp_0")
(declare-fun verismo!arch.x64.def_s.impl&%0.get_MemOp_0.? (Poly) verismo!arch.memop.MemOp.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::current_cpu")
(declare-fun verismo!arch.x64.def_s.current_cpu.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::spec_memdb")
(declare-fun verismo!arch.x64.def_s.impl&%4.spec_memdb.? (Poly) verismo!arch.mem.def_s.MemDB.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::spec_regdb")
(declare-fun verismo!arch.x64.def_s.impl&%4.spec_regdb.? (Poly) vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::spec_entities")
(declare-fun verismo!arch.x64.def_s.impl&%4.spec_entities.? (Poly) vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::spec_set_memdb")
(declare-fun verismo!arch.x64.def_s.impl&%5.spec_set_memdb.? (Poly Poly) verismo!arch.x64.def_s.Archx64.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::spec_set_regdb")
(declare-fun verismo!arch.x64.def_s.impl&%5.spec_set_regdb.? (Poly Poly) verismo!arch.x64.def_s.Archx64.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::spec_set_entities")
(declare-fun verismo!arch.x64.def_s.impl&%5.spec_set_entities.? (Poly Poly) verismo!arch.x64.def_s.Archx64.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::spec_new")
(declare-fun verismo!arch.x64.def_s.impl&%6.spec_new.? (Poly Poly Poly) verismo!arch.x64.def_s.Archx64.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64Op::is_valid")
(declare-fun verismo!arch.x64.x64_s.impl&%0.is_valid.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64Op::start_cpu_with_vmsa")
(declare-fun verismo!arch.x64.x64_s.impl&%0.start_cpu_with_vmsa.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64Op::cpu_memid")
(declare-fun verismo!arch.x64.x64_s.impl&%0.cpu_memid.? (Poly) verismo!arch.entities.memid.CpuMemID.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64Op::cpu")
(declare-fun verismo!arch.x64.x64_s.impl&%0.cpu.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64Op::to_memid")
(declare-fun verismo!arch.x64.x64_s.impl&%0.to_memid.? (Poly) verismo!arch.entities.memid.MemID.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64Op::memop")
(declare-fun verismo!arch.x64.x64_s.impl&%0.memop.? (Poly) verismo!arch.memop.MemOp.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::spec_cpu")
(declare-fun verismo!arch.x64.x64_s.impl&%1.spec_cpu.? (Poly) Int)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::is_run")
(declare-fun verismo!arch.x64.x64_s.impl&%1.is_run.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::is_stop")
(declare-fun verismo!arch.x64.x64_s.impl&%1.is_stop.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::stop_cpu")
(declare-fun verismo!arch.x64.x64_s.impl&%1.stop_cpu.? (Poly Poly Poly) verismo!arch.x64.def_s.Archx64.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::start_cpu")
(declare-fun verismo!arch.x64.x64_s.impl&%1.start_cpu.? (Poly Poly Poly) verismo!arch.x64.def_s.Archx64.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::spec_vc_handle")
(declare-fun verismo!arch.x64.x64_s.impl&%1.spec_vc_handle.? (Poly Poly Poly) verismo!arch.x64.def_s.Archx64.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::spec_exception_handle")
(declare-fun verismo!arch.x64.x64_s.impl&%1.spec_exception_handle.? (Poly Poly Poly) verismo!arch.x64.def_s.Archx64.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::spec_vmexit_handle")
(declare-fun verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle.? (Poly Poly Poly) verismo!arch.x64.def_s.Archx64.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::handle_mem_err_fn")
(declare-fun verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn.? (Poly) tuple%2.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::handle_mem_err")
(declare-fun verismo!arch.x64.x64_s.impl&%1.handle_mem_err.? (Poly Poly Poly) verismo!arch.x64.def_s.Archx64.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::op")
(declare-fun verismo!arch.x64.x64_s.impl&%1.op.? (Poly Poly) verismo!arch.x64.def_s.Archx64.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::op_write_reg")
(declare-fun verismo!arch.x64.x64_s.impl&%1.op_write_reg.? (Poly Poly Poly Poly) verismo!arch.x64.def_s.Archx64.)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::inv_regdb")
(declare-fun verismo!arch.x64.x64_u.impl&%1.inv_regdb.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::inv_regdb_any_cpu")
(declare-fun verismo!arch.x64.x64_u.impl&%1.inv_regdb_any_cpu.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64::inv")
(declare-fun verismo!arch.x64.x64_u.impl&%1.inv.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64Op::reg_write_requires")
(declare-fun verismo!arch.x64.x64_u.impl&%2.reg_write_requires.? (Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::x64::def_s::Archx64Op::op_requires")
(declare-fun verismo!arch.x64.x64_u.impl&%2.op_requires.? (Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::cast::VTypeCast::vspec_cast_to")
(declare-fun verismo!tspec.cast.VTypeCast.vspec_cast_to.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.cast.VTypeCast.vspec_cast_to%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::cast::field_set")
(declare-fun verismo!tspec.cast.field_set.? (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::cast::fn_vspec_cast_to")
(declare-fun verismo!tspec.cast.fn_vspec_cast_to.? (Dcr Type Dcr Type) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fmap::FMap::spec_map")
(declare-fun verismo!tspec.fmap.impl&%0.spec_map.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::fmap::FMap::spec_set_map")
(declare-fun verismo!tspec.fmap.impl&%1.spec_set_map.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::fmap::FMap::spec_new")
(declare-fun verismo!tspec.fmap.impl&%2.spec_new.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::fmap::FMap::insert")
(declare-fun verismo!tspec.fmap.impl&%3.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::fmap::FMap::spec_index")
(declare-fun verismo!tspec.fmap.impl&%3.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::isconst::IsConstant::is_constant")
(declare-fun verismo!tspec.isconst.IsConstant.is_constant.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.isconst.IsConstant.is_constant%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::isconst::IsConstant::is_constant_to")
(declare-fun verismo!tspec.isconst.IsConstant.is_constant_to.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.isconst.IsConstant.is_constant_to%default%.? (Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ops::VSpecOrd::spec_ge")
(declare-fun verismo!tspec.ops.VSpecOrd.spec_ge.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecOrd.spec_ge%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ops::VSpecAdd::spec_add")
(declare-fun verismo!tspec.ops.VSpecAdd.spec_add.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecAdd.spec_add%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ops::VSpecSub::spec_sub")
(declare-fun verismo!tspec.ops.VSpecSub.spec_sub.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecSub.spec_sub%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_add_u64_u64_int")
(declare-fun verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_sub_u64_u64_int")
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_add_u32_u32_int")
(declare-fun verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_sub_u32_u32_int")
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_add_u16_u16_int")
(declare-fun verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_sub_u16_u16_int")
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_add_u8_u8_int")
(declare-fun verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_sub_u8_u8_int")
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_add_usize_usize_int")
(declare-fun verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_sub_usize_usize_int")
(declare-fun verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_add_int_int_int")
(declare-fun verismo!tspec.fnspec.fn_spec_add_int_int_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_sub_int_int_int")
(declare-fun verismo!tspec.fnspec.fn_spec_sub_int_int_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_add_nat_nat_nat")
(declare-fun verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::fnspec::fn_spec_sub_nat_nat_int")
(declare-fun verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? (Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::integer::IntValue::as_int")
(declare-fun verismo!tspec.integer.IntValue.as_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.as_int%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::integer::IntValue::from_int")
(declare-fun verismo!tspec.integer.IntValue.from_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.from_int%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::integer::IntOrd::ord_int")
(declare-fun verismo!tspec.integer.IntOrd.ord_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntOrd.ord_int%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::setlib::uop_to_bop")
(declare-fun verismo!tspec.setlib.uop_to_bop.? (Dcr Type Dcr Type Dcr Type Poly) %%Function%%)
(set-info :comment ";; Function-Decl verismo::tspec::setlib::set_op")
(declare-fun verismo!tspec.setlib.set_op.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::size_s::spec_max_count")
(declare-fun verismo!tspec.size_s.spec_max_count.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl verismo::tspec::size_s::SpecSize::spec_size_def")
(declare-fun verismo!tspec.size_s.SpecSize.spec_size_def.? (Dcr Type) Poly)
(declare-fun verismo!tspec.size_s.SpecSize.spec_size_def%default%.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::size_s::spec_size")
(declare-fun verismo!tspec.size_s.spec_size.? (Dcr Type) Int)
(set-info :comment ";; Function-Decl verismo::tspec::stream::stream_to_data")
(declare-fun verismo!tspec.stream.stream_to_data.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::wellformed::WellFormed::wf")
(declare-fun verismo!tspec.wellformed.WellFormed.wf.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.wellformed.WellFormed.wf%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::arch::entities::VMPL::spec_from_int")
(declare-fun verismo!arch.entities.impl&%6.spec_from_int.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::entities::VMPL::is_VMPL0")
(declare-fun verismo!arch.entities.impl&%9.is_VMPL0.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::memop::MemOp::is_Read")
(declare-fun verismo!arch.memop.impl&%0.is_Read.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::memop::MemOp::is_Write")
(declare-fun verismo!arch.memop.impl&%0.is_Write.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::memop::MemOp::is_RmpOp")
(declare-fun verismo!arch.memop.impl&%0.is_RmpOp.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::errors::MemError::is_RmpOp")
(declare-fun verismo!arch.errors.impl&%0.is_RmpOp.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::errors::MemError::get_RmpOp_0")
(declare-fun verismo!arch.errors.impl&%0.get_RmpOp_0.? (Dcr Type Poly) verismo!arch.errors.RmpFault.)
(set-info :comment ";; Function-Decl verismo::arch::errors::RmpFault::is_DoubleVal")
(declare-fun verismo!arch.errors.impl&%2.is_DoubleVal.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::errors::MemError::trigger_trap")
(declare-fun verismo!arch.errors.impl&%3.trigger_trap.? (Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::arch::errors::MemError::with_param")
(declare-fun verismo!arch.errors.impl&%3.with_param.? (Dcr Type Dcr Type Poly Poly) verismo!arch.errors.MemError.)
(set-info :comment ";; Function-Decl verismo::arch::reg::RflagBit::spec_from_int")
(declare-fun verismo!arch.reg.impl&%5.spec_from_int.? (Poly) core!option.Option.)
(set-info :comment ";; Function-Decl verismo::arch::reg::RegDB::reg_inv")
(declare-fun verismo!arch.reg.impl&%7.reg_inv.? (Poly) Bool)
(set-info :comment ";; Function-Decl verismo::primitives_e::sectype::ToSecSeq::sec_bytes")
(declare-fun verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? (Dcr Type Poly) Poly)
(declare-fun verismo!primitives_e.sectype.ToSecSeq.sec_bytes%default%.? (Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::primitives_e::sectype::FromSecSeq::from_sec_bytes")
(declare-fun verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes%default%.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::primitives_e::seq::recursive_sec_bytes")
(declare-fun verismo!primitives_e.seq.recursive_sec_bytes.? (Dcr Type Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun verismo!primitives_e.seq.rec%recursive_sec_bytes.? (Dcr Type Poly Fuel) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(set-info :comment ";; Function-Decl verismo::tspec::spec_unused")
(declare-fun verismo!tspec.spec_unused.? (Dcr Type) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ResultOrErr::is_Ok")
(declare-fun verismo!tspec.impl&%0.is_Ok.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::ResultWithErr::is_Ok")
(declare-fun verismo!tspec.impl&%3.is_Ok.? (Dcr Type Dcr Type Poly) Bool)
(set-info :comment ";; Function-Decl verismo::tspec::ResultWithErr::get_Error_1")
(declare-fun verismo!tspec.impl&%3.get_Error_1.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ResultWithErr::replace_err")
(declare-fun verismo!tspec.impl&%5.replace_err.? (Dcr Type Dcr Type Dcr Type Poly Poly) verismo!tspec.ResultWithErr.)
(set-info :comment ";; Function-Decl verismo::tspec::ResultWithErr::to_result")
(declare-fun verismo!tspec.impl&%5.to_result.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Decl verismo::tspec::ResultWithErr::to_err")
(declare-fun verismo!tspec.impl&%5.to_err.? (Dcr Type Dcr Type Poly) Poly)
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::IsConstant::is_constant")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.isconst.IsConstant.is_constant.? Self%&. Self%& self!) BOOL)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::IsConstant::is_constant_to")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (vmpl! Poly)) (! (=> (and (has_type self! Self%&) (has_type vmpl! NAT)) (has_type (verismo!tspec.isconst.IsConstant.is_constant_to.? Self%&. Self%& self! vmpl!) BOOL)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? Self%&. Self%& self! vmpl!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::WellFormed::wf")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.wellformed.WellFormed.wf.? Self%&. Self%& self!) BOOL)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_Some")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::get_Some_0")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::OptionAdditionalFns::is_None")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_None")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::is_Some")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::std_specs::option::impl&%0::get_Some_0")
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::index")
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::index")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::push")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::seq::impl&%0::spec_index")
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::subrange")
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%2 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::subrange")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::add")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Axioms vstd::seq::impl&%0::spec_add")
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::update")
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::update")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(set-info :comment ";; Function-Axioms vstd::layout::size_of")
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::dom")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::index")
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::insert")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::remove")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Specs vstd::map::impl&%0::spec_index")
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::spec_index")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::mk_map")
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::new")
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(set-info :comment ";; Function-Axioms vstd::map::impl&%0::new")
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::union_prefer_right")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%0 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%1 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%0 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_finite")
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%6 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%7 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_finite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_index_decreases_infinite")
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%8 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_index_decreases_infinite")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_empty")
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_empty")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::insert")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_domain")
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_same")
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_same")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_insert_different")
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%9 Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%9 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%10 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_insert_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::remove")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_domain")
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_remove_different")
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%12 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_remove_different")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal")
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Specs vstd::map::axiom_map_ext_equal_deep")
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)))))
(set-info :comment ";; Broadcast vstd::map::axiom_map_ext_equal_deep")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(set-info :comment ";; Function-Axioms vstd::pervasive::arbitrary")
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::new")
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_index_decreases")
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%13 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%13 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_index_decreases")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_empty")
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_empty")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_len")
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_len")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_new_index")
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%14 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_new_index")
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_len")
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_same")
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%15 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_push_index_different")
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%16 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_push_index_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_len")
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%17 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_same")
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%18 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_update_different")
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(declare-const %%global_location_label%%20 Bool)
(declare-const %%global_location_label%%21 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%19 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%20 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%21 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_update_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_ext_equal_deep")
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_len")
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%22 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%22 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_subrange_index")
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%23 Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%23 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%24 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_subrange_index")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_len")
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_len")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index1")
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%25 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index1")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::axiom_seq_add_index2")
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%26 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(set-info :comment ";; Broadcast vstd::seq::axiom_seq_add_index2")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(set-info :comment ";; Function-Specs vstd::seq::Seq::last")
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%27 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::last")
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::union")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::intersect")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::difference")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::complement")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::len")
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty")
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty")
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_new")
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_new")
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_same")
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_different")
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%28 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_same")
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_same")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_insert")
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%29 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_insert")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_different")
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%30 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_different")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union")
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect")
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference")
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_complement")
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_complement")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal")
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_ext_equal_deep")
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_ext_equal_deep")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_domain")
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_domain")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_mk_map_index")
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%31 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_mk_map_index")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_finite")
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_finite")
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_finite")
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%32 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_finite")
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%33 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_union_finite")
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%34 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%35 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_union_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_intersect_finite")
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%36 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_intersect_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_difference_finite")
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%37 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_difference_finite")
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::choose")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)))) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_finite")
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%38 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_finite")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_empty_len")
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_empty_len")
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_insert_len")
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%39 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_insert_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_remove_len")
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%40 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_remove_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_contains_len")
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%41 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%42 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_contains_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)))))
(set-info :comment ";; Function-Specs vstd::set::axiom_set_choose_len")
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%43 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%44 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(set-info :comment ";; Broadcast vstd::set::axiom_set_choose_len")
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_asid")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (<= 0 (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_assigned")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_validated")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!))))))
(set-info :comment ";; Function-Axioms vstd::set::impl&%0::full")
(assert (fuel_bool_default fuel%vstd!set.impl&%0.full.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.full.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.full.? A&. A&) (vstd!set.impl&%0.complement.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((vstd!set.impl&%0.full.? A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.full.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.full.? A&. A&)))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpEntry::spec_val")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%3.spec_val.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%3.spec_val.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%3.spec_val.? self!) (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (%Poly%verismo!arch.rmp.def_s.RmpEntry. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%3.spec_val.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%3.spec_val.? self!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%3.spec_val.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpEntry::view")
(assert (fuel_bool_default fuel%verismo!arch.rmp.access_u.impl&%0.view.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.access_u.impl&%0.view.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.access_u.impl&%0.view.? self!) (verismo!arch.rmp.def_s.impl&%3.spec_val.? self!)) :pattern ((verismo!arch.rmp.access_u.impl&%0.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.access_u.impl&%0.view.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_perms")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::VMPL::spec_from_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%6.spec_from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%6.spec_from_int.) (forall ((val! Poly)) (! (= (verismo!arch.entities.impl&%6.spec_from_int.? val!) (ite (< (%I val!) 0) core!option.Option./None (ite (= (%I val!) 0) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL0)) (ite (= (%I val!) 1) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)) (ite (= (%I val!) 2) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)) (ite (= (%I val!) 3) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)) core!option.Option./None)))))) :pattern ((verismo!arch.entities.impl&%6.spec_from_int.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%core!option.Option. (verismo!arch.entities.impl&%6.spec_from_int.? val!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.entities.VMPL.))) :pattern ((verismo!arch.entities.impl&%6.spec_from_int.? val!)))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::VMPL::is_VMPL0")
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%9.is_VMPL0.))
(define-fun is-verismo!arch.entities.VMPL./VMPL0_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL0) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%9.is_VMPL0.) (forall ((self! Poly)) (! (= (verismo!arch.entities.impl&%9.is_VMPL0.? self!) (is-verismo!arch.entities.VMPL./VMPL0_ (%Poly%verismo!arch.entities.VMPL. self!))) :pattern ((verismo!arch.entities.impl&%9.is_VMPL0.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpEntry::spec_new")
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_gpn")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_size")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_size.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_size.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_size.? self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::wf")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!) (B (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$))))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::is_constant")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%1.is_constant.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%1.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) self!) (B (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$))))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::is_constant_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%1.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%1.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) self! vmpl!) (B (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$) vmpl!)))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%vstd!seq.Seq. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%vstd!seq.Seq. T&. T&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::DataLabel::is_Symbol")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./Symbol_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./Symbol) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_Symbol.? self!) (is-verismo!tspec.security.sectype.DataLabel./Symbol_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_Symbol.? self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::DataLabel::is_TrustedRandom")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./TrustedRandom) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? self!) (is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::DataLabel::is_Secret")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_Secret.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./Secret_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./Secret) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_Secret.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_Secret.? self!) (is-verismo!tspec.security.sectype.DataLabel./Secret_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_Secret.? self!))))))
(set-info :comment ";; Function-Axioms vstd::map_lib::impl&%0::contains_key")
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::wf_vmpl")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (valsets! Poly) (labels! Poly) (vmpl! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& valsets! labels! vmpl!) (and (and (and (and (and (=> (is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels! vmpl!))) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!) (vstd!set.impl&%0.full.? T&. T&))) (=> (is-verismo!tspec.security.sectype.DataLabel./Secret_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels! vmpl!))) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!) (vstd!set.impl&%0.full.? T&. T&)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels!) vmpl!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets!) vmpl!)) (> (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!)) 0)) (vstd!set.impl&%0.finite.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!)))) :pattern ((verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& valsets! labels! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::wf_value")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.wf_value.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.wf_value.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!) (and (and (and (and (and (and (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 1)) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 2))) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 3))) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 4))) (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) core!option.Option./None)) (ext_eq true (TYPE%vstd!set.Set. $ NAT) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.empty.? $ NAT) (I 1)) (I 2)) (I 3)) (I 4)))) (ext_eq true (TYPE%vstd!set.Set. $ NAT) (vstd!map.impl&%0.dom.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.empty.? $ NAT) (I 1)) (I 2)) (I 3)) (I 4))))) :pattern ((verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! vmpl!) (B (and (and (and (= (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) vmpl!)) 1) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) vmpl!) (vstd!set.impl&%0.insert.? T&. T& (vstd!set.impl&%0.empty.? T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))))) (is-verismo!tspec.security.sectype.DataLabel./Symbol_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) vmpl!)))) (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%12.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%12.is_constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self!) (B (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 4)))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::wf")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.) self!) (B (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& $ TYPE%tuple%0. self!))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.)) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::IntValue::as_int")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.integer.IntValue.as_int.? Self%&. Self%& self!) INT)) :pattern ((verismo!tspec.integer.IntValue.as_int.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::IntValue::from_int")
(assert (forall ((Self%&. Dcr) (Self%& Type) (val! Poly)) (! (=> (has_type val! INT) (has_type (verismo!tspec.integer.IntValue.from_int.? Self%&. Self%& val!) Self%&)) :pattern ((verismo!tspec.integer.IntValue.from_int.? Self%&. Self%& val!)))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::VMPL::as_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%4.as_int.))
(define-fun is-verismo!arch.entities.VMPL./VMPL1_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL1) c))
(define-fun is-verismo!arch.entities.VMPL./VMPL2_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL2) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%4.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. self!) (I (let ((val$ (ite (is-verismo!arch.entities.VMPL./VMPL0_ (%Poly%verismo!arch.entities.VMPL. self!)) 0 (ite (is-verismo!arch.entities.VMPL./VMPL1_ (%Poly%verismo!arch.entities.VMPL. self!)) 1 (ite (is-verismo!arch.entities.VMPL./VMPL2_ (%Poly%verismo!arch.entities.VMPL. self!)) 2 3))))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::PAGE_SIZE")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.PAGE_SIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.PAGE_SIZE.) (= verismo!arch.addr_s.def_s.PAGE_SIZE.? 4096)))
(assert (uInv SZ verismo!arch.addr_s.def_s.PAGE_SIZE.?))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::VTypeCast::vspec_cast_to")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.cast.VTypeCast.vspec_cast_to.? Self%&. Self%& T&. T& self!) T&)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%44::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%44.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%44.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecMemType::view")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.security.sectype.SecMemType.view.? Self%&. Self%& T&. T& M&. M& self!) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? Self%&. Self%& T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_new")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! Poly) (valsets! Poly) (labels! Poly)) (! (=> (and (has_type val! T&) (has_type _unused! (TYPE%core!option.Option. M&. M&)) (has_type valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&))) (has_type labels! (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec__unused")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec__unused.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec__unused.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (Poly%core!option.Option. (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!)) (TYPE%core!option.Option. M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_valsets")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!) (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_labels")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_labels.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_labels.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%15.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%15.is_constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!))) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%72.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%72.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!) (I (nClip (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%63::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%63.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%63.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%9::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%9.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%9.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT SZ) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_new")
(assert (forall ((immutable! Poly) (assigned! Poly) (validated! Poly) (vmsa! Poly) (asid! Poly) (gpn! Poly) (size! Poly) (perms! Poly)) (! (=> (and (has_type immutable! BOOL) (has_type assigned! BOOL) (has_type validated! BOOL) (has_type vmsa! BOOL) (has_type asid! NAT) (has_type gpn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type size! TYPE%verismo!arch.addr_s.def_s.PageSize.) (has_type perms! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!)))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_immutable")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_vmsa")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::new2")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.new2.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.new2.) (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!) (verismo!arch.addr_s.def_s.SpecPage./SpecPage (%I (I (nClip (%I val!)))) dummy!)) :pattern ((verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (=> (and (has_type val! INT) (has_type dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::spec_unused")
(assert (fuel_bool_default fuel%verismo!tspec.spec_unused.))
(assert (=> (fuel_bool fuel%verismo!tspec.spec_unused.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.spec_unused.? T&. T&) (vstd!pervasive.arbitrary.? T&. T&)) :pattern ((verismo!tspec.spec_unused.? T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (verismo!tspec.spec_unused.? T&. T&) T&) :pattern ((verismo!tspec.spec_unused.? T&. T&)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::new")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.new.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.new.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!) (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::as_int")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%5.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%5.as_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!) (I (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::value")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.value.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.value.? T&. T& self!) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!))) :pattern ((verismo!arch.addr_s.page.impl&%2.value.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::to_page")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.to_page.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.to_page.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!) (verismo!arch.addr_s.page.impl&%3.new.? T&. T& (I (EucDiv (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!)) 4096)))) :pattern ((verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::new2")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.new2.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.new2.) (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr (%I (I (nClip (%I val!)))) dummy!)) :pattern ((verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (=> (and (has_type val! INT) (has_type dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::new")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.new.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.new.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!) (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!)))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memid::MemID::is_Guest")
(assert (fuel_bool_default fuel%verismo!arch.entities.memid.impl&%0.is_Guest.))
(define-fun is-verismo!arch.entities.memid.MemID./Guest_ ((c verismo!arch.entities.memid.MemID.)) Bool ((_ is verismo!arch.entities.memid.MemID./Guest) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memid.impl&%0.is_Guest.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memid.impl&%0.is_Guest.? self!) (is-verismo!arch.entities.memid.MemID./Guest_ (%Poly%verismo!arch.entities.memid.MemID. self!))) :pattern ((verismo!arch.entities.memid.impl&%0.is_Guest.? self!))))))
(set-info :comment ";; Function-Specs verismo::arch::entities::memid::MemID::to_vmpl")
(declare-fun req%verismo!arch.entities.memid.impl&%3.to_vmpl. (Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(assert (forall ((self! Poly)) (! (= (req%verismo!arch.entities.memid.impl&%3.to_vmpl. self!) (=> %%global_location_label%%45 (is-verismo!arch.entities.memid.MemID./Guest_ (%Poly%verismo!arch.entities.memid.MemID. self!)))) :pattern ((req%verismo!arch.entities.memid.impl&%3.to_vmpl. self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memid::MemID::to_vmpl")
(assert (fuel_bool_default fuel%verismo!arch.entities.memid.impl&%3.to_vmpl.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memid.impl&%3.to_vmpl.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memid.impl&%3.to_vmpl.? self!) (ite (is-verismo!arch.entities.memid.MemID./Guest_ (%Poly%verismo!arch.entities.memid.MemID. self!)) (let ((vmpl$ (verismo!arch.entities.memid.MemID./Guest/1 (%Poly%verismo!arch.entities.memid.MemID. self!)))) vmpl$) verismo!arch.entities.VMPL./VMPL0)) :pattern ((verismo!arch.entities.memid.impl&%3.to_vmpl.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memid::MemID::to_asid")
(assert (fuel_bool_default fuel%verismo!arch.entities.memid.impl&%3.to_asid.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memid.impl&%3.to_asid.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memid.impl&%3.to_asid.? self!) (ite (is-verismo!arch.entities.memid.MemID./Guest_ (%Poly%verismo!arch.entities.memid.MemID. self!)) (let ((id_minus_one$ (verismo!arch.entities.memid.MemID./Guest/0 (%Poly%verismo!arch.entities.memid.MemID. self!)))) (nClip (Add id_minus_one$ 1))) 0)) :pattern ((verismo!arch.entities.memid.impl&%3.to_asid.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.entities.memid.MemID.) (<= 0 (verismo!arch.entities.memid.impl&%3.to_asid.? self!))) :pattern ((verismo!arch.entities.memid.impl&%3.to_asid.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::memop::MemOp::is_RmpOp")
(assert (fuel_bool_default fuel%verismo!arch.memop.impl&%0.is_RmpOp.))
(assert (=> (fuel_bool fuel%verismo!arch.memop.impl&%0.is_RmpOp.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.memop.impl&%0.is_RmpOp.? AddrT&. AddrT& self!) (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. self!))) :pattern ((verismo!arch.memop.impl&%0.is_RmpOp.? AddrT&. AddrT& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memid::CpuMemID::memid")
(assert (fuel_bool_default fuel%verismo!arch.entities.memid.impl&%2.memid.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memid.impl&%2.memid.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memid.impl&%2.memid.? self!) (verismo!arch.entities.memid.CpuMemID./CpuMemID/1 (%Poly%verismo!arch.entities.memid.CpuMemID. self!))) :pattern ((verismo!arch.entities.memid.impl&%2.memid.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.entities.memid.CpuMemID.) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.impl&%2.memid.? self!)) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.entities.memid.impl&%2.memid.? self!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!arch.addr_s.def_s.AddrType. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::from_int")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%5.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%5.from_int.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) val!) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) val!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::VSpecSub::spec_sub")
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecSub.spec_sub.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%1::T1::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%1.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%1.spec_sub.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (Sub (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::VSpecAdd::spec_add")
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecAdd.spec_add.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%0::T1::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%0.spec_add.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (Add (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(set-info :comment ";; Function-Specs verismo::arch::addr_s::def_s::SpecMem::from_range")
(declare-fun req%verismo!arch.addr_s.page.impl&%8.from_range. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((T&. Dcr) (T& Type) (addr! Poly) (size! Poly)) (! (= (req%verismo!arch.addr_s.page.impl&%8.from_range. T&. T& addr! size!) (=> %%global_location_label%%46 (= (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) $ INT $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) $ INT $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) addr! size!) (I 1))) (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& addr!)))) :pattern ((req%verismo!arch.addr_s.page.impl&%8.from_range. T&. T& addr! size!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecMem::from_range")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.from_range.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.from_range.) (forall ((T&. Dcr) (T& Type) (addr! Poly) (size! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.from_range.? T&. T& addr! size!) (verismo!arch.addr_s.def_s.SpecMem./SpecMem (%Poly%verismo!arch.addr_s.def_s.SpecAddr. addr!) (%I size!))) :pattern ((verismo!arch.addr_s.page.impl&%8.from_range.? T&. T& addr! size!))))))
(assert (forall ((T&. Dcr) (T& Type) (addr! Poly) (size! Poly)) (! (=> (and (has_type addr! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type size! NAT)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%8.from_range.? T&. T& addr! size!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%8.from_range.? T&. T& addr! size!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::to_mem")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.to_mem.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.to_mem.) (forall ((T&. Dcr) (T& Type) (self! Poly) (n! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.to_mem.? T&. T& self! n!) (verismo!arch.addr_s.page.impl&%8.from_range.? T&. T& self! n!)) :pattern ((verismo!arch.addr_s.page.impl&%2.to_mem.? T&. T& self! n!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type n! NAT)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%2.to_mem.? T&. T& self! n!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.to_mem.? T&. T& self! n!)))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::to_page_memid")
(assert (fuel_bool_default fuel%verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.? AddrT&. AddrT& self!) (ite (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)) (let ((page_id$ (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) page_id$) (ite (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)) (let ((page_id$ (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) page_id$) (let ((page_id$ (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) page_id$)))) :pattern ((verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.? AddrT&. AddrT& self!))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.? AddrT&. AddrT& self!)) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.? AddrT&. AddrT& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::as_int")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%4.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%4.as_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!) (I (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::value")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.value.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!))) :pattern ((verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::to_addr")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.to_addr.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.to_addr.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& self!) (let ((page$ (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!))) (verismo!arch.addr_s.page.impl&%2.new.? T&. T& (I (Mul (verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!) 4096))))) :pattern ((verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::to_mem")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.to_mem.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.to_mem.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.to_mem.? T&. T& self!) (let ((page$ (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!))) (verismo!arch.addr_s.page.impl&%2.to_mem.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. page$))) (I 4096)))) :pattern ((verismo!arch.addr_s.page.impl&%3.to_mem.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%3.to_mem.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.to_mem.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::null")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.null.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.null.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!arch.addr_s.page.impl&%2.null.? T&. T&) (verismo!arch.addr_s.page.impl&%2.new.? T&. T& (I 0))) :pattern ((verismo!arch.addr_s.page.impl&%2.null.? T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.null.? T&. T&)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) :pattern ((verismo!arch.addr_s.page.impl&%2.null.? T&. T&)))))
(set-info :comment ";; Function-Axioms verismo::arch::memop::MemOp::to_addr_memid")
(assert (fuel_bool_default fuel%verismo!arch.memop.memop.impl&%0.to_addr_memid.))
(assert (=> (fuel_bool fuel%verismo!arch.memop.memop.impl&%0.to_addr_memid.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.memop.memop.impl&%0.to_addr_memid.? AddrT&. AddrT& self!) (ite (is-verismo!arch.memop.MemOp./Read_ (%Poly%verismo!arch.memop.MemOp. self!)) (let ((addr_id$ (verismo!arch.memop.MemOp./Read/0 (%Poly%verismo!arch.memop.MemOp. self!)))) addr_id$) (ite (is-verismo!arch.memop.MemOp./Write_ (%Poly%verismo!arch.memop.MemOp. self!)) (let ((addr_id$ (verismo!arch.memop.MemOp./Write/0 (%Poly%verismo!arch.memop.MemOp. self!)))) (let ((bytes$ (verismo!arch.memop.MemOp./Write/2 (%Poly%verismo!arch.memop.MemOp. self!)))) (verismo!arch.entities.params.AddrMemID./AddrMemID (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%2.to_mem.? AddrT&. AddrT& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.entities.params.AddrID./AddrID/addr (%Poly%verismo!arch.entities.params.AddrID. (Poly%verismo!arch.entities.params.AddrID. addr_id$)))) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes$)))))) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrID./AddrID/memid (%Poly%verismo!arch.entities.params.AddrID. (Poly%verismo!arch.entities.params.AddrID. addr_id$)))))))) (ite (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. self!)) (let ((rmpop$ (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. self!)))) (let ((tmp%%$ (verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.? AddrT&. AddrT& (Poly%verismo!arch.rmp.def_s.RmpOp. rmpop$)))) (let ((memid$ (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. tmp%%$))))) (let ((page$ (verismo!arch.entities.params.PageID./PageID/page (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. tmp%%$))))) (verismo!arch.entities.params.AddrMemID./AddrMemID (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%3.to_mem.? AddrT&. AddrT& (Poly%verismo!arch.addr_s.def_s.SpecPage. page$)))) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. memid$))))))) (ite (is-verismo!arch.memop.MemOp./InvlPage_ (%Poly%verismo!arch.memop.MemOp. self!)) (let ((addr_id$ (verismo!arch.memop.MemOp./InvlPage/0 (%Poly%verismo!arch.memop.MemOp. self!)))) addr_id$) (let ((memid$ (verismo!arch.memop.MemOp./FlushAll/0 (%Poly%verismo!arch.memop.MemOp. self!)))) (verismo!arch.entities.params.AddrMemID./AddrMemID (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%8.from_range.? AddrT&. AddrT& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.null.? AddrT&. AddrT&)) (I 0)))) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. memid$))))))))) :pattern ((verismo!arch.memop.memop.impl&%0.to_addr_memid.? AddrT&. AddrT& self!))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? AddrT&. AddrT& self!)) (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))) :pattern ((verismo!arch.memop.memop.impl&%0.to_addr_memid.? AddrT&. AddrT& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::memop::MemOp::to_memid")
(assert (fuel_bool_default fuel%verismo!arch.memop.memop.impl&%0.to_memid.))
(assert (=> (fuel_bool fuel%verismo!arch.memop.memop.impl&%0.to_memid.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.memop.memop.impl&%0.to_memid.? AddrT&. AddrT& self!) (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? AddrT&. AddrT& self!))))) :pattern ((verismo!arch.memop.memop.impl&%0.to_memid.? AddrT&. AddrT& self!))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.memop.memop.impl&%0.to_memid.? AddrT&. AddrT& self!)) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.memop.memop.impl&%0.to_memid.? AddrT&. AddrT& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64Op::cpu_memid")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%0.cpu_memid.))
(define-fun is-verismo!arch.x64.def_s.Archx64Op./MemOp_ ((c verismo!arch.x64.def_s.Archx64Op.)) Bool ((_ is verismo!arch.x64.def_s.Archx64Op./MemOp) c))
(define-fun is-verismo!arch.x64.def_s.Archx64Op./RegWrite_ ((c verismo!arch.x64.def_s.Archx64Op.)) Bool ((_ is verismo!arch.x64.def_s.Archx64Op./RegWrite) c))
(define-fun is-verismo!arch.x64.def_s.Archx64Op./RegRead_ ((c verismo!arch.x64.def_s.Archx64Op.)) Bool ((_ is verismo!arch.x64.def_s.Archx64Op./RegRead) c))
(define-fun is-verismo!arch.x64.def_s.Archx64Op./VMGExit_ ((c verismo!arch.x64.def_s.Archx64Op.)) Bool ((_ is verismo!arch.x64.def_s.Archx64Op./VMGExit) c))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%0.cpu_memid.) (forall ((self! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? self!) (ite (is-verismo!arch.x64.def_s.Archx64Op./MemOp_ (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)) (let ((memop$ (verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) (let ((cpu$ (verismo!arch.x64.def_s.Archx64Op./MemOp/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) (verismo!arch.entities.memid.CpuMemID./CpuMemID (%I (I cpu$)) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.memop.MemOp. memop$)))))))))) (ite (is-verismo!arch.x64.def_s.Archx64Op./RegWrite_ (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)) (let ((id$ (verismo!arch.x64.def_s.Archx64Op./RegWrite/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) (let ((reg_name$ (verismo!arch.x64.def_s.Archx64Op./RegWrite/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) id$)) (ite (is-verismo!arch.x64.def_s.Archx64Op./RegRead_ (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)) (let ((id$ (verismo!arch.x64.def_s.Archx64Op./RegRead/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) id$) (ite (is-verismo!arch.x64.def_s.Archx64Op./VMGExit_ (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)) (let ((id$ (verismo!arch.x64.def_s.Archx64Op./VMGExit/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) id$) (let ((id$ (verismo!arch.x64.def_s.Archx64Op./LoopHalt/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) id$)))))) :pattern ((verismo!arch.x64.x64_s.impl&%0.cpu_memid.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? self!)) TYPE%verismo!arch.entities.memid.CpuMemID.)) :pattern ((verismo!arch.x64.x64_s.impl&%0.cpu_memid.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64Op::to_memid")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%0.to_memid.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%0.to_memid.) (forall ((self! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%0.to_memid.? self!) (verismo!arch.entities.memid.impl&%2.memid.? (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? self!)))) :pattern ((verismo!arch.x64.x64_s.impl&%0.to_memid.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? self!)) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.x64.x64_s.impl&%0.to_memid.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64Op::is_MemOp")
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%0.is_MemOp.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%0.is_MemOp.) (forall ((self! Poly)) (! (= (verismo!arch.x64.def_s.impl&%0.is_MemOp.? self!) (is-verismo!arch.x64.def_s.Archx64Op./MemOp_ (%Poly%verismo!arch.x64.def_s.Archx64Op. self!))) :pattern ((verismo!arch.x64.def_s.impl&%0.is_MemOp.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64Op::get_MemOp_0")
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%0.get_MemOp_0.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%0.get_MemOp_0.) (forall ((self! Poly)) (! (= (verismo!arch.x64.def_s.impl&%0.get_MemOp_0.? self!) (verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!))) :pattern ((verismo!arch.x64.def_s.impl&%0.get_MemOp_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.x64.def_s.impl&%0.get_MemOp_0.? self!)) (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) :pattern ((verismo!arch.x64.def_s.impl&%0.get_MemOp_0.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::spec_entities")
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%4.spec_entities.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%4.spec_entities.) (forall ((self! Poly)) (! (= (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!) (verismo!arch.x64.def_s.Archx64./Archx64/entities (%Poly%verismo!arch.x64.def_s.Archx64. self!))) :pattern ((verismo!arch.x64.def_s.impl&%4.spec_entities.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::spec_memdb")
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%4.spec_memdb.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%4.spec_memdb.) (forall ((self! Poly)) (! (= (verismo!arch.x64.def_s.impl&%4.spec_memdb.? self!) (verismo!arch.x64.def_s.Archx64./Archx64/memdb (%Poly%verismo!arch.x64.def_s.Archx64. self!))) :pattern ((verismo!arch.x64.def_s.impl&%4.spec_memdb.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::spec_regdb")
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%4.spec_regdb.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%4.spec_regdb.) (forall ((self! Poly)) (! (= (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!) (verismo!arch.x64.def_s.Archx64./Archx64/regdb (%Poly%verismo!arch.x64.def_s.Archx64. self!))) :pattern ((verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::spec_set_entities")
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%5.spec_set_entities.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%5.spec_set_entities.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.x64.def_s.impl&%5.spec_set_entities.? self! val!) (verismo!arch.x64.def_s.impl&%6.spec_new.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.x64.def_s.impl&%4.spec_memdb.? self!)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!)) val!)) :pattern ((verismo!arch.x64.def_s.impl&%5.spec_set_entities.? self! val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::stop_cpu")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.stop_cpu.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.stop_cpu.) (forall ((self! Poly) (memid! Poly) (cpu! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.stop_cpu.? self! memid! cpu!) (let ((memid_entries$ (%Poly%vstd!map.Map<nat./bool.>. (vstd!map.impl&%0.insert.? $ NAT $ BOOL (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)) memid!) cpu! (B false))))) (verismo!arch.x64.def_s.impl&%5.spec_set_entities.? self! (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)) memid! (Poly%vstd!map.Map<nat./bool.>. memid_entries$))))) :pattern ((verismo!arch.x64.x64_s.impl&%1.stop_cpu.? self! memid! cpu!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memid::CpuMemID::cpu")
(assert (fuel_bool_default fuel%verismo!arch.entities.memid.impl&%2.cpu.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memid.impl&%2.cpu.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memid.impl&%2.cpu.? self!) (verismo!arch.entities.memid.CpuMemID./CpuMemID/0 (%Poly%verismo!arch.entities.memid.CpuMemID. self!))) :pattern ((verismo!arch.entities.memid.impl&%2.cpu.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.entities.memid.CpuMemID.) (<= 0 (verismo!arch.entities.memid.impl&%2.cpu.? self!))) :pattern ((verismo!arch.entities.memid.impl&%2.cpu.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64Op::cpu")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%0.cpu.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%0.cpu.) (forall ((self! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%0.cpu.? self!) (verismo!arch.entities.memid.impl&%2.cpu.? (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? self!)))) :pattern ((verismo!arch.x64.x64_s.impl&%0.cpu.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.x64.def_s.Archx64Op.) (<= 0 (verismo!arch.x64.x64_s.impl&%0.cpu.? self!))) :pattern ((verismo!arch.x64.x64_s.impl&%0.cpu.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::spec_vmexit_handle")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle.))
(define-fun is-verismo!arch.x64.def_s.AECode./VMGExit_ ((c verismo!arch.x64.def_s.AECode.)) Bool ((_ is verismo!arch.x64.def_s.AECode./VMGExit) c))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle.) (forall ((self! Poly) (op! Poly) (err! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle.? self! op! err!) (ite (is-verismo!arch.x64.def_s.AECode./VMGExit_ (%Poly%verismo!arch.x64.def_s.AECode. err!)) (%Poly%verismo!arch.x64.def_s.Archx64. self!) (verismo!arch.x64.x64_s.impl&%1.stop_cpu.? self! (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? op!)) (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op!))))) :pattern ((verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle.? self! op! err!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::spec_vc_handle")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.spec_vc_handle.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.spec_vc_handle.) (forall ((self! Poly) (op! Poly) (err! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.spec_vc_handle.? self! op! err!) (verismo!arch.x64.x64_s.impl&%1.stop_cpu.? self! (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? op!)) (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op!)))) :pattern ((verismo!arch.x64.x64_s.impl&%1.spec_vc_handle.? self! op! err!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::spec_exception_handle")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.spec_exception_handle.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.spec_exception_handle.) (forall ((self! Poly) (op! Poly) (err! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.spec_exception_handle.? self! op! err!) (verismo!arch.x64.x64_s.impl&%1.stop_cpu.? self! (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? op!)) (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op!)))) :pattern ((verismo!arch.x64.x64_s.impl&%1.spec_exception_handle.? self! op! err!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::spec_set_regdb")
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%5.spec_set_regdb.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%5.spec_set_regdb.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.x64.def_s.impl&%5.spec_set_regdb.? self! val!) (verismo!arch.x64.def_s.impl&%6.spec_new.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.x64.def_s.impl&%4.spec_memdb.? self!)) val! (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)))) :pattern ((verismo!arch.x64.def_s.impl&%5.spec_set_regdb.? self! val!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fmap::FMap::spec_new")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (map! Poly)) (! (=> (has_type map! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!) (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&))) :pattern ((verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fmap::FMap::spec_set_map")
(assert (fuel_bool_default fuel%verismo!tspec.fmap.impl&%1.spec_set_map.))
(assert (=> (fuel_bool fuel%verismo!tspec.fmap.impl&%1.spec_set_map.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (val! Poly)) (! (= (verismo!tspec.fmap.impl&%1.spec_set_map.? K&. K& V&. V& self! val!) (verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& val!)) :pattern ((verismo!tspec.fmap.impl&%1.spec_set_map.? K&. K& V&. V& self! val!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (val! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type val! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (verismo!tspec.fmap.impl&%1.spec_set_map.? K&. K& V&. V& self! val!) (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&))) :pattern ((verismo!tspec.fmap.impl&%1.spec_set_map.? K&. K& V&. V& self! val!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fmap::FMap::spec_map")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::fmap::FMap::insert")
(assert (fuel_bool_default fuel%verismo!tspec.fmap.impl&%3.insert.))
(assert (=> (fuel_bool fuel%verismo!tspec.fmap.impl&%3.insert.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (verismo!tspec.fmap.impl&%3.insert.? K&. K& V&. V& self! k! v!) (verismo!tspec.fmap.impl&%1.spec_set_map.? K&. K& V&. V& self! (vstd!map.impl&%0.insert.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) k! v!))) :pattern ((verismo!tspec.fmap.impl&%3.insert.? K&. K& V&. V& self! k! v!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type k! K&) (has_type v! V&)) (has_type (verismo!tspec.fmap.impl&%3.insert.? K&. K& V&. V& self! k! v!) (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&))) :pattern ((verismo!tspec.fmap.impl&%3.insert.? K&. K& V&. V& self! k! v!)))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::op_write_reg")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.op_write_reg.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.op_write_reg.) (forall ((self! Poly) (memid! Poly) (name! Poly) (val! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.op_write_reg.? self! memid! name! val!) (verismo!arch.x64.def_s.impl&%5.spec_set_regdb.? self! (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!)) memid! (verismo!tspec.fmap.impl&%1.spec_set_map.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!)) memid!) (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!)) memid!)) name! val!))))) :pattern ((verismo!arch.x64.x64_s.impl&%1.op_write_reg.? self! memid! name! val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RMP_FAIL_SIZEMISMATCH")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.) (= verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.? 6)))
(assert (uInv 64 verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.?))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RMP_FAIL_INPUT")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.RMP_FAIL_INPUT.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.RMP_FAIL_INPUT.) (= verismo!arch.rmp.def_s.RMP_FAIL_INPUT.? 1)))
(assert (uInv 64 verismo!arch.rmp.def_s.RMP_FAIL_INPUT.?))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RMP_FAIL_PERMISSION")
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.) (= verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.? 2)))
(assert (uInv 64 verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.?))
(set-info :comment ";; Function-Axioms verismo::tspec::fmap::FMap::spec_index")
(assert (fuel_bool_default fuel%verismo!tspec.fmap.impl&%3.spec_index.))
(assert (=> (fuel_bool fuel%verismo!tspec.fmap.impl&%3.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (verismo!tspec.fmap.impl&%3.spec_index.? K&. K& V&. V& self! k!) (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) k!)) :pattern ((verismo!tspec.fmap.impl&%3.spec_index.? K&. K& V&. V& self! k!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type k! K&)) (has_type (verismo!tspec.fmap.impl&%3.spec_index.? K&. K& V&. V& self! k!) V&)) :pattern ((verismo!tspec.fmap.impl&%3.spec_index.? K&. K& V&. V& self! k!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::bits_p::spec_bit_set")
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit_set.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit_set.) (forall ((val! Poly) (bit! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit_set.? val! bit!) (uClip 64 (uintor 64 (I (%I val!)) (I (uClip 64 (uintshl 64 (I 1) (I (%I bit!)))))))) :pattern ((verismo!tspec.math.bits_p.spec_bit_set.? val! bit!))))))
(assert (forall ((val! Poly) (bit! Poly)) (! (=> (and (has_type val! (UINT 64)) (has_type bit! (UINT 64))) (uInv 64 (verismo!tspec.math.bits_p.spec_bit_set.? val! bit!))) :pattern ((verismo!tspec.math.bits_p.spec_bit_set.? val! bit!)))))
(set-info :comment ";; Function-Axioms verismo::arch::reg::RflagBit::as_int")
(assert (fuel_bool_default fuel%verismo!arch.reg.impl&%3.as_int.))
(define-fun is-verismo!arch.reg.RflagBit./CF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./CF) c))
(define-fun is-verismo!arch.reg.RflagBit./R1_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./R1) c))
(define-fun is-verismo!arch.reg.RflagBit./PF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./PF) c))
(define-fun is-verismo!arch.reg.RflagBit./R2_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./R2) c))
(define-fun is-verismo!arch.reg.RflagBit./AF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./AF) c))
(define-fun is-verismo!arch.reg.RflagBit./R3_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./R3) c))
(define-fun is-verismo!arch.reg.RflagBit./ZF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./ZF) c))
(define-fun is-verismo!arch.reg.RflagBit./SF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./SF) c))
(define-fun is-verismo!arch.reg.RflagBit./TF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./TF) c))
(define-fun is-verismo!arch.reg.RflagBit./IF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./IF) c))
(define-fun is-verismo!arch.reg.RflagBit./DF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./DF) c))
(assert (=> (fuel_bool fuel%verismo!arch.reg.impl&%3.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. self!) (I (let ((val$ (ite (is-verismo!arch.reg.RflagBit./CF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 0 (ite (is-verismo!arch.reg.RflagBit./R1_ (%Poly%verismo!arch.reg.RflagBit. self!)) 1 (ite (is-verismo!arch.reg.RflagBit./PF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 2 (ite (is-verismo!arch.reg.RflagBit./R2_ (%Poly%verismo!arch.reg.RflagBit. self!)) 3 (ite (is-verismo!arch.reg.RflagBit./AF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 4 (ite (is-verismo!arch.reg.RflagBit./R3_ (%Poly%verismo!arch.reg.RflagBit. self!)) 5 (ite (is-verismo!arch.reg.RflagBit./ZF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 6 (ite (is-verismo!arch.reg.RflagBit./SF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 7 (ite (is-verismo!arch.reg.RflagBit./TF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 8 (ite (is-verismo!arch.reg.RflagBit./IF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 9 (ite (is-verismo!arch.reg.RflagBit./DF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 10 21))))))))))))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::handle_mem_err_fn")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn.))
(declare-fun %%lambda%%2 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (arch$ Poly) (op$ Poly)) (! (= (%%apply%%1 (%%lambda%%2 %%hole%%0) arch$ op$) (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle.? arch$ op$ %%hole%%0))) :pattern ((%%apply%%1 (%%lambda%%2 %%hole%%0) arch$ op$)))))
(declare-fun %%lambda%%3 (verismo!arch.memop.MemOp.) %%Function%%)
(assert (forall ((%%hole%%0 verismo!arch.memop.MemOp.) (arch$ Poly) (op$ Poly)) (! (= (%%apply%%1 (%%lambda%%3 %%hole%%0) arch$ op$) (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.spec_vc_handle.? arch$ op$ (Poly%verismo!arch.x64.def_s.NAECode. (verismo!arch.x64.def_s.NAECode./NotValidated (%Poly%verismo!arch.x64.def_s.Archx64Op. (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./MemOp %%hole%%0 (%I (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op$))))))))))) :pattern ((%%apply%%1 (%%lambda%%3 %%hole%%0) arch$ op$)))))
(declare-fun %%lambda%%4 (verismo!arch.memop.MemOp.) %%Function%%)
(assert (forall ((%%hole%%0 verismo!arch.memop.MemOp.) (arch$ Poly) (op$ Poly)) (! (= (%%apply%%1 (%%lambda%%4 %%hole%%0) arch$ op$) (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.spec_exception_handle.? arch$ op$ (Poly%verismo!arch.x64.def_s.ExceptionCode. (verismo!arch.x64.def_s.ExceptionCode./PFault (%Poly%verismo!arch.x64.def_s.Archx64Op. (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./MemOp %%hole%%0 (%I (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op$))))))))))) :pattern ((%%apply%%1 (%%lambda%%4 %%hole%%0) arch$ op$)))))
(declare-fun %%lambda%%5 (verismo!arch.memop.MemOp.) %%Function%%)
(assert (forall ((%%hole%%0 verismo!arch.memop.MemOp.) (arch$ Poly) (op$ Poly)) (! (= (%%apply%%1 (%%lambda%%5 %%hole%%0) arch$ op$) (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.spec_exception_handle.? arch$ op$ (Poly%verismo!arch.x64.def_s.ExceptionCode. (verismo!arch.x64.def_s.ExceptionCode./GP (%Poly%verismo!arch.x64.def_s.Archx64Op. (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./MemOp %%hole%%0 (%I (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op$))))))))))) :pattern ((%%apply%%1 (%%lambda%%5 %%hole%%0) arch$ op$)))))
(declare-fun %%lambda%%6 (Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (arch$ Poly) (op$ Poly)) (! (= (%%apply%%1 (%%lambda%%6 %%hole%%0 %%hole%%1) arch$ op$) (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.op_write_reg.? arch$ (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? op$)) %%hole%%0 %%hole%%1))) :pattern ((%%apply%%1 (%%lambda%%6 %%hole%%0 %%hole%%1) arch$ op$)))))
(declare-fun %%lambda%%7 (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Int Int Poly Int Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (%%hole%%13 Int) (%%hole%%14 Int) (%%hole%%15 Poly) (%%hole%%16 Int) (%%hole%%17 Poly) (arch$ Poly) (op$ Poly)) (! (= (%%apply%%1 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17) arch$ op$) (Poly%verismo!arch.x64.def_s.Archx64. (let ((rflags$ (%I (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 (verismo!tspec.fmap.impl&%0.spec_map.? %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? arch$)) (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? op$)))) %%hole%%12)))) (let ((update$ (uClip %%hole%%16 (uintor %%hole%%14 (I (%I (I (uClip %%hole%%13 rflags$)))) %%hole%%15)))) (verismo!arch.x64.x64_s.impl&%1.op_write_reg.? arch$ (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? op$)) %%hole%%17 (I update$)))))) :pattern ((%%apply%%1 (%%lambda%%7 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17) arch$ op$)))))
(declare-fun %%lambda%%8 () %%Function%%)
(assert (forall ((arch$ Poly) (op$ Poly)) (! (= (%%apply%%1 %%lambda%%8 arch$ op$) (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.stop_cpu.? arch$ (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? op$)) (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op$))))) :pattern ((%%apply%%1 %%lambda%%8 arch$ op$)))))
(define-fun is-verismo!arch.errors.RmpFault./Unsupported_ ((c verismo!arch.errors.RmpFault.)) Bool ((_ is verismo!arch.errors.RmpFault./Unsupported) c))
(define-fun is-verismo!arch.errors.RmpFault./Size_ ((c verismo!arch.errors.RmpFault.)) Bool ((_ is verismo!arch.errors.RmpFault./Size) c))
(define-fun is-verismo!arch.errors.RmpFault./Input_ ((c verismo!arch.errors.RmpFault.)) Bool ((_ is verismo!arch.errors.RmpFault./Input) c))
(define-fun is-verismo!arch.errors.RmpFault./Perm_ ((c verismo!arch.errors.RmpFault.)) Bool ((_ is verismo!arch.errors.RmpFault./Perm) c))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn.) (forall ((err! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn.? err!) (ite (is-verismo!arch.errors.MemError./NoRam_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((memop$ (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NoRam/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%2 (Poly%verismo!arch.x64.def_s.AECode. verismo!arch.x64.def_s.AECode./Npf)))))) (ite (is-verismo!arch.errors.MemError./NotValidated_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((memop$ (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NotValidated/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%3 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$))))))) (ite (is-verismo!arch.errors.MemError./NestedPF_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((memop$ (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NestedPF/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%2 (Poly%verismo!arch.x64.def_s.AECode. verismo!arch.x64.def_s.AECode./Npf)))))) (ite (is-verismo!arch.errors.MemError./PageFault_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((memop$ (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./PageFault/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%4 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$))))))) (ite (is-verismo!arch.errors.MemError./RmpOp_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((fault$ (verismo!arch.errors.MemError./RmpOp/0 (%Poly%verismo!arch.errors.MemError. err!)))) (let ((memop$ (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./RmpOp/1 (%Poly%verismo!arch.errors.MemError. err!))))) (ite (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$))) (ite (is-verismo!arch.errors.RmpFault./Unsupported_ fault$) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%5 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$)))))) (ite (is-verismo!arch.errors.RmpFault./Size_ fault$) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%6 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.?))))) (ite (is-verismo!arch.errors.RmpFault./Input_ fault$) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%6 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_INPUT.?))))) (ite (is-verismo!arch.errors.RmpFault./Perm_ fault$) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%6 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.?))))) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%7 $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags) 64 64 (I (uClip 64 (uintshl 64 (I 1) (I (%I (I (uClip 64 (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./CF)))))))))) 64 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags))))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun %%lambda%%8)))))) (let ((memop$ (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./Others/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%5 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$))))))))))))) :pattern ((verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn.? err!))))))
(assert (forall ((err! Poly)) (! (=> (has_type err! (TYPE%verismo!arch.errors.MemError. $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) (has_type (Poly%tuple%2. (verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn.? err!)) (TYPE%tuple%2. $ BOOL $ (TYPE%fun%2. $ TYPE%verismo!arch.x64.def_s.Archx64. $ TYPE%verismo!arch.x64.def_s.Archx64Op. $ TYPE%verismo!arch.x64.def_s.Archx64.)))) :pattern ((verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn.? err!)))))
(set-info :comment ";; Function-Axioms verismo::arch::errors::MemError::with_param")
(assert (fuel_bool_default fuel%verismo!arch.errors.impl&%3.with_param.))
(assert (=> (fuel_bool fuel%verismo!arch.errors.impl&%3.with_param.) (forall ((Param&. Dcr) (Param& Type) (T&. Dcr) (T& Type) (self! Poly) (param! Poly)) (! (= (verismo!arch.errors.impl&%3.with_param.? Param&. Param& T&. T& self! param!) (ite (is-verismo!arch.errors.MemError./Others_ (%Poly%verismo!arch.errors.MemError. self!)) (verismo!arch.errors.MemError./Others param!) (ite (is-verismo!arch.errors.MemError./NoRam_ (%Poly%verismo!arch.errors.MemError. self!)) (verismo!arch.errors.MemError./NoRam param!) (ite (is-verismo!arch.errors.MemError./NotValidated_ (%Poly%verismo!arch.errors.MemError. self!)) (verismo!arch.errors.MemError./NotValidated param!) (ite (is-verismo!arch.errors.MemError./NestedPF_ (%Poly%verismo!arch.errors.MemError. self!)) (verismo!arch.errors.MemError./NestedPF param!) (ite (is-verismo!arch.errors.MemError./PageFault_ (%Poly%verismo!arch.errors.MemError. self!)) (verismo!arch.errors.MemError./PageFault param!) (let ((fault$ (verismo!arch.errors.MemError./RmpOp/0 (%Poly%verismo!arch.errors.MemError. self!)))) (verismo!arch.errors.MemError./RmpOp (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. fault$)) param!)))))))) :pattern ((verismo!arch.errors.impl&%3.with_param.? Param&. Param& T&. T& self! param!))))))
(assert (forall ((Param&. Dcr) (Param& Type) (T&. Dcr) (T& Type) (self! Poly) (param! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (has_type param! T&)) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.with_param.? Param&. Param& T&. T& self! param!)) (TYPE%verismo!arch.errors.MemError. T&. T&))) :pattern ((verismo!arch.errors.impl&%3.with_param.? Param&. Param& T&. T& self! param!)))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::is_run")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.is_run.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.is_run.) (forall ((self! Poly) (cpu_memid! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.is_run.? self! cpu_memid!) (let ((memid$ (verismo!arch.entities.memid.impl&%2.memid.? cpu_memid!))) (let ((cpu$ (verismo!arch.entities.memid.impl&%2.cpu.? cpu_memid!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)) (Poly%verismo!arch.entities.memid.MemID. memid$))) (I cpu$)) (%B (vstd!map.impl&%0.index.? $ NAT $ BOOL (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)) (Poly%verismo!arch.entities.memid.MemID. memid$)) (I cpu$))))))) :pattern ((verismo!arch.x64.x64_s.impl&%1.is_run.? self! cpu_memid!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::ResultWithErr::to_result")
(assert (fuel_bool_default fuel%verismo!tspec.impl&%5.to_result.))
(assert (=> (fuel_bool fuel%verismo!tspec.impl&%5.to_result.) (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (self! Poly)) (! (= (verismo!tspec.impl&%5.to_result.? RetValue&. RetValue& ErrorID&. ErrorID& self!) (ite (is-verismo!tspec.ResultWithErr./Ok_ (%Poly%verismo!tspec.ResultWithErr. self!)) (let ((ret$ (verismo!tspec.ResultWithErr./Ok/0 (%Poly%verismo!tspec.ResultWithErr. self!)))) ret$) (let ((ret$ (verismo!tspec.ResultWithErr./Error/0 (%Poly%verismo!tspec.ResultWithErr. self!)))) ret$))) :pattern ((verismo!tspec.impl&%5.to_result.? RetValue&. RetValue& ErrorID&. ErrorID& self!))))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (has_type (verismo!tspec.impl&%5.to_result.? RetValue&. RetValue& ErrorID&. ErrorID& self!) RetValue&)) :pattern ((verismo!tspec.impl&%5.to_result.? RetValue&. RetValue& ErrorID&. ErrorID& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u8_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u8_to_stream.))
(declare-fun %%lambda%%9 (Int Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (%%hole%%2 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2) i$) (I (ite (= (%I i$) %%hole%%0) %%hole%%1 %%hole%%2))) :pattern ((%%apply%%0 (%%lambda%%9 %%hole%%0 %%hole%%1 %%hole%%2) i$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u8_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u8_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I 1) (Poly%fun%1. (mk_fun (%%lambda%%9 0 (%I data!) 0)))))) :pattern ((verismo!tspec.stream.basic.u8_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u16_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u16_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u16_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u16_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I data!))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I data!) 256))))))))) :pattern ((verismo!tspec.stream.basic.u16_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%3::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%3.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I self!))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I self!) 256)))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::spec_size")
(assert (forall ((T&. Dcr) (T& Type)) (! (<= 0 (verismo!tspec.size_s.spec_size.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_size.? T&. T&)))))
(set-info :comment ";; Function-Axioms verismo::tspec::setlib::set_op")
(assert (fuel_bool_default fuel%verismo!tspec.setlib.set_op.))
(declare-fun %%lambda%%10 (Dcr Type Poly Dcr Type Poly Type Type Dcr Type Poly Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Type) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Poly) (%%hole%%11 Dcr) (%%hole%%12 Type) (%%hole%%13 Poly) (%%hole%%14 %%Function%%) (val$ Poly)) (! (= (%%apply%%0 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14) val$) (B (exists ((v1$ Poly) (v2$ Poly)) (! (and (and (has_type v1$ %%hole%%6) (has_type v2$ %%hole%%7)) (and (and (vstd!set.impl&%0.contains.? %%hole%%8 %%hole%%9 %%hole%%10 v1$) (vstd!set.impl&%0.contains.? %%hole%%11 %%hole%%12 %%hole%%13 v2$)) (= val$ (%%apply%%1 %%hole%%14 v1$ v2$)))) :pattern ((vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 v1$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 v2$)))))) :pattern ((%%apply%%0 (%%lambda%%10 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14) val$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.setlib.set_op.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (s1! Poly) (s2! Poly) (op_fn! Poly)) (! (= (verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!) (vstd!set.impl&%0.new.? T3&. T3& $ (TYPE%fun%1. T3&. T3& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%10 T1&. T1& s1! T2&. T2& s2! T1& T2& T1&. T1& s1! T2&. T2& s2! (%Poly%fun%2. op_fn!)))))) :pattern ((verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (s1! Poly) (s2! Poly) (op_fn! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. T1&. T1&)) (has_type s2! (TYPE%vstd!set.Set. T2&. T2&)) (has_type op_fn! (TYPE%fun%2. T1&. T1& T2&. T2& T3&. T3&))) (has_type (verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!) (TYPE%vstd!set.Set. T3&. T3&))) :pattern ((verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::bop_new")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.bop_new.))
(declare-fun %%lambda%%11 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%11 %%hole%%0 %%hole%%1) vmpl$) (B (and (<= %%hole%%0 (%I vmpl$)) (<= (%I vmpl$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%11 %%hole%%0 %%hole%%1) vmpl$)))))
(declare-fun %%lambda%%12 (Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Type Type Dcr Type Dcr Type %%Function%% Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Poly) (%%hole%%15 Dcr) (%%hole%%16 Type) (%%hole%%17 Dcr) (%%hole%%18 Type) (%%hole%%19 Poly) (%%hole%%20 Dcr) (%%hole%%21 Type) (%%hole%%22 Dcr) (%%hole%%23 Type) (%%hole%%24 Type) (%%hole%%25 Type) (%%hole%%26 Dcr) (%%hole%%27 Type) (%%hole%%28 Dcr) (%%hole%%29 Type) (%%hole%%30 %%Function%%) (%%hole%%31 Dcr) (%%hole%%32 Type) (%%hole%%33 Dcr) (%%hole%%34 Type) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%12 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28 %%hole%%29 %%hole%%30 %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34) vmpl$) (vstd!set.impl&%0.new.? %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34 (Poly%fun%1. (mk_fun (%%lambda%%10 %%hole%%20 %%hole%%21 (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 vmpl$) %%hole%%22 %%hole%%23 (vstd!map.impl&%0.index.? %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 vmpl$) %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 (vstd!map.impl&%0.index.? %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 vmpl$) %%hole%%28 %%hole%%29 (vstd!map.impl&%0.index.? %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 vmpl$) %%hole%%30))))) :pattern ((%%apply%%0 (%%lambda%%12 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28 %%hole%%29 %%hole%%30 %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34) vmpl$)))))
(declare-fun %%lambda%%13 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%13 %%hole%%0) vmpl$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%13 %%hole%%0) vmpl$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.bop_new.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (Rhs&. Dcr) (Rhs& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly) (op! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType (%%apply%%1 (%Poly%fun%2. op!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!))) (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)))) (vstd!map.impl&%0.new.? $ NAT $ (TYPE%vstd!set.Set. T2&. T2&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ (TYPE%vstd!set.Set. T2&. T2&)) (Poly%fun%1. (mk_fun (%%lambda%%11 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%12 $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) $ NAT $ (TYPE%vstd!set.Set. Rhs&. Rhs&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) $ NAT $ (TYPE%vstd!set.Set. Rhs&. Rhs&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) T&. T& Rhs&. Rhs& T& Rhs& T&. T& Rhs&. Rhs& (%Poly%fun%2. op!) T2&. T2& $ (TYPE%fun%1. T2&. T2& $ BOOL))))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.) (Poly%fun%1. (mk_fun (%%lambda%%11 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%13 (Poly%verismo!tspec.security.sectype.DataLabel. verismo!tspec.security.sectype.DataLabel./Symbol)))))))) :pattern ((verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (Rhs&. Dcr) (Rhs& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly) (op! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type rhs! (TYPE%verismo!tspec.security.sectype.SpecSecType. Rhs&. Rhs& M&. M&)) (has_type op! (TYPE%fun%2. T&. T& Rhs&. Rhs& T2&. T2&))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::constant")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType val! (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (vstd!map.impl&%0.new.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ (TYPE%vstd!set.Set. T&. T&)) (Poly%fun%1. (mk_fun (%%lambda%%11 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%13 (vstd!set.impl&%0.insert.? T&. T& (vstd!set.impl&%0.empty.? T&. T&) val!))))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.) (Poly%fun%1. (mk_fun (%%lambda%%11 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%13 (Poly%verismo!tspec.security.sectype.DataLabel. verismo!tspec.security.sectype.DataLabel./Symbol)))))))) :pattern ((verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! T&) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::setlib::uop_to_bop")
(assert (fuel_bool_default fuel%verismo!tspec.setlib.uop_to_bop.))
(declare-fun %%lambda%%14 (%%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 %%Function%%) (v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 (%%lambda%%14 %%hole%%0) v1$ v2$) (%%apply%%0 %%hole%%0 v1$)) :pattern ((%%apply%%1 (%%lambda%%14 %%hole%%0) v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.setlib.uop_to_bop.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (op! Poly)) (! (= (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!) (mk_fun (%%lambda%%14 (%Poly%fun%1. op!)))) :pattern ((verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (op! Poly)) (! (=> (has_type op! (TYPE%fun%1. T1&. T1& T3&. T3&)) (has_type (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!)) (TYPE%fun%2. T1&. T1& T2&. T2& T3&. T3&))) :pattern ((verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::uop_new")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.uop_new.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.uop_new.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (T2&. Dcr) (T2& Type) (self! Poly) (op! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!) (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& T&. T& T2&. T2& self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& (vstd!pervasive.arbitrary.? T&. T&))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T&. T& T&. T& T2&. T2& op!)))) :pattern ((verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (T2&. Dcr) (T2& Type) (self! Poly) (op! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type op! (TYPE%fun%1. T&. T& T2&. T2&))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::seq::fn_spec_to_seq_index")
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.fn_spec_to_seq_index.))
(declare-fun %%lambda%%15 (Dcr Type Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%15 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) v$) (vstd!seq.Seq.index.? %%hole%%4 %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 v$) %%hole%%6)) :pattern ((%%apply%%0 (%%lambda%%15 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) v$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.fn_spec_to_seq_index.) (forall ((T&. Dcr) (T& Type) (i! Poly)) (! (= (verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!) (mk_fun (%%lambda%%15 T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) i!))) :pattern ((verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!))))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly)) (! (=> (has_type i! INT) (has_type (Poly%fun%1. (verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!)) (TYPE%fun%1. T&. T& $ (UINT 8)))) :pattern ((verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to.))
(declare-fun %%lambda%%16 (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Dcr) (%%hole%%15 Type) (%%hole%%16 Poly) (%%hole%%17 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%16 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17) i$) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 (Poly%fun%1. (verismo!tspec.security.seq.fn_spec_to_seq_index.? %%hole%%0 %%hole%%1 i$))))))) :pattern ((%%apply%%0 (%%lambda%%16 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17) i$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) (I (verismo!tspec.size_s.spec_size.? T&. T&)) (Poly%fun%1. (mk_fun (%%lambda%%16 T&. T& T&. T& T&. T& $ (UINT 8) T&. T& M&. M& T&. T& $ (UINT 8) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& (vstd!pervasive.arbitrary.? T&. T&)))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u32_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u32_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u32_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u32_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I data!)))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I data!)))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I data!) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I data!) 65536))))) 256)))))))))))) :pattern ((verismo!tspec.stream.basic.u32_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%5::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I self!)))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I self!)))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I self!) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I self!) 65536))))) 256))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u64_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u64_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u64_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u64_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I data!))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I data!))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I data!)))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I data!)))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296))))) 65536))))) 256))))))))))))))) :pattern ((verismo!tspec.stream.basic.u64_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%7::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%7.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%7.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I self!))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I self!))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I self!)))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I self!)))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296))))) 65536))))) 256)))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::ToSecSeq::sec_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? Self%&. Self%& self!) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::impl&%2::T::sec_bytes")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&)) :pattern ((tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%1::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%1.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%1.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? self!))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::recursive_sec_bytes")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.recursive_sec_bytes.))
(declare-const fuel_nat%verismo!primitives_e.seq.recursive_sec_bytes. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (s! Poly) (fuel% Fuel)) (! (= (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! fuel%) (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! zero)) :pattern ((verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! fuel%)))))
(assert (forall ((T&. Dcr) (T& Type) (s! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (has_type s! (TYPE%vstd!seq.Seq. T&. T&))) (= (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel%)) (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (ite (> (vstd!seq.Seq.len.? T&. T& s!) 0) (let ((prevs$ (vstd!seq.Seq.subrange.? T&. T& s! (I 0) (I (Sub (vstd!seq.Seq.len.? T&. T& s!) 1))))) (ite (< (vstd!seq.Seq.len.? T&. T& prevs$) (vstd!seq.Seq.len.? T&. T& s!)) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& prevs$ fuel%)) (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& (vstd!seq.Seq.last.? T&. T& s!))) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel%))))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.recursive_sec_bytes.) (forall ((T&. Dcr) (T& Type) (s! Poly)) (! (=> (and (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (has_type s! (TYPE%vstd!seq.Seq. T&. T&))) (= (verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& s!) (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel_nat%verismo!primitives_e.seq.recursive_sec_bytes.)))) :pattern ((verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& s!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& self!))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::FromSecSeq::from_sec_bytes")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? Self%&. Self%& T&. T& self!) T&)) :pattern ((verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? Self%&. Self%& T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::SecSeqByte::from_sec_bytes")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes.))
(declare-fun %%choose%%1 (Type Dcr Type Bool Type Poly Dcr Type) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Bool) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type)) (! (=> (exists ((v$ Poly)) (! (and (has_type v$ %%hole%%0) (ext_eq %%hole%%3 %%hole%%4 (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%1 %%hole%%2 v$) %%hole%%5)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%6 %%hole%%7 v$)))) (exists ((v$ Poly)) (! (and (and (has_type v$ %%hole%%0) (ext_eq %%hole%%3 %%hole%%4 (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%1 %%hole%%2 v$) %%hole%%5)) (= (%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) v$)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%6 %%hole%%7 v$))))) :pattern ((%%choose%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7)))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!) (as_type (%%choose%%1 T& T&. T& true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self! T&. T&) T&)) :pattern ((verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::sectype::SecSeqByte::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!) (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::IntOrd::ord_int")
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.integer.IntOrd.ord_int.? Self%&. Self%& self!) INT)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? Self%&. Self%& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%480.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%480.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%481.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%481.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::spec_perm")
(assert (fuel_bool_default fuel%verismo!arch.rmp.entry_s.impl&%0.spec_perm.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.entry_s.impl&%0.spec_perm.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!arch.rmp.entry_s.impl&%0.spec_perm.? self! vmpl!) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)) vmpl!))) :pattern ((verismo!arch.rmp.entry_s.impl&%0.spec_perm.? self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::VMPL::from_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%4.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%4.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.entities.VMPL. val!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.entities.impl&%6.spec_from_int.? val!))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.entities.VMPL. val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::perm_s::PagePerm::from_int")
(assert (fuel_bool_default fuel%verismo!arch.rmp.perm_s.impl&%1.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.perm_s.impl&%1.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) val!) (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (let ((ret$ (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) (let ((ret$1 (ite (= (EucMod (%I val!) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Read))) ret$))) (let ((ret$2 (ite (= (EucMod (EucDiv (%I val!) 2) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$1) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write))) ret$1))) (let ((ret$3 (ite (= (EucMod (EucDiv (%I val!) 4) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$2) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeU))) ret$2))) (let ((ret$4 (ite (= (EucMod (EucDiv (%I val!) 8) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$3) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeS))) ret$3))) (let ((ret$5 (ite (= (EucMod (EucDiv (%I val!) 16) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$4) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Shadow))) ret$4))) ret$5)))))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) val!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_val")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_val.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_val.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!) T&)) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SpecSecType::axiom_spec_new")
(declare-fun ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. (Dcr Type Dcr Type Poly core!option.Option. Poly vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! core!option.Option.) (valsets! Poly) (labels! vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (= (ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. T&. T& M&. M& val! _unused! valsets! labels!) (and (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) val!) (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) _unused!) (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) valsets!) (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) labels!))) :pattern ((ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. T&. T& M&. M& val! _unused! valsets! labels!)))))
(set-info :comment ";; Broadcast verismo::tspec::security::sectype::SpecSecType::axiom_spec_new")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! Poly) (valsets! Poly) (labels! Poly)) (! (=> (and (has_type val! T&) (has_type _unused! (TYPE%core!option.Option. M&. M&)) (has_type valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&))) (has_type labels! (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))) (and (and (and (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) val!) (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) (%Poly%core!option.Option. _unused!))) (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) valsets!)) (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) :pattern ((verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_new")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::axiom_spec_new")
(declare-fun ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. (Dcr Type Dcr Type verismo!tspec.security.sectype.SpecSecType.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! verismo!tspec.security.sectype.SpecSecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. T&. T& M&. M& val!) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. val!)))) val!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. T&. T& M&. M& val!)))))
(set-info :comment ";; Broadcast verismo::tspec::security::sectype::SecType::axiom_spec_new")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)) val!)) :pattern ((verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)))))
(set-info :comment ";; Function-Specs verismo::tspec::security::sectype::SecType::axiom_ext_equal")
(declare-fun ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (val2! Poly)) (! (= (ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. T&. T& M&. M& val! val2!) (= (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)) (= val! val2!))) :pattern ((ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. T&. T& M&. M& val! val2!)))))
(set-info :comment ";; Broadcast verismo::tspec::security::sectype::SecType::axiom_ext_equal")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (val2! Poly)) (! (=> (and (has_type val! (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (has_type val2! (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) (= (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)) (= val! val2!))) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%46::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%46.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%46.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::fn_vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.fn_vspec_cast_to.))
(declare-fun %%lambda%%17 (Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%17 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 v$)) :pattern ((%%apply%%0 (%%lambda%%17 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.fn_vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (= (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&) (mk_fun (%%lambda%%17 T1&. T1& T2&. T2&))) :pattern ((verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (has_type (Poly%fun%1. (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&)) (TYPE%fun%1. T1&. T1& T2&. T2&)) :pattern ((verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? T1&. T1& M&. M& T1&. T1& T2&. T2& self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T1&. T1& M&. M& (vstd!pervasive.arbitrary.? T1&. T1&))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T1&. T1& T2&. T2& (Poly%fun%1. (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? T2&. T2& M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) T1&. T1& M&. M& self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%43::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%43.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%43.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 32)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%42::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%42.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%42.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 16)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%41::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%41.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%41.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 8)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%38::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%38.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%38.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%36::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%36.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%36.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%34::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%34.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%34.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 16)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%33::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%33.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%33.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 8)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%30::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%30.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%30.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%28::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%28.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%28.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%27::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%27.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%27.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 32)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%25::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%25.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%25.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 8)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%22::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%22.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%22.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%20::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%20.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%20.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%19::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%19.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%19.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 32)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%18::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%18.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%18.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 16)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%60::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%60.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%60.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%59::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%59.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%59.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 32)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%58::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%58.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%58.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 16)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%57::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%57.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%57.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 8)))
(set-info :comment ";; Function-Specs verismo::arch::addr_s::def_s::SpecAddr::axiom_equal")
(declare-fun ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. (Dcr Type verismo!arch.addr_s.def_s.SpecAddr. verismo!arch.addr_s.def_s.SpecAddr.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (left! verismo!arch.addr_s.def_s.SpecAddr.) (right! verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. T&. T& left! right!) (and (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!))) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!)))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!))) (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!))) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!)))) (= left! right!)))) :pattern ((ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. T&. T& left! right!)))))
(set-info :comment ";; Broadcast verismo::arch::addr_s::def_s::SpecAddr::axiom_equal")
(assert (forall ((T&. Dcr) (T& Type) (left! Poly) (right! Poly)) (! (=> (and (has_type left! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type right! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) (and (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left!)) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) right!))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left! right!)) (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left!)) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) right!))) (= left! right!)))) :pattern ((ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left! right!)))))
(set-info :comment ";; Function-Specs verismo::arch::addr_s::def_s::SpecAddr::axiom_addr_type_dummy_holder")
(declare-fun ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. (Dcr Type verismo!arch.addr_s.def_s.SpecAddr.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. T&. T& self!) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly%verismo!arch.addr_s.def_s.SpecAddr. self!))) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. T&. T& self!)))))
(set-info :comment ";; Broadcast verismo::arch::addr_s::def_s::SpecAddr::axiom_addr_type_dummy_holder")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&)))))
(set-info :comment ";; Function-Specs verismo::arch::addr_s::def_s::SpecPage::axiom_equal")
(declare-fun ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. (Dcr Type verismo!arch.addr_s.def_s.SpecPage. verismo!arch.addr_s.def_s.SpecPage.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (left! verismo!arch.addr_s.def_s.SpecPage.) (right! verismo!arch.addr_s.def_s.SpecPage.)) (! (= (ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. T&. T& left! right!) (and (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. left!)) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecPage. left!) (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. left!)) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (= left! right!)))) :pattern ((ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. T&. T& left! right!)))))
(set-info :comment ";; Broadcast verismo::arch::addr_s::def_s::SpecPage::axiom_equal")
(assert (forall ((T&. Dcr) (T& Type) (left! Poly) (right! Poly)) (! (=> (and (has_type left! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type right! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) (and (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& left!) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& right!)) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) left! right!)) (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& left!) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& right!)) (= left! right!)))) :pattern ((ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) left! right!)))))
(set-info :comment ";; Function-Specs verismo::arch::addr_s::def_s::SpecPage::axiom_addr_type_dummy_holder")
(declare-fun ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. (Dcr Type verismo!arch.addr_s.def_s.SpecPage.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecPage.)) (! (= (ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. T&. T& self!) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly%verismo!arch.addr_s.def_s.SpecPage. self!))) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. T&. T& self!)))))
(set-info :comment ";; Broadcast verismo::arch::addr_s::def_s::SpecPage::axiom_addr_type_dummy_holder")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::to_offset")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.to_offset.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.to_offset.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& self!) (EucMod (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!)) verismo!arch.addr_s.def_s.PAGE_SIZE.?)) :pattern ((verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecMem::first")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.first.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.first.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecMem::offset")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.offset.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.offset.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) (nClip (verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!)))))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecMem::len")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.len.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.len.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!)))))
(set-info :comment ";; Function-Specs verismo::arch::addr_s::def_s::SpecMem::axiom_inv")
(declare-fun ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. (Dcr Type verismo!arch.addr_s.def_s.SpecMem.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecMem.)) (! (= (ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. T&. T& self!) (and (<= (nClip (Add (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)) (verismo!arch.addr_s.page.impl&%8.len.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)))) 4096) (< (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)) 4096))) :pattern ((ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. T&. T& self!)))))
(set-info :comment ";; Broadcast verismo::arch::addr_s::def_s::SpecMem::axiom_inv")
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (and (<= (nClip (Add (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))) 4096) (< (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) 4096))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!)) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::crypto::encdec::SpecEncrypt::decrypt")
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly) (cipher! Poly)) (! (=> (and (has_type self! Self%&) (has_type cipher! (TYPE%verismo!arch.crypto.Encrypted. Self%&. Self%& T&. T&))) (has_type (verismo!arch.crypto.encdec.SpecEncrypt.decrypt.? Self%&. Self%& T&. T& self! cipher!) T&)) :pattern ((verismo!arch.crypto.encdec.SpecEncrypt.decrypt.? Self%&. Self%& T&. T& self! cipher!)))))
(set-info :comment ";; Function-Specs verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::axiom_spec_new")
(declare-fun ens%verismo!arch.rmp.def_s.impl&%2.axiom_spec_new. (Bool Bool Bool Bool Int verismo!arch.addr_s.def_s.SpecPage. verismo!arch.addr_s.def_s.PageSize. vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) Bool)
(assert (forall ((immutable! Bool) (assigned! Bool) (validated! Bool) (vmsa! Bool) (asid! Int) (gpn! verismo!arch.addr_s.def_s.SpecPage.) (size! verismo!arch.addr_s.def_s.PageSize.) (perms! vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (= (ens%verismo!arch.rmp.def_s.impl&%2.axiom_spec_new. immutable! assigned! validated! vmsa! asid! gpn! size! perms!) (and (= (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) immutable!) (= (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) assigned!) (= (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) validated!) (= (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) vmsa!) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) asid!) (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) gpn!) (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) size!) (= (verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) perms!))) :pattern ((ens%verismo!arch.rmp.def_s.impl&%2.axiom_spec_new. immutable! assigned! validated! vmsa! asid! gpn! size! perms!)))))
(set-info :comment ";; Broadcast verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::axiom_spec_new")
(assert (forall ((immutable! Poly) (assigned! Poly) (validated! Poly) (vmsa! Poly) (asid! Poly) (gpn! Poly) (size! Poly) (perms! Poly)) (! (=> (and (has_type immutable! BOOL) (has_type assigned! BOOL) (has_type validated! BOOL) (has_type vmsa! BOOL) (has_type asid! NAT) (has_type gpn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type size! TYPE%verismo!arch.addr_s.def_s.PageSize.) (has_type perms! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) (and (and (and (and (and (and (and (= (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B immutable!)) (= (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B assigned!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B validated!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B vmsa!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%I asid!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%Poly%verismo!arch.addr_s.def_s.PageSize. size!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) :pattern ((verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!)))))
(set-info :comment ";; Function-Specs verismo::arch::rmp::def_s::RmpEntry::axiom_spec_new")
(declare-fun ens%verismo!arch.rmp.def_s.impl&%5.axiom_spec_new. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(assert (forall ((val! verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (ens%verismo!arch.rmp.def_s.impl&%5.axiom_spec_new. val!) (= (verismo!arch.rmp.def_s.impl&%3.spec_val.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%5.spec_new.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. val!)))) val!)) :pattern ((ens%verismo!arch.rmp.def_s.impl&%5.axiom_spec_new. val!)))))
(set-info :comment ";; Broadcast verismo::arch::rmp::def_s::RmpEntry::axiom_spec_new")
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (= (verismo!arch.rmp.def_s.impl&%3.spec_val.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%5.spec_new.? val!))) (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. val!))) :pattern ((verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)))))
(set-info :comment ";; Function-Specs verismo::arch::rmp::perm_s::rmp_perm_track_dom")
(declare-fun ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. (vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. verismo!arch.entities.VMPL.) Bool)
(assert (forall ((p! vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) (vmpl! verismo!arch.entities.VMPL.)) (! (= (ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. p! vmpl!) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. p!)) (Poly%verismo!arch.entities.VMPL. vmpl!))) :pattern ((ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. p! vmpl!)))))
(set-info :comment ";; Broadcast verismo::arch::rmp::perm_s::rmp_perm_track_dom")
(assert (forall ((p! Poly) (vmpl! Poly)) (! (=> (and (has_type p! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) (has_type vmpl! TYPE%verismo!arch.entities.VMPL.)) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) p!) vmpl!)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) p!) vmpl!)))))
(set-info :comment ";; Function-Axioms verismo::arch::ramdb::def::RamDB::spec_data")
(assert (fuel_bool_default fuel%verismo!arch.ramdb.def.impl&%0.spec_data.))
(assert (=> (fuel_bool fuel%verismo!arch.ramdb.def.impl&%0.spec_data.) (forall ((self! Poly)) (! (= (verismo!arch.ramdb.def.impl&%0.spec_data.? self!) (verismo!arch.ramdb.def.RamDB./RamDB/data (%Poly%verismo!arch.ramdb.def.RamDB. self!))) :pattern ((verismo!arch.ramdb.def.impl&%0.spec_data.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::ramdb::def::RamDB::spec_write_count")
(assert (fuel_bool_default fuel%verismo!arch.ramdb.def.impl&%0.spec_write_count.))
(assert (=> (fuel_bool fuel%verismo!arch.ramdb.def.impl&%0.spec_write_count.) (forall ((self! Poly)) (! (= (verismo!arch.ramdb.def.impl&%0.spec_write_count.? self!) (verismo!arch.ramdb.def.RamDB./RamDB/write_count (%Poly%verismo!arch.ramdb.def.RamDB. self!))) :pattern ((verismo!arch.ramdb.def.impl&%0.spec_write_count.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::ramdb::def::RamDB::spec_crypto_mask")
(assert (fuel_bool_default fuel%verismo!arch.ramdb.def.impl&%0.spec_crypto_mask.))
(assert (=> (fuel_bool fuel%verismo!arch.ramdb.def.impl&%0.spec_crypto_mask.) (forall ((self! Poly)) (! (= (verismo!arch.ramdb.def.impl&%0.spec_crypto_mask.? self!) (verismo!arch.ramdb.def.RamDB./RamDB/crypto_mask (%Poly%verismo!arch.ramdb.def.RamDB. self!))) :pattern ((verismo!arch.ramdb.def.impl&%0.spec_crypto_mask.? self!))))))
(set-info :comment ";; Function-Specs verismo::arch::ramdb::def::RamDB::axiom_spec_new")
(declare-fun ens%verismo!arch.ramdb.def.impl&%2.axiom_spec_new. (vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. Int vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.) Bool)
(assert (forall ((data! vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.) (write_count! Int) (crypto_mask! vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.)) (! (= (ens%verismo!arch.ramdb.def.impl&%2.axiom_spec_new. data! write_count! crypto_mask!) (and (= (verismo!arch.ramdb.def.impl&%0.spec_data.? (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.ramdb.def.impl&%2.spec_new.? (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. data!) (I write_count!) (Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. crypto_mask!)))) data!) (= (verismo!arch.ramdb.def.impl&%0.spec_write_count.? (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.ramdb.def.impl&%2.spec_new.? (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. data!) (I write_count!) (Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. crypto_mask!)))) write_count!) (= (verismo!arch.ramdb.def.impl&%0.spec_crypto_mask.? (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.ramdb.def.impl&%2.spec_new.? (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. data!) (I write_count!) (Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. crypto_mask!)))) crypto_mask!))) :pattern ((ens%verismo!arch.ramdb.def.impl&%2.axiom_spec_new. data! write_count! crypto_mask!)))))
(set-info :comment ";; Broadcast verismo::arch::ramdb::def::RamDB::axiom_spec_new")
(assert (forall ((data! Poly) (write_count! Poly) (crypto_mask! Poly)) (! (=> (and (has_type data! (TYPE%vstd!seq.Seq. $ (TYPE%verismo!arch.crypto.Encrypted. $ (TYPE%verismo!arch.crypto.SymKey. $ (TYPE%tuple%2. $ NAT $ INT)) $ (UINT 8)))) (has_type write_count! INT) (has_type crypto_mask! (TYPE%vstd!seq.Seq. $ TYPE%verismo!arch.crypto.CryptoMask.))) (and (and (= (verismo!arch.ramdb.def.impl&%0.spec_data.? (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.ramdb.def.impl&%2.spec_new.? data! write_count! crypto_mask!))) (%Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. data!)) (= (verismo!arch.ramdb.def.impl&%0.spec_write_count.? (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.ramdb.def.impl&%2.spec_new.? data! write_count! crypto_mask!))) (%I write_count!))) (= (verismo!arch.ramdb.def.impl&%0.spec_crypto_mask.? (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.ramdb.def.impl&%2.spec_new.? data! write_count! crypto_mask!))) (%Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. crypto_mask!)))) :pattern ((verismo!arch.ramdb.def.impl&%2.spec_new.? data! write_count! crypto_mask!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::spec_page_frame_bits")
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (uInv 64 (verismo!arch.pgtable.def.spec_page_frame_bits.? no%param))) :pattern ((verismo!arch.pgtable.def.spec_page_frame_bits.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::is_valid")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.is_valid.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.is_valid.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.is_valid.? T&. T& self!) (let ((tmp%%$ (verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!))) (and (<= 0 tmp%%$) (< tmp%%$ 1099511627776)))) :pattern ((verismo!arch.addr_s.page.impl&%3.is_valid.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::MemMap::spec_index")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.memmap_s.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.memmap_s.impl&%0.spec_index.) (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (vpage! Poly)) (! (= (verismo!arch.pgtable.memmap_s.impl&%0.spec_index.? VT&. VT& PT&. PT& self! vpage!) (ite (vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. self!))) vpage!) (core!option.Option./Some (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. self!)) vpage!)) core!option.Option./None)) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.spec_index.? VT&. VT& PT&. PT& self! vpage!))))))
(assert (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (vpage! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.pgtable.def.MemMap. VT&. VT& PT&. PT&)) (has_type vpage! (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&))) (has_type (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.spec_index.? VT&. VT& PT&. PT& self! vpage!)) (TYPE%core!option.Option. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&)))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.spec_index.? VT&. VT& PT&. PT& self! vpage!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::spec_value")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.impl&%8.spec_value.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.impl&%8.spec_value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.pgtable.def.impl&%8.spec_value.? T&. T& self!) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. self!))) :pattern ((verismo!arch.pgtable.def.impl&%8.spec_value.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::pow_s::spec_nat_pow2")
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_nat_pow2.))
(declare-const fuel_nat%verismo!tspec.math.pow_s.spec_nat_pow2. Fuel)
(assert (forall ((e! Poly) (fuel% Fuel)) (! (= (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! fuel%) (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! zero)) :pattern ((verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! fuel%)))))
(assert (forall ((e! Poly) (fuel% Fuel)) (! (=> (has_type e! NAT) (= (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel%)) (ite (= (%I e!) 0) 1 (Mul 2 (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? (I (nClip (Sub (%I e!) 1))) fuel%))))) :pattern ((verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel%))))))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_nat_pow2.) (forall ((e! Poly)) (! (=> (has_type e! NAT) (= (verismo!tspec.math.pow_s.spec_nat_pow2.? e!) (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel_nat%verismo!tspec.math.pow_s.spec_nat_pow2.)))) :pattern ((verismo!tspec.math.pow_s.spec_nat_pow2.? e!))))))
(set-info :comment ";; Function-Specs verismo::tspec::math::pow_s::spec_int_pow2")
(declare-fun req%verismo!tspec.math.pow_s.spec_int_pow2. (Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((offset! Poly)) (! (= (req%verismo!tspec.math.pow_s.spec_int_pow2. offset!) (=> %%global_location_label%%47 (>= (%I offset!) 0))) :pattern ((req%verismo!tspec.math.pow_s.spec_int_pow2. offset!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::math::pow_s::spec_int_pow2")
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_int_pow2.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_int_pow2.) (forall ((offset! Poly)) (! (= (verismo!tspec.math.pow_s.spec_int_pow2.? offset!) (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (nClip (%I offset!))))) :pattern ((verismo!tspec.math.pow_s.spec_int_pow2.? offset!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::PteFlag::as_int")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.impl&%4.as_int.))
(define-fun is-verismo!arch.pgtable.def.PteFlag./P_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./P) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./W_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./W) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./S_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./S) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./PWT_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./PWT) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./PCD_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./PCD) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./A_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./A) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./D_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./D) c))
(define-fun is-verismo!arch.pgtable.def.PteFlag./C_ ((c verismo!arch.pgtable.def.PteFlag.)) Bool ((_ is verismo!arch.pgtable.def.PteFlag./C) c))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.impl&%4.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. self!) (I (let ((val$ (ite (is-verismo!arch.pgtable.def.PteFlag./P_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 0 (ite (is-verismo!arch.pgtable.def.PteFlag./W_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 1 (ite (is-verismo!arch.pgtable.def.PteFlag./S_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 2 (ite (is-verismo!arch.pgtable.def.PteFlag./PWT_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 3 (ite (is-verismo!arch.pgtable.def.PteFlag./PCD_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 4 (ite (is-verismo!arch.pgtable.def.PteFlag./A_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 5 (ite (is-verismo!arch.pgtable.def.PteFlag./D_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 6 (ite (is-verismo!arch.pgtable.def.PteFlag./C_ (%Poly%verismo!arch.pgtable.def.PteFlag. self!)) 51 63)))))))))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::contains_flag")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.contains_flag.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.contains_flag.) (forall ((T&. Dcr) (T& Type) (self! Poly) (flag! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.contains_flag.? T&. T& self! flag!) (= (EucMod (EucDiv (verismo!arch.pgtable.def.impl&%8.spec_value.? T&. T& self!) (verismo!tspec.math.pow_s.spec_int_pow2.? (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. flag!))) 2) 1)) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.contains_flag.? T&. T& self! flag!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::is_present")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.is_present.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.is_present.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.is_present.? T&. T& self!) (verismo!arch.pgtable.entry_s.impl&%1.contains_flag.? T&. T& self! (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./P))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.is_present.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::spec_ppn")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!) (let ((bits$ (verismo!arch.pgtable.def.spec_page_frame_bits.? (I 0)))) (let ((addr$ (EucMod (verismo!arch.pgtable.def.impl&%8.spec_value.? T&. T& self!) (uClip 64 (uintshl 64 (I 1) (I (uClip 64 bits$))))))) (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& (I addr$) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. self!)))))))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::spec_translate_page")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.) (forall ((T&. Dcr) (T& Type) (VT&. Dcr) (VT& Type) (self! Poly) (v! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.? T&. T& VT&. VT& self! v!) (ite (verismo!arch.pgtable.entry_s.impl&%1.is_present.? T&. T& self!) (core!option.Option./Some (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!))) core!option.Option./None)) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.? T&. T& VT&. VT& self! v!))))))
(assert (forall ((T&. Dcr) (T& Type) (VT&. Dcr) (VT& Type) (self! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (has_type v! (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&))) (has_type (Poly%core!option.Option. (verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.? T&. T& VT&. VT& self! v!)) (TYPE%core!option.Option. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.? T&. T& VT&. VT& self! v!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::MemMap::translate")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.memmap_s.impl&%0.translate.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.memmap_s.impl&%0.translate.) (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (vpage! Poly)) (! (= (verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! vpage!) (let ((entry$ (ite (vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. self!))) vpage!) (core!option.Option./Some (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. self!)) vpage!)) core!option.Option./None))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. entry$))))) (verismo!arch.pgtable.entry_s.impl&%1.spec_translate_page.? PT&. PT& VT&. VT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. entry$))) vpage!) core!option.Option./None))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! vpage!))))))
(assert (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (vpage! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.pgtable.def.MemMap. VT&. VT& PT&. PT&)) (has_type vpage! (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&))) (has_type (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! vpage!)) (TYPE%core!option.Option. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. PT&. PT&)))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! vpage!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::MemMap::is_valid")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_valid.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_valid.) (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly)) (! (= (verismo!arch.pgtable.memmap_s.impl&%0.is_valid.? VT&. VT& PT&. PT& self!) (forall ((page$ Poly)) (! (=> (has_type page$ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&)) (=> (and (verismo!arch.addr_s.page.impl&%3.is_valid.? VT&. VT& page$) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! page$))))))) (verismo!arch.addr_s.page.impl&%3.is_valid.? PT&. PT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! page$))))))) :pattern ((verismo!arch.addr_s.page.impl&%3.is_valid.? VT&. VT& page$))))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.is_valid.? VT&. VT& PT&. PT& self!))))))
(set-info :comment ";; Function-Specs verismo::arch::pgtable::def::MemMap::axiom_is_valid")
(declare-fun ens%verismo!arch.pgtable.memmap_s.impl&%0.axiom_is_valid. (Dcr Type Dcr Type verismo!arch.pgtable.def.MemMap.) Bool)
(assert (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! verismo!arch.pgtable.def.MemMap.)) (! (= (ens%verismo!arch.pgtable.memmap_s.impl&%0.axiom_is_valid. VT&. VT& PT&. PT& self!) (verismo!arch.pgtable.memmap_s.impl&%0.is_valid.? VT&. VT& PT&. PT& (Poly%verismo!arch.pgtable.def.MemMap. self!))) :pattern ((ens%verismo!arch.pgtable.memmap_s.impl&%0.axiom_is_valid. VT&. VT& PT&. PT& self!)))))
(set-info :comment ";; Broadcast verismo::arch::pgtable::def::MemMap::axiom_is_valid")
(assert (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.pgtable.def.MemMap. VT&. VT& PT&. PT&)) (=> (and (tr_bound%verismo!arch.addr_s.def_s.AddrType. VT&. VT&) (tr_bound%verismo!arch.addr_s.def_s.AddrType. PT&. PT&)) (verismo!arch.pgtable.memmap_s.impl&%0.is_valid.? VT&. VT& PT&. PT& self!))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.is_valid.? VT&. VT& PT&. PT& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::tlb::def_s::TLB::spec_db")
(assert (fuel_bool_default fuel%verismo!arch.tlb.def_s.impl&%2.spec_db.))
(assert (=> (fuel_bool fuel%verismo!arch.tlb.def_s.impl&%2.spec_db.) (forall ((self! Poly)) (! (= (verismo!arch.tlb.def_s.impl&%2.spec_db.? self!) (verismo!arch.tlb.def_s.TLB./TLB/db (%Poly%verismo!arch.tlb.def_s.TLB. self!))) :pattern ((verismo!arch.tlb.def_s.impl&%2.spec_db.? self!))))))
(set-info :comment ";; Function-Specs verismo::arch::tlb::def_s::TLB::axiom_spec_new")
(declare-fun ens%verismo!arch.tlb.def_s.impl&%1.axiom_spec_new. (verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.) Bool)
(assert (forall ((db! verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)) (! (= (ens%verismo!arch.tlb.def_s.impl&%1.axiom_spec_new. db!) (= (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.tlb.def_s.impl&%1.spec_new.? (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. db!)))) db!)) :pattern ((ens%verismo!arch.tlb.def_s.impl&%1.axiom_spec_new. db!)))))
(set-info :comment ";; Broadcast verismo::arch::tlb::def_s::TLB::axiom_spec_new")
(assert (forall ((db! Poly)) (! (=> (has_type db! (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) (= (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.tlb.def_s.impl&%1.spec_new.? db!))) (%Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. db!))) :pattern ((verismo!arch.tlb.def_s.impl&%1.spec_new.? db!)))))
(set-info :comment ";; Function-Axioms verismo::arch::vram::def::VRamDB::spec_sram")
(assert (fuel_bool_default fuel%verismo!arch.vram.def.impl&%2.spec_sram.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.def.impl&%2.spec_sram.) (forall ((self! Poly)) (! (= (verismo!arch.vram.def.impl&%2.spec_sram.? self!) (verismo!arch.vram.def.VRamDB./VRamDB/sram (%Poly%verismo!arch.vram.def.VRamDB. self!))) :pattern ((verismo!arch.vram.def.impl&%2.spec_sram.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::vram::def::VRamDB::spec_rmp")
(assert (fuel_bool_default fuel%verismo!arch.vram.def.impl&%2.spec_rmp.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.def.impl&%2.spec_rmp.) (forall ((self! Poly)) (! (= (verismo!arch.vram.def.impl&%2.spec_rmp.? self!) (verismo!arch.vram.def.VRamDB./VRamDB/rmp (%Poly%verismo!arch.vram.def.VRamDB. self!))) :pattern ((verismo!arch.vram.def.impl&%2.spec_rmp.? self!))))))
(set-info :comment ";; Function-Specs verismo::arch::vram::def::VRamDB::axiom_spec_new")
(declare-fun ens%verismo!arch.vram.def.impl&%1.axiom_spec_new. (verismo!arch.ramdb.def.RamDB. vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.) Bool)
(assert (forall ((sram! verismo!arch.ramdb.def.RamDB.) (rmp! vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.)) (! (= (ens%verismo!arch.vram.def.impl&%1.axiom_spec_new. sram! rmp!) (and (= (verismo!arch.vram.def.impl&%2.spec_sram.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.vram.def.impl&%1.spec_new.? (Poly%verismo!arch.ramdb.def.RamDB. sram!) (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. rmp!)))) sram!) (= (verismo!arch.vram.def.impl&%2.spec_rmp.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.vram.def.impl&%1.spec_new.? (Poly%verismo!arch.ramdb.def.RamDB. sram!) (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. rmp!)))) rmp!))) :pattern ((ens%verismo!arch.vram.def.impl&%1.axiom_spec_new. sram! rmp!)))))
(set-info :comment ";; Broadcast verismo::arch::vram::def::VRamDB::axiom_spec_new")
(assert (forall ((sram! Poly) (rmp! Poly)) (! (=> (and (has_type sram! TYPE%verismo!arch.ramdb.def.RamDB.) (has_type rmp! (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry.))) (and (= (verismo!arch.vram.def.impl&%2.spec_sram.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.vram.def.impl&%1.spec_new.? sram! rmp!))) (%Poly%verismo!arch.ramdb.def.RamDB. sram!)) (= (verismo!arch.vram.def.impl&%2.spec_rmp.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.vram.def.impl&%1.spec_new.? sram! rmp!))) (%Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. rmp!)))) :pattern ((verismo!arch.vram.def.impl&%1.spec_new.? sram! rmp!)))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::spec_ram")
(assert (fuel_bool_default fuel%verismo!arch.ptram.def_s.impl&%0.spec_ram.))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.def_s.impl&%0.spec_ram.) (forall ((self! Poly)) (! (= (verismo!arch.ptram.def_s.impl&%0.spec_ram.? self!) (verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam/ram (%Poly%verismo!arch.ptram.def_s.GuestPTRam. self!))) :pattern ((verismo!arch.ptram.def_s.impl&%0.spec_ram.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::spec_l0_entry")
(assert (fuel_bool_default fuel%verismo!arch.ptram.def_s.impl&%0.spec_l0_entry.))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.def_s.impl&%0.spec_l0_entry.) (forall ((self! Poly)) (! (= (verismo!arch.ptram.def_s.impl&%0.spec_l0_entry.? self!) (verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam/l0_entry (%Poly%verismo!arch.ptram.def_s.GuestPTRam. self!))) :pattern ((verismo!arch.ptram.def_s.impl&%0.spec_l0_entry.? self!))))))
(set-info :comment ";; Function-Specs verismo::arch::ptram::def_s::GuestPTRam::axiom_spec_new")
(declare-fun ens%verismo!arch.ptram.def_s.impl&%2.axiom_spec_new. (verismo!arch.vram.def.VRamDB. vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.) Bool)
(assert (forall ((ram! verismo!arch.vram.def.VRamDB.) (l0_entry! vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)) (! (= (ens%verismo!arch.ptram.def_s.impl&%2.axiom_spec_new. ram! l0_entry!) (and (= (verismo!arch.ptram.def_s.impl&%0.spec_ram.? (Poly%verismo!arch.ptram.def_s.GuestPTRam. (verismo!arch.ptram.def_s.impl&%2.spec_new.? (Poly%verismo!arch.vram.def.VRamDB. ram!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. l0_entry!)))) ram!) (= (verismo!arch.ptram.def_s.impl&%0.spec_l0_entry.? (Poly%verismo!arch.ptram.def_s.GuestPTRam. (verismo!arch.ptram.def_s.impl&%2.spec_new.? (Poly%verismo!arch.vram.def.VRamDB. ram!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. l0_entry!)))) l0_entry!))) :pattern ((ens%verismo!arch.ptram.def_s.impl&%2.axiom_spec_new. ram! l0_entry!)))))
(set-info :comment ";; Broadcast verismo::arch::ptram::def_s::GuestPTRam::axiom_spec_new")
(assert (forall ((ram! Poly) (l0_entry! Poly)) (! (=> (and (has_type ram! TYPE%verismo!arch.vram.def.VRamDB.) (has_type l0_entry! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) (and (= (verismo!arch.ptram.def_s.impl&%0.spec_ram.? (Poly%verismo!arch.ptram.def_s.GuestPTRam. (verismo!arch.ptram.def_s.impl&%2.spec_new.? ram! l0_entry!))) (%Poly%verismo!arch.vram.def.VRamDB. ram!)) (= (verismo!arch.ptram.def_s.impl&%0.spec_l0_entry.? (Poly%verismo!arch.ptram.def_s.GuestPTRam. (verismo!arch.ptram.def_s.impl&%2.spec_new.? ram! l0_entry!))) (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. l0_entry!)))) :pattern ((verismo!arch.ptram.def_s.impl&%2.spec_new.? ram! l0_entry!)))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::PTLevel::as_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%4.as_int.))
(define-fun is-verismo!arch.entities.memtype.PTLevel./L3_ ((c verismo!arch.entities.memtype.PTLevel.)) Bool ((_ is verismo!arch.entities.memtype.PTLevel./L3) c))
(define-fun is-verismo!arch.entities.memtype.PTLevel./L2_ ((c verismo!arch.entities.memtype.PTLevel.)) Bool ((_ is verismo!arch.entities.memtype.PTLevel./L2) c))
(define-fun is-verismo!arch.entities.memtype.PTLevel./L1_ ((c verismo!arch.entities.memtype.PTLevel.)) Bool ((_ is verismo!arch.entities.memtype.PTLevel./L1) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%4.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. self!) (I (let ((val$ (ite (is-verismo!arch.entities.memtype.PTLevel./L3_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) 0 (ite (is-verismo!arch.entities.memtype.PTLevel./L2_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) 1 (ite (is-verismo!arch.entities.memtype.PTLevel./L1_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) 2 3))))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::l0_entry")
(assert (fuel_bool_default fuel%verismo!arch.ptram.ptram_u.impl&%2.l0_entry.))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.ptram_u.impl&%2.l0_entry.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.ptram.ptram_u.impl&%2.l0_entry.? self! memid!) (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam/l0_entry (%Poly%verismo!arch.ptram.def_s.GuestPTRam. self!))) memid!))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.l0_entry.? self! memid!))))))
(assert (forall ((self! Poly) (memid! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.ptram.ptram_u.impl&%2.l0_entry.? self! memid!)) (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.l0_entry.? self! memid!)))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::PTLevel::parent_lvl")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%0.parent_lvl.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%0.parent_lvl.) (forall ((self! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%0.parent_lvl.? self!) (ite (is-verismo!arch.entities.memtype.PTLevel./L3_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) core!option.Option./None (ite (is-verismo!arch.entities.memtype.PTLevel./L2_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L3)) (ite (is-verismo!arch.entities.memtype.PTLevel./L1_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L2)) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L1)))))) :pattern ((verismo!arch.pgtable.entry_s.impl&%0.parent_lvl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.entities.memtype.PTLevel.) (has_type (Poly%core!option.Option. (verismo!arch.pgtable.entry_s.impl&%0.parent_lvl.? self!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.entities.memtype.PTLevel.))) :pattern ((verismo!arch.pgtable.entry_s.impl&%0.parent_lvl.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::L3_PGSIZE")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.L3_PGSIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.L3_PGSIZE.) (= verismo!arch.pgtable.def.L3_PGSIZE.? (uClip 64 (uintshl 64 (I 1) (I (uClip 64 39)))))))
(assert (uInv 64 verismo!arch.pgtable.def.L3_PGSIZE.?))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::L2_PGSIZE")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.L2_PGSIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.L2_PGSIZE.) (= verismo!arch.pgtable.def.L2_PGSIZE.? (uClip 64 (uintshl 64 (I 1) (I (uClip 64 30)))))))
(assert (uInv 64 verismo!arch.pgtable.def.L2_PGSIZE.?))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::L1_PGSIZE")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.L1_PGSIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.L1_PGSIZE.) (= verismo!arch.pgtable.def.L1_PGSIZE.? (uClip 64 (uintshl 64 (I 1) (I (uClip 64 21)))))))
(assert (uInv 64 verismo!arch.pgtable.def.L1_PGSIZE.?))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::L0_PGSIZE")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.L0_PGSIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.L0_PGSIZE.) (= verismo!arch.pgtable.def.L0_PGSIZE.? (uClip 64 (uintshl 64 (I 1) (I (uClip 64 12)))))))
(assert (uInv 64 verismo!arch.pgtable.def.L0_PGSIZE.?))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::PTLevel::spec_pgsize")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.) (forall ((self! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.? self!) (let ((val$ (ite (is-verismo!arch.entities.memtype.PTLevel./L3_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) verismo!arch.pgtable.def.L3_PGSIZE.? (ite (is-verismo!arch.entities.memtype.PTLevel./L2_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) verismo!arch.pgtable.def.L2_PGSIZE.? (ite (is-verismo!arch.entities.memtype.PTLevel./L1_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!)) verismo!arch.pgtable.def.L1_PGSIZE.? verismo!arch.pgtable.def.L0_PGSIZE.?))))) val$)) :pattern ((verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::PT_ENTRY_NUM")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.PT_ENTRY_NUM.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.PT_ENTRY_NUM.) (= verismo!arch.pgtable.def.PT_ENTRY_NUM.? (uClip 64 (uintshl 64 (I 1) (I (uClip 64 9)))))))
(assert (uInv 64 verismo!arch.pgtable.def.PT_ENTRY_NUM.?))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::PTLevel::spec_table_index")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vaddr! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.? T&. T& self! vaddr!) (EucMod (EucDiv (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) vaddr!)) (verismo!arch.pgtable.entry_s.impl&%0.spec_pgsize.? self!)) verismo!arch.pgtable.def.PT_ENTRY_NUM.?)) :pattern ((verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.? T&. T& self! vaddr!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!arch.addr_s.def_s.AddrType. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::PT_ENTRY_SIZE")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.PT_ENTRY_SIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.PT_ENTRY_SIZE.) (= verismo!arch.pgtable.def.PT_ENTRY_SIZE.? 8)))
(assert (uInv 64 verismo!arch.pgtable.def.PT_ENTRY_SIZE.?))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::spec_addr")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_addr.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.spec_addr.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.spec_addr.? T&. T& self!) (verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? T&. T& self!)))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.spec_addr.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.pgtable.entry_s.impl&%1.spec_addr.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.spec_addr.? T&. T& self!)))))
(set-info :comment ";; Function-Specs verismo::arch::pgtable::def::SpecPageTableEntry::addr_for_idx")
(declare-fun req%verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (idx! Poly)) (! (= (req%verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx. T&. T& self! idx!) (=> %%global_location_label%%48 (< (%I idx!) verismo!arch.pgtable.def.PT_ENTRY_NUM.?))) :pattern ((req%verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx. T&. T& self! idx!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::addr_for_idx")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.) (forall ((T&. Dcr) (T& Type) (self! Poly) (idx! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.? T&. T& self! idx!) (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (let ((offset$ (Mul (%I idx!) verismo!arch.pgtable.def.PT_ENTRY_SIZE.?))) (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) $ INT $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.pgtable.entry_s.impl&%1.spec_addr.? T&. T& self!)) (I offset$))))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.? T&. T& self! idx!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (idx! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (has_type idx! NAT)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.? T&. T& self! idx!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.? T&. T& self! idx!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def_e::PageTableEntry::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def_e.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def_e.impl&%3.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/value (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. self!)))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::GuestPhy::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%11.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%11.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::stream_to_data")
(assert (fuel_bool_default fuel%verismo!tspec.stream.stream_to_data.))
(declare-fun %%choose%%2 (Type Dcr Type Dcr Type Bool Type Poly Dcr Type Dcr Type) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Bool) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type)) (! (=> (exists ((ret$ Poly)) (! (and (has_type ret$ %%hole%%0) (ext_eq %%hole%%5 %%hole%%6 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 ret$) %%hole%%7)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 ret$)))) (exists ((ret$ Poly)) (! (and (and (has_type ret$ %%hole%%0) (ext_eq %%hole%%5 %%hole%%6 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 ret$) %%hole%%7)) (= (%%choose%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11) ret$)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 ret$))))) :pattern ((%%choose%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11)))))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.stream_to_data.) (forall ((T&. Dcr) (T& Type) (s! Poly)) (! (= (verismo!tspec.stream.stream_to_data.? T&. T& s!) (as_type (%%choose%%2 T& T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) true (TYPE%vstd!seq.Seq. $ (UINT 8)) s! T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) T&)) :pattern ((verismo!tspec.stream.stream_to_data.? T&. T& s!))))))
(assert (forall ((T&. Dcr) (T& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!seq.Seq. $ (UINT 8))) (has_type (verismo!tspec.stream.stream_to_data.? T&. T& s!) T&)) :pattern ((verismo!tspec.stream.stream_to_data.? T&. T& s!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!arch.addr_s.def_s.AddrType. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecMem::to_page")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.to_page.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.to_page.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.to_page.? T&. T& self!) (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!))))) :pattern ((verismo!arch.addr_s.page.impl&%8.to_page.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%8.to_page.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecMem::convert")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.convert.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.convert.) (forall ((T&. Dcr) (T& Type) (T2&. Dcr) (T2& Type) (self! Poly) (pn! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.convert.? T&. T& T2&. T2& self! pn!) (verismo!arch.addr_s.def_s.SpecMem./SpecMem (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T2&. T2&) $ INT $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T2&. T2&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%3.to_addr.? T2&. T2& pn!)) (I (verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!))))))) (%I (I (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!)))))) :pattern ((verismo!arch.addr_s.page.impl&%8.convert.? T&. T& T2&. T2& self! pn!))))))
(assert (forall ((T&. Dcr) (T& Type) (T2&. Dcr) (T2& Type) (self! Poly) (pn! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (has_type pn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T2&. T2&))) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%8.convert.? T&. T& T2&. T2& self! pn!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T2&. T2&))) :pattern ((verismo!arch.addr_s.page.impl&%8.convert.? T&. T& T2&. T2& self! pn!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::MemMap::translate_addr_seq")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.memmap_s.impl&%0.translate_addr_seq.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.memmap_s.impl&%0.translate_addr_seq.) (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (addrs! Poly)) (! (= (verismo!arch.pgtable.memmap_s.impl&%0.translate_addr_seq.? VT&. VT& PT&. PT& self! addrs!) (ite (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? VT&. VT& addrs!)))))))) (verismo!arch.addr_s.page.impl&%8.from_range.? PT&. PT& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.null.? PT&. PT&)) (I 0)) (verismo!arch.addr_s.page.impl&%8.convert.? VT&. VT& PT&. PT& addrs! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? VT&. VT& PT&. PT& self! (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? VT&. VT& addrs!))))))))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.translate_addr_seq.? VT&. VT& PT&. PT& self! addrs!))))))
(assert (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (addrs! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.pgtable.def.MemMap. VT&. VT& PT&. PT&)) (has_type addrs! (TYPE%verismo!arch.addr_s.def_s.SpecMem. VT&. VT&))) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.pgtable.memmap_s.impl&%0.translate_addr_seq.? VT&. VT& PT&. PT& self! addrs!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. PT&. PT&))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.translate_addr_seq.? VT&. VT& PT&. PT& self! addrs!)))))
(set-info :comment ";; Function-Axioms verismo::arch::crypto::SymKey::decrypt")
(assert (fuel_bool_default fuel%verismo!arch.crypto.encdec.impl&%1.decrypt.))
(assert (=> (fuel_bool fuel%verismo!arch.crypto.encdec.impl&%1.decrypt.) (forall ((K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (self! Poly) (cipher! Poly)) (! (= (verismo!arch.crypto.encdec.SpecEncrypt.decrypt.? $ (TYPE%verismo!arch.crypto.SymKey. K&. K&) T&. T& self! cipher!) (ite (= (verismo!arch.crypto.Encrypted./Encrypted/key (%Poly%verismo!arch.crypto.Encrypted. cipher!)) self!) (verismo!arch.crypto.Encrypted./Encrypted/data (%Poly%verismo!arch.crypto.Encrypted. cipher!)) (verismo!arch.crypto.Encrypted./Encrypted/crypto_mask (%Poly%verismo!arch.crypto.Encrypted. cipher!)))) :pattern ((verismo!arch.crypto.encdec.SpecEncrypt.decrypt.? $ (TYPE%verismo!arch.crypto.SymKey. K&. K&) T&. T& self! cipher!))))))
(set-info :comment ";; Function-Axioms verismo::arch::ramdb::ram_s::MEM_UNIT_SIZE")
(assert (fuel_bool_default fuel%verismo!arch.ramdb.ram_s.MEM_UNIT_SIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.ramdb.ram_s.MEM_UNIT_SIZE.) (= verismo!arch.ramdb.ram_s.MEM_UNIT_SIZE.? 16)))
(assert (uInv 64 verismo!arch.ramdb.ram_s.MEM_UNIT_SIZE.?))
(set-info :comment ";; Function-Axioms verismo::arch::ramdb::ram_s::idx2")
(assert (fuel_bool_default fuel%verismo!arch.ramdb.ram_s.idx2.))
(assert (=> (fuel_bool fuel%verismo!arch.ramdb.ram_s.idx2.) (forall ((spa_val! Poly)) (! (= (verismo!arch.ramdb.ram_s.idx2.? spa_val!) (EucDiv (%I spa_val!) verismo!arch.ramdb.ram_s.MEM_UNIT_SIZE.?)) :pattern ((verismo!arch.ramdb.ram_s.idx2.? spa_val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::ramdb::ram_s::idx")
(assert (fuel_bool_default fuel%verismo!arch.ramdb.ram_s.idx.))
(assert (=> (fuel_bool fuel%verismo!arch.ramdb.ram_s.idx.) (forall ((spa! Poly)) (! (= (verismo!arch.ramdb.ram_s.idx.? spa!) (verismo!arch.ramdb.ram_s.idx2.? (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) spa!))) :pattern ((verismo!arch.ramdb.ram_s.idx.? spa!))))))
(set-info :comment ";; Function-Axioms verismo::arch::ramdb::def::RamDB::read_one_byte")
(assert (fuel_bool_default fuel%verismo!arch.ramdb.ram_s.impl&%0.read_one_byte.))
(assert (=> (fuel_bool fuel%verismo!arch.ramdb.ram_s.impl&%0.read_one_byte.) (forall ((self! Poly) (asid! Poly) (spa! Poly)) (! (= (verismo!arch.ramdb.ram_s.impl&%0.read_one_byte.? self! asid! spa!) (%I (verismo!arch.crypto.encdec.SpecEncrypt.decrypt.? $ (TYPE%verismo!arch.crypto.SymKey. $ (TYPE%tuple%2. $ NAT $ INT)) $ (UINT 8) (Poly%verismo!arch.crypto.SymKey. (verismo!arch.crypto.SymKey./SymKey (Poly%tuple%2. (tuple%2./tuple%2 asid! (I (verismo!arch.ramdb.ram_s.idx.? spa!)))))) (vstd!seq.Seq.index.? $ (TYPE%verismo!arch.crypto.Encrypted. $ (TYPE%verismo!arch.crypto.SymKey. $ (TYPE%tuple%2. $ NAT $ INT)) $ (UINT 8)) (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. (verismo!arch.ramdb.def.RamDB./RamDB/data (%Poly%verismo!arch.ramdb.def.RamDB. self!))) (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) spa!))))) :pattern ((verismo!arch.ramdb.ram_s.impl&%0.read_one_byte.? self! asid! spa!))))))
(assert (forall ((self! Poly) (asid! Poly) (spa! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.ramdb.def.RamDB.) (has_type asid! NAT) (has_type spa! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) (uInv 8 (verismo!arch.ramdb.ram_s.impl&%0.read_one_byte.? self! asid! spa!))) :pattern ((verismo!arch.ramdb.ram_s.impl&%0.read_one_byte.? self! asid! spa!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecMem::spec_index")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.spec_index.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.spec_index.) (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.spec_index.? T&. T& self! i!) (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) $ INT $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!))) i!))) :pattern ((verismo!arch.addr_s.page.impl&%8.spec_index.? T&. T& self! i!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (has_type i! INT)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%8.spec_index.? T&. T& self! i!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%8.spec_index.? T&. T& self! i!)))))
(set-info :comment ";; Function-Axioms verismo::arch::ramdb::def::RamDB::read_bytes_by_asid")
(assert (fuel_bool_default fuel%verismo!arch.ramdb.ram_s.impl&%0.read_bytes_by_asid.))
(declare-fun %%lambda%%18 (Dcr Type Dcr Type Dcr Type Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (%%hole%%7 Poly) (%%hole%%8 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%18 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) i$) (I (verismo!arch.ramdb.ram_s.impl&%0.read_one_byte.? %%hole%%7 %%hole%%8 (Poly%verismo!arch.addr_s.def_s.SpecAddr. (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!tspec.ops.VSpecAdd.spec_add.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 i$)))))) :pattern ((%%apply%%0 (%%lambda%%18 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8) i$)))))
(assert (=> (fuel_bool fuel%verismo!arch.ramdb.ram_s.impl&%0.read_bytes_by_asid.) (forall ((self! Poly) (asid! Poly) (spmem! Poly)) (! (= (verismo!arch.ramdb.ram_s.impl&%0.read_bytes_by_asid.? self! asid! spmem!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (verismo!arch.addr_s.page.impl&%8.len.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. spmem!)) (Poly%fun%1. (mk_fun (%%lambda%%18 $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ INT $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. spmem!))) self! asid!)))))) :pattern ((verismo!arch.ramdb.ram_s.impl&%0.read_bytes_by_asid.? self! asid! spmem!))))))
(set-info :comment ";; Function-Axioms verismo::arch::vram::def::VRamDB::get_bytes")
(assert (fuel_bool_default fuel%verismo!arch.vram.vram_s.impl&%2.get_bytes.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.vram_s.impl&%2.get_bytes.) (forall ((self! Poly) (gpmem_id! Poly) (enc! Poly) (sysmap! Poly)) (! (= (verismo!arch.vram.vram_s.impl&%2.get_bytes.? self! gpmem_id! enc! sysmap!) (let ((spmem$ (verismo!arch.pgtable.memmap_s.impl&%0.translate_addr_seq.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy. sysmap! (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. gpmem_id!)))))) (let ((use_asid$ (ite (%B enc!) (verismo!arch.entities.memid.impl&%3.to_asid.? (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. gpmem_id!)))) 0))) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (verismo!arch.addr_s.page.impl&%8.len.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. spmem$))) (Poly%fun%1. (mk_fun (%%lambda%%18 $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ INT $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. spmem$)))) (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.vram.def.VRamDB./VRamDB/sram (%Poly%verismo!arch.vram.def.VRamDB. self!))) (I use_asid$))))))))) :pattern ((verismo!arch.vram.vram_s.impl&%2.get_bytes.? self! gpmem_id! enc! sysmap!))))))
(set-info :comment ";; Function-Axioms verismo::arch::vram::def::VRamDB::get")
(assert (fuel_bool_default fuel%verismo!arch.vram.vram_s.impl&%2.get.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.vram_s.impl&%2.get.) (forall ((T&. Dcr) (T& Type) (self! Poly) (gpmem_id! Poly) (enc! Poly) (sysmap! Poly)) (! (= (verismo!arch.vram.vram_s.impl&%2.get.? T&. T& self! gpmem_id! enc! sysmap!) (verismo!tspec.stream.stream_to_data.? T&. T& (Poly%vstd!seq.Seq<u8.>. (verismo!arch.vram.vram_s.impl&%2.get_bytes.? self! gpmem_id! enc! sysmap!)))) :pattern ((verismo!arch.vram.vram_s.impl&%2.get.? T&. T& self! gpmem_id! enc! sysmap!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (gpmem_id! Poly) (enc! Poly) (sysmap! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.vram.def.VRamDB.) (has_type gpmem_id! (TYPE%verismo!arch.entities.params.AddrMemID. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type enc! BOOL) (has_type sysmap! (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) (has_type (verismo!arch.vram.vram_s.impl&%2.get.? T&. T& self! gpmem_id! enc! sysmap!) T&)) :pattern ((verismo!arch.vram.vram_s.impl&%2.get.? T&. T& self! gpmem_id! enc! sysmap!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%47::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%47.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%47.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def_e::PageTableEntry::view")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def_e.impl&%7.view.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def_e.impl&%7.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.pgtable.def_e.impl&%7.view.? T&. T& self!) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/value (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. self!)))))))) (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/dummy (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. self!)))) :pattern ((verismo!arch.pgtable.def_e.impl&%7.view.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&)) (has_type (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def_e.impl&%7.view.? T&. T& self!)) (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))) :pattern ((verismo!arch.pgtable.def_e.impl&%7.view.? T&. T& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::hw_read_pte")
(assert (fuel_bool_default fuel%verismo!arch.ptram.ptram_s.impl&%0.hw_read_pte.))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.ptram_s.impl&%0.hw_read_pte.) (forall ((self! Poly) (memid! Poly) (sysmap! Poly) (gpa! Poly)) (! (= (verismo!arch.ptram.ptram_s.impl&%0.hw_read_pte.? self! memid! sysmap! gpa!) (let ((val$ (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. (verismo!arch.vram.vram_s.impl&%2.get.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.ptram.def_s.GuestPTRam./GuestPTRam/ram (%Poly%verismo!arch.ptram.def_s.GuestPTRam. self!))) (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.entities.params.AddrMemID./AddrMemID (%Poly%verismo!arch.addr_s.def_s.SpecMem. gpa!) (%Poly%verismo!arch.entities.memid.MemID. memid!))) (B true) sysmap!)))) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def_e.impl&%7.view.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def_e.PageTableEntry. val$)))))) :pattern ((verismo!arch.ptram.ptram_s.impl&%0.hw_read_pte.? self! memid! sysmap! gpa!))))))
(assert (forall ((self! Poly) (memid! Poly) (sysmap! Poly) (gpa! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type sysmap! (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)) (has_type gpa! (TYPE%verismo!arch.addr_s.def_s.SpecMem. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (has_type (Poly%core!option.Option. (verismo!arch.ptram.ptram_s.impl&%0.hw_read_pte.? self! memid! sysmap! gpa!)) (TYPE%core!option.Option. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) :pattern ((verismo!arch.ptram.ptram_s.impl&%0.hw_read_pte.? self! memid! sysmap! gpa!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::ResultOrErr::is_Ok")
(assert (fuel_bool_default fuel%verismo!tspec.impl&%0.is_Ok.))
(assert (=> (fuel_bool fuel%verismo!tspec.impl&%0.is_Ok.) (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (self! Poly)) (! (= (verismo!tspec.impl&%0.is_Ok.? RetValue&. RetValue& ErrorID&. ErrorID& self!) (is-verismo!tspec.ResultOrErr./Ok_ (%Poly%verismo!tspec.ResultOrErr. self!))) :pattern ((verismo!tspec.impl&%0.is_Ok.? RetValue&. RetValue& ErrorID&. ErrorID& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::HiddenRmpEntryForPSP::check_vmpl")
(assert (fuel_bool_default fuel%verismo!arch.rmp.entry_s.impl&%0.check_vmpl.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.entry_s.impl&%0.check_vmpl.) (forall ((self! Poly) (vmpl! Poly) (p! Poly)) (! (= (verismo!arch.rmp.entry_s.impl&%0.check_vmpl.? self! vmpl! p!) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)) vmpl!))) p!)) :pattern ((verismo!arch.rmp.entry_s.impl&%0.check_vmpl.? self! vmpl! p!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpEntry::check_access")
(assert (forall ((self! Poly) (memid! Poly) (enc! Poly) (gpmem! Poly) (perm! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type enc! BOOL) (has_type gpmem! (TYPE%verismo!arch.addr_s.def_s.SpecMem. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type perm! TYPE%verismo!arch.rmp.perm_s.Perm.)) (has_type (Poly%verismo!tspec.ResultOrErr. (verismo!arch.rmp.access_s.impl&%0.check_access.? self! memid! enc! gpmem! perm!)) (TYPE%verismo!tspec.ResultOrErr. $ TYPE%verismo!arch.rmp.def_s.RmpEntry. $ (TYPE%verismo!arch.errors.MemError. $ TYPE%tuple%0.)))) :pattern ((verismo!arch.rmp.access_s.impl&%0.check_access.? self! memid! enc! gpmem! perm!)))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::db_s::rmp_check_access")
(assert (fuel_bool_default fuel%verismo!arch.rmp.db_s.rmp_check_access.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.db_s.rmp_check_access.) (forall ((rmp! Poly) (memid! Poly) (enc! Poly) (gpmem! Poly) (perm! Poly) (spn! Poly)) (! (= (verismo!arch.rmp.db_s.rmp_check_access.? rmp! memid! enc! gpmem! perm! spn!) (let ((rmpentry$ (%Poly%verismo!arch.rmp.def_s.RmpEntry. (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn!)))) (ite (not (vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp!) spn!)) (verismo!tspec.ResultOrErr./Error (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NestedPF (Poly%tuple%0. tuple%0./tuple%0)))) (verismo!arch.rmp.access_s.impl&%0.check_access.? (Poly%verismo!arch.rmp.def_s.RmpEntry. rmpentry$) memid! enc! gpmem! perm!)))) :pattern ((verismo!arch.rmp.db_s.rmp_check_access.? rmp! memid! enc! gpmem! perm! spn!))))))
(assert (forall ((rmp! Poly) (memid! Poly) (enc! Poly) (gpmem! Poly) (perm! Poly) (spn! Poly)) (! (=> (and (has_type rmp! (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry.)) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type enc! BOOL) (has_type gpmem! (TYPE%verismo!arch.addr_s.def_s.SpecMem. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type perm! TYPE%verismo!arch.rmp.perm_s.Perm.) (has_type spn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) (has_type (Poly%verismo!tspec.ResultOrErr. (verismo!arch.rmp.db_s.rmp_check_access.? rmp! memid! enc! gpmem! perm! spn!)) (TYPE%verismo!tspec.ResultOrErr. $ TYPE%verismo!arch.rmp.def_s.RmpEntry. $ (TYPE%verismo!arch.errors.MemError. $ TYPE%tuple%0.)))) :pattern ((verismo!arch.rmp.db_s.rmp_check_access.? rmp! memid! enc! gpmem! perm! spn!)))))
(set-info :comment ";; Function-Specs verismo::arch::vram::def::VRamDB::read_bytes")
(declare-fun req%verismo!arch.vram.vram_s.impl&%2.read_bytes. (Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((self! Poly) (gpmem_id! Poly) (enc! Poly) (sysmap! Poly)) (! (= (req%verismo!arch.vram.vram_s.impl&%2.read_bytes. self! gpmem_id! enc! sysmap!) (=> %%global_location_label%%49 (is-verismo!arch.entities.memid.MemID./Guest_ (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. gpmem_id!))))))) :pattern ((req%verismo!arch.vram.vram_s.impl&%2.read_bytes. self! gpmem_id! enc! sysmap!)))))
(set-info :comment ";; Function-Axioms verismo::arch::vram::def::VRamDB::read_bytes")
(assert (fuel_bool_default fuel%verismo!arch.vram.vram_s.impl&%2.read_bytes.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.vram_s.impl&%2.read_bytes.) (forall ((self! Poly) (gpmem_id! Poly) (enc! Poly) (sysmap! Poly)) (! (= (verismo!arch.vram.vram_s.impl&%2.read_bytes.? self! gpmem_id! enc! sysmap!) (let ((op$ tuple%0./tuple%0)) (let ((gpa$ (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. gpmem_id!)))) (let ((memid$ (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. gpmem_id!)))) (let ((rmp$ (verismo!arch.vram.def.VRamDB./VRamDB/rmp (%Poly%verismo!arch.vram.def.VRamDB. self!)))) (let ((asid$ (verismo!arch.entities.memid.impl&%3.to_asid.? (Poly%verismo!arch.entities.memid.MemID. memid$)))) (let ((spn$ (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy. sysmap! (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. gpa$)))))) (let ((use_asid$ (ite (%B enc!) asid$ 0))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. spn$))))) (let ((rmpcheck$ (verismo!arch.rmp.db_s.rmp_check_access.? (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. rmp$) (Poly%verismo!arch.entities.memid.MemID. memid$) enc! (Poly%verismo!arch.addr_s.def_s.SpecMem. gpa$) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Read) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. spn$)))))) (ite (is-verismo!tspec.ResultOrErr./Ok_ (%Poly%verismo!tspec.ResultOrErr. (Poly%verismo!tspec.ResultOrErr. rmpcheck$))) (let ((data$ (verismo!arch.vram.vram_s.impl&%2.get_bytes.? self! gpmem_id! enc! sysmap!))) (verismo!tspec.ResultOrErr./Ok (Poly%vstd!seq.Seq<u8.>. data$))) (verismo!tspec.ResultOrErr./Error (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NestedPF (Poly%tuple%0. op$)))))) (verismo!tspec.ResultOrErr./Error (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NestedPF (Poly%tuple%0. op$))))))))))))) :pattern ((verismo!arch.vram.vram_s.impl&%2.read_bytes.? self! gpmem_id! enc! sysmap!))))))
(assert (forall ((self! Poly) (gpmem_id! Poly) (enc! Poly) (sysmap! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.vram.def.VRamDB.) (has_type gpmem_id! (TYPE%verismo!arch.entities.params.AddrMemID. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type enc! BOOL) (has_type sysmap! (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) (has_type (Poly%verismo!tspec.ResultOrErr. (verismo!arch.vram.vram_s.impl&%2.read_bytes.? self! gpmem_id! enc! sysmap!)) (TYPE%verismo!tspec.ResultOrErr. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%verismo!arch.errors.MemError. $ TYPE%tuple%0.)))) :pattern ((verismo!arch.vram.vram_s.impl&%2.read_bytes.? self! gpmem_id! enc! sysmap!)))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::valid_access")
(assert (fuel_bool_default fuel%verismo!arch.ptram.ptram_u.impl&%2.valid_access.))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.ptram_u.impl&%2.valid_access.) (forall ((self! Poly) (memid! Poly) (gpa! Poly) (sysmap! Poly)) (! (= (verismo!arch.ptram.ptram_u.impl&%2.valid_access.? self! memid! gpa! sysmap!) (is-verismo!tspec.ResultOrErr./Ok_ (%Poly%verismo!tspec.ResultOrErr. (Poly%verismo!tspec.ResultOrErr. (verismo!arch.vram.vram_s.impl&%2.read_bytes.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.ptram.def_s.impl&%0.spec_ram.? self!)) (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.entities.params.AddrMemID./AddrMemID (%Poly%verismo!arch.addr_s.def_s.SpecMem. gpa!) (%Poly%verismo!arch.entities.memid.MemID. memid!))) (B true) sysmap!))))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.valid_access.? self! memid! gpa! sysmap!))))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::pgtb_walk_addrs_recursive")
(assert (forall ((self! Poly) (sysmap! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (has_type sysmap! (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type gvn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (has_type lvl! TYPE%verismo!arch.entities.memtype.PTLevel.)) (has_type (Poly%core!option.Option. (verismo!arch.ptram.ptram_s.impl&%0.pgtb_walk_addrs_recursive.? self! sysmap! memid! gvn! lvl!)) (TYPE%core!option.Option. $ (TYPE%verismo!arch.addr_s.def_s.SpecMem. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) :pattern ((verismo!arch.ptram.ptram_s.impl&%0.pgtb_walk_addrs_recursive.? self! sysmap! memid! gvn! lvl!)))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::map_entry_gpa")
(assert (fuel_bool_default fuel%verismo!arch.ptram.ptram_s.impl&%0.map_entry_gpa.))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.ptram_s.impl&%0.map_entry_gpa.) (forall ((self! Poly) (sysmap! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly)) (! (= (verismo!arch.ptram.ptram_s.impl&%0.map_entry_gpa.? self! sysmap! memid! gvn! lvl!) (verismo!arch.ptram.ptram_s.impl&%0.pgtb_walk_addrs_recursive.? self! sysmap! memid! gvn! lvl!)) :pattern ((verismo!arch.ptram.ptram_s.impl&%0.map_entry_gpa.? self! sysmap! memid! gvn! lvl!))))))
(assert (forall ((self! Poly) (sysmap! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (has_type sysmap! (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type gvn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (has_type lvl! TYPE%verismo!arch.entities.memtype.PTLevel.)) (has_type (Poly%core!option.Option. (verismo!arch.ptram.ptram_s.impl&%0.map_entry_gpa.? self! sysmap! memid! gvn! lvl!)) (TYPE%core!option.Option. $ (TYPE%verismo!arch.addr_s.def_s.SpecMem. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) :pattern ((verismo!arch.ptram.ptram_s.impl&%0.map_entry_gpa.? self! sysmap! memid! gvn! lvl!)))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::db_u::rmp_reverse")
(assert (fuel_bool_default fuel%verismo!arch.rmp.db_u.rmp_reverse.))
(declare-fun %%choose%%3 (Type Dcr Type Dcr Type Poly verismo!arch.addr_s.def_s.SpecPage. Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Int Dcr Type Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 verismo!arch.addr_s.def_s.SpecPage.) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Poly) (%%hole%%15 Dcr) (%%hole%%16 Type) (%%hole%%17 Dcr) (%%hole%%18 Type) (%%hole%%19 Poly) (%%hole%%20 Int) (%%hole%%21 Dcr) (%%hole%%22 Type) (%%hole%%23 Dcr) (%%hole%%24 Type) (%%hole%%25 Poly)) (! (=> (exists ((spn$ Poly)) (! (and (has_type spn$ %%hole%%0) (and (and (and (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 spn$)))) %%hole%%6) (vstd!set.impl&%0.contains.? %%hole%%7 %%hole%%8 %%hole%%9 spn$)) (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 spn$))))) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 spn$)))) %%hole%%20))) :pattern ((vstd!map.impl&%0.index.? %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 spn$)))) (exists ((spn$ Poly)) (! (and (and (has_type spn$ %%hole%%0) (and (and (and (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 spn$)))) %%hole%%6) (vstd!set.impl&%0.contains.? %%hole%%7 %%hole%%8 %%hole%%9 spn$)) (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 spn$))))) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 spn$)))) %%hole%%20))) (= (%%choose%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25) spn$)) :pattern ((vstd!map.impl&%0.index.? %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 spn$))))) :pattern ((%%choose%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25)))))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.db_u.rmp_reverse.) (forall ((rmp! Poly) (memid! Poly) (gpn! Poly)) (! (= (verismo!arch.rmp.db_u.rmp_reverse.? rmp! memid! gpn!) (%Poly%verismo!arch.addr_s.def_s.SpecPage. (as_type (%%choose%%3 (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! (%Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp!) $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! (verismo!arch.entities.memid.impl&%3.to_asid.? memid!) $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)))) :pattern ((verismo!arch.rmp.db_u.rmp_reverse.? rmp! memid! gpn!))))))
(assert (forall ((rmp! Poly) (memid! Poly) (gpn! Poly)) (! (=> (and (has_type rmp! (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry.)) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type gpn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.db_u.rmp_reverse.? rmp! memid! gpn!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) :pattern ((verismo!arch.rmp.db_u.rmp_reverse.? rmp! memid! gpn!)))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::db_u::rmp_reverse_mem")
(assert (fuel_bool_default fuel%verismo!arch.rmp.db_u.rmp_reverse_mem.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.db_u.rmp_reverse_mem.) (forall ((rmp! Poly) (memid! Poly) (gpmem! Poly)) (! (= (verismo!arch.rmp.db_u.rmp_reverse_mem.? rmp! memid! gpmem!) (let ((spn$ (verismo!arch.rmp.db_u.rmp_reverse.? rmp! memid! (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. gpmem!))))) (verismo!arch.addr_s.page.impl&%8.convert.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy. gpmem! (Poly%verismo!arch.addr_s.def_s.SpecPage. spn$)))) :pattern ((verismo!arch.rmp.db_u.rmp_reverse_mem.? rmp! memid! gpmem!))))))
(assert (forall ((rmp! Poly) (memid! Poly) (gpmem! Poly)) (! (=> (and (has_type rmp! (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry.)) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type gpmem! (TYPE%verismo!arch.addr_s.def_s.SpecMem. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.rmp.db_u.rmp_reverse_mem.? rmp! memid! gpmem!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) :pattern ((verismo!arch.rmp.db_u.rmp_reverse_mem.? rmp! memid! gpmem!)))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::db_u::rmp_has_gpn_memid")
(assert (fuel_bool_default fuel%verismo!arch.rmp.db_u.rmp_has_gpn_memid.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.db_u.rmp_has_gpn_memid.) (forall ((rmp! Poly) (gpn! Poly) (memid! Poly)) (! (= (verismo!arch.rmp.db_u.rmp_has_gpn_memid.? rmp! gpn! memid!) (exists ((spn$ Poly)) (! (and (has_type spn$ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)) (and (and (and (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$)))) (%Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!)) (vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp!) spn$)) (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$))))) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$)))) (verismo!arch.entities.memid.impl&%3.to_asid.? memid!)))) :pattern ((vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$))))) :pattern ((verismo!arch.rmp.db_u.rmp_has_gpn_memid.? rmp! gpn! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::vram::def::VRamDB::get_enc_bytes_ok")
(assert (fuel_bool_default fuel%verismo!arch.vram.vram_s.impl&%2.get_enc_bytes_ok.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.vram_s.impl&%2.get_enc_bytes_ok.) (forall ((self! Poly) (gpmem_id! Poly)) (! (= (verismo!arch.vram.vram_s.impl&%2.get_enc_bytes_ok.? self! gpmem_id!) (let ((gpmem$ (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. gpmem_id!)))) (let ((spa$ (let ((spn$$0 (verismo!arch.rmp.db_u.rmp_reverse.? (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. (verismo!arch.vram.def.impl&%2.spec_rmp.? self!)) (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. gpmem_id!))) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. gpmem$)))))) (verismo!arch.addr_s.page.impl&%8.convert.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. gpmem$) (Poly%verismo!arch.addr_s.def_s.SpecPage. spn$$0))))) (let ((ret$ (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I (verismo!arch.addr_s.page.impl&%8.len.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. spa$))) (Poly%fun%1. (mk_fun (%%lambda%%18 $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ INT $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. spa$)))) (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.vram.def.VRamDB./VRamDB/sram (%Poly%verismo!arch.vram.def.VRamDB. self!))) (I (verismo!arch.entities.memid.impl&%3.to_asid.? (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. gpmem_id!)))))))))))) (ite (verismo!arch.rmp.db_u.rmp_has_gpn_memid.? (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. (verismo!arch.vram.def.impl&%2.spec_rmp.? self!)) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. gpmem$))) (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. gpmem_id!)))) (core!option.Option./Some (Poly%vstd!seq.Seq<u8.>. ret$)) core!option.Option./None))))) :pattern ((verismo!arch.vram.vram_s.impl&%2.get_enc_bytes_ok.? self! gpmem_id!))))))
(assert (forall ((self! Poly) (gpmem_id! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.vram.def.VRamDB.) (has_type gpmem_id! (TYPE%verismo!arch.entities.params.AddrMemID. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (has_type (Poly%core!option.Option. (verismo!arch.vram.vram_s.impl&%2.get_enc_bytes_ok.? self! gpmem_id!)) (TYPE%core!option.Option. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))) :pattern ((verismo!arch.vram.vram_s.impl&%2.get_enc_bytes_ok.? self! gpmem_id!)))))
(set-info :comment ";; Function-Axioms verismo::arch::vram::def::VRamDB::get_enc_data_ok")
(assert (fuel_bool_default fuel%verismo!arch.vram.vram_s.impl&%2.get_enc_data_ok.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.vram_s.impl&%2.get_enc_data_ok.) (forall ((T&. Dcr) (T& Type) (self! Poly) (gpmem_id! Poly)) (! (= (verismo!arch.vram.vram_s.impl&%2.get_enc_data_ok.? T&. T& self! gpmem_id!) (let ((bytes$ (verismo!arch.vram.vram_s.impl&%2.get_enc_bytes_ok.? self! gpmem_id!))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. bytes$))))) (core!option.Option./Some (verismo!tspec.stream.stream_to_data.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. bytes$))))) core!option.Option./None))) :pattern ((verismo!arch.vram.vram_s.impl&%2.get_enc_data_ok.? T&. T& self! gpmem_id!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (gpmem_id! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.vram.def.VRamDB.) (has_type gpmem_id! (TYPE%verismo!arch.entities.params.AddrMemID. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (has_type (Poly%core!option.Option. (verismo!arch.vram.vram_s.impl&%2.get_enc_data_ok.? T&. T& self! gpmem_id!)) (TYPE%core!option.Option. T&. T&))) :pattern ((verismo!arch.vram.vram_s.impl&%2.get_enc_data_ok.? T&. T& self! gpmem_id!)))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::pgtb_walk_addrs_recursive_ok")
(assert (fuel_bool_default fuel%verismo!arch.ptram.ptram_u.impl&%2.pgtb_walk_addrs_recursive_ok.))
(declare-const fuel_nat%verismo!arch.ptram.ptram_u.impl&%2.pgtb_walk_addrs_recursive_ok. Fuel)
(assert (forall ((self! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly) (fuel% Fuel)) (! (= (verismo!arch.ptram.ptram_u.impl&%2.rec%pgtb_walk_addrs_recursive_ok.? self! memid! gvn! lvl! fuel%) (verismo!arch.ptram.ptram_u.impl&%2.rec%pgtb_walk_addrs_recursive_ok.? self! memid! gvn! lvl! zero)) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.rec%pgtb_walk_addrs_recursive_ok.? self! memid! gvn! lvl! fuel%)))))
(assert (forall ((self! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly) (fuel% Fuel)) (! (=> (and (has_type self! TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type gvn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (has_type lvl! TYPE%verismo!arch.entities.memtype.PTLevel.)) (= (verismo!arch.ptram.ptram_u.impl&%2.rec%pgtb_walk_addrs_recursive_ok.? self! memid! gvn! lvl! (succ fuel%)) (let ((vram$ (verismo!arch.ptram.def_s.impl&%0.spec_ram.? self!))) (let ((rmp$ (verismo!arch.vram.def.impl&%2.spec_rmp.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.ptram.def_s.impl&%0.spec_ram.? self!))))) (let ((sram$ (verismo!arch.vram.def.impl&%2.spec_sram.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.ptram.def_s.impl&%0.spec_ram.? self!))))) (let ((l0_entry$ (verismo!arch.ptram.ptram_u.impl&%2.l0_entry.? self! memid!))) (let ((next_opt$ (ite (is-verismo!arch.entities.memtype.PTLevel./L3_ (%Poly%verismo!arch.entities.memtype.PTLevel. lvl!)) core!option.Option./None (ite (is-verismo!arch.entities.memtype.PTLevel./L2_ (%Poly%verismo!arch.entities.memtype.PTLevel. lvl!)) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L3)) (ite (is-verismo!arch.entities.memtype.PTLevel./L1_ (%Poly%verismo!arch.entities.memtype.PTLevel. lvl!)) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L2)) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L1))))))) (let ((idx$ (nClip (verismo!arch.pgtable.entry_s.impl&%0.spec_table_index.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. lvl! (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%3.to_addr.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. gvn!)))))) (ite (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. next_opt$))))) (core!option.Option./Some (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%8.from_range.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. l0_entry$) (I idx$))) (I verismo!arch.pgtable.def.PT_ENTRY_SIZE.?)))) (let ((next_lvl$ (%Poly%verismo!arch.entities.memtype.PTLevel. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. next_opt$)))))) (ite (< (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. (Poly%verismo!arch.entities.memtype.PTLevel. next_lvl$))) (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. lvl!))) (let ((next_pte_addrs$ (verismo!arch.ptram.ptram_u.impl&%2.rec%pgtb_walk_addrs_recursive_ok.? self! memid! gvn! (Poly%verismo!arch.entities.memtype.PTLevel. next_lvl$) fuel%))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. next_pte_addrs$))))) (let ((next_pte_gpmem$ (%Poly%verismo!arch.addr_s.def_s.SpecMem. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. next_pte_addrs$)))))) (let ((next_pte$ (verismo!arch.vram.vram_s.impl&%2.get_enc_data_ok.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (Poly%verismo!arch.vram.def.VRamDB. vram$) (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.entities.params.AddrMemID./AddrMemID (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. next_pte_gpmem$)) (%Poly%verismo!arch.entities.memid.MemID. memid!)))))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. next_pte$))))) (let ((next_pte$1 (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. next_pte$)))))) (core!option.Option./Some (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%8.from_range.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.pgtable.entry_s.impl&%1.addr_for_idx.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def_e.impl&%7.view.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def_e.PageTableEntry. next_pte$1))) (I idx$))) (I verismo!arch.pgtable.def.PT_ENTRY_SIZE.?))))) core!option.Option./None))) core!option.Option./None)) core!option.Option./None))))))))))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.rec%pgtb_walk_addrs_recursive_ok.? self! memid! gvn! lvl! (succ fuel%))))))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.ptram_u.impl&%2.pgtb_walk_addrs_recursive_ok.) (forall ((self! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type gvn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (has_type lvl! TYPE%verismo!arch.entities.memtype.PTLevel.)) (= (verismo!arch.ptram.ptram_u.impl&%2.pgtb_walk_addrs_recursive_ok.? self! memid! gvn! lvl!) (verismo!arch.ptram.ptram_u.impl&%2.rec%pgtb_walk_addrs_recursive_ok.? self! memid! gvn! lvl! (succ fuel_nat%verismo!arch.ptram.ptram_u.impl&%2.pgtb_walk_addrs_recursive_ok.)))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.pgtb_walk_addrs_recursive_ok.? self! memid! gvn! lvl!))))))
(assert (forall ((self! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type gvn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (has_type lvl! TYPE%verismo!arch.entities.memtype.PTLevel.)) (has_type (Poly%core!option.Option. (verismo!arch.ptram.ptram_u.impl&%2.pgtb_walk_addrs_recursive_ok.? self! memid! gvn! lvl!)) (TYPE%core!option.Option. $ (TYPE%verismo!arch.addr_s.def_s.SpecMem. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.pgtb_walk_addrs_recursive_ok.? self! memid! gvn! lvl!)))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::map_entry_gpa_ok")
(assert (fuel_bool_default fuel%verismo!arch.ptram.ptram_u.impl&%2.map_entry_gpa_ok.))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.ptram_u.impl&%2.map_entry_gpa_ok.) (forall ((self! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly)) (! (= (verismo!arch.ptram.ptram_u.impl&%2.map_entry_gpa_ok.? self! memid! gvn! lvl!) (verismo!arch.ptram.ptram_u.impl&%2.pgtb_walk_addrs_recursive_ok.? self! memid! gvn! lvl!)) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.map_entry_gpa_ok.? self! memid! gvn! lvl!))))))
(assert (forall ((self! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type gvn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (has_type lvl! TYPE%verismo!arch.entities.memtype.PTLevel.)) (has_type (Poly%core!option.Option. (verismo!arch.ptram.ptram_u.impl&%2.map_entry_gpa_ok.? self! memid! gvn! lvl!)) (TYPE%core!option.Option. $ (TYPE%verismo!arch.addr_s.def_s.SpecMem. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.map_entry_gpa_ok.? self! memid! gvn! lvl!)))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::spec_vram")
(assert (fuel_bool_default fuel%verismo!arch.mem.def_s.impl&%0.spec_vram.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.def_s.impl&%0.spec_vram.) (forall ((self! Poly)) (! (= (verismo!arch.mem.def_s.impl&%0.spec_vram.? self!) (verismo!arch.mem.def_s.MemDB./MemDB/vram (%Poly%verismo!arch.mem.def_s.MemDB. self!))) :pattern ((verismo!arch.mem.def_s.impl&%0.spec_vram.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::spec_l0_entry")
(assert (fuel_bool_default fuel%verismo!arch.mem.def_s.impl&%0.spec_l0_entry.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.def_s.impl&%0.spec_l0_entry.) (forall ((self! Poly)) (! (= (verismo!arch.mem.def_s.impl&%0.spec_l0_entry.? self!) (verismo!arch.mem.def_s.MemDB./MemDB/l0_entry (%Poly%verismo!arch.mem.def_s.MemDB. self!))) :pattern ((verismo!arch.mem.def_s.impl&%0.spec_l0_entry.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::spec_sysmap")
(assert (fuel_bool_default fuel%verismo!arch.mem.def_s.impl&%0.spec_sysmap.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.def_s.impl&%0.spec_sysmap.) (forall ((self! Poly)) (! (= (verismo!arch.mem.def_s.impl&%0.spec_sysmap.? self!) (verismo!arch.mem.def_s.MemDB./MemDB/sysmap (%Poly%verismo!arch.mem.def_s.MemDB. self!))) :pattern ((verismo!arch.mem.def_s.impl&%0.spec_sysmap.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::spec_tlb")
(assert (fuel_bool_default fuel%verismo!arch.mem.def_s.impl&%0.spec_tlb.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.def_s.impl&%0.spec_tlb.) (forall ((self! Poly)) (! (= (verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!) (verismo!arch.mem.def_s.MemDB./MemDB/tlb (%Poly%verismo!arch.mem.def_s.MemDB. self!))) :pattern ((verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!))))))
(set-info :comment ";; Function-Specs verismo::arch::mem::def_s::MemDB::axiom_spec_new")
(declare-fun ens%verismo!arch.mem.def_s.impl&%2.axiom_spec_new. (verismo!arch.vram.def.VRamDB. vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. verismo!arch.tlb.def_s.TLB.) Bool)
(assert (forall ((vram! verismo!arch.vram.def.VRamDB.) (l0_entry! vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.) (sysmap! vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.) (tlb! verismo!arch.tlb.def_s.TLB.)) (! (= (ens%verismo!arch.mem.def_s.impl&%2.axiom_spec_new. vram! l0_entry! sysmap! tlb!) (and (= (verismo!arch.mem.def_s.impl&%0.spec_vram.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? (Poly%verismo!arch.vram.def.VRamDB. vram!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. l0_entry!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. sysmap!) (Poly%verismo!arch.tlb.def_s.TLB. tlb!)))) vram!) (= (verismo!arch.mem.def_s.impl&%0.spec_l0_entry.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? (Poly%verismo!arch.vram.def.VRamDB. vram!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. l0_entry!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. sysmap!) (Poly%verismo!arch.tlb.def_s.TLB. tlb!)))) l0_entry!) (= (verismo!arch.mem.def_s.impl&%0.spec_sysmap.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? (Poly%verismo!arch.vram.def.VRamDB. vram!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. l0_entry!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. sysmap!) (Poly%verismo!arch.tlb.def_s.TLB. tlb!)))) sysmap!) (= (verismo!arch.mem.def_s.impl&%0.spec_tlb.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? (Poly%verismo!arch.vram.def.VRamDB. vram!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. l0_entry!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. sysmap!) (Poly%verismo!arch.tlb.def_s.TLB. tlb!)))) tlb!))) :pattern ((ens%verismo!arch.mem.def_s.impl&%2.axiom_spec_new. vram! l0_entry! sysmap! tlb!)))))
(set-info :comment ";; Broadcast verismo::arch::mem::def_s::MemDB::axiom_spec_new")
(assert (forall ((vram! Poly) (l0_entry! Poly) (sysmap! Poly) (tlb! Poly)) (! (=> (and (has_type vram! TYPE%verismo!arch.vram.def.VRamDB.) (has_type l0_entry! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (has_type sysmap! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) (has_type tlb! TYPE%verismo!arch.tlb.def_s.TLB.)) (and (and (and (= (verismo!arch.mem.def_s.impl&%0.spec_vram.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? vram! l0_entry! sysmap! tlb!))) (%Poly%verismo!arch.vram.def.VRamDB. vram!)) (= (verismo!arch.mem.def_s.impl&%0.spec_l0_entry.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? vram! l0_entry! sysmap! tlb!))) (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. l0_entry!))) (= (verismo!arch.mem.def_s.impl&%0.spec_sysmap.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? vram! l0_entry! sysmap! tlb!))) (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. sysmap!))) (= (verismo!arch.mem.def_s.impl&%0.spec_tlb.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? vram! l0_entry! sysmap! tlb!))) (%Poly%verismo!arch.tlb.def_s.TLB. tlb!)))) :pattern ((verismo!arch.mem.def_s.impl&%2.spec_new.? vram! l0_entry! sysmap! tlb!)))))
(set-info :comment ";; Function-Axioms verismo::arch::memop::MemOp::is_Read")
(assert (fuel_bool_default fuel%verismo!arch.memop.impl&%0.is_Read.))
(assert (=> (fuel_bool fuel%verismo!arch.memop.impl&%0.is_Read.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.memop.impl&%0.is_Read.? AddrT&. AddrT& self!) (is-verismo!arch.memop.MemOp./Read_ (%Poly%verismo!arch.memop.MemOp. self!))) :pattern ((verismo!arch.memop.impl&%0.is_Read.? AddrT&. AddrT& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::PTLevel::is_L0")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%7.is_L0.))
(define-fun is-verismo!arch.entities.memtype.PTLevel./L0_ ((c verismo!arch.entities.memtype.PTLevel.)) Bool ((_ is verismo!arch.entities.memtype.PTLevel./L0) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%7.is_L0.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%7.is_L0.? self!) (is-verismo!arch.entities.memtype.PTLevel./L0_ (%Poly%verismo!arch.entities.memtype.PTLevel. self!))) :pattern ((verismo!arch.entities.memtype.impl&%7.is_L0.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::map_entry_exe_ok")
(assert (fuel_bool_default fuel%verismo!arch.ptram.ptram_u.impl&%2.map_entry_exe_ok.))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.ptram_u.impl&%2.map_entry_exe_ok.) (forall ((self! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly)) (! (= (verismo!arch.ptram.ptram_u.impl&%2.map_entry_exe_ok.? self! memid! gvn! lvl!) (let ((pte_gpa$ (verismo!arch.ptram.ptram_u.impl&%2.map_entry_gpa_ok.? self! memid! gvn! lvl!))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. pte_gpa$))))) (let ((pte_gpa$1 (%Poly%verismo!arch.addr_s.def_s.SpecMem. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. pte_gpa$)))))) (let ((entry$ (verismo!arch.vram.vram_s.impl&%2.get_enc_data_ok.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.ptram.def_s.impl&%0.spec_ram.? self!)) (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.entities.params.AddrMemID./AddrMemID (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. pte_gpa$1)) (%Poly%verismo!arch.entities.memid.MemID. memid!)))))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. entry$))))) (core!option.Option./Some (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. entry$)))) core!option.Option./None))) core!option.Option./None))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.map_entry_exe_ok.? self! memid! gvn! lvl!))))))
(assert (forall ((self! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type gvn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (has_type lvl! TYPE%verismo!arch.entities.memtype.PTLevel.)) (has_type (Poly%core!option.Option. (verismo!arch.ptram.ptram_u.impl&%2.map_entry_exe_ok.? self! memid! gvn! lvl!)) (TYPE%core!option.Option. $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.map_entry_exe_ok.? self! memid! gvn! lvl!)))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::map_entry_ok")
(assert (fuel_bool_default fuel%verismo!arch.ptram.ptram_u.impl&%2.map_entry_ok.))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.ptram_u.impl&%2.map_entry_ok.) (forall ((self! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly)) (! (= (verismo!arch.ptram.ptram_u.impl&%2.map_entry_ok.? self! memid! gvn! lvl!) (let ((ret$ (verismo!arch.ptram.ptram_u.impl&%2.map_entry_exe_ok.? self! memid! gvn! lvl!))) (ite (is-core!option.Option./Some_ ret$) (let ((exe_ret$ (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. ret$)))))) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def_e.impl&%7.view.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def_e.PageTableEntry. exe_ret$))))) core!option.Option./None))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.map_entry_ok.? self! memid! gvn! lvl!))))))
(assert (forall ((self! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type gvn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (has_type lvl! TYPE%verismo!arch.entities.memtype.PTLevel.)) (has_type (Poly%core!option.Option. (verismo!arch.ptram.ptram_u.impl&%2.map_entry_ok.? self! memid! gvn! lvl!)) (TYPE%core!option.Option. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.map_entry_ok.? self! memid! gvn! lvl!)))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::memtype")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.memtype.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.memtype.) (forall ((memid! Poly) (gpn! Poly)) (! (= (verismo!arch.entities.memtype.memtype.? memid! gpn!) (verismo!arch.entities.memtype.memtype_inner.? gpn!)) :pattern ((verismo!arch.entities.memtype.memtype.? memid! gpn!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_SmPrivData")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivData.))
(define-fun is-verismo!arch.entities.memtype.MemType./SmPrivData_ ((c verismo!arch.entities.memtype.MemType.)) Bool ((_ is verismo!arch.entities.memtype.MemType./SmPrivData) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivData.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%8.is_SmPrivData.? self!) (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) :pattern ((verismo!arch.entities.memtype.impl&%8.is_SmPrivData.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_SmBootData")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%8.is_SmBootData.))
(define-fun is-verismo!arch.entities.memtype.MemType./SmBootData_ ((c verismo!arch.entities.memtype.MemType.)) Bool ((_ is verismo!arch.entities.memtype.MemType./SmBootData) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%8.is_SmBootData.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%8.is_SmBootData.? self!) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) :pattern ((verismo!arch.entities.memtype.impl&%8.is_SmBootData.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_SmPrivCode")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivCode.))
(define-fun is-verismo!arch.entities.memtype.MemType./SmPrivCode_ ((c verismo!arch.entities.memtype.MemType.)) Bool ((_ is verismo!arch.entities.memtype.MemType./SmPrivCode) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivCode.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%8.is_SmPrivCode.? self!) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) :pattern ((verismo!arch.entities.memtype.impl&%8.is_SmPrivCode.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_SmPrivStack")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivStack.))
(define-fun is-verismo!arch.entities.memtype.MemType./SmPrivStack_ ((c verismo!arch.entities.memtype.MemType.)) Bool ((_ is verismo!arch.entities.memtype.MemType./SmPrivStack) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%8.is_SmPrivStack.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%8.is_SmPrivStack.? self!) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) :pattern ((verismo!arch.entities.memtype.impl&%8.is_SmPrivStack.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_PTE")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%8.is_PTE.))
(define-fun is-verismo!arch.entities.memtype.MemType./PTE_ ((c verismo!arch.entities.memtype.MemType.)) Bool ((_ is verismo!arch.entities.memtype.MemType./PTE) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%8.is_PTE.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%8.is_PTE.? self!) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) :pattern ((verismo!arch.entities.memtype.impl&%8.is_PTE.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_sm_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%10.is_sm_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%10.is_sm_int.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%10.is_sm_int.? self!) (or (or (or (or (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. self!)) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. self!)))) :pattern ((verismo!arch.entities.memtype.impl&%10.is_sm_int.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_SmVmplPage")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%8.is_SmVmplPage.))
(define-fun is-verismo!arch.entities.memtype.MemType./SmVmplPage_ ((c verismo!arch.entities.memtype.MemType.)) Bool ((_ is verismo!arch.entities.memtype.MemType./SmVmplPage) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%8.is_SmVmplPage.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%8.is_SmVmplPage.? self!) (is-verismo!arch.entities.memtype.MemType./SmVmplPage_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) :pattern ((verismo!arch.entities.memtype.impl&%8.is_SmVmplPage.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::is_vm_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%10.is_vm_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%10.is_vm_int.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%10.is_vm_int.? self!) (or (or (or (or (or (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. self!)) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmVmplPage_ (%Poly%verismo!arch.entities.memtype.MemType. self!)))) :pattern ((verismo!arch.entities.memtype.impl&%10.is_vm_int.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::need_c_bit")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%10.need_c_bit.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%10.need_c_bit.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%10.need_c_bit.? self!) (or (or (or (or (or (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. self!)) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. self!))) (is-verismo!arch.entities.memtype.MemType./SmVmplPage_ (%Poly%verismo!arch.entities.memtype.MemType. self!)))) :pattern ((verismo!arch.entities.memtype.impl&%10.need_c_bit.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::is_encrypted")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.is_encrypted.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.is_encrypted.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.is_encrypted.? T&. T& self!) (verismo!arch.pgtable.entry_s.impl&%1.contains_flag.? T&. T& self! (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./C))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.is_encrypted.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::vram::def::VRamDB::inv")
(assert (fuel_bool_default fuel%verismo!arch.vram.vram_s.impl&%2.inv.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.vram_s.impl&%2.inv.) (forall ((self! Poly)) (! (= (verismo!arch.vram.vram_s.impl&%2.inv.? self!) (and (verismo!arch.ramdb.ram_s.impl&%0.inv.? (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.vram.def.impl&%2.spec_sram.? self!))) (verismo!arch.rmp.db_u.rmp_inv.? (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. (verismo!arch.vram.def.impl&%2.spec_rmp.? self!))))) :pattern ((verismo!arch.vram.vram_s.impl&%2.inv.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::inv_dom_ok")
(assert (fuel_bool_default fuel%verismo!arch.ptram.ptram_u.impl&%2.inv_dom_ok.))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.ptram_u.impl&%2.inv_dom_ok.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.ptram.ptram_u.impl&%2.inv_dom_ok.? self! memid!) (verismo!arch.vram.vram_s.impl&%2.inv.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.ptram.def_s.impl&%0.spec_ram.? self!)))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.inv_dom_ok.? self! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::db_u::rmp_inv_sw")
(assert (fuel_bool_default fuel%verismo!arch.rmp.db_u.rmp_inv_sw.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.db_u.rmp_inv_sw.) (forall ((rmp! Poly) (memid! Poly)) (! (= (verismo!arch.rmp.db_u.rmp_inv_sw.? rmp! memid!) (forall ((spn$ Poly)) (! (=> (has_type spn$ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)) (=> (and (and (vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp!) spn$) (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$))))) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$)))) (verismo!arch.entities.memid.impl&%3.to_asid.? memid!))) (= (verismo!arch.rmp.db_u.rmp_reverse.? rmp! memid! (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$)))))) (%Poly%verismo!arch.addr_s.def_s.SpecPage. spn$)))) :pattern ((vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp!) spn$) (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$))))) :pattern ((verismo!arch.rmp.db_u.rmp_inv_sw.? rmp! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::vram::def::VRamDB::inv_sw")
(assert (fuel_bool_default fuel%verismo!arch.vram.vram_s.impl&%2.inv_sw.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.vram_s.impl&%2.inv_sw.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.vram.vram_s.impl&%2.inv_sw.? self! memid!) (verismo!arch.rmp.db_u.rmp_inv_sw.? (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. (verismo!arch.vram.def.impl&%2.spec_rmp.? self!)) memid!)) :pattern ((verismo!arch.vram.vram_s.impl&%2.inv_sw.? self! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::db_u::rmp_inv_memid_int")
(assert (fuel_bool_default fuel%verismo!arch.rmp.db_u.rmp_inv_memid_int.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.db_u.rmp_inv_memid_int.) (forall ((rmp! Poly) (memid! Poly)) (! (= (verismo!arch.rmp.db_u.rmp_inv_memid_int.? rmp! memid!) (forall ((spn$ Poly) (vmpl$ Poly)) (! (=> (and (has_type spn$ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)) (has_type vmpl$ TYPE%verismo!arch.entities.VMPL.)) (=> (and (and (and (vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp!) spn$) (or (or (or (or (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? memid! (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$))))))))) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? memid! (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$)))))))))) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? memid! (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$)))))))))) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? memid! (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$)))))))))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? memid! (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$))))))))))) (> (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. vmpl$)) (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.memid.impl&%3.to_vmpl.? memid!)))))) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$)))) (verismo!arch.entities.memid.impl&%3.to_asid.? memid!))) (not (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$))))) vmpl$))) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write))))) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry. rmp! spn$))))) vmpl$))) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write)))))) :pattern ((verismo!arch.rmp.db_u.rmp_inv_memid_int.? rmp! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::vram::def::VRamDB::inv_memid_int")
(assert (fuel_bool_default fuel%verismo!arch.vram.vram_s.impl&%2.inv_memid_int.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.vram_s.impl&%2.inv_memid_int.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.vram.vram_s.impl&%2.inv_memid_int.? self! memid!) (verismo!arch.rmp.db_u.rmp_inv_memid_int.? (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. (verismo!arch.vram.def.impl&%2.spec_rmp.? self!)) memid!)) :pattern ((verismo!arch.vram.vram_s.impl&%2.inv_memid_int.? self! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::inv")
(assert (fuel_bool_default fuel%verismo!arch.ptram.ptram_u.impl&%2.inv.))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.ptram_u.impl&%2.inv.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.ptram.ptram_u.impl&%2.inv.? self! memid!) (and (and (and (and (verismo!arch.ptram.ptram_u.impl&%2.inv_content_ok.? self! memid!) (verismo!arch.ptram.ptram_u.impl&%2.inv_dom_ok.? self! memid!)) (verismo!arch.vram.vram_s.impl&%2.inv_sw.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.ptram.def_s.impl&%0.spec_ram.? self!)) memid!)) (verismo!arch.vram.vram_s.impl&%2.inv_memid_int.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.ptram.def_s.impl&%0.spec_ram.? self!)) memid!)) (verismo!arch.vram.vram_s.impl&%2.inv.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.ptram.def_s.impl&%0.spec_ram.? self!))))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.inv.? self! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::spec_set_l0_entry")
(assert (fuel_bool_default fuel%verismo!arch.ptram.def_s.impl&%1.spec_set_l0_entry.))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.def_s.impl&%1.spec_set_l0_entry.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.ptram.def_s.impl&%1.spec_set_l0_entry.? self! val!) (verismo!arch.ptram.def_s.impl&%2.spec_new.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.ptram.def_s.impl&%0.spec_ram.? self!)) val!)) :pattern ((verismo!arch.ptram.def_s.impl&%1.spec_set_l0_entry.? self! val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::spec_set_ram")
(assert (fuel_bool_default fuel%verismo!arch.ptram.def_s.impl&%1.spec_set_ram.))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.def_s.impl&%1.spec_set_ram.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.ptram.def_s.impl&%1.spec_set_ram.? self! val!) (verismo!arch.ptram.def_s.impl&%2.spec_new.? val! (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (verismo!arch.ptram.def_s.impl&%0.spec_l0_entry.? self!)))) :pattern ((verismo!arch.ptram.def_s.impl&%1.spec_set_ram.? self! val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::spec_g_page_table")
(assert (fuel_bool_default fuel%verismo!arch.mem.mem_s.impl&%0.spec_g_page_table.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.mem_s.impl&%0.spec_g_page_table.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.mem.mem_s.impl&%0.spec_g_page_table.? self! memid!) (verismo!arch.ptram.def_s.impl&%1.spec_set_l0_entry.? (Poly%verismo!arch.ptram.def_s.GuestPTRam. (verismo!arch.ptram.def_s.impl&%1.spec_set_ram.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.mem.def_s.impl&%0.spec_vram.? self!)))) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (verismo!arch.mem.def_s.impl&%0.spec_l0_entry.? self!)))) :pattern ((verismo!arch.mem.mem_s.impl&%0.spec_g_page_table.? self! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::to_mem_map_ok")
(assert (fuel_bool_default fuel%verismo!arch.ptram.ptram_u.impl&%2.to_mem_map_ok.))
(declare-fun %%lambda%%19 (Dcr Type Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Poly) (%%hole%%4 Poly) (gvn$ Poly)) (! (= (%%apply%%0 (%%lambda%%19 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) gvn$) (B (and (verismo!arch.addr_s.page.impl&%3.is_valid.? %%hole%%0 %%hole%%1 gvn$) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.ptram.ptram_u.impl&%2.map_entry_ok.? %%hole%%2 %%hole%%3 gvn$ %%hole%%4))))))))) :pattern ((%%apply%%0 (%%lambda%%19 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) gvn$)))))
(declare-fun %%lambda%%20 (Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Poly) (gvn$ Poly)) (! (= (%%apply%%0 (%%lambda%%20 %%hole%%0 %%hole%%1 %%hole%%2) gvn$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.ptram.ptram_u.impl&%2.map_entry_ok.? %%hole%%0 %%hole%%1 gvn$ %%hole%%2))))) :pattern ((%%apply%%0 (%%lambda%%20 %%hole%%0 %%hole%%1 %%hole%%2) gvn$)))))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.ptram_u.impl&%2.to_mem_map_ok.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.ptram.ptram_u.impl&%2.to_mem_map_ok.? self! memid!) (let ((map$ (%Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (vstd!map.impl&%0.new.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) $ (TYPE%fun%1. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ BOOL) $ (TYPE%fun%1. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%fun%1. (mk_fun (%%lambda%%19 $ TYPE%verismo!arch.addr_s.def_s.GuestVir. self! memid! (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L0)))) (Poly%fun%1. (mk_fun (%%lambda%%20 self! memid! (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L0)))))))) (verismo!arch.pgtable.def.MemMap./MemMap (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. map$)))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.to_mem_map_ok.? self! memid!))))))
(assert (forall ((self! Poly) (memid! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.ptram.ptram_u.impl&%2.to_mem_map_ok.? self! memid!)) (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.ptram.ptram_u.impl&%2.to_mem_map_ok.? self! memid!)))))
(set-info :comment ";; Function-Axioms verismo::arch::tlb::def_s::TLB::to_mem_map")
(assert (fuel_bool_default fuel%verismo!arch.tlb.tlb_s.impl&%0.to_mem_map.))
(assert (=> (fuel_bool fuel%verismo!arch.tlb.tlb_s.impl&%0.to_mem_map.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.tlb.tlb_s.impl&%0.to_mem_map.? self! memid!) (verismo!arch.pgtable.def.MemMap./MemMap (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? self!))) memid!))) :pattern ((verismo!arch.tlb.tlb_s.impl&%0.to_mem_map.? self! memid!))))))
(assert (forall ((self! Poly) (memid! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.tlb.def_s.TLB.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.tlb.tlb_s.impl&%0.to_mem_map.? self! memid!)) (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.tlb.tlb_s.impl&%0.to_mem_map.? self! memid!)))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::to_mem_map_ok")
(assert (fuel_bool_default fuel%verismo!arch.mem.mem_u.impl&%0.to_mem_map_ok.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.mem_u.impl&%0.to_mem_map_ok.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.mem.mem_u.impl&%0.to_mem_map_ok.? self! memid!) (verismo!arch.pgtable.def.MemMap./MemMap (vstd!map_lib.impl&%0.union_prefer_right.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.ptram.ptram_u.impl&%2.to_mem_map_ok.? (Poly%verismo!arch.ptram.def_s.GuestPTRam. (verismo!arch.mem.mem_s.impl&%0.spec_g_page_table.? self! memid!)) memid!)))) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.pgtable.def.MemMap./MemMap (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!))))) memid!)))))))) :pattern ((verismo!arch.mem.mem_u.impl&%0.to_mem_map_ok.? self! memid!))))))
(assert (forall ((self! Poly) (memid! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.mem.def_s.MemDB.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.mem.mem_u.impl&%0.to_mem_map_ok.? self! memid!)) (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.mem.mem_u.impl&%0.to_mem_map_ok.? self! memid!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::MemMap::is_encrypted")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.) (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (vpage! Poly)) (! (= (verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.? VT&. VT& PT&. PT& self! vpage!) (let ((entry$ (ite (vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. self!))) vpage!) (core!option.Option./Some (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. self!)) vpage!)) core!option.Option./None))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. entry$))))) (core!option.Option./Some (B (verismo!arch.pgtable.entry_s.impl&%1.is_encrypted.? PT&. PT& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. entry$)))))) core!option.Option./None))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.? VT&. VT& PT&. PT& self! vpage!))))))
(assert (forall ((VT&. Dcr) (VT& Type) (PT&. Dcr) (PT& Type) (self! Poly) (vpage! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.pgtable.def.MemMap. VT&. VT& PT&. PT&)) (has_type vpage! (TYPE%verismo!arch.addr_s.def_s.SpecPage. VT&. VT&))) (has_type (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.? VT&. VT& PT&. PT& self! vpage!)) (TYPE%core!option.Option. $ BOOL))) :pattern ((verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.? VT&. VT& PT&. PT& self! vpage!)))))
(set-info :comment ";; Function-Axioms verismo::arch::tlb::def_s::TLB::inv_encrypted_priv_mem")
(assert (fuel_bool_default fuel%verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.))
(assert (=> (fuel_bool fuel%verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.? self! memid!) (let ((memmap$ (verismo!arch.pgtable.def.MemMap./MemMap (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? self!))) memid!)))) (verismo!arch.pgtable.memmap_s.impl&%1.inv_encrypted_priv_mem.? (Poly%verismo!arch.pgtable.def.MemMap. memmap$) memid!))) :pattern ((verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.? self! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::inv")
(assert (fuel_bool_default fuel%verismo!arch.mem.mem_u.impl&%0.inv.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.mem_u.impl&%0.inv.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.mem.mem_u.impl&%0.inv.? self! memid!) (and (and (and (and (and (verismo!arch.ptram.ptram_u.impl&%2.inv.? (Poly%verismo!arch.ptram.def_s.GuestPTRam. (verismo!arch.mem.mem_s.impl&%0.spec_g_page_table.? self! memid!)) memid!) (verismo!arch.pgtable.memmap_s.impl&%0.is_identity_map.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.mem.mem_u.impl&%0.to_mem_map_ok.? self! memid!)))) (verismo!arch.tlb.tlb_u.impl&%2.inv_encrypted_priv_mem.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!)) memid!)) (verismo!arch.vram.vram_s.impl&%2.inv.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.mem.def_s.impl&%0.spec_vram.? self!)))) (verismo!arch.vram.vram_s.impl&%2.inv_sw.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.mem.def_s.impl&%0.spec_vram.? self!)) memid!)) (is-verismo!arch.entities.memid.MemID./Guest_ (%Poly%verismo!arch.entities.memid.MemID. memid!)))) :pattern ((verismo!arch.mem.mem_u.impl&%0.inv.? self! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::VMPL::ord_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%5.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%5.ord_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.entities.VMPL. self!) (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.entities.VMPL. self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntOrd. $ TYPE%verismo!arch.entities.VMPL.))
(set-info :comment ";; Function-Axioms verismo::tspec::ops::VSpecOrd::spec_ge")
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecOrd.spec_ge.? Self%&. Self%& Rhs&. Rhs& self! rhs!) BOOL)) :pattern ((verismo!tspec.ops.VSpecOrd.spec_ge.? Self%&. Self%& Rhs&. Rhs& self! rhs!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%6::T::spec_ge")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%6.spec_ge.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%6.spec_ge.) (forall ((T&. Dcr) (T& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& T2&. T2& self! rhs!) (B (>= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I (verismo!tspec.integer.IntOrd.ord_int.? T2&. T2& rhs!))))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& T2&. T2& self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::ResultWithErr::is_Ok")
(assert (fuel_bool_default fuel%verismo!tspec.impl&%3.is_Ok.))
(assert (=> (fuel_bool fuel%verismo!tspec.impl&%3.is_Ok.) (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (self! Poly)) (! (= (verismo!tspec.impl&%3.is_Ok.? RetValue&. RetValue& ErrorID&. ErrorID& self!) (is-verismo!tspec.ResultWithErr./Ok_ (%Poly%verismo!tspec.ResultWithErr. self!))) :pattern ((verismo!tspec.impl&%3.is_Ok.? RetValue&. RetValue& ErrorID&. ErrorID& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::memop::MemOp::to_mem")
(assert (fuel_bool_default fuel%verismo!arch.memop.memop.impl&%0.to_mem.))
(assert (=> (fuel_bool fuel%verismo!arch.memop.memop.impl&%0.to_mem.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.memop.memop.impl&%0.to_mem.? AddrT&. AddrT& self!) (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? AddrT&. AddrT& self!))))) :pattern ((verismo!arch.memop.memop.impl&%0.to_mem.? AddrT&. AddrT& self!))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.memop.memop.impl&%0.to_mem.? AddrT&. AddrT& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. AddrT&. AddrT&))) :pattern ((verismo!arch.memop.memop.impl&%0.to_mem.? AddrT&. AddrT& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::map_entry")
(assert (fuel_bool_default fuel%verismo!arch.ptram.ptram_s.impl&%0.map_entry.))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.ptram_s.impl&%0.map_entry.) (forall ((self! Poly) (sysmap! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly)) (! (= (verismo!arch.ptram.ptram_s.impl&%0.map_entry.? self! sysmap! memid! gvn! lvl!) (let ((pte_gpa$ (verismo!arch.ptram.ptram_s.impl&%0.map_entry_gpa.? self! sysmap! memid! gvn! lvl!))) (ite (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. pte_gpa$))))) (verismo!arch.ptram.ptram_u.impl&%2.valid_access.? self! memid! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. pte_gpa$))) sysmap!)) (verismo!arch.ptram.ptram_s.impl&%0.hw_read_pte.? self! memid! sysmap! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. pte_gpa$)))) core!option.Option./None))) :pattern ((verismo!arch.ptram.ptram_s.impl&%0.map_entry.? self! sysmap! memid! gvn! lvl!))))))
(assert (forall ((self! Poly) (sysmap! Poly) (memid! Poly) (gvn! Poly) (lvl! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (has_type sysmap! (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type gvn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (has_type lvl! TYPE%verismo!arch.entities.memtype.PTLevel.)) (has_type (Poly%core!option.Option. (verismo!arch.ptram.ptram_s.impl&%0.map_entry.? self! sysmap! memid! gvn! lvl!)) (TYPE%core!option.Option. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) :pattern ((verismo!arch.ptram.ptram_s.impl&%0.map_entry.? self! sysmap! memid! gvn! lvl!)))))
(set-info :comment ";; Function-Axioms verismo::arch::ptram::def_s::GuestPTRam::to_mem_map")
(assert (fuel_bool_default fuel%verismo!arch.ptram.ptram_s.impl&%0.to_mem_map.))
(declare-fun %%lambda%%21 (Dcr Type Poly Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Poly) (%%hole%%4 Poly) (%%hole%%5 Poly) (gvn$ Poly)) (! (= (%%apply%%0 (%%lambda%%21 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) gvn$) (B (and (verismo!arch.addr_s.page.impl&%3.is_valid.? %%hole%%0 %%hole%%1 gvn$) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.ptram.ptram_s.impl&%0.map_entry.? %%hole%%2 %%hole%%3 %%hole%%4 gvn$ %%hole%%5))))))))) :pattern ((%%apply%%0 (%%lambda%%21 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) gvn$)))))
(declare-fun %%lambda%%22 (Poly Poly Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (%%hole%%2 Poly) (%%hole%%3 Poly) (gvn$ Poly)) (! (= (%%apply%%0 (%%lambda%%22 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) gvn$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.ptram.ptram_s.impl&%0.map_entry.? %%hole%%0 %%hole%%1 %%hole%%2 gvn$ %%hole%%3))))) :pattern ((%%apply%%0 (%%lambda%%22 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) gvn$)))))
(assert (=> (fuel_bool fuel%verismo!arch.ptram.ptram_s.impl&%0.to_mem_map.) (forall ((self! Poly) (sysmap! Poly) (memid! Poly)) (! (= (verismo!arch.ptram.ptram_s.impl&%0.to_mem_map.? self! sysmap! memid!) (let ((map$ (%Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (vstd!map.impl&%0.new.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) $ (TYPE%fun%1. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ BOOL) $ (TYPE%fun%1. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%fun%1. (mk_fun (%%lambda%%21 $ TYPE%verismo!arch.addr_s.def_s.GuestVir. self! sysmap! memid! (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L0)))) (Poly%fun%1. (mk_fun (%%lambda%%22 self! sysmap! memid! (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L0)))))))) (verismo!arch.pgtable.def.MemMap./MemMap (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. map$)))) :pattern ((verismo!arch.ptram.ptram_s.impl&%0.to_mem_map.? self! sysmap! memid!))))))
(assert (forall ((self! Poly) (sysmap! Poly) (memid! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.ptram.def_s.GuestPTRam.) (has_type sysmap! (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.ptram.ptram_s.impl&%0.to_mem_map.? self! sysmap! memid!)) (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.ptram.ptram_s.impl&%0.to_mem_map.? self! sysmap! memid!)))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::to_mem_map")
(assert (fuel_bool_default fuel%verismo!arch.mem.mem_s.impl&%0.to_mem_map.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.mem_s.impl&%0.to_mem_map.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.mem.mem_s.impl&%0.to_mem_map.? self! memid!) (verismo!arch.pgtable.def.MemMap./MemMap (vstd!map_lib.impl&%0.union_prefer_right.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.ptram.ptram_s.impl&%0.to_mem_map.? (Poly%verismo!arch.ptram.def_s.GuestPTRam. (verismo!arch.mem.mem_s.impl&%0.spec_g_page_table.? self! memid!)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. (verismo!arch.mem.def_s.impl&%0.spec_sysmap.? self!)) memid!) memid!)))) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.pgtable.def.MemMap./MemMap (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!))))) memid!)))))))) :pattern ((verismo!arch.mem.mem_s.impl&%0.to_mem_map.? self! memid!))))))
(assert (forall ((self! Poly) (memid! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.mem.def_s.MemDB.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.mem.mem_s.impl&%0.to_mem_map.? self! memid!)) (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.mem.mem_s.impl&%0.to_mem_map.? self! memid!)))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::set_gpn")
(assert (fuel_bool_default fuel%verismo!arch.rmp.rmpop_u.impl&%1.set_gpn.))
(define-fun is-verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam_ ((c verismo!arch.rmp.def_s.RmpAdjustParam.)) Bool ((_ is verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam) c))
(define-fun is-verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam_ ((c verismo!arch.rmp.def_s.PvalidateParam.)) Bool ((_ is verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam) c))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.rmpop_u.impl&%1.set_gpn.) (forall ((self! Poly) (page! Poly)) (! (= (verismo!arch.rmp.rmpop_u.impl&%1.set_gpn.? self! page!) (ite (and (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)) (is-verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam_ (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (let ((page_id$ (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (let ((gpn$ (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((psize$ (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/psize (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((vmsa$ (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmsa (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((vmpl$ (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmpl (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((perms$ (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/perms (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID./PageID (%Poly%verismo!arch.addr_s.def_s.SpecPage. page!) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. page_id$)))))))) (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam (%Poly%verismo!arch.addr_s.def_s.SpecPage. page!) (%Poly%verismo!arch.addr_s.def_s.PageSize. (Poly%verismo!arch.addr_s.def_s.PageSize. psize$)) (%B (B vmsa$)) (%Poly%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. vmpl$)) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. perms$)))))))))))) (ite (and (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)) (is-verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam_ (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (let ((page_id$ (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (let ((gpn$ (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((val$ (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/val (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((psize$ (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/psize (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (verismo!arch.rmp.def_s.RmpOp./Pvalidate (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID./PageID (%Poly%verismo!arch.addr_s.def_s.SpecPage. page!) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. page_id$)))))))) (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam (%Poly%verismo!arch.addr_s.def_s.SpecPage. page!) (%Poly%verismo!arch.addr_s.def_s.PageSize. (Poly%verismo!arch.addr_s.def_s.PageSize. psize$)) (%B (B val$)))))))))) (let ((page_id$ (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (let ((param$ (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID./PageID (%Poly%verismo!arch.addr_s.def_s.SpecPage. page!) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. page_id$)))))))) (%Poly%verismo!arch.rmp.def_s.RmpEntry. (Poly%verismo!arch.rmp.def_s.RmpEntry. param$)))))))) :pattern ((verismo!arch.rmp.rmpop_u.impl&%1.set_gpn.? self! page!))))))
(assert (forall ((self! Poly) (page! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (has_type page! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.rmpop_u.impl&%1.set_gpn.? self! page!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.rmpop_u.impl&%1.set_gpn.? self! page!)))))
(set-info :comment ";; Function-Axioms verismo::arch::memop::MemOp::translate_gpn")
(assert (fuel_bool_default fuel%verismo!arch.memop.gvmemop.impl&%0.translate_gpn.))
(assert (=> (fuel_bool fuel%verismo!arch.memop.gvmemop.impl&%0.translate_gpn.) (forall ((self! Poly) (gpmem! Poly) (enc! Poly)) (! (= (verismo!arch.memop.gvmemop.impl&%0.translate_gpn.? self! gpmem! enc!) (ite (is-verismo!arch.memop.MemOp./Read_ (%Poly%verismo!arch.memop.MemOp. self!)) (let ((addr_id$ (verismo!arch.memop.MemOp./Read/0 (%Poly%verismo!arch.memop.MemOp. self!)))) (verismo!arch.memop.MemOp./Read (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.entities.params.AddrMemID./AddrMemID (%Poly%verismo!arch.addr_s.def_s.SpecMem. gpmem!) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. addr_id$)))))))) (%B enc!))) (ite (is-verismo!arch.memop.MemOp./Write_ (%Poly%verismo!arch.memop.MemOp. self!)) (let ((addr_id$ (verismo!arch.memop.MemOp./Write/0 (%Poly%verismo!arch.memop.MemOp. self!)))) (let ((data$ (verismo!arch.memop.MemOp./Write/2 (%Poly%verismo!arch.memop.MemOp. self!)))) (verismo!arch.memop.MemOp./Write (%Poly%verismo!arch.entities.params.AddrID. (Poly%verismo!arch.entities.params.AddrID. (verismo!arch.entities.params.AddrID./AddrID (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. gpmem!)))) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrID./AddrID/memid (%Poly%verismo!arch.entities.params.AddrID. (Poly%verismo!arch.entities.params.AddrID. addr_id$)))))))) (%B enc!) (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. data$))))) (ite (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. self!)) (let ((rmpop$ (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. self!)))) (verismo!arch.memop.MemOp./RmpOp (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.rmpop_u.impl&%1.set_gpn.? (Poly%verismo!arch.rmp.def_s.RmpOp. rmpop$) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. gpmem!))))))) (ite (is-verismo!arch.memop.MemOp./InvlPage_ (%Poly%verismo!arch.memop.MemOp. self!)) (let ((gvn_id$ (verismo!arch.memop.MemOp./InvlPage/0 (%Poly%verismo!arch.memop.MemOp. self!)))) (verismo!arch.memop.MemOp./InvlPage (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.entities.params.AddrMemID./AddrMemID (%Poly%verismo!arch.addr_s.def_s.SpecMem. gpmem!) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. gvn_id$)))))))))) (let ((memid$ (verismo!arch.memop.MemOp./FlushAll/0 (%Poly%verismo!arch.memop.MemOp. self!)))) (verismo!arch.memop.MemOp./FlushAll (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. memid$))))))))) :pattern ((verismo!arch.memop.gvmemop.impl&%0.translate_gpn.? self! gpmem! enc!))))))
(assert (forall ((self! Poly) (gpmem! Poly) (enc! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (has_type gpmem! (TYPE%verismo!arch.addr_s.def_s.SpecMem. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type enc! BOOL)) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.gvmemop.impl&%0.translate_gpn.? self! gpmem! enc!)) (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.memop.gvmemop.impl&%0.translate_gpn.? self! gpmem! enc!)))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::to_gpop")
(assert (fuel_bool_default fuel%verismo!arch.mem.mem_s.impl&%0.to_gpop.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.mem_s.impl&%0.to_gpop.) (forall ((self! Poly) (memop! Poly)) (! (= (verismo!arch.mem.mem_s.impl&%0.to_gpop.? self! memop!) (let ((gvmem$ (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. memop!)))))) (let ((op_memid$ (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. memop!)))))) (let ((guestmap$ (verismo!arch.mem.mem_s.impl&%0.to_mem_map.? self! (Poly%verismo!arch.entities.memid.MemID. op_memid$)))) (let ((gpmem$ (verismo!arch.addr_s.page.impl&%8.convert.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. gvmem$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. guestmap$) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecMem. gvmem$)))))))))) (let ((enc$ (verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. guestmap$) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecMem. gvmem$)))))) (verismo!arch.memop.gvmemop.impl&%0.translate_gpn.? memop! (Poly%verismo!arch.addr_s.def_s.SpecMem. gpmem$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. enc$)))))))))) :pattern ((verismo!arch.mem.mem_s.impl&%0.to_gpop.? self! memop!))))))
(assert (forall ((self! Poly) (memop! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.mem.def_s.MemDB.) (has_type memop! (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.mem.mem_s.impl&%0.to_gpop.? self! memop!)) (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.mem.mem_s.impl&%0.to_gpop.? self! memop!)))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::spec_set_tlb")
(assert (fuel_bool_default fuel%verismo!arch.mem.def_s.impl&%1.spec_set_tlb.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.def_s.impl&%1.spec_set_tlb.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.mem.def_s.impl&%1.spec_set_tlb.? self! val!) (verismo!arch.mem.def_s.impl&%2.spec_new.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.mem.def_s.impl&%0.spec_vram.? self!)) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (verismo!arch.mem.def_s.impl&%0.spec_l0_entry.? self!)) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. (verismo!arch.mem.def_s.impl&%0.spec_sysmap.? self!)) val!)) :pattern ((verismo!arch.mem.def_s.impl&%1.spec_set_tlb.? self! val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::tlb::def_s::TLB::spec_set_db")
(assert (fuel_bool_default fuel%verismo!arch.tlb.def_s.impl&%0.spec_set_db.))
(assert (=> (fuel_bool fuel%verismo!arch.tlb.def_s.impl&%0.spec_set_db.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.tlb.def_s.impl&%0.spec_set_db.? self! val!) (verismo!arch.tlb.def_s.impl&%1.spec_new.? val!)) :pattern ((verismo!arch.tlb.def_s.impl&%0.spec_set_db.? self! val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::tlb::def_s::TLB::load")
(assert (fuel_bool_default fuel%verismo!arch.tlb.tlb_s.impl&%0.load.))
(assert (=> (fuel_bool fuel%verismo!arch.tlb.tlb_s.impl&%0.load.) (forall ((self! Poly) (idx! Poly) (entry! Poly)) (! (= (verismo!arch.tlb.tlb_s.impl&%0.load.? self! idx! entry!) (verismo!arch.tlb.def_s.impl&%0.spec_set_db.? self! (verismo!tspec.fmap.impl&%1.spec_set_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? self!)) (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? self!))) (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/0 (%Poly%verismo!arch.tlb.def_s.TLBIdx. idx!))) (vstd!map.impl&%0.insert.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.TLB./TLB/db (%Poly%verismo!arch.tlb.def_s.TLB. self!)))) (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/0 (%Poly%verismo!arch.tlb.def_s.TLBIdx. idx!)))) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/1 (%Poly%verismo!arch.tlb.def_s.TLBIdx. idx!))) entry!))))) :pattern ((verismo!arch.tlb.tlb_s.impl&%0.load.? self! idx! entry!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::set_spn")
(assert (fuel_bool_default fuel%verismo!arch.rmp.rmpop_u.impl&%2.set_spn.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.rmpop_u.impl&%2.set_spn.) (forall ((self! Poly) (page! Poly)) (! (= (verismo!arch.rmp.rmpop_u.impl&%2.set_spn.? self! page!) (ite (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)) (let ((page_id$ (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (let ((param$ (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID./PageID (%Poly%verismo!arch.addr_s.def_s.SpecPage. page!) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. page_id$)))))))) (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. param$))))) (ite (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)) (let ((page_id$ (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (let ((param$ (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (verismo!arch.rmp.def_s.RmpOp./Pvalidate (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID./PageID (%Poly%verismo!arch.addr_s.def_s.SpecPage. page!) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. page_id$)))))))) (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. param$))))) (let ((page_id$ (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (let ((param$ (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID./PageID (%Poly%verismo!arch.addr_s.def_s.SpecPage. page!) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. page_id$)))))))) (%Poly%verismo!arch.rmp.def_s.RmpEntry. (Poly%verismo!arch.rmp.def_s.RmpEntry. param$)))))))) :pattern ((verismo!arch.rmp.rmpop_u.impl&%2.set_spn.? self! page!))))))
(assert (forall ((self! Poly) (page! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type page! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.rmpop_u.impl&%2.set_spn.? self! page!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) :pattern ((verismo!arch.rmp.rmpop_u.impl&%2.set_spn.? self! page!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::ResultWithErr::to_err")
(assert (fuel_bool_default fuel%verismo!tspec.impl&%5.to_err.))
(assert (=> (fuel_bool fuel%verismo!tspec.impl&%5.to_err.) (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (self! Poly)) (! (= (verismo!tspec.impl&%5.to_err.? RetValue&. RetValue& ErrorID&. ErrorID& self!) (ite (is-verismo!tspec.ResultWithErr./Ok_ (%Poly%verismo!tspec.ResultWithErr. self!)) (let ((ret$ (verismo!tspec.ResultWithErr./Ok/0 (%Poly%verismo!tspec.ResultWithErr. self!)))) (vstd!pervasive.arbitrary.? ErrorID&. ErrorID&)) (let ((ret$ (verismo!tspec.ResultWithErr./Error/0 (%Poly%verismo!tspec.ResultWithErr. self!)))) (let ((err$ (verismo!tspec.ResultWithErr./Error/1 (%Poly%verismo!tspec.ResultWithErr. self!)))) err$)))) :pattern ((verismo!tspec.impl&%5.to_err.? RetValue&. RetValue& ErrorID&. ErrorID& self!))))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (has_type (verismo!tspec.impl&%5.to_err.? RetValue&. RetValue& ErrorID&. ErrorID& self!) ErrorID&)) :pattern ((verismo!tspec.impl&%5.to_err.? RetValue&. RetValue& ErrorID&. ErrorID& self!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::ResultWithErr::replace_err")
(assert (fuel_bool_default fuel%verismo!tspec.impl&%5.replace_err.))
(assert (=> (fuel_bool fuel%verismo!tspec.impl&%5.replace_err.) (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (ET2&. Dcr) (ET2& Type) (self! Poly) (err! Poly)) (! (= (verismo!tspec.impl&%5.replace_err.? RetValue&. RetValue& ErrorID&. ErrorID& ET2&. ET2& self! err!) (ite (is-verismo!tspec.ResultWithErr./Ok_ (%Poly%verismo!tspec.ResultWithErr. self!)) (let ((ret$ (verismo!tspec.ResultWithErr./Ok/0 (%Poly%verismo!tspec.ResultWithErr. self!)))) (verismo!tspec.ResultWithErr./Ok ret$)) (let ((ret$ (verismo!tspec.ResultWithErr./Error/0 (%Poly%verismo!tspec.ResultWithErr. self!)))) (let ((olderr$ (verismo!tspec.ResultWithErr./Error/1 (%Poly%verismo!tspec.ResultWithErr. self!)))) (verismo!tspec.ResultWithErr./Error ret$ err!))))) :pattern ((verismo!tspec.impl&%5.replace_err.? RetValue&. RetValue& ErrorID&. ErrorID& ET2&. ET2& self! err!))))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (ET2&. Dcr) (ET2& Type) (self! Poly) (err! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (has_type err! ET2&)) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!tspec.impl&%5.replace_err.? RetValue&. RetValue& ErrorID&. ErrorID& ET2&. ET2& self! err!)) (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ET2&. ET2&))) :pattern ((verismo!tspec.impl&%5.replace_err.? RetValue&. RetValue& ErrorID&. ErrorID& ET2&. ET2& self! err!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecMem::is_valid")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.is_valid.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.is_valid.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.is_valid.? T&. T& self!) (and (> (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!) 0) (verismo!arch.addr_s.page.impl&%3.is_valid.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? T&. T& self!))))) :pattern ((verismo!arch.addr_s.page.impl&%8.is_valid.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::vram::def::VRamDB::op")
(assert (forall ((self! Poly) (sysmap! Poly) (memop! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.vram.def.VRamDB.) (has_type sysmap! (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)) (has_type memop! (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!arch.vram.vram_s.impl&%2.op.? self! sysmap! memop!)) (TYPE%verismo!tspec.ResultWithErr. $ TYPE%verismo!arch.vram.def.VRamDB. $ (TYPE%verismo!arch.errors.MemError. $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))))) :pattern ((verismo!arch.vram.vram_s.impl&%2.op.? self! sysmap! memop!)))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::spec_set_vram")
(assert (fuel_bool_default fuel%verismo!arch.mem.def_s.impl&%1.spec_set_vram.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.def_s.impl&%1.spec_set_vram.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.mem.def_s.impl&%1.spec_set_vram.? self! val!) (verismo!arch.mem.def_s.impl&%2.spec_new.? val! (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (verismo!arch.mem.def_s.impl&%0.spec_l0_entry.? self!)) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. (verismo!arch.mem.def_s.impl&%0.spec_sysmap.? self!)) (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!)))) :pattern ((verismo!arch.mem.def_s.impl&%1.spec_set_vram.? self! val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::op_by_gpn_memtype")
(assert (fuel_bool_default fuel%verismo!arch.mem.mem_s.impl&%0.op_by_gpn_memtype.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.mem_s.impl&%0.op_by_gpn_memtype.) (forall ((self! Poly) (memop! Poly)) (! (= (verismo!arch.mem.mem_s.impl&%0.op_by_gpn_memtype.? self! memop!) (let ((memid$ (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. memop!)))))) (let ((gva$ (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. memop!)))))) (let ((sysmap$ (%Poly%verismo!arch.pgtable.def.MemMap. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. (verismo!arch.mem.def_s.impl&%0.spec_sysmap.? self!)) (Poly%verismo!arch.entities.memid.MemID. memid$))))) (let ((guestmap$ (verismo!arch.mem.mem_s.impl&%0.to_mem_map.? self! (Poly%verismo!arch.entities.memid.MemID. memid$)))) (let ((valid_gpa$ (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. guestmap$) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecMem. gva$))))))))))) (let ((tlb_idx$ (verismo!arch.tlb.def_s.TLBIdx./TLBIdx (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. memid$)) (%Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecMem. gva$))))))) (let ((gpa_memop$ (verismo!arch.mem.mem_s.impl&%0.to_gpop.? self! memop!))) (ite (not valid_gpa$) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./PageFault memop!))) (let ((entry$ (ite (vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. guestmap$)))) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecMem. gva$)))) (core!option.Option./Some (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. guestmap$))) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecMem. gva$))))) core!option.Option./None))) (let ((tmp$ (verismo!arch.mem.def_s.impl&%1.spec_set_tlb.? self! (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.tlb.def_s.impl&%0.spec_set_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.MemDB./MemDB/tlb (%Poly%verismo!arch.mem.def_s.MemDB. self!))) (verismo!tspec.fmap.impl&%1.spec_set_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.MemDB./MemDB/tlb (%Poly%verismo!arch.mem.def_s.MemDB. self!))))) (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.MemDB./MemDB/tlb (%Poly%verismo!arch.mem.def_s.MemDB. self!)))))) (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/0 (%Poly%verismo!arch.tlb.def_s.TLBIdx. (Poly%verismo!arch.tlb.def_s.TLBIdx. tlb_idx$)))) (vstd!map.impl&%0.insert.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.TLB./TLB/db (%Poly%verismo!arch.tlb.def_s.TLB. (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.MemDB./MemDB/tlb (%Poly%verismo!arch.mem.def_s.MemDB. self!))))))) (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/0 (%Poly%verismo!arch.tlb.def_s.TLBIdx. (Poly%verismo!arch.tlb.def_s.TLBIdx. tlb_idx$))))) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/1 (%Poly%verismo!arch.tlb.def_s.TLBIdx. (Poly%verismo!arch.tlb.def_s.TLBIdx. tlb_idx$)))) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. entry$))))))))))) (let ((tmp%%$ (verismo!arch.vram.vram_s.impl&%2.op.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.mem.def_s.impl&%0.spec_vram.? self!)) (Poly%verismo!arch.pgtable.def.MemMap. sysmap$) (Poly%verismo!arch.memop.MemOp. gpa_memop$)))) (ite (is-verismo!tspec.ResultWithErr./Ok_ tmp%%$) (let ((ret$ (%Poly%verismo!arch.vram.def.VRamDB. (verismo!tspec.ResultWithErr./Ok/0 (%Poly%verismo!tspec.ResultWithErr. (Poly%verismo!tspec.ResultWithErr. tmp%%$)))))) (verismo!tspec.ResultWithErr./Ok (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%1.spec_set_vram.? (Poly%verismo!arch.mem.def_s.MemDB. tmp$) (Poly%verismo!arch.vram.def.VRamDB. ret$))))) (let ((ret$ (%Poly%verismo!arch.vram.def.VRamDB. (verismo!tspec.ResultWithErr./Error/0 (%Poly%verismo!tspec.ResultWithErr. (Poly%verismo!tspec.ResultWithErr. tmp%%$)))))) (let ((err$ (%Poly%verismo!arch.errors.MemError. (verismo!tspec.ResultWithErr./Error/1 (%Poly%verismo!tspec.ResultWithErr. (Poly%verismo!tspec.ResultWithErr. tmp%%$)))))) (verismo!tspec.ResultWithErr./Error (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%1.spec_set_vram.? (Poly%verismo!arch.mem.def_s.MemDB. tmp$) (Poly%verismo!arch.vram.def.VRamDB. ret$))) (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.with_param.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) (Poly%verismo!arch.errors.MemError. err$) memop!)))))))))))))))))) :pattern ((verismo!arch.mem.mem_s.impl&%0.op_by_gpn_memtype.? self! memop!))))))
(assert (forall ((self! Poly) (memop! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.mem.def_s.MemDB.) (has_type memop! (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!arch.mem.mem_s.impl&%0.op_by_gpn_memtype.? self! memop!)) (TYPE%verismo!tspec.ResultWithErr. $ TYPE%verismo!arch.mem.def_s.MemDB. $ (TYPE%verismo!arch.errors.MemError. $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))))) :pattern ((verismo!arch.mem.mem_s.impl&%0.op_by_gpn_memtype.? self! memop!)))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memid::MemID::is_Hv")
(assert (fuel_bool_default fuel%verismo!arch.entities.memid.impl&%0.is_Hv.))
(define-fun is-verismo!arch.entities.memid.MemID./Hv_ ((c verismo!arch.entities.memid.MemID.)) Bool ((_ is verismo!arch.entities.memid.MemID./Hv) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memid.impl&%0.is_Hv.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memid.impl&%0.is_Hv.? self!) (is-verismo!arch.entities.memid.MemID./Hv_ (%Poly%verismo!arch.entities.memid.MemID. self!))) :pattern ((verismo!arch.entities.memid.impl&%0.is_Hv.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::valid_as_size")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.valid_as_size.))
(define-fun is-verismo!arch.addr_s.def_s.PageSize./Size4k_ ((c verismo!arch.addr_s.def_s.PageSize.)) Bool ((_ is verismo!arch.addr_s.def_s.PageSize./Size4k) c))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.valid_as_size.) (forall ((T&. Dcr) (T& Type) (self! Poly) (psize! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.valid_as_size.? T&. T& self! psize!) (=> (not (is-verismo!arch.addr_s.def_s.PageSize./Size4k_ (%Poly%verismo!arch.addr_s.def_s.PageSize. psize!))) (= (EucMod (verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!) (EucDiv 2097152 4096)) 0))) :pattern ((verismo!arch.addr_s.page.impl&%3.valid_as_size.? T&. T& self! psize!))))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::op_rmpadjust")
(assert (fuel_bool_default fuel%verismo!arch.mem.mem_s.impl&%0.op_rmpadjust.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.mem_s.impl&%0.op_rmpadjust.) (forall ((self! Poly) (op! Poly)) (! (= (verismo!arch.mem.mem_s.impl&%0.op_rmpadjust.? self! op!) (ite (and (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. op!)) (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. op!)))) (let ((gvn_memid$ (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. op!))))))) (let ((param$ (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. op!))))))) (let ((memid$ (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. gvn_memid$))))) (let ((gvn$ (verismo!arch.entities.params.PageID./PageID/page (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. gvn_memid$))))) (let ((psize$ (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/psize (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. param$))))) (let ((vmpl$ (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmpl (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. param$))))) (ite (is-verismo!arch.entities.memid.MemID./Hv_ (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. memid$))) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. verismo!arch.errors.RmpFault./Unsupported)) op!))) (ite (and (= psize$ verismo!arch.addr_s.def_s.PageSize./Size2m) (not (verismo!arch.addr_s.page.impl&%3.valid_as_size.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecPage. gvn$) (Poly%verismo!arch.addr_s.def_s.PageSize. psize$)))) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. verismo!arch.errors.RmpFault./Input)) op!))) (ite (%B (B (>= (%I (verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.memid.impl&%3.to_vmpl.? (Poly%verismo!arch.entities.memid.MemID. memid$))))) (%I (verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. vmpl$)))))) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. verismo!arch.errors.RmpFault./Perm)) op!))) (verismo!arch.mem.mem_s.impl&%0.op_by_gpn_memtype.? self! op!)))))))))) (verismo!tspec.ResultWithErr./Ok self!))) :pattern ((verismo!arch.mem.mem_s.impl&%0.op_rmpadjust.? self! op!))))))
(assert (forall ((self! Poly) (op! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.mem.def_s.MemDB.) (has_type op! (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!arch.mem.mem_s.impl&%0.op_rmpadjust.? self! op!)) (TYPE%verismo!tspec.ResultWithErr. $ TYPE%verismo!arch.mem.def_s.MemDB. $ (TYPE%verismo!arch.errors.MemError. $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))))) :pattern ((verismo!arch.mem.mem_s.impl&%0.op_rmpadjust.? self! op!)))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::op_pvalidate")
(assert (fuel_bool_default fuel%verismo!arch.mem.mem_s.impl&%0.op_pvalidate.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.mem_s.impl&%0.op_pvalidate.) (forall ((self! Poly) (op! Poly)) (! (= (verismo!arch.mem.mem_s.impl&%0.op_pvalidate.? self! op!) (ite (and (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. op!)) (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. op!)))) (let ((gvn_memid$ (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. op!))))))) (let ((param$ (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. op!))))))) (let ((memid$ (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. gvn_memid$))))) (let ((gvn$ (verismo!arch.entities.params.PageID./PageID/page (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. gvn_memid$))))) (let ((psize$ (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/psize (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. param$))))) (ite (or (is-verismo!arch.entities.memid.MemID./Hv_ (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. memid$))) (not (= (verismo!arch.entities.memid.impl&%3.to_vmpl.? (Poly%verismo!arch.entities.memid.MemID. memid$)) verismo!arch.entities.VMPL./VMPL0))) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. verismo!arch.errors.RmpFault./Unsupported)) op!))) (ite (and (= psize$ verismo!arch.addr_s.def_s.PageSize./Size2m) (not (verismo!arch.addr_s.page.impl&%3.valid_as_size.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecPage. gvn$) (Poly%verismo!arch.addr_s.def_s.PageSize. psize$)))) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. verismo!arch.errors.RmpFault./Input)) op!))) (verismo!arch.mem.mem_s.impl&%0.op_by_gpn_memtype.? self! op!)))))))) (verismo!tspec.ResultWithErr./Ok self!))) :pattern ((verismo!arch.mem.mem_s.impl&%0.op_pvalidate.? self! op!))))))
(assert (forall ((self! Poly) (op! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.mem.def_s.MemDB.) (has_type op! (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!arch.mem.mem_s.impl&%0.op_pvalidate.? self! op!)) (TYPE%verismo!tspec.ResultWithErr. $ TYPE%verismo!arch.mem.def_s.MemDB. $ (TYPE%verismo!arch.errors.MemError. $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))))) :pattern ((verismo!arch.mem.mem_s.impl&%0.op_pvalidate.? self! op!)))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::op_rmpupdate")
(assert (fuel_bool_default fuel%verismo!arch.mem.mem_s.impl&%0.op_rmpupdate.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.mem_s.impl&%0.op_rmpupdate.) (forall ((self! Poly) (op! Poly)) (! (= (verismo!arch.mem.mem_s.impl&%0.op_rmpupdate.? self! op!) (ite (and (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. op!)) (is-verismo!arch.rmp.def_s.RmpOp./RmpUpdate_ (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. op!)))) (let ((gvn_memid$ (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. op!))))))) (let ((param$ (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. op!))))))) (let ((memid$ (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. gvn_memid$))))) (let ((gvn$ (verismo!arch.entities.params.PageID./PageID/page (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. gvn_memid$))))) (ite (not (is-verismo!arch.entities.memid.MemID./Hv_ (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. memid$)))) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. verismo!arch.errors.RmpFault./Unsupported)) op!))) (verismo!arch.mem.mem_s.impl&%0.op_by_gpn_memtype.? self! op!)))))) (verismo!tspec.ResultWithErr./Ok self!))) :pattern ((verismo!arch.mem.mem_s.impl&%0.op_rmpupdate.? self! op!))))))
(assert (forall ((self! Poly) (op! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.mem.def_s.MemDB.) (has_type op! (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!arch.mem.mem_s.impl&%0.op_rmpupdate.? self! op!)) (TYPE%verismo!tspec.ResultWithErr. $ TYPE%verismo!arch.mem.def_s.MemDB. $ (TYPE%verismo!arch.errors.MemError. $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))))) :pattern ((verismo!arch.mem.mem_s.impl&%0.op_rmpupdate.? self! op!)))))
(set-info :comment ";; Function-Axioms verismo::arch::tlb::def_s::TLB::invlpg")
(assert (fuel_bool_default fuel%verismo!arch.tlb.tlb_s.impl&%0.invlpg.))
(assert (=> (fuel_bool fuel%verismo!arch.tlb.tlb_s.impl&%0.invlpg.) (forall ((self! Poly) (idx! Poly)) (! (= (verismo!arch.tlb.tlb_s.impl&%0.invlpg.? self! idx!) (verismo!arch.tlb.def_s.impl&%0.spec_set_db.? self! (verismo!tspec.fmap.impl&%1.spec_set_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? self!)) (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? self!))) (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/0 (%Poly%verismo!arch.tlb.def_s.TLBIdx. idx!))) (vstd!map.impl&%0.remove.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.TLB./TLB/db (%Poly%verismo!arch.tlb.def_s.TLB. self!)))) (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/0 (%Poly%verismo!arch.tlb.def_s.TLBIdx. idx!)))) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/1 (%Poly%verismo!arch.tlb.def_s.TLBIdx. idx!)))))))) :pattern ((verismo!arch.tlb.tlb_s.impl&%0.invlpg.? self! idx!))))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::op_invlpg")
(assert (fuel_bool_default fuel%verismo!arch.mem.mem_s.impl&%0.op_invlpg.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.mem_s.impl&%0.op_invlpg.) (forall ((self! Poly) (gva_memid! Poly)) (! (= (verismo!arch.mem.mem_s.impl&%0.op_invlpg.? self! gva_memid!) (let ((gva$ (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. gva_memid!)))) (let ((memid$ (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. gva_memid!)))) (let ((tlb_idx$ (verismo!arch.tlb.def_s.TLBIdx./TLBIdx (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. memid$)) (%Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%2.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecAddr. (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ INT $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. gva$)))) (I 0)))))))))) (verismo!tspec.ResultWithErr./Ok (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%1.spec_set_tlb.? self! (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.tlb.def_s.impl&%0.spec_set_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!)) (verismo!tspec.fmap.impl&%1.spec_set_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!)))) (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!))))) (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/0 (%Poly%verismo!arch.tlb.def_s.TLBIdx. (Poly%verismo!arch.tlb.def_s.TLBIdx. tlb_idx$)))) (vstd!map.impl&%0.remove.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.TLB./TLB/db (%Poly%verismo!arch.tlb.def_s.TLB. (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!)))))) (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/0 (%Poly%verismo!arch.tlb.def_s.TLBIdx. (Poly%verismo!arch.tlb.def_s.TLBIdx. tlb_idx$))))) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.tlb.def_s.TLBIdx./TLBIdx/1 (%Poly%verismo!arch.tlb.def_s.TLBIdx. (Poly%verismo!arch.tlb.def_s.TLBIdx. tlb_idx$)))))))))))))))) :pattern ((verismo!arch.mem.mem_s.impl&%0.op_invlpg.? self! gva_memid!))))))
(assert (forall ((self! Poly) (gva_memid! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.mem.def_s.MemDB.) (has_type gva_memid! (TYPE%verismo!arch.entities.params.AddrMemID. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!arch.mem.mem_s.impl&%0.op_invlpg.? self! gva_memid!)) (TYPE%verismo!tspec.ResultWithErr. $ TYPE%verismo!arch.mem.def_s.MemDB. $ (TYPE%verismo!arch.errors.MemError. $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))))) :pattern ((verismo!arch.mem.mem_s.impl&%0.op_invlpg.? self! gva_memid!)))))
(set-info :comment ";; Function-Axioms verismo::arch::tlb::def_s::TLB::flush_memid")
(assert (fuel_bool_default fuel%verismo!arch.tlb.tlb_s.impl&%0.flush_memid.))
(assert (=> (fuel_bool fuel%verismo!arch.tlb.tlb_s.impl&%0.flush_memid.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.tlb.tlb_s.impl&%0.flush_memid.? self! memid!) (verismo!arch.tlb.def_s.impl&%0.spec_set_db.? self! (verismo!tspec.fmap.impl&%1.spec_set_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? self!)) (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? self!))) memid! (vstd!map.impl&%0.empty.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))) :pattern ((verismo!arch.tlb.tlb_s.impl&%0.flush_memid.? self! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::op_flush")
(assert (fuel_bool_default fuel%verismo!arch.mem.mem_s.impl&%0.op_flush.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.mem_s.impl&%0.op_flush.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.mem.mem_s.impl&%0.op_flush.? self! memid!) (verismo!tspec.ResultWithErr./Ok (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%1.spec_set_tlb.? self! (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.tlb.def_s.impl&%0.spec_set_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!)) (verismo!tspec.fmap.impl&%1.spec_set_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!)))) (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!))))) memid! (vstd!map.impl&%0.empty.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))))))) :pattern ((verismo!arch.mem.mem_s.impl&%0.op_flush.? self! memid!))))))
(assert (forall ((self! Poly) (memid! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.mem.def_s.MemDB.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!arch.mem.mem_s.impl&%0.op_flush.? self! memid!)) (TYPE%verismo!tspec.ResultWithErr. $ TYPE%verismo!arch.mem.def_s.MemDB. $ (TYPE%verismo!arch.errors.MemError. $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))))) :pattern ((verismo!arch.mem.mem_s.impl&%0.op_flush.? self! memid!)))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::op")
(assert (fuel_bool_default fuel%verismo!arch.mem.mem_s.impl&%0.op.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.mem_s.impl&%0.op.) (forall ((self! Poly) (memop! Poly)) (! (= (verismo!arch.mem.mem_s.impl&%0.op.? self! memop!) (let ((ret$ (ite (is-verismo!arch.memop.MemOp./Read_ (%Poly%verismo!arch.memop.MemOp. memop!)) (verismo!arch.mem.mem_s.impl&%0.op_by_gpn_memtype.? self! memop!) (ite (is-verismo!arch.memop.MemOp./Write_ (%Poly%verismo!arch.memop.MemOp. memop!)) (verismo!arch.mem.mem_s.impl&%0.op_by_gpn_memtype.? self! memop!) (ite (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. memop!)) (let ((rmpop$ (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. memop!)))) (ite (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ rmpop$) (verismo!arch.mem.mem_s.impl&%0.op_rmpadjust.? self! memop!) (ite (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ rmpop$) (verismo!arch.mem.mem_s.impl&%0.op_pvalidate.? self! memop!) (verismo!arch.mem.mem_s.impl&%0.op_rmpupdate.? self! memop!)))) (ite (is-verismo!arch.memop.MemOp./InvlPage_ (%Poly%verismo!arch.memop.MemOp. memop!)) (let ((gva_memid$ (verismo!arch.memop.MemOp./InvlPage/0 (%Poly%verismo!arch.memop.MemOp. memop!)))) (verismo!arch.mem.mem_s.impl&%0.op_invlpg.? self! (Poly%verismo!arch.entities.params.AddrMemID. gva_memid$))) (let ((memid$ (verismo!arch.memop.MemOp./FlushAll/0 (%Poly%verismo!arch.memop.MemOp. memop!)))) (verismo!arch.mem.mem_s.impl&%0.op_flush.? self! (Poly%verismo!arch.entities.memid.MemID. memid$))))))))) (verismo!tspec.impl&%5.replace_err.? $ TYPE%verismo!arch.mem.def_s.MemDB. $ (TYPE%verismo!arch.errors.MemError. $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) $ (TYPE%verismo!arch.errors.MemError. $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (Poly%verismo!tspec.ResultWithErr. ret$) (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.with_param.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) (verismo!tspec.impl&%5.to_err.? $ TYPE%verismo!arch.mem.def_s.MemDB. $ (TYPE%verismo!arch.errors.MemError. $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (Poly%verismo!tspec.ResultWithErr. ret$)) memop!))))) :pattern ((verismo!arch.mem.mem_s.impl&%0.op.? self! memop!))))))
(assert (forall ((self! Poly) (memop! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.mem.def_s.MemDB.) (has_type memop! (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!arch.mem.mem_s.impl&%0.op.? self! memop!)) (TYPE%verismo!tspec.ResultWithErr. $ TYPE%verismo!arch.mem.def_s.MemDB. $ (TYPE%verismo!arch.errors.MemError. $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))))) :pattern ((verismo!arch.mem.mem_s.impl&%0.op.? self! memop!)))))
(set-info :comment ";; Function-Axioms verismo::arch::memop::MemOp::to_page")
(assert (fuel_bool_default fuel%verismo!arch.memop.memop.impl&%0.to_page.))
(assert (=> (fuel_bool fuel%verismo!arch.memop.memop.impl&%0.to_page.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.memop.memop.impl&%0.to_page.? AddrT&. AddrT& self!) (verismo!arch.addr_s.page.impl&%8.to_page.? AddrT&. AddrT& (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? AddrT&. AddrT& self!))))))) :pattern ((verismo!arch.memop.memop.impl&%0.to_page.? AddrT&. AddrT& self!))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.memop.memop.impl&%0.to_page.? AddrT&. AddrT& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. AddrT&. AddrT&))) :pattern ((verismo!arch.memop.memop.impl&%0.to_page.? AddrT&. AddrT& self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::current_cpu")
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!arch.x64.def_s.current_cpu.? no%param))) :pattern ((verismo!arch.x64.def_s.current_cpu.? no%param)))))
(set-info :comment ";; Function-Specs verismo::arch::x64::def_s::Archx64::axiom_spec_new")
(declare-fun ens%verismo!arch.x64.def_s.impl&%6.axiom_spec_new. (verismo!arch.mem.def_s.MemDB. vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.) Bool)
(assert (forall ((memdb! verismo!arch.mem.def_s.MemDB.) (regdb! vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.) (entities! vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.)) (! (= (ens%verismo!arch.x64.def_s.impl&%6.axiom_spec_new. memdb! regdb! entities!) (and (= (verismo!arch.x64.def_s.impl&%4.spec_memdb.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.impl&%6.spec_new.? (Poly%verismo!arch.mem.def_s.MemDB. memdb!) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. regdb!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. entities!)))) memdb!) (= (verismo!arch.x64.def_s.impl&%4.spec_regdb.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.impl&%6.spec_new.? (Poly%verismo!arch.mem.def_s.MemDB. memdb!) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. regdb!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. entities!)))) regdb!) (= (verismo!arch.x64.def_s.impl&%4.spec_entities.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.impl&%6.spec_new.? (Poly%verismo!arch.mem.def_s.MemDB. memdb!) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. regdb!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. entities!)))) entities!))) :pattern ((ens%verismo!arch.x64.def_s.impl&%6.axiom_spec_new. memdb! regdb! entities!)))))
(set-info :comment ";; Broadcast verismo::arch::x64::def_s::Archx64::axiom_spec_new")
(assert (forall ((memdb! Poly) (regdb! Poly) (entities! Poly)) (! (=> (and (has_type memdb! TYPE%verismo!arch.mem.def_s.MemDB.) (has_type regdb! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)))) (has_type entities! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL)))) (and (and (= (verismo!arch.x64.def_s.impl&%4.spec_memdb.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.impl&%6.spec_new.? memdb! regdb! entities!))) (%Poly%verismo!arch.mem.def_s.MemDB. memdb!)) (= (verismo!arch.x64.def_s.impl&%4.spec_regdb.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.impl&%6.spec_new.? memdb! regdb! entities!))) (%Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. regdb!))) (= (verismo!arch.x64.def_s.impl&%4.spec_entities.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.impl&%6.spec_new.? memdb! regdb! entities!))) (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. entities!)))) :pattern ((verismo!arch.x64.def_s.impl&%6.spec_new.? memdb! regdb! entities!)))))
(set-info :comment ";; Function-Specs verismo::arch::x64::def_s::Archx64::axiom_reg_dom")
(declare-fun ens%verismo!arch.x64.x64_s.impl&%1.axiom_reg_dom. (verismo!arch.x64.def_s.Archx64. verismo!arch.entities.memid.CpuMemID.) Bool)
(assert (forall ((self! verismo!arch.x64.def_s.Archx64.) (cpumemid! verismo!arch.entities.memid.CpuMemID.)) (! (= (ens%verismo!arch.x64.x64_s.impl&%1.axiom_reg_dom. self! cpumemid!) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.memid.CpuMemID. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? (Poly%verismo!arch.x64.def_s.Archx64. self!)))) (Poly%verismo!arch.entities.memid.CpuMemID. cpumemid!))) :pattern ((ens%verismo!arch.x64.x64_s.impl&%1.axiom_reg_dom. self! cpumemid!)))))
(set-info :comment ";; Broadcast verismo::arch::x64::def_s::Archx64::axiom_reg_dom")
(assert (forall ((self! Poly) (cpumemid! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.x64.def_s.Archx64.) (has_type cpumemid! TYPE%verismo!arch.entities.memid.CpuMemID.)) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.memid.CpuMemID. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!))) cpumemid!)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.memid.CpuMemID. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!))) cpumemid!)))))
(set-info :comment ";; Function-Specs verismo::arch::x64::def_s::Archx64::axiom_entities_dom")
(declare-fun ens%verismo!arch.x64.x64_s.impl&%1.axiom_entities_dom. (verismo!arch.x64.def_s.Archx64. verismo!arch.entities.memid.MemID.) Bool)
(assert (forall ((self! verismo!arch.x64.def_s.Archx64.) (memid! verismo!arch.entities.memid.MemID.)) (! (= (ens%verismo!arch.x64.x64_s.impl&%1.axiom_entities_dom. self! memid!) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.memid.MemID. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? (Poly%verismo!arch.x64.def_s.Archx64. self!)))) (Poly%verismo!arch.entities.memid.MemID. memid!))) :pattern ((ens%verismo!arch.x64.x64_s.impl&%1.axiom_entities_dom. self! memid!)))))
(set-info :comment ";; Broadcast verismo::arch::x64::def_s::Archx64::axiom_entities_dom")
(assert (forall ((self! Poly) (memid! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.x64.def_s.Archx64.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.)) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.memid.MemID. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!))) memid!)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.memid.MemID. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!))) memid!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::wf")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%20.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%20.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%20.wf.? T&. T& self!) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& $ TYPE%tuple%0. self!)) :pattern ((verismo!tspec.security.sectype.impl&%20.wf.? T&. T& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%8::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%8.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%8.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT SZ) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::SpecSize::spec_size_def")
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (verismo!tspec.size_s.SpecSize.spec_size_def.? Self%&. Self%&) NAT) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? Self%&. Self%&)))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%12::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%12.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%12.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16)) (I 2))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 16)))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%19.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%19.spec_size_def.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%11::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32)) (I 4))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 32)))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%10::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%10.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%10.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)) (I 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%13::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%13.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%13.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8)) (I 1))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 8)))
(set-info :comment ";; Function-Specs verismo::tspec::cast::axiom_cast_to_seq_unique")
(declare-fun ens%verismo!tspec.cast.axiom_cast_to_seq_unique. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!tspec.cast.axiom_cast_to_seq_unique. T&. T& val!) (= val! (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))) :pattern ((ens%verismo!tspec.cast.axiom_cast_to_seq_unique. T&. T& val!)))))
(set-info :comment ";; Broadcast verismo::tspec::cast::axiom_cast_to_seq_unique")
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (= val! (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))))
(set-info :comment ";; Function-Specs verismo::tspec::fmap::FMap::axiom_spec_new")
(declare-fun ens%verismo!tspec.fmap.impl&%2.axiom_spec_new. (Dcr Type Dcr Type Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (map! Poly)) (! (= (ens%verismo!tspec.fmap.impl&%2.axiom_spec_new. K&. K& V&. V& map!) (= (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& (verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!)) map!)) :pattern ((ens%verismo!tspec.fmap.impl&%2.axiom_spec_new. K&. K& V&. V& map!)))))
(set-info :comment ";; Broadcast verismo::tspec::fmap::FMap::axiom_spec_new")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (map! Poly)) (! (=> (has_type map! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& (verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!)) map!)) :pattern ((verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!)))))
(set-info :comment ";; Function-Specs verismo::tspec::fmap::FMap::axiom_inv")
(declare-fun ens%verismo!tspec.fmap.impl&%3.axiom_inv. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (id! Poly)) (! (= (ens%verismo!tspec.fmap.impl&%3.axiom_inv. K&. K& V&. V& self! id!) (and (= (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!) (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)) id!))) :pattern ((ens%verismo!tspec.fmap.impl&%3.axiom_inv. K&. K& V&. V& self! id!)))))
(set-info :comment ";; Broadcast verismo::tspec::fmap::FMap::axiom_inv")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (id! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type id! K&)) (and (= (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!) (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)) id!))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)) id!)))))
(set-info :comment ";; Function-Specs verismo::tspec::fmap::FMap::axiom_equal")
(declare-fun ens%verismo!tspec.fmap.impl&%3.axiom_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (other! Poly)) (! (= (ens%verismo!tspec.fmap.impl&%3.axiom_equal. K&. K& V&. V& self! other!) (and (= (ext_eq true (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&) self! other!) (= self! other!)) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& other!)) (= self! other!)))) :pattern ((ens%verismo!tspec.fmap.impl&%3.axiom_equal. K&. K& V&. V& self! other!)))))
(set-info :comment ";; Broadcast verismo::tspec::fmap::FMap::axiom_equal")
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type other! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&))) (and (= (ext_eq true (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&) self! other!) (= self! other!)) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& other!)) (= self! other!)))) :pattern ((ext_eq true (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&) self! other!) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)))))
(set-info :comment ";; Function-Specs verismo::tspec::isconst::axiom_const_forall")
(declare-fun ens%verismo!tspec.isconst.axiom_const_forall. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (= (ens%verismo!tspec.isconst.axiom_const_forall. T&. T& v!) (and (and (and (= (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!) (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 4))))) :pattern ((ens%verismo!tspec.isconst.axiom_const_forall. T&. T& v!)))))
(set-info :comment ";; Broadcast verismo::tspec::isconst::axiom_const_forall")
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (=> (has_type v! T&) (=> (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (and (and (and (= (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!) (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 4)))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::spec_max_count")
(assert (forall ((T&. Dcr) (T& Type)) (! (<= 0 (verismo!tspec.size_s.spec_max_count.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(set-info :comment ";; Function-Specs verismo::tspec::size_s::axiom_max_count_size_rel")
(declare-fun ens%verismo!tspec.size_s.axiom_max_count_size_rel. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_max_count_size_rel. T&. T&) (let ((tmp%%$ (verismo!tspec.size_s.spec_max_count.? T&. T&))) (and (< (EucDiv (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (verismo!tspec.size_s.spec_size.? T&. T&))) 2) tmp%%$) (<= tmp%%$ (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (nClip (Mul (verismo!tspec.size_s.spec_size.? T&. T&) 8)))))))) :pattern ((ens%verismo!tspec.size_s.axiom_max_count_size_rel. T&. T&)))))
(set-info :comment ";; Broadcast verismo::tspec::size_s::axiom_max_count_size_rel")
(assert (forall ((T&. Dcr) (T& Type)) (! (let ((tmp%%$ (verismo!tspec.size_s.spec_max_count.? T&. T&))) (and (< (EucDiv (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (verismo!tspec.size_s.spec_size.? T&. T&))) 2) tmp%%$) (<= tmp%%$ (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (nClip (Mul (verismo!tspec.size_s.spec_size.? T&. T&) 8))))))) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(set-info :comment ";; Function-Specs verismo::tspec::size_s::axiom_set_full_max_count_rel")
(declare-fun ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. T&. T&) (= (vstd!set.impl&%0.len.? T&. T& (vstd!set.impl&%0.full.? T&. T&)) (verismo!tspec.size_s.spec_max_count.? T&. T&))) :pattern ((ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. T&. T&)))))
(set-info :comment ";; Broadcast verismo::tspec::size_s::axiom_set_full_max_count_rel")
(assert (forall ((T&. Dcr) (T& Type)) (! (= (vstd!set.impl&%0.len.? T&. T& (vstd!set.impl&%0.full.? T&. T&)) (verismo!tspec.size_s.spec_max_count.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(set-info :comment ";; Function-Specs verismo::tspec::size_s::axiom_size_from_cast_bytes")
(declare-fun ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. T&. T&) (= (verismo!tspec.size_s.spec_size.? T&. T&) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))) :pattern ((ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. T&. T&)))))
(set-info :comment ";; Broadcast verismo::tspec::size_s::axiom_size_from_cast_bytes")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (= (verismo!tspec.size_s.spec_size.? T&. T&) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))) :pattern ((verismo!tspec.size_s.spec_size.? T&. T&)))))
(set-info :comment ";; Function-Specs verismo::tspec::size_s::axiom_size_from_cast_bytes_def")
(declare-fun ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. T&. T& val!) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (UINT 8) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!)))) :pattern ((ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. T&. T& val!)))))
(set-info :comment ";; Broadcast verismo::tspec::size_s::axiom_size_from_cast_bytes_def")
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (and (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (UINT 8) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!)))))
(set-info :comment ";; Function-Specs verismo::primitives_e::sectype::axiom_size_from_cast_secbytes_def")
(declare-fun ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. T&. T& val!) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))) :pattern ((ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. T&. T& val!)))))
(set-info :comment ";; Broadcast verismo::primitives_e::sectype::axiom_size_from_cast_secbytes_def")
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (and (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self! vmpl!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%2::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%2.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%2.is_constant.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? T1&. T1& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T2&. T2& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%696.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%696.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%697.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%697.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%1::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%1.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%1.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%tuple%0. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%1::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%1.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%1.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%tuple%0. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%tuple%0. self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%tuple%0.))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%0::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%0.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%tuple%0. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%tuple%0. self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%tuple%0.))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%16::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%16.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%16.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%tuple%0.) (I 0))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%tuple%0.))
(set-info :comment ";; Function-Axioms verismo::tspec::security::seq::impl&%1::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%8::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%8.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%8.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT SZ) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT SZ) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%8::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%8.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%8.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT SZ)) (I 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::usize_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.usize_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.usize_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.usize_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))) 256))))))))))))))) :pattern ((verismo!tspec.stream.basic.usize_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%11::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%11.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%11.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))) 256)))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%4::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to.))
(declare-fun %%lambda%%23 (Dcr Type Poly Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%23 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) i$) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$)))) :pattern ((%%apply%%0 (%%lambda%%23 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) i$)))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%23 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::wf")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%1.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%1.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.) self!) (B (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& $ TYPE%tuple%0. self!))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.)) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%5::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%5.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%5.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 64) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%6::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%6.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%6.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 64) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 64) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%5::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%5.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%5.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 64) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 64) self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%48::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%48.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%48.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%588.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%588.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%589.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%589.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%62::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%62.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%62.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%708::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%709::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%70.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%70.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT SZ)))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_sub_usize_usize_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.))
(declare-fun %%lambda%%24 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%24 v1$ v2$) (I (Sub (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%24 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param) (mk_fun %%lambda%%24)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%732.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%732.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%733.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%733.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%64::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%64.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%64.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms core::option::Option::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%0.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%0.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%core!option.Option. T&. T&) self!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%core!option.Option. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms core::option::Option::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%0.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%0.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%core!option.Option. T&. T&) self! vmpl!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%core!option.Option. T&. T&) self! vmpl!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Function-Axioms core::option::Option::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%3.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%3.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%core!option.Option. T&. T&) self!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%core!option.Option. T&. T&) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%23::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%23.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%23.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%484::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%485::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%24::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%24.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%24.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%488::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%489::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%492::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%493::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%496::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%497::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%500::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%501::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%504::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%505::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%17::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%17.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%17.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%508::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%509::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%512::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%513::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_add_u8_u8_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int.))
(declare-fun %%lambda%%25 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%25 v1$ v2$) (I (Add (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%25 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param) (mk_fun %%lambda%%25)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%514.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%514.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%515.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%515.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_sub_u8_u8_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param) (mk_fun %%lambda%%24)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%516.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%516.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%517.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%517.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%534.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%534.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%535.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%535.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%31::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%31.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%31.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%538::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%539::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%32::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%32.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%32.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%542::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%543::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%546::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%547::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%550::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%551::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%554::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%555::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%26::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%26.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%26.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%558::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%559::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%562::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%563::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%566::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%567::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_add_u16_u16_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param) (mk_fun %%lambda%%25)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%568.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%568.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%569.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%569.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_sub_u16_u16_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param) (mk_fun %%lambda%%24)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%570.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%570.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%571.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%571.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%39::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%39.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%39.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%592::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%593::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%40::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%40.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%40.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%596::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%597::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%600::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%601::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%604::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%605::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%35::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%35.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%35.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%608::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%609::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%612::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%613::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%616::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%617::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%620::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%621::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_add_u32_u32_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param) (mk_fun %%lambda%%25)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%622.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%622.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%623.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%623.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_sub_u32_u32_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param) (mk_fun %%lambda%%24)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%624.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%624.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%625.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%625.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%642.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%642.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%643.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%643.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%646::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%647::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%650::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%651::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%654::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%655::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%658::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%659::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%662::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%663::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%666::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%667::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%670::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%671::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%674::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%675::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_add_u64_u64_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param) (mk_fun %%lambda%%25)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%676.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%676.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%677.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%677.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_sub_u64_u64_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param) (mk_fun %%lambda%%24)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%678.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%678.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%679.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%679.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%700::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%701::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%704::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%705::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%712::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%713::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%716::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%717::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%720::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%721::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%724::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%725::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%728::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::impl&%729::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_add_usize_usize_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param) (mk_fun %%lambda%%25)) :pattern ((verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%730.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%730.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%731.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%731.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%750.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%750.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%751.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%751.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%79.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%79.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%80.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%80.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%78.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%78.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%76.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%76.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%75.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%75.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%74.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%74.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%73.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%73.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_add_nat_nat_nat")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.))
(declare-fun %%lambda%%26 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%26 v1$ v2$) (I (nClip (Add (%I v1$) (%I v2$))))) :pattern ((%%apply%%1 %%lambda%%26 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param) (mk_fun %%lambda%%26)) :pattern ((verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param)) (TYPE%fun%2. $ NAT $ NAT $ NAT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%780.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%780.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ NAT M&. M& $ NAT $ NAT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%781.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%781.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_sub_nat_nat_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param) (mk_fun %%lambda%%24)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param)) (TYPE%fun%2. $ NAT $ NAT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%782.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%782.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ NAT M&. M& $ NAT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%783.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%783.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%790.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%790.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::ord_int")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%791.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%791.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%71.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%71.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%68.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%68.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%67.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%67.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%66.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%66.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%65.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%65.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_add_int_int_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param) (mk_fun %%lambda%%25)) :pattern ((verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param)) (TYPE%fun%2. $ INT $ INT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%820.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%820.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ INT M&. M& $ INT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_int_int_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_add")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%821.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%821.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::fnspec::fn_spec_sub_int_int_int")
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param) (mk_fun %%lambda%%24)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param)) (TYPE%fun%2. $ INT $ INT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param)))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SpecSecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%822.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%822.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ INT M&. M& $ INT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_int_int_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::security::sectype::SecType::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%823.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%823.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::bool_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.bool_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.bool_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.bool_to_stream.? data!) (verismo!tspec.stream.basic.u8_to_stream.? (I (ite (%B data!) 1 0)))) :pattern ((verismo!tspec.stream.basic.bool_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::char_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.char_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.char_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.char_to_stream.? data!) (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (char%to_unicode (%C data!)))))) :pattern ((verismo!tspec.stream.basic.char_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::stream::basic::u128_to_stream")
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u128_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u128_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u128_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))) 256))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296)))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296)))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296))))) 65536))))) 256)))))))))))))))))) :pattern ((verismo!tspec.stream.basic.u128_to_stream.? data!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::GuestVir::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%2.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%2.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::GuestVir::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::GuestVir::spec_size_def")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%6.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%6.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) (I 0))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::GuestVir::wf")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%7.wf.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%7.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::GuestVir::is_constant")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::GuestVir::is_constant_to")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::GuestPhy::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%14.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%14.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::GuestPhy::spec_size_def")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%15.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%15.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (I 0))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::GuestPhy::wf")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%16.wf.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%16.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::GuestPhy::is_constant")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::GuestPhy::is_constant_to")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SysPhy::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%20.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%20.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SysPhy::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%23.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%23.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SysPhy::spec_size_def")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%24.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%24.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) (I 0))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SysPhy::wf")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%25.wf.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%25.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SysPhy::is_constant")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SysPhy::is_constant_to")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::PageSize::as_int")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%36.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%36.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!) (I (let ((val$ (ite (is-verismo!arch.addr_s.def_s.PageSize./Size4k_ (%Poly%verismo!arch.addr_s.def_s.PageSize. self!)) 0 1))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::PageSize::spec_from_int")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%38.spec_from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%38.spec_from_int.) (forall ((val! Poly)) (! (= (verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!) (ite (< (%I val!) 0) core!option.Option./None (ite (= (%I val!) 0) (core!option.Option./Some (Poly%verismo!arch.addr_s.def_s.PageSize. verismo!arch.addr_s.def_s.PageSize./Size4k)) (ite (= (%I val!) 1) (core!option.Option./Some (Poly%verismo!arch.addr_s.def_s.PageSize. verismo!arch.addr_s.def_s.PageSize./Size2m)) core!option.Option./None)))) :pattern ((verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%core!option.Option. (verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.addr_s.def_s.PageSize.))) :pattern ((verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!)))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::PageSize::from_int")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%36.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%36.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. val!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::PageSize::ord_int")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%37.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%37.ord_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!) (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::from_int")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%4.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%4.from_int.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) val!) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecPage::ord_int")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%6.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%6.ord_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!) (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecAddr::ord_int")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%7.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%7.ord_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!) (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::addr_s::def_s::SpecMem::is_aligned")
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.is_aligned.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.is_aligned.) (forall ((T&. Dcr) (T& Type) (self! Poly) (align! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.is_aligned.? T&. T& self! align!) (= (EucMod (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) (%I align!)) 0)) :pattern ((verismo!arch.addr_s.page.impl&%8.is_aligned.? T&. T& self! align!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memid::MemID::is_sm")
(assert (fuel_bool_default fuel%verismo!arch.entities.memid.impl&%3.is_sm.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memid.impl&%3.is_sm.) (forall ((self! Poly) (sm_memid! Poly)) (! (= (verismo!arch.entities.memid.impl&%3.is_sm.? self! sm_memid!) (and (<= (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.memid.impl&%3.to_vmpl.? self!)))) (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.memid.impl&%3.to_vmpl.? sm_memid!))))) (= (verismo!arch.entities.memid.impl&%3.to_asid.? self!) (verismo!arch.entities.memid.impl&%3.to_asid.? sm_memid!)))) :pattern ((verismo!arch.entities.memid.impl&%3.is_sm.? self! sm_memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memid::MemID::is_vmpl0")
(assert (fuel_bool_default fuel%verismo!arch.entities.memid.impl&%3.is_vmpl0.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memid.impl&%3.is_vmpl0.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memid.impl&%3.is_vmpl0.? self!) (and (is-verismo!arch.entities.VMPL./VMPL0_ (%Poly%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.memid.impl&%3.to_vmpl.? self!)))) (is-verismo!arch.entities.memid.MemID./Guest_ (%Poly%verismo!arch.entities.memid.MemID. self!)))) :pattern ((verismo!arch.entities.memid.impl&%3.is_vmpl0.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::PTLevel::spec_from_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%6.spec_from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%6.spec_from_int.) (forall ((val! Poly)) (! (= (verismo!arch.entities.memtype.impl&%6.spec_from_int.? val!) (ite (< (%I val!) 0) core!option.Option./None (ite (= (%I val!) 0) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L3)) (ite (= (%I val!) 1) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L2)) (ite (= (%I val!) 2) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L1)) (ite (= (%I val!) 3) (core!option.Option./Some (Poly%verismo!arch.entities.memtype.PTLevel. verismo!arch.entities.memtype.PTLevel./L0)) core!option.Option./None)))))) :pattern ((verismo!arch.entities.memtype.impl&%6.spec_from_int.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%core!option.Option. (verismo!arch.entities.memtype.impl&%6.spec_from_int.? val!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.entities.memtype.PTLevel.))) :pattern ((verismo!arch.entities.memtype.impl&%6.spec_from_int.? val!)))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::PTLevel::from_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%4.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%4.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. val!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.entities.memtype.impl&%6.spec_from_int.? val!))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::PTLevel::ord_int")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%5.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%5.ord_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. self!) (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.entities.memtype.PTLevel. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::entities::memtype::MemType::get_PTE_0")
(assert (fuel_bool_default fuel%verismo!arch.entities.memtype.impl&%8.get_PTE_0.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memtype.impl&%8.get_PTE_0.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memtype.impl&%8.get_PTE_0.? self!) (verismo!arch.entities.memtype.MemType./PTE/0 (%Poly%verismo!arch.entities.memtype.MemType. self!))) :pattern ((verismo!arch.entities.memtype.impl&%8.get_PTE_0.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::perm_s::PagePerm::as_int")
(assert (fuel_bool_default fuel%verismo!arch.rmp.perm_s.impl&%1.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.perm_s.impl&%1.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) self!) (I (let ((v1$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Read)) 1 0))) (let ((v2$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write)) 2 0))) (let ((v3$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeU)) 4 0))) (let ((v4$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeS)) 8 0))) (let ((v5$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Shadow)) 16 0))) (Add (Add (Add (Add v1$ v2$) v3$) v4$) v5$)))))))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::op_requires_stateless")
(assert (fuel_bool_default fuel%verismo!arch.rmp.rmpop_u.impl&%3.op_requires_stateless.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.rmpop_u.impl&%3.op_requires_stateless.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.rmpop_u.impl&%3.op_requires_stateless.? self!) (ite (and (and (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)) (is-verismo!arch.entities.params.PageID./PageID_ (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (is-verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam_ (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (let ((page$ (verismo!arch.entities.params.PageID./PageID/page (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((memid$ (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((gpn$ (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((psize$ (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/psize (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((vmsa$ (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmsa (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((vmpl$ (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmpl (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((perms$ (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/perms (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (or (not (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. perms$) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write))) (not (or (or (or (or (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn$))))) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn$)))))) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn$)))))) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn$)))))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn$))))))))))))))) (ite (and (and (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)) (is-verismo!arch.entities.params.PageID./PageID_ (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (is-verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam_ (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (let ((page$ (verismo!arch.entities.params.PageID./PageID/page (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((memid$ (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((gpn$ (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((psize$ (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/psize (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((val$ (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/val (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) true))))) (let ((page_id$ (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (let ((param$ (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) true))))) :pattern ((verismo!arch.rmp.rmpop_u.impl&%3.op_requires_stateless.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::sp_op_requires")
(assert (fuel_bool_default fuel%verismo!arch.rmp.rmpop_u.impl&%3.sp_op_requires.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.rmpop_u.impl&%3.sp_op_requires.) (forall ((self! Poly) (rmp! Poly)) (! (= (verismo!arch.rmp.rmpop_u.impl&%3.sp_op_requires.? self! rmp!) (and (verismo!arch.rmp.rmpop_u.impl&%3.op_requires_stateless.? self!) (=> (and (and (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)) (is-verismo!arch.entities.params.PageID./PageID_ (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (is-verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam_ (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) (let ((page$ (verismo!arch.entities.params.PageID./PageID/page (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((memid$ (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((gpn$ (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((psize$ (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/psize (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (let ((val$ (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/val (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))))))) (or (not (verismo!arch.rmp.db_u.rmp_has_gpn_memid.? rmp! (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn$) (Poly%verismo!arch.entities.memid.MemID. memid$))) (not (is-verismo!arch.entities.VMPL./VMPL0_ (%Poly%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.memid.impl&%3.to_vmpl.? (Poly%verismo!arch.entities.memid.MemID. memid$))))))))))))))) :pattern ((verismo!arch.rmp.rmpop_u.impl&%3.sp_op_requires.? self! rmp!))))))
(set-info :comment ";; Function-Axioms verismo::arch::rmp::def_s::RmpOp::gp_op_requires")
(assert (fuel_bool_default fuel%verismo!arch.rmp.rmpop_u.impl&%2.gp_op_requires.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.rmpop_u.impl&%2.gp_op_requires.) (forall ((self! Poly) (rmp! Poly)) (! (= (verismo!arch.rmp.rmpop_u.impl&%2.gp_op_requires.? self! rmp!) (let ((sp_op$ (verismo!arch.rmp.rmpop_u.impl&%2.set_spn.? self! (vstd!pervasive.arbitrary.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))))) (verismo!arch.rmp.rmpop_u.impl&%3.sp_op_requires.? (Poly%verismo!arch.rmp.def_s.RmpOp. sp_op$) rmp!))) :pattern ((verismo!arch.rmp.rmpop_u.impl&%2.gp_op_requires.? self! rmp!))))))
(set-info :comment ";; Function-Axioms verismo::arch::memop::MemOp::is_Write")
(assert (fuel_bool_default fuel%verismo!arch.memop.impl&%0.is_Write.))
(assert (=> (fuel_bool fuel%verismo!arch.memop.impl&%0.is_Write.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.memop.impl&%0.is_Write.? AddrT&. AddrT& self!) (is-verismo!arch.memop.MemOp./Write_ (%Poly%verismo!arch.memop.MemOp. self!))) :pattern ((verismo!arch.memop.impl&%0.is_Write.? AddrT&. AddrT& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::memop::MemOp::use_gmap")
(assert (fuel_bool_default fuel%verismo!arch.memop.memop.impl&%0.use_gmap.))
(assert (=> (fuel_bool fuel%verismo!arch.memop.memop.impl&%0.use_gmap.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.memop.memop.impl&%0.use_gmap.? AddrT&. AddrT& self!) (or (or (is-verismo!arch.memop.MemOp./Read_ (%Poly%verismo!arch.memop.MemOp. self!)) (is-verismo!arch.memop.MemOp./Write_ (%Poly%verismo!arch.memop.MemOp. self!))) (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. self!)))) :pattern ((verismo!arch.memop.memop.impl&%0.use_gmap.? AddrT&. AddrT& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::memop::MemOp::is_valid")
(assert (fuel_bool_default fuel%verismo!arch.memop.memop.impl&%0.is_valid.))
(assert (=> (fuel_bool fuel%verismo!arch.memop.memop.impl&%0.is_valid.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.memop.memop.impl&%0.is_valid.? AddrT&. AddrT& self!) (verismo!arch.addr_s.page.impl&%8.is_valid.? AddrT&. AddrT& (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? AddrT&. AddrT& self!))))))) :pattern ((verismo!arch.memop.memop.impl&%0.is_valid.? AddrT&. AddrT& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::PteFlag::spec_from_int")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.impl&%6.spec_from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.impl&%6.spec_from_int.) (forall ((val! Poly)) (! (= (verismo!arch.pgtable.def.impl&%6.spec_from_int.? val!) (ite (< (%I val!) 0) core!option.Option./None (ite (= (%I val!) 0) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./P)) (ite (= (%I val!) 1) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./W)) (ite (= (%I val!) 2) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./S)) (ite (= (%I val!) 3) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./PWT)) (ite (= (%I val!) 4) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./PCD)) (ite (= (%I val!) 5) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./A)) (ite (= (%I val!) 6) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./D)) (ite (= (%I val!) 51) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./C)) (ite (= (%I val!) 63) (core!option.Option./Some (Poly%verismo!arch.pgtable.def.PteFlag. verismo!arch.pgtable.def.PteFlag./NX)) core!option.Option./None))))))))))) :pattern ((verismo!arch.pgtable.def.impl&%6.spec_from_int.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%core!option.Option. (verismo!arch.pgtable.def.impl&%6.spec_from_int.? val!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.pgtable.def.PteFlag.))) :pattern ((verismo!arch.pgtable.def.impl&%6.spec_from_int.? val!)))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::PteFlag::from_int")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.impl&%4.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.impl&%4.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. val!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.def.impl&%6.spec_from_int.? val!))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::PteFlag::ord_int")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def.impl&%5.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def.impl&%5.ord_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. self!) (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.pgtable.def.PteFlag. self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def_e::PageTableEntry::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def_e.impl&%2.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def_e.impl&%2.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/value (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def_e::PageTableEntry::spec_size_def")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def_e.impl&%4.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def_e.impl&%4.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&)) (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&)))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def_e::PageTableEntry::wf")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def_e.impl&%5.wf.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def_e.impl&%5.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&) self!) (B (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/value (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. self!)))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def_e::PageTableEntry::is_constant")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def_e.impl&%6.is_constant.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def_e.impl&%6.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&) self!) (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/value (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. self!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&) self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def_e::PageTableEntry::is_constant_to")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.def_e.impl&%6.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.def_e.impl&%6.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&) self! vmpl!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/value (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!arch.pgtable.def_e.PageTableEntry./PageTableEntry/value (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::arch::pgtable::def::SpecPageTableEntry::new_val")
(assert (fuel_bool_default fuel%verismo!arch.pgtable.entry_s.impl&%1.new_val.))
(assert (=> (fuel_bool fuel%verismo!arch.pgtable.entry_s.impl&%1.new_val.) (forall ((T&. Dcr) (T& Type) (value! Poly)) (! (= (verismo!arch.pgtable.entry_s.impl&%1.new_val.? T&. T& value!) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry (%I value!) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.new_val.? T&. T& value!))))))
(assert (forall ((T&. Dcr) (T& Type) (value! Poly)) (! (=> (has_type value! INT) (has_type (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.entry_s.impl&%1.new_val.? T&. T& value!)) (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))) :pattern ((verismo!arch.pgtable.entry_s.impl&%1.new_val.? T&. T& value!)))))
(set-info :comment ";; Function-Axioms verismo::arch::vram::def::VRamDB::pte_write_requires_nosysmap")
(assert (fuel_bool_default fuel%verismo!arch.vram.vram_s.impl&%2.pte_write_requires_nosysmap.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.vram_s.impl&%2.pte_write_requires_nosysmap.) (forall ((self! Poly) (gpmem_id! Poly) (enc! Poly) (data! Poly)) (! (= (verismo!arch.vram.vram_s.impl&%2.pte_write_requires_nosysmap.? self! gpmem_id! enc! data!) (let ((gpmem$ (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. gpmem_id!)))) (let ((memid$ (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. gpmem_id!)))) (let ((old_pte$ (verismo!arch.vram.vram_s.impl&%2.get_enc_data_ok.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) self! gpmem_id!))) (let ((new_pte$ (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. (verismo!tspec.stream.stream_to_data.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) data!)))) (let ((target_gpn$ (verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def_e.impl&%7.view.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def_e.PageTableEntry. new_pte$)))))) (let ((ptesize$ (verismo!tspec.size_s.spec_size.? $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) (let ((is_last_entry$ (or (verismo!arch.pgtable.entry_s.impl&%1.is_present.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def_e.impl&%7.view.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def_e.PageTableEntry. new_pte$)))) (is-verismo!arch.entities.memtype.PTLevel./L0_ (%Poly%verismo!arch.entities.memtype.PTLevel. (Poly%verismo!arch.entities.memtype.PTLevel. (verismo!arch.entities.memtype.MemType./PTE/0 (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. gpmem$))))))))))))) (let ((need_c_bit$ (and (or (or (or (or (or (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$) (Poly%verismo!arch.addr_s.def_s.SpecPage. target_gpn$))))) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$) (Poly%verismo!arch.addr_s.def_s.SpecPage. target_gpn$)))))) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$) (Poly%verismo!arch.addr_s.def_s.SpecPage. target_gpn$)))))) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$) (Poly%verismo!arch.addr_s.def_s.SpecPage. target_gpn$)))))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$) (Poly%verismo!arch.addr_s.def_s.SpecPage. target_gpn$)))))) (is-verismo!arch.entities.memtype.MemType./SmVmplPage_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$) (Poly%verismo!arch.addr_s.def_s.SpecPage. target_gpn$)))))) is_last_entry$))) (=> (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. old_pte$))))) (> (verismo!arch.addr_s.page.impl&%8.len.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. gpmem$)) 0)) (let ((old_pte$1 (%Poly%verismo!arch.pgtable.def_e.PageTableEntry. (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. old_pte$)))))) (and (and (and (and (and (%B enc!) (verismo!arch.addr_s.page.impl&%8.is_aligned.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. gpmem_id!))) (I ptesize$))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. gpmem$)))))))) (= (verismo!arch.addr_s.page.impl&%8.len.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. gpmem_id!)))) ptesize$)) (= target_gpn$ (verismo!arch.pgtable.entry_s.impl&%1.spec_ppn.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def_e.impl&%7.view.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def_e.PageTableEntry. old_pte$1)))))) (=> need_c_bit$ (verismo!arch.pgtable.entry_s.impl&%1.is_encrypted.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def_e.impl&%7.view.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def_e.PageTableEntry. new_pte$))))))))))))))))) :pattern ((verismo!arch.vram.vram_s.impl&%2.pte_write_requires_nosysmap.? self! gpmem_id! enc! data!))))))
(set-info :comment ";; Function-Axioms verismo::arch::vram::def::VRamDB::gpwrite_requires")
(assert (fuel_bool_default fuel%verismo!arch.vram.vram_s.impl&%2.gpwrite_requires.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.vram_s.impl&%2.gpwrite_requires.) (forall ((self! Poly) (memid! Poly) (range! Poly) (enc! Poly) (data! Poly)) (! (= (verismo!arch.vram.vram_s.impl&%2.gpwrite_requires.? self! memid! range! enc! data!) (let ((memty$ (verismo!arch.entities.memtype.memtype.? memid! (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. range!))))) (=> (or (or (or (or (or (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. memty$))) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. memty$)))) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. memty$)))) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. memty$)))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. memty$)))) (is-verismo!arch.entities.memtype.MemType./SmVmplPage_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. memty$)))) (and (%B enc!) (=> (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. memty$))) (verismo!arch.vram.vram_s.impl&%2.pte_write_requires_nosysmap.? self! (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.entities.params.AddrMemID./AddrMemID (%Poly%verismo!arch.addr_s.def_s.SpecMem. range!) (%Poly%verismo!arch.entities.memid.MemID. memid!))) (B true) data!)))))) :pattern ((verismo!arch.vram.vram_s.impl&%2.gpwrite_requires.? self! memid! range! enc! data!))))))
(set-info :comment ";; Function-Axioms verismo::arch::vram::def::VRamDB::gpmemop_requires")
(assert (fuel_bool_default fuel%verismo!arch.vram.vram_s.impl&%2.gpmemop_requires.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.vram_s.impl&%2.gpmemop_requires.) (forall ((self! Poly) (op! Poly) (sysmap! Poly)) (! (= (verismo!arch.vram.vram_s.impl&%2.gpmemop_requires.? self! op! sysmap!) (let ((tmp%%$ (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. op!))) (let ((addr$ (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. tmp%%$))))) (let ((memid$ (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. tmp%%$))))) (ite (and (is-verismo!arch.memop.MemOp./Read_ (%Poly%verismo!arch.memop.MemOp. op!)) (is-verismo!arch.entities.params.AddrMemID./AddrMemID_ (verismo!arch.memop.MemOp./Read/0 (%Poly%verismo!arch.memop.MemOp. op!)))) (let ((addr$1 (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.MemOp./Read/0 (%Poly%verismo!arch.memop.MemOp. op!))))))) (let ((memid$1 (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.MemOp./Read/0 (%Poly%verismo!arch.memop.MemOp. op!))))))) (let ((enc$ (verismo!arch.memop.MemOp./Read/1 (%Poly%verismo!arch.memop.MemOp. op!)))) (=> (or (or (or (or (or (is-verismo!arch.entities.memtype.MemType./SmPrivData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$1) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. addr$1))))))) (is-verismo!arch.entities.memtype.MemType./SmBootData_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$1) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. addr$1)))))))) (is-verismo!arch.entities.memtype.MemType./SmPrivCode_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$1) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. addr$1)))))))) (is-verismo!arch.entities.memtype.MemType./SmPrivStack_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$1) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. addr$1)))))))) (is-verismo!arch.entities.memtype.MemType./PTE_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$1) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. addr$1)))))))) (is-verismo!arch.entities.memtype.MemType./SmVmplPage_ (%Poly%verismo!arch.entities.memtype.MemType. (Poly%verismo!arch.entities.memtype.MemType. (verismo!arch.entities.memtype.memtype.? (Poly%verismo!arch.entities.memid.MemID. memid$1) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. addr$1)))))))) enc$)))) (ite (is-verismo!arch.memop.MemOp./Write_ (%Poly%verismo!arch.memop.MemOp. op!)) (let ((gpmem_id$ (verismo!arch.memop.MemOp./Write/0 (%Poly%verismo!arch.memop.MemOp. op!)))) (let ((enc$ (verismo!arch.memop.MemOp./Write/1 (%Poly%verismo!arch.memop.MemOp. op!)))) (let ((data$ (verismo!arch.memop.MemOp./Write/2 (%Poly%verismo!arch.memop.MemOp. op!)))) (verismo!arch.vram.vram_s.impl&%2.gpwrite_requires.? self! (Poly%verismo!arch.entities.memid.MemID. memid$) (Poly%verismo!arch.addr_s.def_s.SpecMem. addr$) (B enc$) (Poly%vstd!seq.Seq<u8.>. data$))))) (=> (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. op!)) (let ((rmpop$ (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. op!)))) (verismo!arch.rmp.rmpop_u.impl&%2.gp_op_requires.? (Poly%verismo!arch.rmp.def_s.RmpOp. rmpop$) (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. (verismo!arch.vram.def.impl&%2.spec_rmp.? self!))))))))))) :pattern ((verismo!arch.vram.vram_s.impl&%2.gpmemop_requires.? self! op! sysmap!))))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::to_gpop_ok")
(assert (fuel_bool_default fuel%verismo!arch.mem.mem_u.impl&%0.to_gpop_ok.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.mem_u.impl&%0.to_gpop_ok.) (forall ((self! Poly) (memop! Poly)) (! (= (verismo!arch.mem.mem_u.impl&%0.to_gpop_ok.? self! memop!) (let ((gvmem$ (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. memop!)))))) (let ((op_memid$ (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. memop!)))))) (let ((guestmap$ (verismo!arch.mem.mem_u.impl&%0.to_mem_map_ok.? self! (Poly%verismo!arch.entities.memid.MemID. op_memid$)))) (let ((gpmem$ (verismo!arch.addr_s.page.impl&%8.convert.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecMem. gvmem$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. guestmap$) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecMem. gvmem$)))))))))) (let ((enc$ (verismo!arch.pgtable.memmap_s.impl&%0.is_encrypted.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. guestmap$) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecMem. gvmem$)))))) (verismo!arch.memop.gvmemop.impl&%0.translate_gpn.? memop! (Poly%verismo!arch.addr_s.def_s.SpecMem. gpmem$) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. enc$)))))))))) :pattern ((verismo!arch.mem.mem_u.impl&%0.to_gpop_ok.? self! memop!))))))
(assert (forall ((self! Poly) (memop! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.mem.def_s.MemDB.) (has_type memop! (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.mem.mem_u.impl&%0.to_gpop_ok.? self! memop!)) (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.mem.mem_u.impl&%0.to_gpop_ok.? self! memop!)))))
(set-info :comment ";; Function-Axioms verismo::arch::mem::def_s::MemDB::vop_requires")
(assert (fuel_bool_default fuel%verismo!arch.mem.mem_u.impl&%0.vop_requires.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.mem_u.impl&%0.vop_requires.) (forall ((self! Poly) (memop! Poly)) (! (= (verismo!arch.mem.mem_u.impl&%0.vop_requires.? self! memop!) (let ((gvn$ (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. memop!)))))))) (let ((gp_memop$ (verismo!arch.mem.mem_u.impl&%0.to_gpop_ok.? self! memop!))) (let ((gmap$ (verismo!arch.mem.mem_u.impl&%0.to_mem_map_ok.? self! (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. memop!)))))))) (let ((sysmap$ (%Poly%verismo!arch.pgtable.def.MemMap. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. (verismo!arch.mem.def_s.impl&%0.spec_sysmap.? self!)) (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. memop!))))))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. gmap$) (Poly%verismo!arch.addr_s.def_s.SpecPage. gvn$))))))) (verismo!arch.vram.vram_s.impl&%2.gpmemop_requires.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.mem.def_s.impl&%0.spec_vram.? self!)) (Poly%verismo!arch.memop.MemOp. gp_memop$) (Poly%verismo!arch.pgtable.def.MemMap. sysmap$)))))))) :pattern ((verismo!arch.mem.mem_u.impl&%0.vop_requires.? self! memop!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::spec_set_memdb")
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%5.spec_set_memdb.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%5.spec_set_memdb.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.x64.def_s.impl&%5.spec_set_memdb.? self! val!) (verismo!arch.x64.def_s.impl&%6.spec_new.? val! (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!)) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)))) :pattern ((verismo!arch.x64.def_s.impl&%5.spec_set_memdb.? self! val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64Op::is_valid")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%0.is_valid.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%0.is_valid.) (forall ((self! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%0.is_valid.? self!) (=> (is-verismo!arch.x64.def_s.Archx64Op./MemOp_ (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)) (let ((memop$ (verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) (verismo!arch.memop.memop.impl&%0.is_valid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.memop.MemOp. memop$))))) :pattern ((verismo!arch.x64.x64_s.impl&%0.is_valid.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64Op::start_cpu_with_vmsa")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%0.start_cpu_with_vmsa.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%0.start_cpu_with_vmsa.) (forall ((self! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%0.start_cpu_with_vmsa.? self!) (ite (is-verismo!arch.x64.def_s.Archx64Op./MemOp_ (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)) (let ((memop$ (verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) (ite (and (is-verismo!arch.memop.MemOp./RmpOp_ memop$) (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$))))) (let ((params$ (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$)))))))) (ite (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmsa (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. params$))) (core!option.Option./Some (I (nClip (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.memop.MemOp. memop$))))))))))))) core!option.Option./None)) core!option.Option./None)) core!option.Option./None)) :pattern ((verismo!arch.x64.x64_s.impl&%0.start_cpu_with_vmsa.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%core!option.Option. (verismo!arch.x64.x64_s.impl&%0.start_cpu_with_vmsa.? self!)) (TYPE%core!option.Option. $ NAT))) :pattern ((verismo!arch.x64.x64_s.impl&%0.start_cpu_with_vmsa.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64Op::memop")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%0.memop.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%0.memop.) (forall ((self! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%0.memop.? self!) (verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!))) :pattern ((verismo!arch.x64.x64_s.impl&%0.memop.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.x64.x64_s.impl&%0.memop.? self!)) (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) :pattern ((verismo!arch.x64.x64_s.impl&%0.memop.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::spec_cpu")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.spec_cpu.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.spec_cpu.) (forall ((self! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.spec_cpu.? self!) (verismo!arch.x64.def_s.current_cpu.? (I 0))) :pattern ((verismo!arch.x64.x64_s.impl&%1.spec_cpu.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.x64.def_s.Archx64.) (<= 0 (verismo!arch.x64.x64_s.impl&%1.spec_cpu.? self!))) :pattern ((verismo!arch.x64.x64_s.impl&%1.spec_cpu.? self!)))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::is_stop")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.is_stop.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.is_stop.) (forall ((self! Poly) (cpu_memid! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.is_stop.? self! cpu_memid!) (let ((memid$ (verismo!arch.entities.memid.impl&%2.memid.? cpu_memid!))) (let ((cpu$ (verismo!arch.entities.memid.impl&%2.cpu.? cpu_memid!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)) (Poly%verismo!arch.entities.memid.MemID. memid$))) (I cpu$)) (not (%B (vstd!map.impl&%0.index.? $ NAT $ BOOL (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)) (Poly%verismo!arch.entities.memid.MemID. memid$)) (I cpu$)))))))) :pattern ((verismo!arch.x64.x64_s.impl&%1.is_stop.? self! cpu_memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::start_cpu")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.start_cpu.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.start_cpu.) (forall ((self! Poly) (memid! Poly) (cpu! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.start_cpu.? self! memid! cpu!) (let ((memid_entries$ (%Poly%vstd!map.Map<nat./bool.>. (vstd!map.impl&%0.insert.? $ NAT $ BOOL (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)) memid!) cpu! (B true))))) (ite (not (verismo!arch.x64.x64_s.impl&%1.is_stop.? self! (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.entities.memid.CpuMemID./CpuMemID (%I cpu!) (%Poly%verismo!arch.entities.memid.MemID. memid!))))) (verismo!arch.x64.def_s.impl&%5.spec_set_entities.? self! (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)) memid! (Poly%vstd!map.Map<nat./bool.>. memid_entries$))) (%Poly%verismo!arch.x64.def_s.Archx64. self!)))) :pattern ((verismo!arch.x64.x64_s.impl&%1.start_cpu.? self! memid! cpu!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::handle_mem_err")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.handle_mem_err.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.handle_mem_err.) (forall ((self! Poly) (op! Poly) (err! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.handle_mem_err.? self! op! err!) (%Poly%verismo!arch.x64.def_s.Archx64. (let ((cpu_memid$ (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? op!))) (%%apply%%1 (%Poly%fun%2. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (ite (is-verismo!arch.errors.MemError./NoRam_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NoRam/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%2 (Poly%verismo!arch.x64.def_s.AECode. verismo!arch.x64.def_s.AECode./Npf)))))) (ite (is-verismo!arch.errors.MemError./NotValidated_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NotValidated/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%3 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0))))))) (ite (is-verismo!arch.errors.MemError./NestedPF_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NestedPF/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%2 (Poly%verismo!arch.x64.def_s.AECode. verismo!arch.x64.def_s.AECode./Npf)))))) (ite (is-verismo!arch.errors.MemError./PageFault_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./PageFault/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%4 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0))))))) (ite (is-verismo!arch.errors.MemError./RmpOp_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((fault$$0 (verismo!arch.errors.MemError./RmpOp/0 (%Poly%verismo!arch.errors.MemError. err!)))) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./RmpOp/1 (%Poly%verismo!arch.errors.MemError. err!))))) (ite (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0))) (ite (is-verismo!arch.errors.RmpFault./Unsupported_ fault$$0) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%5 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0)))))) (ite (is-verismo!arch.errors.RmpFault./Size_ fault$$0) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%6 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.?))))) (ite (is-verismo!arch.errors.RmpFault./Input_ fault$$0) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%6 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_INPUT.?))))) (ite (is-verismo!arch.errors.RmpFault./Perm_ fault$$0) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%6 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.?))))) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%7 $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags) 64 64 (I (uClip 64 (uintshl 64 (I 1) (I (%I (I (uClip 64 (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./CF)))))))))) 64 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags))))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun %%lambda%%8)))))) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./Others/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%5 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0)))))))))))))))) self! op!)))) :pattern ((verismo!arch.x64.x64_s.impl&%1.handle_mem_err.? self! op! err!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::op")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.op.))
(define-fun is-verismo!arch.x64.def_s.Archx64Op./LoopHalt_ ((c verismo!arch.x64.def_s.Archx64Op.)) Bool ((_ is verismo!arch.x64.def_s.Archx64Op./LoopHalt) c))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.op.) (forall ((self! Poly) (op! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.op.? self! op!) (ite (not (verismo!arch.x64.x64_s.impl&%1.is_run.? self! (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? op!)))) (%Poly%verismo!arch.x64.def_s.Archx64. self!) (ite (is-verismo!arch.x64.def_s.Archx64Op./MemOp_ (%Poly%verismo!arch.x64.def_s.Archx64Op. op!)) (let ((memop$ (verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. op!)))) (let ((init$ (ite (is-verismo!arch.memop.MemOp./RmpOp_ memop$) (let ((rmpop$ (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$))))) (verismo!arch.x64.x64_s.impl&%1.op_write_reg.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.op_write_reg.? self! (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? op!)) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I 0))) (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? op!)) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags) (I 0))) (%Poly%verismo!arch.x64.def_s.Archx64. self!)))) (let ((tmp%%$ (verismo!arch.mem.mem_s.impl&%0.op.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.x64.def_s.impl&%4.spec_memdb.? (Poly%verismo!arch.x64.def_s.Archx64. init$))) (Poly%verismo!arch.memop.MemOp. memop$)))) (ite (is-verismo!tspec.ResultWithErr./Ok_ tmp%%$) (let ((newmem$ (%Poly%verismo!arch.mem.def_s.MemDB. (verismo!tspec.ResultWithErr./Ok/0 (%Poly%verismo!tspec.ResultWithErr. (Poly%verismo!tspec.ResultWithErr. tmp%%$)))))) (let ((new$ (verismo!arch.x64.def_s.impl&%5.spec_set_memdb.? (Poly%verismo!arch.x64.def_s.Archx64. init$) (Poly%verismo!arch.mem.def_s.MemDB. newmem$)))) (let ((cpu$ (verismo!arch.x64.x64_s.impl&%0.start_cpu_with_vmsa.? op!))) (ite (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. cpu$))))) (verismo!arch.x64.x64_s.impl&%1.start_cpu.? (Poly%verismo!arch.x64.def_s.Archx64. new$) (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? op!)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. cpu$)))) new$)))) (let ((newmem$ (%Poly%verismo!arch.mem.def_s.MemDB. (verismo!tspec.ResultWithErr./Error/0 (%Poly%verismo!tspec.ResultWithErr. (Poly%verismo!tspec.ResultWithErr. tmp%%$)))))) (let ((err$ (%Poly%verismo!arch.errors.MemError. (verismo!tspec.ResultWithErr./Error/1 (%Poly%verismo!tspec.ResultWithErr. (Poly%verismo!tspec.ResultWithErr. tmp%%$)))))) (verismo!arch.x64.x64_s.impl&%1.handle_mem_err.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.impl&%5.spec_set_memdb.? (Poly%verismo!arch.x64.def_s.Archx64. init$) (Poly%verismo!arch.mem.def_s.MemDB. newmem$))) op! (Poly%verismo!arch.errors.MemError. err$)))))))) (ite (is-verismo!arch.x64.def_s.Archx64Op./RegWrite_ (%Poly%verismo!arch.x64.def_s.Archx64Op. op!)) (let ((name$ (verismo!arch.x64.def_s.Archx64Op./RegWrite/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. op!)))) (let ((val$ (verismo!arch.x64.def_s.Archx64Op./RegWrite/2 (%Poly%verismo!arch.x64.def_s.Archx64Op. op!)))) (ite (= (verismo!arch.x64.x64_s.impl&%0.cpu.? op!) (verismo!arch.x64.x64_s.impl&%1.spec_cpu.? self!)) (verismo!arch.x64.x64_s.impl&%1.op_write_reg.? self! (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? op!)) (Poly%verismo!arch.reg.RegName. name$) (I val$)) (%Poly%verismo!arch.x64.def_s.Archx64. self!)))) (ite (is-verismo!arch.x64.def_s.Archx64Op./RegRead_ (%Poly%verismo!arch.x64.def_s.Archx64Op. op!)) (%Poly%verismo!arch.x64.def_s.Archx64. self!) (ite (is-verismo!arch.x64.def_s.Archx64Op./LoopHalt_ (%Poly%verismo!arch.x64.def_s.Archx64Op. op!)) (verismo!arch.x64.x64_s.impl&%1.stop_cpu.? self! (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? op!)) (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op!))) (ite (= (verismo!arch.x64.x64_s.impl&%0.cpu.? op!) (verismo!arch.x64.x64_s.impl&%1.spec_cpu.? self!)) (verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle.? self! op! (Poly%verismo!arch.x64.def_s.AECode. verismo!arch.x64.def_s.AECode./VMGExit)) (%Poly%verismo!arch.x64.def_s.Archx64. self!)))))))) :pattern ((verismo!arch.x64.x64_s.impl&%1.op.? self! op!))))))
(set-info :comment ";; Function-Axioms verismo::arch::reg::RegDB::reg_inv")
(assert (fuel_bool_default fuel%verismo!arch.reg.impl&%7.reg_inv.))
(assert (=> (fuel_bool fuel%verismo!arch.reg.impl&%7.reg_inv.) (forall ((self! Poly)) (! (= (verismo!arch.reg.impl&%7.reg_inv.? self!) (= (%I (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) self!) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cpl))) 0)) :pattern ((verismo!arch.reg.impl&%7.reg_inv.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::inv_regdb")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_u.impl&%1.inv_regdb.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_u.impl&%1.inv_regdb.) (forall ((self! Poly) (cpu! Poly) (memid! Poly)) (! (= (verismo!arch.x64.x64_u.impl&%1.inv_regdb.? self! cpu! memid!) (and (verismo!arch.reg.impl&%7.reg_inv.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!)) (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.entities.memid.CpuMemID./CpuMemID (%I cpu!) (%Poly%verismo!arch.entities.memid.MemID. memid!))))) (= (verismo!arch.ptram.ptram_u.impl&%2.l0_entry.? (Poly%verismo!arch.ptram.def_s.GuestPTRam. (verismo!arch.mem.mem_s.impl&%0.spec_g_page_table.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.x64.def_s.impl&%4.spec_memdb.? self!)) memid!)) memid!) (verismo!arch.pgtable.entry_s.impl&%1.new_val.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!)) (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.entities.memid.CpuMemID./CpuMemID (%I cpu!) (%Poly%verismo!arch.entities.memid.MemID. memid!))))) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr3)))))) :pattern ((verismo!arch.x64.x64_u.impl&%1.inv_regdb.? self! cpu! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::inv_regdb_any_cpu")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_u.impl&%1.inv_regdb_any_cpu.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_u.impl&%1.inv_regdb_any_cpu.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.x64.x64_u.impl&%1.inv_regdb_any_cpu.? self! memid!) (forall ((cpu$ Poly)) (! (=> (has_type cpu$ NAT) (verismo!arch.x64.x64_u.impl&%1.inv_regdb.? self! cpu$ memid!)) :pattern ((verismo!arch.x64.x64_u.impl&%1.inv_regdb.? self! cpu$ memid!))))) :pattern ((verismo!arch.x64.x64_u.impl&%1.inv_regdb_any_cpu.? self! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64::inv")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_u.impl&%1.inv.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_u.impl&%1.inv.) (forall ((self! Poly) (memid! Poly)) (! (= (verismo!arch.x64.x64_u.impl&%1.inv.? self! memid!) (and (and (verismo!arch.mem.mem_u.impl&%0.inv.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.x64.def_s.impl&%4.spec_memdb.? self!)) memid!) (verismo!arch.x64.x64_u.impl&%1.inv_regdb_any_cpu.? self! memid!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)) memid!)) (I (verismo!arch.x64.x64_s.impl&%1.spec_cpu.? self!))))) :pattern ((verismo!arch.x64.x64_u.impl&%1.inv.? self! memid!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64Op::reg_write_requires")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_u.impl&%2.reg_write_requires.))
(define-fun is-verismo!arch.reg.RegName./Cpl_ ((c verismo!arch.reg.RegName.)) Bool ((_ is verismo!arch.reg.RegName./Cpl) c))
(define-fun is-verismo!arch.reg.RegName./Cr3_ ((c verismo!arch.reg.RegName.)) Bool ((_ is verismo!arch.reg.RegName./Cr3) c))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_u.impl&%2.reg_write_requires.) (forall ((regname! Poly) (val! Poly)) (! (= (verismo!arch.x64.x64_u.impl&%2.reg_write_requires.? regname! val!) (and (not (is-verismo!arch.reg.RegName./Cpl_ (%Poly%verismo!arch.reg.RegName. regname!))) (not (is-verismo!arch.reg.RegName./Cr3_ (%Poly%verismo!arch.reg.RegName. regname!))))) :pattern ((verismo!arch.x64.x64_u.impl&%2.reg_write_requires.? regname! val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::x64::def_s::Archx64Op::op_requires")
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_u.impl&%2.op_requires.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_u.impl&%2.op_requires.) (forall ((self! Poly) (sm_memid! Poly) (arch! Poly)) (! (= (verismo!arch.x64.x64_u.impl&%2.op_requires.? self! sm_memid! arch!) (=> (verismo!arch.entities.memid.impl&%3.is_sm.? (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? self!)) sm_memid!) (ite (is-verismo!arch.x64.def_s.Archx64Op./MemOp_ (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)) (let ((memop$ (verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) (verismo!arch.mem.mem_u.impl&%0.vop_requires.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.x64.def_s.impl&%4.spec_memdb.? arch!)) (Poly%verismo!arch.memop.MemOp. memop$))) (=> (is-verismo!arch.x64.def_s.Archx64Op./RegWrite_ (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)) (let ((reg_name$ (verismo!arch.x64.def_s.Archx64Op./RegWrite/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) (let ((reg_val$ (verismo!arch.x64.def_s.Archx64Op./RegWrite/2 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) (verismo!arch.x64.x64_u.impl&%2.reg_write_requires.? (Poly%verismo!arch.reg.RegName. reg_name$) (I reg_val$)))))))) :pattern ((verismo!arch.x64.x64_u.impl&%2.op_requires.? self! sm_memid! arch!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%6::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%6.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%6.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 32) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%6::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%6.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%6.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 32) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 32) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%7::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%7.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%7.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 32) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%7::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%23 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%6::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%23 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%9::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%9.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%9.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 8) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 8) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%2.vspec_cast_to.))
(declare-fun %%choose%%4 (Type Dcr Type Dcr Type Poly Dcr Type Dcr Type) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type)) (! (=> (exists ((ret$ Poly)) (! (and (has_type ret$ %%hole%%0) (= %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 ret$))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 ret$)))) (exists ((ret$ Poly)) (! (and (and (has_type ret$ %%hole%%0) (= %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 ret$))) (= (%%choose%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9) ret$)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 ret$))))) :pattern ((%%choose%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9)))))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%2.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) self!) (as_type (%%choose%%4 (UINT 8) $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%4.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16) self!) (as_type (%%choose%%4 (UINT 16) $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 16))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%6.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32) self!) (as_type (%%choose%%4 (UINT 32) $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 32))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%8.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%8.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64) self!) (as_type (%%choose%%4 (UINT 64) $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 64))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%9::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%9.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%9.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))) 256))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296)))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296)))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296))))) 65536))))) 256))))))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%10.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%10.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128) self!) (as_type (%%choose%%4 (UINT 128) $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 128))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%12.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%12.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ) self!) (as_type (%%choose%%4 (UINT SZ) $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT SZ))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%13::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%13.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%13.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (char%to_unicode (%C self!))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%14.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%14.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR self!) (as_type (%%choose%%4 CHAR $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8))) CHAR)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%15::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%15.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%15.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (ite (%B self!) 1 0))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%16.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%16.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL self!) (as_type (%%choose%%4 BOOL $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8))) BOOL)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%21::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%21.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%21.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%29::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%29.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%29.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%37::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%37.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%37.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%45::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%45.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%45.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%49::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%49.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%49.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%50::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%50.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%50.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%51::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%51.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%51.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%52::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%52.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%52.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%53::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%53.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%53.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%54::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%54.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%54.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%55::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%55.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%55.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ INT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%56::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%56.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%56.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%61::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%61.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%61.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%69.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%69.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%77.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%77.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%81::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%81.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%81.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%82::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%82.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%82.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 8) self!) (as_type (%%choose%%4 (UINT 8) $ (UINT 8) $ BOOL self! $ (UINT 8) $ BOOL) (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%83::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%83.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%83.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%84::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%84.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%84.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 16) self!) (as_type (%%choose%%4 (UINT 16) $ (UINT 16) $ BOOL self! $ (UINT 16) $ BOOL) (UINT 16))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%85::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%85.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%85.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%86::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%86.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%86.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 32) self!) (as_type (%%choose%%4 (UINT 32) $ (UINT 32) $ BOOL self! $ (UINT 32) $ BOOL) (UINT 32))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 32) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%87::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%87.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%87.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%88::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%88.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%88.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 64) self!) (as_type (%%choose%%4 (UINT 64) $ (UINT 64) $ BOOL self! $ (UINT 64) $ BOOL) (UINT 64))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 64) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%89::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%89.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%89.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%90::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%90.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%90.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 128) self!) (as_type (%%choose%%4 (UINT 128) $ (UINT 128) $ BOOL self! $ (UINT 128) $ BOOL) (UINT 128))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 128) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%91::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%91.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%91.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%92::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%92.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%92.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT SZ) self!) (as_type (%%choose%%4 (UINT SZ) $ (UINT SZ) $ BOOL self! $ (UINT SZ) $ BOOL) (UINT SZ))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT SZ) self!))))))
(set-info :comment ";; Function-Axioms builtin::int::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%93.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%93.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%94::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%94.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%94.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ INT self!) (as_type (%%choose%%4 INT $ INT $ BOOL self! $ INT $ BOOL) INT)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ INT self!))))))
(set-info :comment ";; Function-Axioms builtin::nat::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%95.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%95.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%96::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%96.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%96.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ NAT self!) (as_type (%%choose%%4 NAT $ NAT $ BOOL self! $ NAT $ BOOL) NAT)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ NAT self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%97::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%97.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%97.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (UINT 8) self!) (I (uClip 8 (char%to_unicode (%C self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::cast::impl&%98::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%98.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%98.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms builtin::Ghost::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%99.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%99.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms vstd::seq::Seq::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%100.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%100.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%101.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%101.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%2::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%2.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%2.is_constant_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self! vmpl!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T1&. T1& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)) vmpl!)) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T2&. T2& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self! vmpl!))))))
(set-info :comment ";; Function-Axioms builtin::Ghost::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%3.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%3.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? (GHOST T&.) T& self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? (GHOST T&.) T& self!))))))
(set-info :comment ";; Function-Axioms builtin::Ghost::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%3.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%3.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? (GHOST T&.) T& self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? (GHOST T&.) T& self! vmpl!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%4.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%4.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? (TRACKED T&.) T& self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? (TRACKED T&.) T& self!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%4.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%4.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? (TRACKED T&.) T& self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? (TRACKED T&.) T& self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%7::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%7.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%7.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 16) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%7::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%7.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%7.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 16) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 16) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%9::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%9.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%9.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 8) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 8) self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%10::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%10.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%10.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ BOOL self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%10::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%10.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%10.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ BOOL self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ BOOL self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%11::is_constant")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%11.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%11.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ CHAR self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ CHAR self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::isconst::impl&%11::is_constant_to")
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%11.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%11.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ CHAR self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ CHAR self! vmpl!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%2::T1::spec_sub")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%2.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%2.spec_sub.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& T1&. T1& $ INT self! rhs!) (I (Sub (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& T1&. T1& $ INT self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%8::T::spec_ge")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%8.spec_ge.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%8.spec_ge.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& $ INT self! rhs!) (B (>= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& $ INT self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%9::T::spec_ge")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%9.spec_ge.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%9.spec_ge.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& $ NAT self! rhs!) (B (>= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& $ NAT self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%10::T::spec_ge")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%10.spec_ge.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%10.spec_ge.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& $ (UINT 8) self! rhs!) (B (>= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& $ (UINT 8) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%11::T::spec_ge")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%11.spec_ge.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%11.spec_ge.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& $ (UINT 16) self! rhs!) (B (>= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& $ (UINT 16) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%12::T::spec_ge")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%12.spec_ge.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%12.spec_ge.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& $ (UINT 32) self! rhs!) (B (>= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& $ (UINT 32) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%13::T::spec_ge")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%13.spec_ge.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%13.spec_ge.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& $ (UINT 64) self! rhs!) (B (>= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& $ (UINT 64) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::integer::impl&%14::T::spec_ge")
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%14.spec_ge.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%14.spec_ge.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& $ (UINT SZ) self! rhs!) (B (>= (%I (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!)) (%I rhs!)))) :pattern ((verismo!tspec.ops.VSpecOrd.spec_ge.? T&. T& $ (UINT SZ) self! rhs!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%9::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%9.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%9.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 128)) (I 16))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%14::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%14.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%14.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ BOOL) (I 1))))
(set-info :comment ";; Function-Axioms verismo::tspec::size_s::impl&%15::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%15.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%15.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ CHAR) (I 1))))
(set-info :comment ";; Function-Axioms builtin::Ghost::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%17.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%17.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? (GHOST T&.) T&) (I 0)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? (GHOST T&.) T&))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::spec_size_def")
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%18.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%18.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? (TRACKED T&.) T&) (I 0)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? (TRACKED T&.) T&))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%1::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%1.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%1.wf.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!) (B (and (%B (verismo!tspec.wellformed.WellFormed.wf.? T1&. T1& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T2&. T2& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!))))))
(set-info :comment ";; Function-Axioms builtin::Ghost::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%4.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%4.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? (GHOST T&.) T& self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? (GHOST T&.) T& self!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%5.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%5.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? (TRACKED T&.) T& self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? (TRACKED T&.) T& self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%8::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%8.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%8.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 16) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 16) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%10::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%10.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%10.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 8) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 8) self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%11::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%11.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%11.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ BOOL self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ BOOL self!))))))
(set-info :comment ";; Function-Axioms verismo::tspec::wellformed::impl&%12::wf")
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%12.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%12.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ CHAR self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ CHAR self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::errors::MemError::is_RmpOp")
(assert (fuel_bool_default fuel%verismo!arch.errors.impl&%0.is_RmpOp.))
(assert (=> (fuel_bool fuel%verismo!arch.errors.impl&%0.is_RmpOp.) (forall ((Param&. Dcr) (Param& Type) (self! Poly)) (! (= (verismo!arch.errors.impl&%0.is_RmpOp.? Param&. Param& self!) (is-verismo!arch.errors.MemError./RmpOp_ (%Poly%verismo!arch.errors.MemError. self!))) :pattern ((verismo!arch.errors.impl&%0.is_RmpOp.? Param&. Param& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::errors::MemError::get_RmpOp_0")
(assert (fuel_bool_default fuel%verismo!arch.errors.impl&%0.get_RmpOp_0.))
(assert (=> (fuel_bool fuel%verismo!arch.errors.impl&%0.get_RmpOp_0.) (forall ((Param&. Dcr) (Param& Type) (self! Poly)) (! (= (verismo!arch.errors.impl&%0.get_RmpOp_0.? Param&. Param& self!) (verismo!arch.errors.MemError./RmpOp/0 (%Poly%verismo!arch.errors.MemError. self!))) :pattern ((verismo!arch.errors.impl&%0.get_RmpOp_0.? Param&. Param& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::errors::RmpFault::is_DoubleVal")
(assert (fuel_bool_default fuel%verismo!arch.errors.impl&%2.is_DoubleVal.))
(define-fun is-verismo!arch.errors.RmpFault./DoubleVal_ ((c verismo!arch.errors.RmpFault.)) Bool ((_ is verismo!arch.errors.RmpFault./DoubleVal) c))
(assert (=> (fuel_bool fuel%verismo!arch.errors.impl&%2.is_DoubleVal.) (forall ((self! Poly)) (! (= (verismo!arch.errors.impl&%2.is_DoubleVal.? self!) (is-verismo!arch.errors.RmpFault./DoubleVal_ (%Poly%verismo!arch.errors.RmpFault. self!))) :pattern ((verismo!arch.errors.impl&%2.is_DoubleVal.? self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::errors::MemError::trigger_trap")
(assert (fuel_bool_default fuel%verismo!arch.errors.impl&%3.trigger_trap.))
(assert (=> (fuel_bool fuel%verismo!arch.errors.impl&%3.trigger_trap.) (forall ((Param&. Dcr) (Param& Type) (self! Poly)) (! (= (verismo!arch.errors.impl&%3.trigger_trap.? Param&. Param& self!) (=> (is-verismo!arch.errors.MemError./RmpOp_ (%Poly%verismo!arch.errors.MemError. self!)) (let ((fault$ (verismo!arch.errors.MemError./RmpOp/0 (%Poly%verismo!arch.errors.MemError. self!)))) (= fault$ verismo!arch.errors.RmpFault./Unsupported)))) :pattern ((verismo!arch.errors.impl&%3.trigger_trap.? Param&. Param& self!))))))
(set-info :comment ";; Function-Axioms verismo::arch::reg::RflagBit::spec_from_int")
(assert (fuel_bool_default fuel%verismo!arch.reg.impl&%5.spec_from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.reg.impl&%5.spec_from_int.) (forall ((val! Poly)) (! (= (verismo!arch.reg.impl&%5.spec_from_int.? val!) (ite (< (%I val!) 0) core!option.Option./None (ite (= (%I val!) 0) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./CF)) (ite (= (%I val!) 1) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./R1)) (ite (= (%I val!) 2) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./PF)) (ite (= (%I val!) 3) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./R2)) (ite (= (%I val!) 4) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./AF)) (ite (= (%I val!) 5) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./R3)) (ite (= (%I val!) 6) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./ZF)) (ite (= (%I val!) 7) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./SF)) (ite (= (%I val!) 8) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./TF)) (ite (= (%I val!) 9) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./IF)) (ite (= (%I val!) 10) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./DF)) (ite (= (%I val!) 21) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./ID)) core!option.Option./None)))))))))))))) :pattern ((verismo!arch.reg.impl&%5.spec_from_int.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%core!option.Option. (verismo!arch.reg.impl&%5.spec_from_int.? val!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.reg.RflagBit.))) :pattern ((verismo!arch.reg.impl&%5.spec_from_int.? val!)))))
(set-info :comment ";; Function-Axioms verismo::arch::reg::RflagBit::from_int")
(assert (fuel_bool_default fuel%verismo!arch.reg.impl&%3.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.reg.impl&%3.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.reg.RflagBit. val!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.reg.impl&%5.spec_from_int.? val!))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.reg.RflagBit. val!))))))
(set-info :comment ";; Function-Axioms verismo::arch::reg::RflagBit::ord_int")
(assert (fuel_bool_default fuel%verismo!arch.reg.impl&%4.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.reg.impl&%4.ord_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.reg.RflagBit. self!) (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.reg.RflagBit. self!))))))
(set-info :comment ";; Function-Axioms builtin::Tracked::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%3::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%23 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Function-Axioms verismo::primitives_e::seq::impl&%5::vspec_cast_to")
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%23 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 64)))
(set-info :comment ";; Function-Axioms verismo::tspec::ResultWithErr::get_Error_1")
(assert (fuel_bool_default fuel%verismo!tspec.impl&%3.get_Error_1.))
(assert (=> (fuel_bool fuel%verismo!tspec.impl&%3.get_Error_1.) (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (self! Poly)) (! (= (verismo!tspec.impl&%3.get_Error_1.? RetValue&. RetValue& ErrorID&. ErrorID& self!) (verismo!tspec.ResultWithErr./Error/1 (%Poly%verismo!tspec.ResultWithErr. self!))) :pattern ((verismo!tspec.impl&%3.get_Error_1.? RetValue&. RetValue& ErrorID&. ErrorID& self!))))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (has_type (verismo!tspec.impl&%3.get_Error_1.? RetValue&. RetValue& ErrorID&. ErrorID& self!) ErrorID&)) :pattern ((verismo!tspec.impl&%3.get_Error_1.? RetValue&. RetValue& ErrorID&. ErrorID& self!)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 64)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT SZ)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ INT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ NAT))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ CHAR $ (UINT 8)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T1&. T1&) (tr_bound%verismo!tspec.isconst.IsConstant. T2&. T2&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. (GHOST T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. (TRACKED T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.security.sectype.SecMemType. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M&) :pattern ((tr_bound%verismo!tspec.security.sectype.SecMemType. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T1&. T1& T2&. T2&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T1&. T1& T2&. T2&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecAdd. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. T1&. T1& $ INT T1&. T1&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& $ INT T1&. T1&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& T1&. T1& $ INT)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& T1&. T1& $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type) (T2&. Dcr) (T2& Type)) (! (=> (and (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.integer.IntOrd. T2&. T2&)) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& T2&. T2&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& T2&. T2&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ INT)) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ INT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ NAT)) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ NAT)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 8))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 16))) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 16))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 32))) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 32))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 64))) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT 64))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT SZ))) :pattern ((tr_bound%verismo!tspec.ops.VSpecOrd. T&. T& $ (UINT SZ))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 128)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. (GHOST T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. (TRACKED T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%core!option.Option. T&. T&)) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%core!option.Option. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (=> (and (tr_bound%verismo!tspec.wellformed.WellFormed. T1&. T1&) (tr_bound%verismo!tspec.wellformed.WellFormed. T2&. T2&)) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. (GHOST T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. (TRACKED T&.) T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 32)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 16)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ BOOL))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ CHAR))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!arch.addr_s.def_s.SysPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!arch.addr_s.def_s.SysPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.addr_s.def_s.PageSize.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntOrd. $ TYPE%verismo!arch.addr_s.def_s.PageSize.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.entities.memtype.PTLevel.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntOrd. $ TYPE%verismo!arch.entities.memtype.PTLevel.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.entities.VMPL.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((K&. Dcr) (K& Type) (T&. Dcr) (T& Type)) (! (tr_bound%verismo!arch.crypto.encdec.SpecEncrypt. $ (TYPE%verismo!arch.crypto.SymKey. K&. K&) T&. T&) :pattern ((tr_bound%verismo!arch.crypto.encdec.SpecEncrypt. $ (TYPE%verismo!arch.crypto.SymKey. K&. K&) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.reg.RflagBit.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntOrd. $ TYPE%verismo!arch.reg.RflagBit.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.pgtable.def.PteFlag.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.integer.IntOrd. $ TYPE%verismo!arch.pgtable.def.PteFlag.))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&))) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!arch.pgtable.def_e.PageTableEntry. T&. T&))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (tr_bound%verismo!primitives_e.sectype.FromSecSeq. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)) :pattern ((tr_bound%verismo!primitives_e.sectype.FromSecSeq. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Trait-Impl-Axiom")
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(set-info :comment ";; Function-Specs verismo::arch::mem::def_s::MemDB::lemma_mem_map_to_mem_map_ok")
(declare-fun req%verismo!arch.mem.mem_p.impl&%1.lemma_mem_map_to_mem_map_ok. (verismo!arch.mem.def_s.MemDB. verismo!arch.entities.memid.MemID. verismo!arch.addr_s.def_s.SpecPage.) Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((self! verismo!arch.mem.def_s.MemDB.) (memid! verismo!arch.entities.memid.MemID.) (gvn! verismo!arch.addr_s.def_s.SpecPage.)) (! (= (req%verismo!arch.mem.mem_p.impl&%1.lemma_mem_map_to_mem_map_ok. self! memid! gvn!) (=> %%global_location_label%%50 (verismo!arch.mem.mem_u.impl&%0.inv.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.entities.memid.MemID. memid!)))) :pattern ((req%verismo!arch.mem.mem_p.impl&%1.lemma_mem_map_to_mem_map_ok. self! memid! gvn!)))))
(declare-fun ens%verismo!arch.mem.mem_p.impl&%1.lemma_mem_map_to_mem_map_ok. (verismo!arch.mem.def_s.MemDB. verismo!arch.entities.memid.MemID. verismo!arch.addr_s.def_s.SpecPage.) Bool)
(assert (forall ((self! verismo!arch.mem.def_s.MemDB.) (memid! verismo!arch.entities.memid.MemID.) (gvn! verismo!arch.addr_s.def_s.SpecPage.)) (! (= (ens%verismo!arch.mem.mem_p.impl&%1.lemma_mem_map_to_mem_map_ok. self! memid! gvn!) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (ite (vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.mem.mem_s.impl&%0.to_mem_map.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.entities.memid.MemID. memid!)))))) (Poly%verismo!arch.addr_s.def_s.SpecPage. gvn!)) (core!option.Option./Some (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.mem.mem_s.impl&%0.to_mem_map.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.entities.memid.MemID. memid!))))) (Poly%verismo!arch.addr_s.def_s.SpecPage. gvn!))) core!option.Option./None)))))) (= (ite (vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.mem.mem_s.impl&%0.to_mem_map.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.entities.memid.MemID. memid!)))))) (Poly%verismo!arch.addr_s.def_s.SpecPage. gvn!)) (core!option.Option./Some (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.mem.mem_s.impl&%0.to_mem_map.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.entities.memid.MemID. memid!))))) (Poly%verismo!arch.addr_s.def_s.SpecPage. gvn!))) core!option.Option./None) (ite (vstd!set.impl&%0.contains.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) (vstd!map.impl&%0.dom.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.mem.mem_u.impl&%0.to_mem_map_ok.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.entities.memid.MemID. memid!)))))) (Poly%verismo!arch.addr_s.def_s.SpecPage. gvn!)) (core!option.Option./Some (vstd!map.impl&%0.index.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.mem.mem_u.impl&%0.to_mem_map_ok.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.entities.memid.MemID. memid!))))) (Poly%verismo!arch.addr_s.def_s.SpecPage. gvn!))) core!option.Option./None)))) :pattern ((ens%verismo!arch.mem.mem_p.impl&%1.lemma_mem_map_to_mem_map_ok. self! memid! gvn!)))))
(set-info :comment ";; Function-Specs verismo::arch::mem::def_s::MemDB::lemma_op_error")
(declare-fun req%verismo!arch.mem.mem_p.impl&%1.lemma_op_error. (verismo!arch.mem.def_s.MemDB. verismo!arch.memop.MemOp.) Bool)
(declare-const %%global_location_label%%51 Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((self! verismo!arch.mem.def_s.MemDB.) (memop! verismo!arch.memop.MemOp.)) (! (= (req%verismo!arch.mem.mem_p.impl&%1.lemma_op_error. self! memop!) (and (=> %%global_location_label%%51 (or (or (is-verismo!arch.memop.MemOp./Read_ (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop!))) (is-verismo!arch.memop.MemOp./Write_ (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop!)))) (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop!))))) (=> %%global_location_label%%52 (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.pgtable.memmap_s.impl&%0.translate.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.mem.mem_s.impl&%0.to_mem_map.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.memop.MemOp. memop!)))))))) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%8.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.memop.MemOp. memop!))))))))))))))))) :pattern ((req%verismo!arch.mem.mem_p.impl&%1.lemma_op_error. self! memop!)))))
(declare-fun ens%verismo!arch.mem.mem_p.impl&%1.lemma_op_error. (verismo!arch.mem.def_s.MemDB. verismo!arch.memop.MemOp.) Bool)
(assert (forall ((self! verismo!arch.mem.def_s.MemDB.) (memop! verismo!arch.memop.MemOp.)) (! (= (ens%verismo!arch.mem.mem_p.impl&%1.lemma_op_error. self! memop!) (and (not (is-verismo!tspec.ResultWithErr./Ok_ (%Poly%verismo!tspec.ResultWithErr. (Poly%verismo!tspec.ResultWithErr. (verismo!arch.mem.mem_s.impl&%0.op.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.memop.MemOp. memop!)))))) (or (verismo!arch.errors.impl&%3.trigger_trap.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) (verismo!tspec.ResultWithErr./Error/1 (%Poly%verismo!tspec.ResultWithErr. (Poly%verismo!tspec.ResultWithErr. (verismo!arch.mem.mem_s.impl&%0.op.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.memop.MemOp. memop!)))))) (and (and (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop!))) (is-verismo!arch.errors.MemError./RmpOp_ (%Poly%verismo!arch.errors.MemError. (verismo!tspec.ResultWithErr./Error/1 (%Poly%verismo!tspec.ResultWithErr. (Poly%verismo!tspec.ResultWithErr. (verismo!arch.mem.mem_s.impl&%0.op.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.memop.MemOp. memop!)))))))) (not (is-verismo!arch.errors.RmpFault./DoubleVal_ (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. (verismo!arch.errors.MemError./RmpOp/0 (%Poly%verismo!arch.errors.MemError. (verismo!tspec.ResultWithErr./Error/1 (%Poly%verismo!tspec.ResultWithErr. (Poly%verismo!tspec.ResultWithErr. (verismo!arch.mem.mem_s.impl&%0.op.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.memop.MemOp. memop!))))))))))))))) :pattern ((ens%verismo!arch.mem.mem_p.impl&%1.lemma_op_error. self! memop!)))))
(set-info :comment ";; Function-Specs verismo::arch::mem::def_s::MemDB::proof_op_inv")
(declare-fun req%verismo!arch.mem.mem_p.impl&%1.proof_op_inv. (verismo!arch.mem.def_s.MemDB. verismo!arch.entities.memid.MemID. verismo!arch.memop.MemOp.) Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(declare-const %%global_location_label%%55 Bool)
(declare-const %%global_location_label%%56 Bool)
(assert (forall ((self! verismo!arch.mem.def_s.MemDB.) (memid! verismo!arch.entities.memid.MemID.) (memop! verismo!arch.memop.MemOp.)) (! (= (req%verismo!arch.mem.mem_p.impl&%1.proof_op_inv. self! memid! memop!) (and (=> %%global_location_label%%53 (verismo!arch.mem.mem_u.impl&%0.inv.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.entities.memid.MemID. memid!))) (=> %%global_location_label%%54 (verismo!arch.entities.memid.impl&%3.is_vmpl0.? (Poly%verismo!arch.entities.memid.MemID. memid!))) (=> %%global_location_label%%55 (verismo!arch.memop.memop.impl&%0.is_valid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.memop.MemOp. memop!))) (=> %%global_location_label%%56 (=> (verismo!arch.entities.memid.impl&%3.is_sm.? (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.memop.MemOp. memop!)))))) (Poly%verismo!arch.entities.memid.MemID. memid!)) (verismo!arch.mem.mem_u.impl&%0.vop_requires.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.memop.MemOp. memop!)))))) :pattern ((req%verismo!arch.mem.mem_p.impl&%1.proof_op_inv. self! memid! memop!)))))
(declare-fun ens%verismo!arch.mem.mem_p.impl&%1.proof_op_inv. (verismo!arch.mem.def_s.MemDB. verismo!arch.entities.memid.MemID. verismo!arch.memop.MemOp.) Bool)
(assert (forall ((self! verismo!arch.mem.def_s.MemDB.) (memid! verismo!arch.entities.memid.MemID.) (memop! verismo!arch.memop.MemOp.)) (! (= (ens%verismo!arch.mem.mem_p.impl&%1.proof_op_inv. self! memid! memop!) (verismo!arch.mem.mem_u.impl&%0.inv.? (verismo!tspec.impl&%5.to_result.? $ TYPE%verismo!arch.mem.def_s.MemDB. $ (TYPE%verismo!arch.errors.MemError. $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (Poly%verismo!tspec.ResultWithErr. (verismo!arch.mem.mem_s.impl&%0.op.? (Poly%verismo!arch.mem.def_s.MemDB. self!) (Poly%verismo!arch.memop.MemOp. memop!)))) (Poly%verismo!arch.entities.memid.MemID. memid!))) :pattern ((ens%verismo!arch.mem.mem_p.impl&%1.proof_op_inv. self! memid! memop!)))))
(set-info :comment ";; Function-Specs verismo::arch::x64::def_s::Archx64::proof_op_inv_reg")
(declare-fun req%verismo!arch.x64.x64_p.impl&%0.proof_op_inv_reg. (verismo!arch.x64.def_s.Archx64. verismo!arch.entities.memid.MemID. verismo!arch.x64.def_s.Archx64Op.) Bool)
(declare-const %%global_location_label%%57 Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((self! verismo!arch.x64.def_s.Archx64.) (memid! verismo!arch.entities.memid.MemID.) (arch_op! verismo!arch.x64.def_s.Archx64Op.)) (! (= (req%verismo!arch.x64.x64_p.impl&%0.proof_op_inv_reg. self! memid! arch_op!) (and (=> %%global_location_label%%57 (verismo!arch.x64.x64_u.impl&%1.inv.? (Poly%verismo!arch.x64.def_s.Archx64. self!) (Poly%verismo!arch.entities.memid.MemID. memid!))) (=> %%global_location_label%%58 (=> (verismo!arch.entities.memid.impl&%3.is_sm.? (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? (Poly%verismo!arch.x64.def_s.Archx64Op. arch_op!))) (Poly%verismo!arch.entities.memid.MemID. memid!)) (verismo!arch.x64.x64_u.impl&%2.op_requires.? (Poly%verismo!arch.x64.def_s.Archx64Op. arch_op!) (Poly%verismo!arch.entities.memid.MemID. memid!) (Poly%verismo!arch.x64.def_s.Archx64. self!)))))) :pattern ((req%verismo!arch.x64.x64_p.impl&%0.proof_op_inv_reg. self! memid! arch_op!)))))
(declare-fun ens%verismo!arch.x64.x64_p.impl&%0.proof_op_inv_reg. (verismo!arch.x64.def_s.Archx64. verismo!arch.entities.memid.MemID. verismo!arch.x64.def_s.Archx64Op.) Bool)
(assert (forall ((self! verismo!arch.x64.def_s.Archx64.) (memid! verismo!arch.entities.memid.MemID.) (arch_op! verismo!arch.x64.def_s.Archx64Op.)) (! (= (ens%verismo!arch.x64.x64_p.impl&%0.proof_op_inv_reg. self! memid! arch_op!) (verismo!arch.x64.x64_u.impl&%1.inv_regdb_any_cpu.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.op.? (Poly%verismo!arch.x64.def_s.Archx64. self!) (Poly%verismo!arch.x64.def_s.Archx64Op. arch_op!))) (Poly%verismo!arch.entities.memid.MemID. memid!))) :pattern ((ens%verismo!arch.x64.x64_p.impl&%0.proof_op_inv_reg. self! memid! arch_op!)))))
(set-info :comment ";; Function-Def verismo::arch::x64::def_s::Archx64::proof_op_inv_reg")
(set-info :comment ";; verismo/src/arch/x64/x64_p.rs:6:5: 6:75 (#0)")
(declare-const self! verismo!arch.x64.def_s.Archx64.)
(declare-const memid! verismo!arch.entities.memid.MemID.)
(declare-const arch_op! verismo!arch.x64.def_s.Archx64Op.)
(declare-const cpu@ Poly)
(declare-const tmp%1 Bool)
(declare-const tmp%2 Bool)
(declare-const tmp%3 Bool)
(declare-const new@ verismo!arch.x64.def_s.Archx64.)
(assert fuel_defaults)
(assert (has_type (Poly%verismo!arch.entities.memid.MemID. memid!) TYPE%verismo!arch.entities.memid.MemID.))
(assert (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. arch_op!) TYPE%verismo!arch.x64.def_s.Archx64Op.))
(assert (verismo!arch.x64.x64_u.impl&%1.inv.? (Poly%verismo!arch.x64.def_s.Archx64. self!) (Poly%verismo!arch.entities.memid.MemID. memid!)))
(assert (=> (verismo!arch.entities.memid.impl&%3.is_sm.? (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? (Poly%verismo!arch.x64.def_s.Archx64Op. arch_op!))) (Poly%verismo!arch.entities.memid.MemID. memid!)) (verismo!arch.x64.x64_u.impl&%2.op_requires.? (Poly%verismo!arch.x64.def_s.Archx64Op. arch_op!) (Poly%verismo!arch.entities.memid.MemID. memid!) (Poly%verismo!arch.x64.def_s.Archx64. self!))))
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%0 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%1 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%2 Bool)
(set-info :comment ";; assertion failed")
(declare-const %%location_label%%3 Bool)
(set-info :comment ";; postcondition not satisfied")
(declare-const %%location_label%%4 Bool)
(assert (not (=> (= new@ (verismo!arch.x64.x64_s.impl&%1.op.? (Poly%verismo!arch.x64.def_s.Archx64. self!) (Poly%verismo!arch.x64.def_s.Archx64Op. arch_op!))) (and (=> (has_type cpu@ NAT) (=> (= tmp%1 (verismo!arch.x64.x64_u.impl&%1.inv_regdb.? (Poly%verismo!arch.x64.def_s.Archx64. self!) cpu@ (Poly%verismo!arch.entities.memid.MemID. memid!))) (and (=> %%location_label%%0 tmp%1) (=> tmp%1 (=> (= tmp%2 (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? (Poly%verismo!arch.x64.def_s.Archx64. new@))) (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.entities.memid.CpuMemID./CpuMemID (%I cpu@) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. memid!)))))) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr3)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? (Poly%verismo!arch.x64.def_s.Archx64. self!))) (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.entities.memid.CpuMemID./CpuMemID (%I cpu@) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. memid!)))))) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr3)))) (and (=> %%location_label%%1 tmp%2) (=> tmp%2 (=> (= tmp%3 (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? (Poly%verismo!arch.x64.def_s.Archx64. new@))) (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.entities.memid.CpuMemID./CpuMemID (%I cpu@) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. memid!)))))) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cpl)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? (Poly%verismo!arch.x64.def_s.Archx64. self!))) (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.entities.memid.CpuMemID./CpuMemID (%I cpu@) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. memid!)))))) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cpl)))) (and (=> %%location_label%%2 tmp%3) (=> tmp%3 (=> %%location_label%%3 (verismo!arch.x64.x64_u.impl&%1.inv_regdb.? (Poly%verismo!arch.x64.def_s.Archx64. new@) cpu@ (Poly%verismo!arch.entities.memid.MemID. memid!))))))))))))) (=> (forall ((cpu$ Poly)) (! (=> (has_type cpu$ NAT) (verismo!arch.x64.x64_u.impl&%1.inv_regdb.? (Poly%verismo!arch.x64.def_s.Archx64. new@) cpu$ (Poly%verismo!arch.entities.memid.MemID. memid!))) :pattern ((verismo!arch.x64.x64_u.impl&%1.inv_regdb.? (Poly%verismo!arch.x64.def_s.Archx64. new@) cpu$ (Poly%verismo!arch.entities.memid.MemID. memid!))))) (=> %%location_label%%4 (verismo!arch.x64.x64_u.impl&%1.inv_regdb_any_cpu.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.op.? (Poly%verismo!arch.x64.def_s.Archx64. self!) (Poly%verismo!arch.x64.def_s.Archx64Op. arch_op!))) (Poly%verismo!arch.entities.memid.MemID. memid!))))))))
(check-sat)
(exit)
