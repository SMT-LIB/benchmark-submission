(set-info :smt-lib-version 2.6)
(set-logic UFDTNIA)
(set-info :source |
Generated by: Amar Shah
Generated on: 2024-12-11
Generator: Verus
Application: Verification of Rust Program
Target solver: z3
Time limit: 10
Benchmarks generated by the Rust verifier Verus (https://verus-lang.github.io/verus/guide/) on the project Verismo (https://www.usenix.org/conference/osdi24/presentation/zhou) and processed using Mariposa (https://github.com/secure-foundations/mariposa). z3 solves this without nonlinear, but it cannot be expressed in SMTLib without a nonlinear theory.
This benchmarks was originally run with z3 with the following options:
    (set-option :auto_config false)
    (set-option :smt.mbqi false)
    (set-option :smt.case_split 3)
    (set-option :smt.qi.eager_threshold 100.0)
    (set-option :smt.delay_units true)
    (set-option :smt.arith.solver 2)
    (set-option :smt.arith.nl false)
    (set-option :pi.enabled false)
    (set-option :rewriter.sort_disjunctions false)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unsat)
(declare-sort %%Function%% 0)
(declare-sort FuelId 0)
(declare-sort Fuel 0)
(declare-const zero Fuel)
(declare-fun succ (Fuel) Fuel)
(declare-fun fuel_bool (FuelId) Bool)
(declare-fun fuel_bool_default (FuelId) Bool)
(declare-const fuel_defaults Bool)
(assert (=> fuel_defaults (forall ((id FuelId)) (! (= (fuel_bool id) (fuel_bool_default id)) :pattern ((fuel_bool id))))))
(declare-sort Char 0)
(declare-fun char%from_unicode (Int) Char)
(declare-fun char%to_unicode (Char) Int)
(declare-sort StrSlice 0)
(declare-fun str%strslice_is_ascii (StrSlice) Bool)
(declare-fun str%strslice_len (StrSlice) Int)
(declare-fun str%strslice_get_char (StrSlice Int) Char)
(declare-fun str%new_strlit (Int) StrSlice)
(declare-fun str%from_strlit (StrSlice) Int)
(declare-datatypes ((fndef 0)) (((fndef_singleton ))))
(declare-sort Poly 0)
(declare-sort Height 0)
(declare-fun I (Int) Poly)
(declare-fun B (Bool) Poly)
(declare-fun F (fndef) Poly)
(declare-fun %I (Poly) Int)
(declare-fun %B (Poly) Bool)
(declare-fun %F (Poly) fndef)
(declare-fun S (StrSlice) Poly)
(declare-fun %S (Poly) StrSlice)
(declare-fun C (Char) Poly)
(declare-fun %C (Poly) Char)
(declare-sort Type 0)
(declare-const BOOL Type)
(declare-const INT Type)
(declare-const NAT Type)
(declare-const STRSLICE Type)
(declare-const CHAR Type)
(declare-fun UINT (Int) Type)
(declare-fun SINT (Int) Type)
(declare-fun CONST_INT (Int) Type)
(declare-sort Dcr 0)
(declare-const $ Dcr)
(declare-fun REF (Dcr) Dcr)
(declare-fun MUT_REF (Dcr) Dcr)
(declare-fun BOX (Dcr) Dcr)
(declare-fun RC (Dcr) Dcr)
(declare-fun ARC (Dcr) Dcr)
(declare-fun GHOST (Dcr) Dcr)
(declare-fun TRACKED (Dcr) Dcr)
(declare-fun NEVER (Dcr) Dcr)
(declare-fun ARRAY (Dcr Type Dcr Type) Type)
(declare-fun SLICE (Dcr Type) Type)
(declare-fun has_type (Poly Type) Bool)
(declare-fun as_type (Poly Type) Poly)
(declare-fun mk_fun (%%Function%%) %%Function%%)
(declare-fun const_int (Type) Int)
(assert (forall ((i Int)) (! (= i (const_int (CONST_INT i))) :pattern ((CONST_INT i)))))
(assert (forall ((b Bool)) (! (has_type (B b) BOOL) :pattern ((has_type (B b) BOOL)))))
(assert (forall ((x Poly) (True Type)) (! (and (has_type (as_type x True) True) (=> (has_type x True) (= x (as_type x True)))) :pattern ((as_type x True)))))
(assert (forall ((x %%Function%%)) (! (= (mk_fun x) x) :pattern ((mk_fun x)))))
(assert (forall ((x Bool)) (! (= x (%B (B x))) :pattern ((B x)))))
(assert (forall ((x Int)) (! (= x (%I (I x))) :pattern ((I x)))))
(assert (forall ((x Poly)) (! (=> (has_type x BOOL) (= x (B (%B x)))) :pattern ((has_type x BOOL)))))
(assert (forall ((x Poly)) (! (=> (has_type x INT) (= x (I (%I x)))) :pattern ((has_type x INT)))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (= x (I (%I x)))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (= x (I (%I x)))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (= x (I (%I x)))) :pattern ((has_type x (SINT bits))))))
(assert (forall ((x Int)) (! (= (str%from_strlit (str%new_strlit x)) x) :pattern ((str%new_strlit x)))))
(assert (forall ((x Poly)) (! (=> (has_type x STRSLICE) (= x (S (%S x)))) :pattern ((has_type x STRSLICE)))))
(assert (forall ((x StrSlice)) (! (= x (%S (S x))) :pattern ((S x)))))
(assert (forall ((x StrSlice)) (! (has_type (S x) STRSLICE) :pattern ((has_type (S x) STRSLICE)))))
(declare-fun ext_eq (Bool Type Poly Poly) Bool)
(assert (forall ((deep Bool) (True Type) (x Poly) (y Poly)) (! (= (= x y) (ext_eq deep True x y)) :pattern ((ext_eq deep True x y)))))
(declare-const SZ Int)
(assert (= SZ 64))
(declare-fun uHi (Int) Int)
(declare-fun iLo (Int) Int)
(declare-fun iHi (Int) Int)
(assert (= (uHi 8) 256))
(assert (= (uHi 16) 65536))
(assert (= (uHi 32) 4294967296))
(assert (= (uHi 64) 18446744073709551616))
(assert (= (uHi 128) (+ 1 340282366920938463463374607431768211455)))
(assert (= (iLo 8) (- 128)))
(assert (= (iLo 16) (- 32768)))
(assert (= (iLo 32) (- 2147483648)))
(assert (= (iLo 64) (- 9223372036854775808)))
(assert (= (iLo 128) (- 170141183460469231731687303715884105728)))
(assert (= (iHi 8) 128))
(assert (= (iHi 16) 32768))
(assert (= (iHi 32) 2147483648))
(assert (= (iHi 64) 9223372036854775808))
(assert (= (iHi 128) 170141183460469231731687303715884105728))
(declare-fun nClip (Int) Int)
(declare-fun uClip (Int Int) Int)
(declare-fun iClip (Int Int) Int)
(assert (forall ((i Int)) (! (and (<= 0 (nClip i)) (=> (<= 0 i) (= i (nClip i)))) :pattern ((nClip i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= 0 (uClip bits i)) (< (uClip bits i) (uHi bits)) (=> (and (<= 0 i) (< i (uHi bits))) (= i (uClip bits i)))) :pattern ((uClip bits i)))))
(assert (forall ((bits Int) (i Int)) (! (and (<= (iLo bits) (iClip bits i)) (< (iClip bits i) (iHi bits)) (=> (and (<= (iLo bits) i) (< i (iHi bits))) (= i (iClip bits i)))) :pattern ((iClip bits i)))))
(declare-fun uInv (Int Int) Bool)
(declare-fun iInv (Int Int) Bool)
(assert (forall ((bits Int) (i Int)) (! (= (uInv bits i) (and (<= 0 i) (< i (uHi bits)))) :pattern ((uInv bits i)))))
(assert (forall ((bits Int) (i Int)) (! (= (iInv bits i) (and (<= (iLo bits) i) (< i (iHi bits)))) :pattern ((iInv bits i)))))
(assert (forall ((x Int)) (! (has_type (I x) INT) :pattern ((has_type (I x) INT)))))
(assert (forall ((x Int)) (! (=> (<= 0 x) (has_type (I x) NAT)) :pattern ((has_type (I x) NAT)))))
(assert (forall ((bits Int) (x Int)) (! (=> (uInv bits x) (has_type (I x) (UINT bits))) :pattern ((has_type (I x) (UINT bits))))))
(assert (forall ((bits Int) (x Int)) (! (=> (iInv bits x) (has_type (I x) (SINT bits))) :pattern ((has_type (I x) (SINT bits))))))
(assert (forall ((x Poly)) (! (=> (has_type x NAT) (<= 0 (%I x))) :pattern ((has_type x NAT)))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (UINT bits)) (uInv bits (%I x))) :pattern ((has_type x (UINT bits))))))
(assert (forall ((bits Int) (x Poly)) (! (=> (has_type x (SINT bits)) (iInv bits (%I x))) :pattern ((has_type x (SINT bits))))))
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun Mul (Int Int) Int)
(declare-fun EucDiv (Int Int) Int)
(declare-fun EucMod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (= (Add x y) (+ x y)) :pattern ((Add x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Sub x y) (- x y)) :pattern ((Sub x y)))))
(assert (forall ((x Int) (y Int)) (! (= (Mul x y) (* x y)) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucDiv x y) (div x y)) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (= (EucMod x y) (mod x y)) :pattern ((EucMod x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (<= 0 y)) (<= 0 (Mul x y))) :pattern ((Mul x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucDiv x y)) (<= (EucDiv x y) x))) :pattern ((EucDiv x y)))))
(assert (forall ((x Int) (y Int)) (! (=> (and (<= 0 x) (< 0 y)) (and (<= 0 (EucMod x y)) (< (EucMod x y) y))) :pattern ((EucMod x y)))))
(assert (forall ((x Poly)) (! (=> (has_type x CHAR) (= x (C (%C x)))) :pattern ((has_type x CHAR)))))
(assert (forall ((x Char)) (! (= x (%C (C x))) :pattern ((C x)))))
(assert (forall ((x Char)) (! (has_type (C x) CHAR) :pattern ((has_type (C x) CHAR)))))
(assert (forall ((x Int)) (! (=> (and (<= 0 x) (< x (uHi 32))) (= x (char%to_unicode (char%from_unicode x)))) :pattern ((char%from_unicode x)))))
(assert (forall ((c Char)) (! (and (<= 0 (char%to_unicode c)) (< (char%to_unicode c) (uHi 32))) :pattern ((char%to_unicode c)))))
(declare-fun height (Poly) Height)
(declare-fun height_lt (Height Height) Bool)
(declare-fun partial-order (Height Height) Bool)
(assert (forall ((x Height)) (partial-order x x)))
(assert (forall ((x Height) (y Height)) (=> (and (partial-order x y) (partial-order y x)) (= x y))))
(assert (forall ((x Height) (y Height) (z Height)) (=> (and (partial-order x y) (partial-order y z)) (partial-order x z))))
(assert (forall ((x Height) (y Height)) (! (= (height_lt x y) (and (partial-order x y) (not (= x y)))) :pattern ((height_lt x y)))))
(declare-fun fun_from_recursive_field (Poly) Poly)
(declare-fun check_decrease_int (Int Int Bool) Bool)
(assert (forall ((cur Int) (prev Int) (otherwise Bool)) (! (= (check_decrease_int cur prev otherwise) (or (and (<= 0 cur) (< cur prev)) (and (= cur prev) otherwise))) :pattern ((check_decrease_int cur prev otherwise)))))
(declare-fun check_decrease_height (Poly Poly Bool) Bool)
(assert (forall ((cur Poly) (prev Poly) (otherwise Bool)) (! (= (check_decrease_height cur prev otherwise) (or (height_lt (height cur) (height prev)) (and (= (height cur) (height prev)) otherwise))) :pattern ((check_decrease_height cur prev otherwise)))))
(declare-fun uintxor (Int Poly Poly) Int)
(declare-fun uintand (Int Poly Poly) Int)
(declare-fun uintor (Int Poly Poly) Int)
(declare-fun uintshr (Int Poly Poly) Int)
(declare-fun uintshl (Int Poly Poly) Int)
(declare-fun uintnot (Int Poly) Int)
(declare-fun singular_mod (Int Int) Int)
(assert (forall ((x Int) (y Int)) (! (=> (not (= y 0)) (= (EucMod x y) (singular_mod x y))) :pattern ((singular_mod x y)))))
(declare-fun closure_req (Type Dcr Type Poly Poly) Bool)
(declare-fun closure_ens (Type Dcr Type Poly Poly Poly) Bool)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_Some. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.get_Some_0. FuelId)
(declare-const fuel%vstd!std_specs.option.impl&%0.is_None. FuelId)
(declare-const fuel%vstd!map.impl&%0.new. FuelId)
(declare-const fuel%vstd!map.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.contains_key. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.union_prefer_right. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.remove_keys. FuelId)
(declare-const fuel%vstd!map_lib.impl&%0.restrict. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_index. FuelId)
(declare-const fuel%vstd!seq.impl&%0.take. FuelId)
(declare-const fuel%vstd!seq.impl&%0.skip. FuelId)
(declare-const fuel%vstd!seq.impl&%0.spec_add. FuelId)
(declare-const fuel%vstd!seq.Seq.last. FuelId)
(declare-const fuel%vstd!set.impl&%0.full. FuelId)
(declare-const fuel%vstd!set.impl&%0.subset_of. FuelId)
(declare-const fuel%vstd!set.impl&%0.choose. FuelId)
(declare-const fuel%verismo!ptr.snp.rmp.rmp_e.spec_perm_requires_pvalidate. FuelId)
(declare-const fuel%verismo!ptr.snp.rmp.rmp_e.spec_perms_requires_pvalidate. FuelId)
(declare-const fuel%verismo!ptr.snp.rmp.rmp_e.spec_perm_ensures_pvalidate. FuelId)
(declare-const fuel%verismo!ptr.snp.rmp.rmp_e.spec_perms_ensures_pvalidate. FuelId)
(declare-const fuel%verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires_at. FuelId)
(declare-const fuel%verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires. FuelId)
(declare-const fuel%verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjust. FuelId)
(declare-const fuel%verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjmem. FuelId)
(declare-const fuel%verismo!ptr.snp.rmp.rmp_t.RMP_4K. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_bit_set. FuelId)
(declare-const fuel%verismo!tspec.math.bits_p.spec_has_bit_set. FuelId)
(declare-const fuel%verismo!tspec.math.pow_s.spec_nat_pow2. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%0.is_Secret. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_val. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec__unused. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%3.spec_labels. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%12.is_constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%15.is_constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.wf_value. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.bop_new. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.uop_new. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%16.constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%17.spec_constant. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%20.wf. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%92.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%93.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%95.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%96.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%98.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%99.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%101.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%102.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%104.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%105.spec_default. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%480.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%481.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%514.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%515.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%516.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%517.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%518.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%519.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%534.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%535.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%568.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%569.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%570.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%571.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%572.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%573.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%588.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%589.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%622.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%623.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%624.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%625.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%626.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%627.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%642.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%643.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%676.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%677.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%678.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%679.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%680.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%681.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%696.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%697.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%730.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%731.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%732.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%733.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%734.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%735.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%750.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%751.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%780.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%781.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%782.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%783.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%784.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%785.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%790.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%791.ord_int. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%820.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%821.spec_add. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%822.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%823.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%824.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.sectype.impl&%825.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.security.seq.fn_spec_to_seq_index. FuelId)
(declare-const fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.bool_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.char_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u8_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u16_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u32_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u64_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.u128_to_stream. FuelId)
(declare-const fuel%verismo!tspec.stream.basic.usize_to_stream. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%6.spec_size_def. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%7.wf. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%11.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%14.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%15.spec_size_def. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%16.wf. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%20.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%23.vspec_cast_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%24.spec_size_def. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%25.wf. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant_to. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.PAGE_SIZE. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.VM_PAGE_NUM. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%36.as_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%36.from_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%37.ord_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%38.spec_from_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.def_s.impl&%39.is_Size4k. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.value. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.to_page. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.to_offset. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.new2. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.new. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.null. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%2.to_mem. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.value. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.new. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.new2. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.to_addr. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%3.to_mem. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%4.from_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%5.as_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%5.from_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%6.ord_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%7.ord_int. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.from_range. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.first. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.offset. FuelId)
(declare-const fuel%verismo!arch.addr_s.page.impl&%8.len. FuelId)
(declare-const fuel%verismo!arch.entities.memid.impl&%0.is_Guest. FuelId)
(declare-const fuel%verismo!arch.entities.memid.impl&%2.cpu. FuelId)
(declare-const fuel%verismo!arch.entities.memid.impl&%2.memid. FuelId)
(declare-const fuel%verismo!arch.entities.memid.impl&%3.to_asid. FuelId)
(declare-const fuel%verismo!arch.entities.memid.impl&%3.to_vmpl. FuelId)
(declare-const fuel%verismo!arch.rmp.access_u.impl&%0.view. FuelId)
(declare-const fuel%verismo!arch.rmp.access_u.impl&%1.inv. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_size. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_validated. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_perms. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%3.spec_val. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%4.spec_set_val. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%7.is_RmpAdjust. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.impl&%7.is_Pvalidate. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.RMP_FAIL_INPUT. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION. FuelId)
(declare-const fuel%verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH. FuelId)
(declare-const fuel%verismo!arch.rmp.access_s.impl&%0.rmpadjust. FuelId)
(declare-const fuel%verismo!arch.rmp.access_s.impl&%0.pvalidate. FuelId)
(declare-const fuel%verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel. FuelId)
(declare-const fuel%verismo!arch.rmp.entry_s.impl&%0.spec_set_perm. FuelId)
(declare-const fuel%verismo!arch.rmp.entry_s.impl&%0.spec_perm. FuelId)
(declare-const fuel%verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private. FuelId)
(declare-const fuel%verismo!arch.rmp.entry_s.impl&%0.is_confidential_to. FuelId)
(declare-const fuel%verismo!arch.rmp.entry_s.impl&%0.is_valid. FuelId)
(declare-const fuel%verismo!arch.rmp.entry_s.impl&%0.fault_rmp_update. FuelId)
(declare-const fuel%verismo!arch.rmp.perm_s.impl&%1.as_int. FuelId)
(declare-const fuel%verismo!arch.rmp.perm_s.impl&%1.from_int. FuelId)
(declare-const fuel%verismo!arch.rmp.perm_s.rmp_perm_init. FuelId)
(declare-const fuel%verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid. FuelId)
(declare-const fuel%verismo!arch.memop.memop.impl&%0.to_addr_memid. FuelId)
(declare-const fuel%verismo!arch.memop.memop.impl&%0.to_memid. FuelId)
(declare-const fuel%verismo!arch.ramdb.def.impl&%0.spec_data. FuelId)
(declare-const fuel%verismo!arch.ramdb.def.impl&%0.spec_write_count. FuelId)
(declare-const fuel%verismo!arch.ramdb.def.impl&%0.spec_crypto_mask. FuelId)
(declare-const fuel%verismo!arch.tlb.def_s.impl&%2.spec_db. FuelId)
(declare-const fuel%verismo!arch.vram.def.impl&%2.spec_sram. FuelId)
(declare-const fuel%verismo!arch.vram.def.impl&%2.spec_rmp. FuelId)
(declare-const fuel%verismo!arch.mem.def_s.impl&%0.spec_vram. FuelId)
(declare-const fuel%verismo!arch.mem.def_s.impl&%0.spec_l0_entry. FuelId)
(declare-const fuel%verismo!arch.mem.def_s.impl&%0.spec_sysmap. FuelId)
(declare-const fuel%verismo!arch.mem.def_s.impl&%0.spec_tlb. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%0.is_MemOp. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%0.get_MemOp_0. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%4.spec_memdb. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%4.spec_regdb. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%4.spec_entities. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%5.spec_set_regdb. FuelId)
(declare-const fuel%verismo!arch.x64.def_s.impl&%5.spec_set_entities. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%0.cpu_memid. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%0.cpu. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%0.to_memid. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.is_run. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.stop_cpu. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.spec_vc_handle. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.spec_exception_handle. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn. FuelId)
(declare-const fuel%verismo!arch.x64.x64_s.impl&%1.op_write_reg. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%18.spec_default. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%21.vspec_cast_to. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%22.spec_size_def. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%24.wf. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%25.is_constant. FuelId)
(declare-const fuel%verismo!boot.idt.def.impl&%25.is_constant_to. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_s.impl&%0.requires_pvalidate. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_s.impl&%0.ensures_pvalidated. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust_mem. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_s.impl&%0.ensures_rmpadjust. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_s.impl&%1.valid_memmap. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_s.impl&%1.rmpadjust_ret. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_s.impl&%1.pvalidate_ret. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_s.impl&%2.pvalidate_ret. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_s.impl&%2.rmpadjust_ret. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmpl. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%0.spec_perms. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmsa. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_perms. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%12.spec_eq. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant_to. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%14.wf. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%16.inv. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%16.spec_new. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%16.lemma_new_eq. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmpl. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%16.spec_perms. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmsa. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%16.view. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%19.spec_encrypted. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%19.spec_w. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%19.spec_x. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%21.spec_default. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_pte. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmp. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%24.spec_guestmap. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%24.spec_sysmap. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%24.spec_pte. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%24.spec_is_pte. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%25.perms. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%25.is_vmsa. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%25.vmpl. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%25.valid_vmpl. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.encrypted. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.deterministic_pte. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.is_confidential_to. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%27.inv_confidential. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%30.snp. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%30.hw_snp. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%31.wf. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%31.init. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%31.allocator_default. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%32.spec_default. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%34.spec_eq. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%35.sw_eq. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf. FuelId)
(declare-const fuel%verismo!ptr.snp.snp_u.impl&%35.wf. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_regs. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu. FuelId)
(declare-const fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_accessed. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_write. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_conform. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_exe. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_sys. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_dpl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%0.spec_present. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_accessed. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_write. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_conform. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_exe. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_sys. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_dpl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_present. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%12.spec_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%13.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%13.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%14.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.inv. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_new. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.lemma_new_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_accessed. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_write. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_conform. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_exe. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_sys. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_dpl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.spec_present. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%16.view. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%17.spec_avl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%17.spec_long. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%17.spec_granularity. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_avl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_long. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_granularity. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%28.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%29.spec_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%30.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%30.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%31.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.inv. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_new. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.lemma_new_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_avl. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_long. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.spec_granularity. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%33.view. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit0_15. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_base0_23. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit16_19. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%34.spec_base24_31. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%45.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%46.spec_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%47.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%47.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%48.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.inv. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_new. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.lemma_new_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit0_15. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_base0_23. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit16_19. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.spec_base24_31. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%50.view. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%53.spec_default. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%56.vspec_cast_to. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%57.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%59.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%60.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.gdt.impl&%60.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_snp. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%12.spec_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%14.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.inv. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_new. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.lemma_new_eq. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_snp. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_vtom. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%16.view. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%20.vspec_cast_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%21.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%23.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_es. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cs. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ss. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ds. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_fs. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gs. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gdtr. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vmpl. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cpl. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved2. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_efer. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved3. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr4. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr3. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr0. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rflags. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rip. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved4. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsp. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved5. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rax. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved6. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gpat. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved7. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rcx. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdx. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbx. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved8. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbp. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsi. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdi. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_sev_features. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_xcr0. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved13. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%31.vspec_cast_to. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%32.spec_size_def. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%59.wf. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant. FuelId)
(declare-const fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant_to. FuelId)
(declare-const fuel%verismo!snp.ghcb.proto_s.SM_TERM_INVALID_PARAM. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%0.wf. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_s.impl&%4.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_t.impl&%2.view. FuelId)
(declare-const fuel%verismo!tspec_e.array.array_t.impl&%4.spec_len. FuelId)
(declare-const fuel%verismo!tspec.cast.proof_field_set_constant. FuelId)
(declare-const fuel%verismo!tspec.cast.fn_vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%1.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%7.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%8.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%9.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%10.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%11.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%12.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%13.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%14.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%15.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%16.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%17.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%18.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%19.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%20.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%21.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%22.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%23.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%24.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%25.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%26.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%27.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%28.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%29.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%30.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%31.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%32.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%33.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%34.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%35.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%36.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%37.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%38.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%39.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%40.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%41.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%42.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%43.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%44.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%45.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%46.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%47.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%48.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%49.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%50.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%51.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%52.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%53.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%54.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%55.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%56.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%57.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%58.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%59.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%60.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%61.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%62.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%63.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%64.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%65.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%66.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%67.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%68.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%69.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%70.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%71.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%72.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%73.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%74.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%75.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%76.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%77.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%78.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%79.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%80.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%81.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%82.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%83.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%84.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%85.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%86.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%87.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%88.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%89.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%90.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%91.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%92.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%93.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%94.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%95.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%96.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%97.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%98.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%99.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%100.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.cast.impl&%101.vspec_cast_to. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%1.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%2.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%3.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%4.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%5.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%6.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%7.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%8.spec_default. FuelId)
(declare-const fuel%verismo!tspec.default.impl&%9.spec_default. FuelId)
(declare-const fuel%verismo!tspec.fmap.impl&%1.spec_set_map. FuelId)
(declare-const fuel%verismo!tspec.fmap.impl&%3.insert. FuelId)
(declare-const fuel%verismo!tspec.fmap.impl&%3.spec_index. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%0.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%0.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%1.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%1.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%2.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%2.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%3.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%3.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%4.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%4.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%5.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%5.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%6.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%6.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%7.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%7.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%8.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%8.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%9.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%9.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%10.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%10.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%11.is_constant. FuelId)
(declare-const fuel%verismo!tspec.isconst.impl&%11.is_constant_to. FuelId)
(declare-const fuel%verismo!tspec.ops.impl&%6.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.range_set.impl&%0.end. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_u64_u64_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_u32_u32_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_u16_u16_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_u8_u8_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_usize_usize_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_int_int_int. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat. FuelId)
(declare-const fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%0.spec_add. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%1.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%2.spec_sub. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%5.spec_mul. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%7.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%15.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%16.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%17.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%18.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%19.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%20.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%21.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%22.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%23.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%24.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%25.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%26.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%27.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%28.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%29.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%30.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%31.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%32.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%33.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%34.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%35.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%36.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%37.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%38.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%39.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%40.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%41.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%42.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%43.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%44.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%45.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%46.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%47.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%48.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%49.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%50.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%51.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%52.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%53.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%54.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%55.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%56.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%57.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%58.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%59.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%60.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%61.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%62.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%63.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%64.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%65.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%66.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%67.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%68.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%69.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%70.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.integer.impl&%71.spec_eq. FuelId)
(declare-const fuel%verismo!tspec.setlib.uop_to_bop. FuelId)
(declare-const fuel%verismo!tspec.setlib.set_op. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%8.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%9.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%10.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%12.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%13.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%14.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%15.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%16.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%17.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%18.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.size_s.impl&%19.spec_size_def. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%0.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%1.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%2.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%3.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%4.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%5.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%6.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%7.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%8.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%9.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%10.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%11.wf. FuelId)
(declare-const fuel%verismo!tspec.wellformed.impl&%12.wf. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%4.as_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%4.from_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%5.ord_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%6.spec_from_int. FuelId)
(declare-const fuel%verismo!arch.entities.impl&%9.is_VMPL0. FuelId)
(declare-const fuel%verismo!arch.memop.impl&%0.is_RmpOp. FuelId)
(declare-const fuel%verismo!arch.memop.impl&%0.get_RmpOp_0. FuelId)
(declare-const fuel%verismo!arch.errors.impl&%3.from_err. FuelId)
(declare-const fuel%verismo!arch.errors.impl&%3.with_param. FuelId)
(declare-const fuel%verismo!arch.reg.impl&%3.as_int. FuelId)
(declare-const fuel%verismo!arch.reg.impl&%3.from_int. FuelId)
(declare-const fuel%verismo!arch.reg.impl&%4.ord_int. FuelId)
(declare-const fuel%verismo!arch.reg.impl&%5.spec_from_int. FuelId)
(declare-const fuel%verismo!arch.reg.MSR_GHCB_BASE. FuelId)
(declare-const fuel%verismo!arch.reg.MSR_EFER_BASE. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%0.wf. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%1.wf. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%0.wf. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%1.is_constant. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%1.is_constant_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.recursive_sec_bytes. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.spec_va_to_pa. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%0.spec_valid_pn_with. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%0.to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%1.to_page. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%3.spec_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%3.paget_to_int. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%3.spec_ensures_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%3.spec_valid_pn_with. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%5.spec_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%5.paget_to_int. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%5.spec_ensures_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%5.spec_valid_pn_with. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%7.spec_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%7.paget_to_int. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%7.spec_ensures_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%7.spec_valid_pn_with. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%9.spec_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%9.paget_to_int. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%9.spec_ensures_to_addr. FuelId)
(declare-const fuel%verismo!addr_e.addr_interface.impl&%9.spec_valid_pn_with. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_present. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_write. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_supervisor. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_pwt. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_pcd. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_accessed. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_dirty. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_psize. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_global. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_bit12. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_encrypted. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_page. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%0.spec_nx. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_present. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_write. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_supervisor. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_pwt. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_pcd. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_accessed. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_dirty. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_psize. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_global. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_bit12. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_encrypted. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_page. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%1.spec_set_nx. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%11.spec_size_def. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%12.spec_eq. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%13.is_constant. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%13.is_constant_to. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%14.wf. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.inv. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_new. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.lemma_new_eq. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_present. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_write. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_supervisor. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_pwt. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_pcd. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_accessed. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_dirty. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_psize. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_global. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_bit12. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_encrypted. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_page. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.spec_nx. FuelId)
(declare-const fuel%verismo!pgtable_e.def.impl&%16.view. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%4.vspec_cast_to. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%5.spec_size_def. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%7.wf. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%8.is_constant. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%8.is_constant_to. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%19.id. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%20.spec_ptr. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%20.spec_value. FuelId)
(declare-const fuel%verismo!ptr.def_s.impl&%20.spec_snp. FuelId)
(declare-const fuel%verismo!ptr.ptr_s.inv_snp_value. FuelId)
(declare-const fuel%verismo!ptr.ptr_s.impl&%1.snp. FuelId)
(declare-const fuel%verismo!ptr.ptr_s.impl&%1.hw_snp. FuelId)
(declare-const fuel%verismo!ptr.ptr_s.impl&%3.vspec_cast_to. FuelId)
(declare-const fuel%verismo!ptr.ptr_s.impl&%5.is_constant_to. FuelId)
(declare-const fuel%verismo!ptr.ptr_s.impl&%5.is_constant. FuelId)
(declare-const fuel%verismo!ptr.ptr_u.impl&%0.wf. FuelId)
(declare-const fuel%verismo!ptr.ptr_u.impl&%2.value. FuelId)
(declare-const fuel%verismo!ptr.ptr_u.impl&%2.wf_value. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_pptr. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.size. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.range. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_range. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.wf. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%5.bytes. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%6.vspec_cast_to. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%8.snp. FuelId)
(declare-const fuel%verismo!ptr.raw_ptr_s.impl&%8.hw_snp. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_cpu. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_run. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_vmpl. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_count. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs. FuelId)
(declare-const fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_mem. FuelId)
(declare-const fuel%verismo!registers.msr_perm_s.impl&%0.shared. FuelId)
(declare-const fuel%verismo!registers.msr_perm_s.impl&%0.value. FuelId)
(declare-const fuel%verismo!registers.msr_perm_s.impl&%1.wf. FuelId)
(declare-const fuel%verismo!registers.msr_perm_s.impl&%2.view. FuelId)
(declare-const fuel%verismo!tspec.spec_unused. FuelId)
(declare-const fuel%verismo!tspec.impl&%5.to_result. FuelId)
(assert (distinct fuel%vstd!std_specs.option.impl&%0.is_Some. fuel%vstd!std_specs.option.impl&%0.get_Some_0. fuel%vstd!std_specs.option.impl&%0.is_None. fuel%vstd!map.impl&%0.new. fuel%vstd!map.impl&%0.spec_index. fuel%vstd!map_lib.impl&%0.contains_key. fuel%vstd!map_lib.impl&%0.union_prefer_right. fuel%vstd!map_lib.impl&%0.remove_keys. fuel%vstd!map_lib.impl&%0.restrict. fuel%vstd!seq.impl&%0.spec_index. fuel%vstd!seq.impl&%0.take. fuel%vstd!seq.impl&%0.skip. fuel%vstd!seq.impl&%0.spec_add. fuel%vstd!seq.Seq.last. fuel%vstd!set.impl&%0.full. fuel%vstd!set.impl&%0.subset_of. fuel%vstd!set.impl&%0.choose. fuel%verismo!ptr.snp.rmp.rmp_e.spec_perm_requires_pvalidate. fuel%verismo!ptr.snp.rmp.rmp_e.spec_perms_requires_pvalidate. fuel%verismo!ptr.snp.rmp.rmp_e.spec_perm_ensures_pvalidate. fuel%verismo!ptr.snp.rmp.rmp_e.spec_perms_ensures_pvalidate. fuel%verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires_at. fuel%verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires. fuel%verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjust. fuel%verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjmem. fuel%verismo!ptr.snp.rmp.rmp_t.RMP_4K. fuel%verismo!tspec.math.bits_p.spec_bit_set. fuel%verismo!tspec.math.bits_p.spec_has_bit_set. fuel%verismo!tspec.math.pow_s.spec_nat_pow2. fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol. fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom. fuel%verismo!tspec.security.sectype.impl&%0.is_Secret. fuel%verismo!tspec.security.sectype.impl&%3.spec_val. fuel%verismo!tspec.security.sectype.impl&%3.spec__unused. fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets. fuel%verismo!tspec.security.sectype.impl&%3.spec_labels. fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to. fuel%verismo!tspec.security.sectype.impl&%12.is_constant. fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to. fuel%verismo!tspec.security.sectype.impl&%15.is_constant. fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl. fuel%verismo!tspec.security.sectype.impl&%16.wf_value. fuel%verismo!tspec.security.sectype.impl&%16.bop_new. fuel%verismo!tspec.security.sectype.impl&%16.uop_new. fuel%verismo!tspec.security.sectype.impl&%16.constant. fuel%verismo!tspec.security.sectype.impl&%17.spec_constant. fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%20.wf. fuel%verismo!tspec.security.sectype.impl&%92.spec_default. fuel%verismo!tspec.security.sectype.impl&%93.spec_default. fuel%verismo!tspec.security.sectype.impl&%95.spec_default. fuel%verismo!tspec.security.sectype.impl&%96.spec_default. fuel%verismo!tspec.security.sectype.impl&%98.spec_default. fuel%verismo!tspec.security.sectype.impl&%99.spec_default. fuel%verismo!tspec.security.sectype.impl&%101.spec_default. fuel%verismo!tspec.security.sectype.impl&%102.spec_default. fuel%verismo!tspec.security.sectype.impl&%104.spec_default. fuel%verismo!tspec.security.sectype.impl&%105.spec_default. fuel%verismo!tspec.security.sectype.impl&%480.ord_int. fuel%verismo!tspec.security.sectype.impl&%481.ord_int. fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%514.spec_add. fuel%verismo!tspec.security.sectype.impl&%515.spec_add. fuel%verismo!tspec.security.sectype.impl&%516.spec_sub. fuel%verismo!tspec.security.sectype.impl&%517.spec_sub. fuel%verismo!tspec.security.sectype.impl&%518.spec_mul. fuel%verismo!tspec.security.sectype.impl&%519.spec_mul. fuel%verismo!tspec.security.sectype.impl&%534.ord_int. fuel%verismo!tspec.security.sectype.impl&%535.ord_int. fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%568.spec_add. fuel%verismo!tspec.security.sectype.impl&%569.spec_add. fuel%verismo!tspec.security.sectype.impl&%570.spec_sub. fuel%verismo!tspec.security.sectype.impl&%571.spec_sub. fuel%verismo!tspec.security.sectype.impl&%572.spec_mul. fuel%verismo!tspec.security.sectype.impl&%573.spec_mul. fuel%verismo!tspec.security.sectype.impl&%588.ord_int. fuel%verismo!tspec.security.sectype.impl&%589.ord_int. fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%622.spec_add. fuel%verismo!tspec.security.sectype.impl&%623.spec_add. fuel%verismo!tspec.security.sectype.impl&%624.spec_sub. fuel%verismo!tspec.security.sectype.impl&%625.spec_sub. fuel%verismo!tspec.security.sectype.impl&%626.spec_mul. fuel%verismo!tspec.security.sectype.impl&%627.spec_mul. fuel%verismo!tspec.security.sectype.impl&%642.ord_int. fuel%verismo!tspec.security.sectype.impl&%643.ord_int. fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%676.spec_add. fuel%verismo!tspec.security.sectype.impl&%677.spec_add. fuel%verismo!tspec.security.sectype.impl&%678.spec_sub. fuel%verismo!tspec.security.sectype.impl&%679.spec_sub. fuel%verismo!tspec.security.sectype.impl&%680.spec_mul. fuel%verismo!tspec.security.sectype.impl&%681.spec_mul. fuel%verismo!tspec.security.sectype.impl&%696.ord_int. fuel%verismo!tspec.security.sectype.impl&%697.ord_int. fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%730.spec_add. fuel%verismo!tspec.security.sectype.impl&%731.spec_add. fuel%verismo!tspec.security.sectype.impl&%732.spec_sub. fuel%verismo!tspec.security.sectype.impl&%733.spec_sub. fuel%verismo!tspec.security.sectype.impl&%734.spec_mul. fuel%verismo!tspec.security.sectype.impl&%735.spec_mul. fuel%verismo!tspec.security.sectype.impl&%750.ord_int. fuel%verismo!tspec.security.sectype.impl&%751.ord_int. fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%780.spec_add. fuel%verismo!tspec.security.sectype.impl&%781.spec_add. fuel%verismo!tspec.security.sectype.impl&%782.spec_sub. fuel%verismo!tspec.security.sectype.impl&%783.spec_sub. fuel%verismo!tspec.security.sectype.impl&%784.spec_mul. fuel%verismo!tspec.security.sectype.impl&%785.spec_mul. fuel%verismo!tspec.security.sectype.impl&%790.ord_int. fuel%verismo!tspec.security.sectype.impl&%791.ord_int. fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to. fuel%verismo!tspec.security.sectype.impl&%820.spec_add. fuel%verismo!tspec.security.sectype.impl&%821.spec_add. fuel%verismo!tspec.security.sectype.impl&%822.spec_sub. fuel%verismo!tspec.security.sectype.impl&%823.spec_sub. fuel%verismo!tspec.security.sectype.impl&%824.spec_mul. fuel%verismo!tspec.security.sectype.impl&%825.spec_mul. fuel%verismo!tspec.security.seq.fn_spec_to_seq_index. fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to. fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to. fuel%verismo!tspec.stream.basic.bool_to_stream. fuel%verismo!tspec.stream.basic.char_to_stream. fuel%verismo!tspec.stream.basic.u8_to_stream. fuel%verismo!tspec.stream.basic.u16_to_stream. fuel%verismo!tspec.stream.basic.u32_to_stream. fuel%verismo!tspec.stream.basic.u64_to_stream. fuel%verismo!tspec.stream.basic.u128_to_stream. fuel%verismo!tspec.stream.basic.usize_to_stream. fuel%verismo!arch.addr_s.def_s.impl&%2.vspec_cast_to. fuel%verismo!arch.addr_s.def_s.impl&%5.vspec_cast_to. fuel%verismo!arch.addr_s.def_s.impl&%6.spec_size_def. fuel%verismo!arch.addr_s.def_s.impl&%7.wf. fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant. fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant_to. fuel%verismo!arch.addr_s.def_s.impl&%11.vspec_cast_to. fuel%verismo!arch.addr_s.def_s.impl&%14.vspec_cast_to. fuel%verismo!arch.addr_s.def_s.impl&%15.spec_size_def. fuel%verismo!arch.addr_s.def_s.impl&%16.wf. fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant. fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant_to. fuel%verismo!arch.addr_s.def_s.impl&%20.vspec_cast_to. fuel%verismo!arch.addr_s.def_s.impl&%23.vspec_cast_to. fuel%verismo!arch.addr_s.def_s.impl&%24.spec_size_def. fuel%verismo!arch.addr_s.def_s.impl&%25.wf. fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant. fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant_to. fuel%verismo!arch.addr_s.def_s.PAGE_SIZE. fuel%verismo!arch.addr_s.def_s.VM_PAGE_NUM. fuel%verismo!arch.addr_s.def_s.impl&%36.as_int. fuel%verismo!arch.addr_s.def_s.impl&%36.from_int. fuel%verismo!arch.addr_s.def_s.impl&%37.ord_int. fuel%verismo!arch.addr_s.def_s.impl&%38.spec_from_int. fuel%verismo!arch.addr_s.def_s.impl&%39.is_Size4k. fuel%verismo!arch.addr_s.page.impl&%2.value. fuel%verismo!arch.addr_s.page.impl&%2.to_page. fuel%verismo!arch.addr_s.page.impl&%2.to_offset. fuel%verismo!arch.addr_s.page.impl&%2.new2. fuel%verismo!arch.addr_s.page.impl&%2.new. fuel%verismo!arch.addr_s.page.impl&%2.null. fuel%verismo!arch.addr_s.page.impl&%2.to_mem. fuel%verismo!arch.addr_s.page.impl&%3.value. fuel%verismo!arch.addr_s.page.impl&%3.new. fuel%verismo!arch.addr_s.page.impl&%3.new2. fuel%verismo!arch.addr_s.page.impl&%3.to_addr. fuel%verismo!arch.addr_s.page.impl&%3.to_mem. fuel%verismo!arch.addr_s.page.impl&%4.as_int. fuel%verismo!arch.addr_s.page.impl&%4.from_int. fuel%verismo!arch.addr_s.page.impl&%5.as_int. fuel%verismo!arch.addr_s.page.impl&%5.from_int. fuel%verismo!arch.addr_s.page.impl&%6.ord_int. fuel%verismo!arch.addr_s.page.impl&%7.ord_int. fuel%verismo!arch.addr_s.page.impl&%8.from_range. fuel%verismo!arch.addr_s.page.impl&%8.first. fuel%verismo!arch.addr_s.page.impl&%8.offset. fuel%verismo!arch.addr_s.page.impl&%8.len. fuel%verismo!arch.entities.memid.impl&%0.is_Guest. fuel%verismo!arch.entities.memid.impl&%2.cpu. fuel%verismo!arch.entities.memid.impl&%2.memid. fuel%verismo!arch.entities.memid.impl&%3.to_asid. fuel%verismo!arch.entities.memid.impl&%3.to_vmpl. fuel%verismo!arch.rmp.access_u.impl&%0.view. fuel%verismo!arch.rmp.access_u.impl&%1.inv. fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable. fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned. fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated. fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa. fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid. fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn. fuel%verismo!arch.rmp.def_s.impl&%0.spec_size. fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms. fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_validated. fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa. fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_perms. fuel%verismo!arch.rmp.def_s.impl&%3.spec_val. fuel%verismo!arch.rmp.def_s.impl&%4.spec_set_val. fuel%verismo!arch.rmp.def_s.impl&%7.is_RmpAdjust. fuel%verismo!arch.rmp.def_s.impl&%7.is_Pvalidate. fuel%verismo!arch.rmp.def_s.RMP_FAIL_INPUT. fuel%verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION. fuel%verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH. fuel%verismo!arch.rmp.access_s.impl&%0.rmpadjust. fuel%verismo!arch.rmp.access_s.impl&%0.pvalidate. fuel%verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel. fuel%verismo!arch.rmp.entry_s.impl&%0.spec_set_perm. fuel%verismo!arch.rmp.entry_s.impl&%0.spec_perm. fuel%verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private. fuel%verismo!arch.rmp.entry_s.impl&%0.is_confidential_to. fuel%verismo!arch.rmp.entry_s.impl&%0.is_valid. fuel%verismo!arch.rmp.entry_s.impl&%0.fault_rmp_update. fuel%verismo!arch.rmp.perm_s.impl&%1.as_int. fuel%verismo!arch.rmp.perm_s.impl&%1.from_int. fuel%verismo!arch.rmp.perm_s.rmp_perm_init. fuel%verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid. fuel%verismo!arch.memop.memop.impl&%0.to_addr_memid. fuel%verismo!arch.memop.memop.impl&%0.to_memid. fuel%verismo!arch.ramdb.def.impl&%0.spec_data. fuel%verismo!arch.ramdb.def.impl&%0.spec_write_count. fuel%verismo!arch.ramdb.def.impl&%0.spec_crypto_mask. fuel%verismo!arch.tlb.def_s.impl&%2.spec_db. fuel%verismo!arch.vram.def.impl&%2.spec_sram. fuel%verismo!arch.vram.def.impl&%2.spec_rmp. fuel%verismo!arch.mem.def_s.impl&%0.spec_vram. fuel%verismo!arch.mem.def_s.impl&%0.spec_l0_entry. fuel%verismo!arch.mem.def_s.impl&%0.spec_sysmap. fuel%verismo!arch.mem.def_s.impl&%0.spec_tlb. fuel%verismo!arch.x64.def_s.impl&%0.is_MemOp. fuel%verismo!arch.x64.def_s.impl&%0.get_MemOp_0. fuel%verismo!arch.x64.def_s.impl&%4.spec_memdb. fuel%verismo!arch.x64.def_s.impl&%4.spec_regdb. fuel%verismo!arch.x64.def_s.impl&%4.spec_entities. fuel%verismo!arch.x64.def_s.impl&%5.spec_set_regdb. fuel%verismo!arch.x64.def_s.impl&%5.spec_set_entities. fuel%verismo!arch.x64.x64_s.impl&%0.cpu_memid. fuel%verismo!arch.x64.x64_s.impl&%0.cpu. fuel%verismo!arch.x64.x64_s.impl&%0.to_memid. fuel%verismo!arch.x64.x64_s.impl&%1.is_run. fuel%verismo!arch.x64.x64_s.impl&%1.stop_cpu. fuel%verismo!arch.x64.x64_s.impl&%1.spec_vc_handle. fuel%verismo!arch.x64.x64_s.impl&%1.spec_exception_handle. fuel%verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle. fuel%verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn. fuel%verismo!arch.x64.x64_s.impl&%1.op_write_reg. fuel%verismo!boot.idt.def.impl&%18.spec_default. fuel%verismo!boot.idt.def.impl&%21.vspec_cast_to. fuel%verismo!boot.idt.def.impl&%22.spec_size_def. fuel%verismo!boot.idt.def.impl&%24.wf. fuel%verismo!boot.idt.def.impl&%25.is_constant. fuel%verismo!boot.idt.def.impl&%25.is_constant_to. fuel%verismo!ptr.snp.snp_s.impl&%0.requires_pvalidate. fuel%verismo!ptr.snp.snp_s.impl&%0.ensures_pvalidated. fuel%verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust. fuel%verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust_mem. fuel%verismo!ptr.snp.snp_s.impl&%0.ensures_rmpadjust. fuel%verismo!ptr.snp.snp_s.impl&%1.valid_memmap. fuel%verismo!ptr.snp.snp_s.impl&%1.rmpadjust_ret. fuel%verismo!ptr.snp.snp_s.impl&%1.pvalidate_ret. fuel%verismo!ptr.snp.snp_s.impl&%2.pvalidate_ret. fuel%verismo!ptr.snp.snp_s.impl&%2.rmpadjust_ret. fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmpl. fuel%verismo!ptr.snp.snp_u.impl&%0.spec_perms. fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmsa. fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl. fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_perms. fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa. fuel%verismo!ptr.snp.snp_u.impl&%11.spec_size_def. fuel%verismo!ptr.snp.snp_u.impl&%12.spec_eq. fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant. fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant_to. fuel%verismo!ptr.snp.snp_u.impl&%14.wf. fuel%verismo!ptr.snp.snp_u.impl&%16.inv. fuel%verismo!ptr.snp.snp_u.impl&%16.spec_new. fuel%verismo!ptr.snp.snp_u.impl&%16.lemma_new_eq. fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmpl. fuel%verismo!ptr.snp.snp_u.impl&%16.spec_perms. fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmsa. fuel%verismo!ptr.snp.snp_u.impl&%16.view. fuel%verismo!ptr.snp.snp_u.impl&%19.spec_encrypted. fuel%verismo!ptr.snp.snp_u.impl&%19.spec_w. fuel%verismo!ptr.snp.snp_u.impl&%19.spec_x. fuel%verismo!ptr.snp.snp_u.impl&%21.spec_default. fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp. fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap. fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap. fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_pte. fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmp. fuel%verismo!ptr.snp.snp_u.impl&%24.spec_guestmap. fuel%verismo!ptr.snp.snp_u.impl&%24.spec_sysmap. fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap. fuel%verismo!ptr.snp.snp_u.impl&%24.spec_pte. fuel%verismo!ptr.snp.snp_u.impl&%24.spec_is_pte. fuel%verismo!ptr.snp.snp_u.impl&%25.perms. fuel%verismo!ptr.snp.snp_u.impl&%25.is_vmsa. fuel%verismo!ptr.snp.snp_u.impl&%25.vmpl. fuel%verismo!ptr.snp.snp_u.impl&%25.valid_vmpl. fuel%verismo!ptr.snp.snp_u.impl&%27.encrypted. fuel%verismo!ptr.snp.snp_u.impl&%27.deterministic_pte. fuel%verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential. fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private. fuel%verismo!ptr.snp.snp_u.impl&%27.is_confidential_to. fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private. fuel%verismo!ptr.snp.snp_u.impl&%27.inv_confidential. fuel%verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel. fuel%verismo!ptr.snp.snp_u.impl&%30.snp. fuel%verismo!ptr.snp.snp_u.impl&%30.hw_snp. fuel%verismo!ptr.snp.snp_u.impl&%31.wf. fuel%verismo!ptr.snp.snp_u.impl&%31.init. fuel%verismo!ptr.snp.snp_u.impl&%31.allocator_default. fuel%verismo!ptr.snp.snp_u.impl&%32.spec_default. fuel%verismo!ptr.snp.snp_u.impl&%34.spec_eq. fuel%verismo!ptr.snp.snp_u.impl&%35.sw_eq. fuel%verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf. fuel%verismo!ptr.snp.snp_u.impl&%35.wf. fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid. fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl. fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu. fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_regs. fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu. fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv. fuel%verismo!snp.cpu.gdt.impl&%0.spec_accessed. fuel%verismo!snp.cpu.gdt.impl&%0.spec_write. fuel%verismo!snp.cpu.gdt.impl&%0.spec_conform. fuel%verismo!snp.cpu.gdt.impl&%0.spec_exe. fuel%verismo!snp.cpu.gdt.impl&%0.spec_sys. fuel%verismo!snp.cpu.gdt.impl&%0.spec_dpl. fuel%verismo!snp.cpu.gdt.impl&%0.spec_present. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_accessed. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_write. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_conform. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_exe. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_sys. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_dpl. fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_present. fuel%verismo!snp.cpu.gdt.impl&%11.spec_size_def. fuel%verismo!snp.cpu.gdt.impl&%12.spec_eq. fuel%verismo!snp.cpu.gdt.impl&%13.is_constant. fuel%verismo!snp.cpu.gdt.impl&%13.is_constant_to. fuel%verismo!snp.cpu.gdt.impl&%14.wf. fuel%verismo!snp.cpu.gdt.impl&%16.inv. fuel%verismo!snp.cpu.gdt.impl&%16.spec_new. fuel%verismo!snp.cpu.gdt.impl&%16.lemma_new_eq. fuel%verismo!snp.cpu.gdt.impl&%16.spec_accessed. fuel%verismo!snp.cpu.gdt.impl&%16.spec_write. fuel%verismo!snp.cpu.gdt.impl&%16.spec_conform. fuel%verismo!snp.cpu.gdt.impl&%16.spec_exe. fuel%verismo!snp.cpu.gdt.impl&%16.spec_sys. fuel%verismo!snp.cpu.gdt.impl&%16.spec_dpl. fuel%verismo!snp.cpu.gdt.impl&%16.spec_present. fuel%verismo!snp.cpu.gdt.impl&%16.view. fuel%verismo!snp.cpu.gdt.impl&%17.spec_avl. fuel%verismo!snp.cpu.gdt.impl&%17.spec_long. fuel%verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16. fuel%verismo!snp.cpu.gdt.impl&%17.spec_granularity. fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_avl. fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_long. fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16. fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_granularity. fuel%verismo!snp.cpu.gdt.impl&%28.spec_size_def. fuel%verismo!snp.cpu.gdt.impl&%29.spec_eq. fuel%verismo!snp.cpu.gdt.impl&%30.is_constant. fuel%verismo!snp.cpu.gdt.impl&%30.is_constant_to. fuel%verismo!snp.cpu.gdt.impl&%31.wf. fuel%verismo!snp.cpu.gdt.impl&%33.inv. fuel%verismo!snp.cpu.gdt.impl&%33.spec_new. fuel%verismo!snp.cpu.gdt.impl&%33.lemma_new_eq. fuel%verismo!snp.cpu.gdt.impl&%33.spec_avl. fuel%verismo!snp.cpu.gdt.impl&%33.spec_long. fuel%verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16. fuel%verismo!snp.cpu.gdt.impl&%33.spec_granularity. fuel%verismo!snp.cpu.gdt.impl&%33.view. fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit0_15. fuel%verismo!snp.cpu.gdt.impl&%34.spec_base0_23. fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7. fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit16_19. fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11. fuel%verismo!snp.cpu.gdt.impl&%34.spec_base24_31. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11. fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31. fuel%verismo!snp.cpu.gdt.impl&%45.spec_size_def. fuel%verismo!snp.cpu.gdt.impl&%46.spec_eq. fuel%verismo!snp.cpu.gdt.impl&%47.is_constant. fuel%verismo!snp.cpu.gdt.impl&%47.is_constant_to. fuel%verismo!snp.cpu.gdt.impl&%48.wf. fuel%verismo!snp.cpu.gdt.impl&%50.inv. fuel%verismo!snp.cpu.gdt.impl&%50.spec_new. fuel%verismo!snp.cpu.gdt.impl&%50.lemma_new_eq. fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit0_15. fuel%verismo!snp.cpu.gdt.impl&%50.spec_base0_23. fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7. fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit16_19. fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11. fuel%verismo!snp.cpu.gdt.impl&%50.spec_base24_31. fuel%verismo!snp.cpu.gdt.impl&%50.view. fuel%verismo!snp.cpu.gdt.impl&%53.spec_default. fuel%verismo!snp.cpu.gdt.impl&%56.vspec_cast_to. fuel%verismo!snp.cpu.gdt.impl&%57.spec_size_def. fuel%verismo!snp.cpu.gdt.impl&%59.wf. fuel%verismo!snp.cpu.gdt.impl&%60.is_constant. fuel%verismo!snp.cpu.gdt.impl&%60.is_constant_to. fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_snp. fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom. fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc. fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj. fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj. fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation. fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc. fuel%verismo!snp.cpu.vmsa.impl&%11.spec_size_def. fuel%verismo!snp.cpu.vmsa.impl&%12.spec_eq. fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant. fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant_to. fuel%verismo!snp.cpu.vmsa.impl&%14.wf. fuel%verismo!snp.cpu.vmsa.impl&%16.inv. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_new. fuel%verismo!snp.cpu.vmsa.impl&%16.lemma_new_eq. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_snp. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_vtom. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation. fuel%verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc. fuel%verismo!snp.cpu.vmsa.impl&%16.view. fuel%verismo!snp.cpu.vmsa.impl&%20.vspec_cast_to. fuel%verismo!snp.cpu.vmsa.impl&%21.spec_size_def. fuel%verismo!snp.cpu.vmsa.impl&%23.wf. fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant. fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant_to. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_es. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cs. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ss. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ds. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_fs. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gs. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gdtr. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vmpl. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cpl. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved2. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_efer. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved3. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr4. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr3. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr0. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rflags. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rip. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved4. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsp. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved5. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rax. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved6. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gpat. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved7. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rcx. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdx. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbx. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved8. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbp. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsi. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdi. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_sev_features. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_xcr0. fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved13. fuel%verismo!snp.cpu.vmsa.impl&%31.vspec_cast_to. fuel%verismo!snp.cpu.vmsa.impl&%32.spec_size_def. fuel%verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset. fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset. fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset. fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset. fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset. fuel%verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset. fuel%verismo!snp.cpu.vmsa.impl&%59.wf. fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant. fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant_to. fuel%verismo!snp.ghcb.proto_s.SM_TERM_INVALID_PARAM. fuel%verismo!tspec_e.array.array_s.impl&%0.wf. fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant. fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant_to. fuel%verismo!tspec_e.array.array_s.impl&%3.vspec_cast_to. fuel%verismo!tspec_e.array.array_s.impl&%4.spec_size_def. fuel%verismo!tspec_e.array.array_t.impl&%2.view. fuel%verismo!tspec_e.array.array_t.impl&%4.spec_len. fuel%verismo!tspec.cast.proof_field_set_constant. fuel%verismo!tspec.cast.fn_vspec_cast_to. fuel%verismo!tspec.cast.impl&%1.vspec_cast_to. fuel%verismo!tspec.cast.impl&%2.vspec_cast_to. fuel%verismo!tspec.cast.impl&%3.vspec_cast_to. fuel%verismo!tspec.cast.impl&%4.vspec_cast_to. fuel%verismo!tspec.cast.impl&%5.vspec_cast_to. fuel%verismo!tspec.cast.impl&%6.vspec_cast_to. fuel%verismo!tspec.cast.impl&%7.vspec_cast_to. fuel%verismo!tspec.cast.impl&%8.vspec_cast_to. fuel%verismo!tspec.cast.impl&%9.vspec_cast_to. fuel%verismo!tspec.cast.impl&%10.vspec_cast_to. fuel%verismo!tspec.cast.impl&%11.vspec_cast_to. fuel%verismo!tspec.cast.impl&%12.vspec_cast_to. fuel%verismo!tspec.cast.impl&%13.vspec_cast_to. fuel%verismo!tspec.cast.impl&%14.vspec_cast_to. fuel%verismo!tspec.cast.impl&%15.vspec_cast_to. fuel%verismo!tspec.cast.impl&%16.vspec_cast_to. fuel%verismo!tspec.cast.impl&%17.vspec_cast_to. fuel%verismo!tspec.cast.impl&%18.vspec_cast_to. fuel%verismo!tspec.cast.impl&%19.vspec_cast_to. fuel%verismo!tspec.cast.impl&%20.vspec_cast_to. fuel%verismo!tspec.cast.impl&%21.vspec_cast_to. fuel%verismo!tspec.cast.impl&%22.vspec_cast_to. fuel%verismo!tspec.cast.impl&%23.vspec_cast_to. fuel%verismo!tspec.cast.impl&%24.vspec_cast_to. fuel%verismo!tspec.cast.impl&%25.vspec_cast_to. fuel%verismo!tspec.cast.impl&%26.vspec_cast_to. fuel%verismo!tspec.cast.impl&%27.vspec_cast_to. fuel%verismo!tspec.cast.impl&%28.vspec_cast_to. fuel%verismo!tspec.cast.impl&%29.vspec_cast_to. fuel%verismo!tspec.cast.impl&%30.vspec_cast_to. fuel%verismo!tspec.cast.impl&%31.vspec_cast_to. fuel%verismo!tspec.cast.impl&%32.vspec_cast_to. fuel%verismo!tspec.cast.impl&%33.vspec_cast_to. fuel%verismo!tspec.cast.impl&%34.vspec_cast_to. fuel%verismo!tspec.cast.impl&%35.vspec_cast_to. fuel%verismo!tspec.cast.impl&%36.vspec_cast_to. fuel%verismo!tspec.cast.impl&%37.vspec_cast_to. fuel%verismo!tspec.cast.impl&%38.vspec_cast_to. fuel%verismo!tspec.cast.impl&%39.vspec_cast_to. fuel%verismo!tspec.cast.impl&%40.vspec_cast_to. fuel%verismo!tspec.cast.impl&%41.vspec_cast_to. fuel%verismo!tspec.cast.impl&%42.vspec_cast_to. fuel%verismo!tspec.cast.impl&%43.vspec_cast_to. fuel%verismo!tspec.cast.impl&%44.vspec_cast_to. fuel%verismo!tspec.cast.impl&%45.vspec_cast_to. fuel%verismo!tspec.cast.impl&%46.vspec_cast_to. fuel%verismo!tspec.cast.impl&%47.vspec_cast_to. fuel%verismo!tspec.cast.impl&%48.vspec_cast_to. fuel%verismo!tspec.cast.impl&%49.vspec_cast_to. fuel%verismo!tspec.cast.impl&%50.vspec_cast_to. fuel%verismo!tspec.cast.impl&%51.vspec_cast_to. fuel%verismo!tspec.cast.impl&%52.vspec_cast_to. fuel%verismo!tspec.cast.impl&%53.vspec_cast_to. fuel%verismo!tspec.cast.impl&%54.vspec_cast_to. fuel%verismo!tspec.cast.impl&%55.vspec_cast_to. fuel%verismo!tspec.cast.impl&%56.vspec_cast_to. fuel%verismo!tspec.cast.impl&%57.vspec_cast_to. fuel%verismo!tspec.cast.impl&%58.vspec_cast_to. fuel%verismo!tspec.cast.impl&%59.vspec_cast_to. fuel%verismo!tspec.cast.impl&%60.vspec_cast_to. fuel%verismo!tspec.cast.impl&%61.vspec_cast_to. fuel%verismo!tspec.cast.impl&%62.vspec_cast_to. fuel%verismo!tspec.cast.impl&%63.vspec_cast_to. fuel%verismo!tspec.cast.impl&%64.vspec_cast_to. fuel%verismo!tspec.cast.impl&%65.vspec_cast_to. fuel%verismo!tspec.cast.impl&%66.vspec_cast_to. fuel%verismo!tspec.cast.impl&%67.vspec_cast_to. fuel%verismo!tspec.cast.impl&%68.vspec_cast_to. fuel%verismo!tspec.cast.impl&%69.vspec_cast_to. fuel%verismo!tspec.cast.impl&%70.vspec_cast_to. fuel%verismo!tspec.cast.impl&%71.vspec_cast_to. fuel%verismo!tspec.cast.impl&%72.vspec_cast_to. fuel%verismo!tspec.cast.impl&%73.vspec_cast_to. fuel%verismo!tspec.cast.impl&%74.vspec_cast_to. fuel%verismo!tspec.cast.impl&%75.vspec_cast_to. fuel%verismo!tspec.cast.impl&%76.vspec_cast_to. fuel%verismo!tspec.cast.impl&%77.vspec_cast_to. fuel%verismo!tspec.cast.impl&%78.vspec_cast_to. fuel%verismo!tspec.cast.impl&%79.vspec_cast_to. fuel%verismo!tspec.cast.impl&%80.vspec_cast_to. fuel%verismo!tspec.cast.impl&%81.vspec_cast_to. fuel%verismo!tspec.cast.impl&%82.vspec_cast_to. fuel%verismo!tspec.cast.impl&%83.vspec_cast_to. fuel%verismo!tspec.cast.impl&%84.vspec_cast_to. fuel%verismo!tspec.cast.impl&%85.vspec_cast_to. fuel%verismo!tspec.cast.impl&%86.vspec_cast_to. fuel%verismo!tspec.cast.impl&%87.vspec_cast_to. fuel%verismo!tspec.cast.impl&%88.vspec_cast_to. fuel%verismo!tspec.cast.impl&%89.vspec_cast_to. fuel%verismo!tspec.cast.impl&%90.vspec_cast_to. fuel%verismo!tspec.cast.impl&%91.vspec_cast_to. fuel%verismo!tspec.cast.impl&%92.vspec_cast_to. fuel%verismo!tspec.cast.impl&%93.vspec_cast_to. fuel%verismo!tspec.cast.impl&%94.vspec_cast_to. fuel%verismo!tspec.cast.impl&%95.vspec_cast_to. fuel%verismo!tspec.cast.impl&%96.vspec_cast_to. fuel%verismo!tspec.cast.impl&%97.vspec_cast_to. fuel%verismo!tspec.cast.impl&%98.vspec_cast_to. fuel%verismo!tspec.cast.impl&%99.vspec_cast_to. fuel%verismo!tspec.cast.impl&%100.vspec_cast_to. fuel%verismo!tspec.cast.impl&%101.vspec_cast_to. fuel%verismo!tspec.default.impl&%1.spec_default. fuel%verismo!tspec.default.impl&%2.spec_default. fuel%verismo!tspec.default.impl&%3.spec_default. fuel%verismo!tspec.default.impl&%4.spec_default. fuel%verismo!tspec.default.impl&%5.spec_default. fuel%verismo!tspec.default.impl&%6.spec_default. fuel%verismo!tspec.default.impl&%7.spec_default. fuel%verismo!tspec.default.impl&%8.spec_default. fuel%verismo!tspec.default.impl&%9.spec_default. fuel%verismo!tspec.fmap.impl&%1.spec_set_map. fuel%verismo!tspec.fmap.impl&%3.insert. fuel%verismo!tspec.fmap.impl&%3.spec_index. fuel%verismo!tspec.isconst.impl&%0.is_constant. fuel%verismo!tspec.isconst.impl&%0.is_constant_to. fuel%verismo!tspec.isconst.impl&%1.is_constant. fuel%verismo!tspec.isconst.impl&%1.is_constant_to. fuel%verismo!tspec.isconst.impl&%2.is_constant. fuel%verismo!tspec.isconst.impl&%2.is_constant_to. fuel%verismo!tspec.isconst.impl&%3.is_constant. fuel%verismo!tspec.isconst.impl&%3.is_constant_to. fuel%verismo!tspec.isconst.impl&%4.is_constant. fuel%verismo!tspec.isconst.impl&%4.is_constant_to. fuel%verismo!tspec.isconst.impl&%5.is_constant. fuel%verismo!tspec.isconst.impl&%5.is_constant_to. fuel%verismo!tspec.isconst.impl&%6.is_constant. fuel%verismo!tspec.isconst.impl&%6.is_constant_to. fuel%verismo!tspec.isconst.impl&%7.is_constant. fuel%verismo!tspec.isconst.impl&%7.is_constant_to. fuel%verismo!tspec.isconst.impl&%8.is_constant. fuel%verismo!tspec.isconst.impl&%8.is_constant_to. fuel%verismo!tspec.isconst.impl&%9.is_constant. fuel%verismo!tspec.isconst.impl&%9.is_constant_to. fuel%verismo!tspec.isconst.impl&%10.is_constant. fuel%verismo!tspec.isconst.impl&%10.is_constant_to. fuel%verismo!tspec.isconst.impl&%11.is_constant. fuel%verismo!tspec.isconst.impl&%11.is_constant_to. fuel%verismo!tspec.ops.impl&%6.spec_eq. fuel%verismo!tspec.range_set.impl&%0.end. fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int. fuel%verismo!tspec.fnspec.fn_spec_mul_u64_u64_int. fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int. fuel%verismo!tspec.fnspec.fn_spec_mul_u32_u32_int. fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int. fuel%verismo!tspec.fnspec.fn_spec_mul_u16_u16_int. fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int. fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int. fuel%verismo!tspec.fnspec.fn_spec_mul_u8_u8_int. fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int. fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int. fuel%verismo!tspec.fnspec.fn_spec_mul_usize_usize_int. fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int. fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int. fuel%verismo!tspec.fnspec.fn_spec_mul_int_int_int. fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat. fuel%verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat. fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int. fuel%verismo!tspec.integer.impl&%0.spec_add. fuel%verismo!tspec.integer.impl&%1.spec_sub. fuel%verismo!tspec.integer.impl&%2.spec_sub. fuel%verismo!tspec.integer.impl&%5.spec_mul. fuel%verismo!tspec.integer.impl&%7.spec_eq. fuel%verismo!tspec.integer.impl&%15.spec_eq. fuel%verismo!tspec.integer.impl&%16.spec_eq. fuel%verismo!tspec.integer.impl&%17.spec_eq. fuel%verismo!tspec.integer.impl&%18.spec_eq. fuel%verismo!tspec.integer.impl&%19.spec_eq. fuel%verismo!tspec.integer.impl&%20.spec_eq. fuel%verismo!tspec.integer.impl&%21.spec_eq. fuel%verismo!tspec.integer.impl&%22.spec_eq. fuel%verismo!tspec.integer.impl&%23.spec_eq. fuel%verismo!tspec.integer.impl&%24.spec_eq. fuel%verismo!tspec.integer.impl&%25.spec_eq. fuel%verismo!tspec.integer.impl&%26.spec_eq. fuel%verismo!tspec.integer.impl&%27.spec_eq. fuel%verismo!tspec.integer.impl&%28.spec_eq. fuel%verismo!tspec.integer.impl&%29.spec_eq. fuel%verismo!tspec.integer.impl&%30.spec_eq. fuel%verismo!tspec.integer.impl&%31.spec_eq. fuel%verismo!tspec.integer.impl&%32.spec_eq. fuel%verismo!tspec.integer.impl&%33.spec_eq. fuel%verismo!tspec.integer.impl&%34.spec_eq. fuel%verismo!tspec.integer.impl&%35.spec_eq. fuel%verismo!tspec.integer.impl&%36.spec_eq. fuel%verismo!tspec.integer.impl&%37.spec_eq. fuel%verismo!tspec.integer.impl&%38.spec_eq. fuel%verismo!tspec.integer.impl&%39.spec_eq. fuel%verismo!tspec.integer.impl&%40.spec_eq. fuel%verismo!tspec.integer.impl&%41.spec_eq. fuel%verismo!tspec.integer.impl&%42.spec_eq. fuel%verismo!tspec.integer.impl&%43.spec_eq. fuel%verismo!tspec.integer.impl&%44.spec_eq. fuel%verismo!tspec.integer.impl&%45.spec_eq. fuel%verismo!tspec.integer.impl&%46.spec_eq. fuel%verismo!tspec.integer.impl&%47.spec_eq. fuel%verismo!tspec.integer.impl&%48.spec_eq. fuel%verismo!tspec.integer.impl&%49.spec_eq. fuel%verismo!tspec.integer.impl&%50.spec_eq. fuel%verismo!tspec.integer.impl&%51.spec_eq. fuel%verismo!tspec.integer.impl&%52.spec_eq. fuel%verismo!tspec.integer.impl&%53.spec_eq. fuel%verismo!tspec.integer.impl&%54.spec_eq. fuel%verismo!tspec.integer.impl&%55.spec_eq. fuel%verismo!tspec.integer.impl&%56.spec_eq. fuel%verismo!tspec.integer.impl&%57.spec_eq. fuel%verismo!tspec.integer.impl&%58.spec_eq. fuel%verismo!tspec.integer.impl&%59.spec_eq. fuel%verismo!tspec.integer.impl&%60.spec_eq. fuel%verismo!tspec.integer.impl&%61.spec_eq. fuel%verismo!tspec.integer.impl&%62.spec_eq. fuel%verismo!tspec.integer.impl&%63.spec_eq. fuel%verismo!tspec.integer.impl&%64.spec_eq. fuel%verismo!tspec.integer.impl&%65.spec_eq. fuel%verismo!tspec.integer.impl&%66.spec_eq. fuel%verismo!tspec.integer.impl&%67.spec_eq. fuel%verismo!tspec.integer.impl&%68.spec_eq. fuel%verismo!tspec.integer.impl&%69.spec_eq. fuel%verismo!tspec.integer.impl&%70.spec_eq. fuel%verismo!tspec.integer.impl&%71.spec_eq. fuel%verismo!tspec.setlib.uop_to_bop. fuel%verismo!tspec.setlib.set_op. fuel%verismo!tspec.size_s.impl&%8.spec_size_def. fuel%verismo!tspec.size_s.impl&%9.spec_size_def. fuel%verismo!tspec.size_s.impl&%10.spec_size_def. fuel%verismo!tspec.size_s.impl&%11.spec_size_def. fuel%verismo!tspec.size_s.impl&%12.spec_size_def. fuel%verismo!tspec.size_s.impl&%13.spec_size_def. fuel%verismo!tspec.size_s.impl&%14.spec_size_def. fuel%verismo!tspec.size_s.impl&%15.spec_size_def. fuel%verismo!tspec.size_s.impl&%16.spec_size_def. fuel%verismo!tspec.size_s.impl&%17.spec_size_def. fuel%verismo!tspec.size_s.impl&%18.spec_size_def. fuel%verismo!tspec.size_s.impl&%19.spec_size_def. fuel%verismo!tspec.wellformed.impl&%0.wf. fuel%verismo!tspec.wellformed.impl&%1.wf. fuel%verismo!tspec.wellformed.impl&%2.wf. fuel%verismo!tspec.wellformed.impl&%3.wf. fuel%verismo!tspec.wellformed.impl&%4.wf. fuel%verismo!tspec.wellformed.impl&%5.wf. fuel%verismo!tspec.wellformed.impl&%6.wf. fuel%verismo!tspec.wellformed.impl&%7.wf. fuel%verismo!tspec.wellformed.impl&%8.wf. fuel%verismo!tspec.wellformed.impl&%9.wf. fuel%verismo!tspec.wellformed.impl&%10.wf. fuel%verismo!tspec.wellformed.impl&%11.wf. fuel%verismo!tspec.wellformed.impl&%12.wf. fuel%verismo!arch.entities.impl&%4.as_int. fuel%verismo!arch.entities.impl&%4.from_int. fuel%verismo!arch.entities.impl&%5.ord_int. fuel%verismo!arch.entities.impl&%6.spec_from_int. fuel%verismo!arch.entities.impl&%9.is_VMPL0. fuel%verismo!arch.memop.impl&%0.is_RmpOp. fuel%verismo!arch.memop.impl&%0.get_RmpOp_0. fuel%verismo!arch.errors.impl&%3.from_err. fuel%verismo!arch.errors.impl&%3.with_param. fuel%verismo!arch.reg.impl&%3.as_int. fuel%verismo!arch.reg.impl&%3.from_int. fuel%verismo!arch.reg.impl&%4.ord_int. fuel%verismo!arch.reg.impl&%5.spec_from_int. fuel%verismo!arch.reg.MSR_GHCB_BASE. fuel%verismo!arch.reg.MSR_EFER_BASE. fuel%verismo!primitives_e.sectype.impl&%0.wf. fuel%verismo!primitives_e.sectype.impl&%1.wf. fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes. fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes. fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to. fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%0.wf. fuel%verismo!primitives_e.seq.impl&%1.is_constant. fuel%verismo!primitives_e.seq.impl&%1.is_constant_to. fuel%verismo!primitives_e.seq.recursive_sec_bytes. fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to. fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to. fuel%verismo!addr_e.addr_interface.spec_va_to_pa. fuel%verismo!addr_e.addr_interface.impl&%0.spec_valid_pn_with. fuel%verismo!addr_e.addr_interface.impl&%0.to_addr. fuel%verismo!addr_e.addr_interface.impl&%1.to_page. fuel%verismo!addr_e.addr_interface.impl&%3.spec_to_addr. fuel%verismo!addr_e.addr_interface.impl&%3.paget_to_int. fuel%verismo!addr_e.addr_interface.impl&%3.spec_ensures_to_addr. fuel%verismo!addr_e.addr_interface.impl&%3.spec_valid_pn_with. fuel%verismo!addr_e.addr_interface.impl&%5.spec_to_addr. fuel%verismo!addr_e.addr_interface.impl&%5.paget_to_int. fuel%verismo!addr_e.addr_interface.impl&%5.spec_ensures_to_addr. fuel%verismo!addr_e.addr_interface.impl&%5.spec_valid_pn_with. fuel%verismo!addr_e.addr_interface.impl&%7.spec_to_addr. fuel%verismo!addr_e.addr_interface.impl&%7.paget_to_int. fuel%verismo!addr_e.addr_interface.impl&%7.spec_ensures_to_addr. fuel%verismo!addr_e.addr_interface.impl&%7.spec_valid_pn_with. fuel%verismo!addr_e.addr_interface.impl&%9.spec_to_addr. fuel%verismo!addr_e.addr_interface.impl&%9.paget_to_int. fuel%verismo!addr_e.addr_interface.impl&%9.spec_ensures_to_addr. fuel%verismo!addr_e.addr_interface.impl&%9.spec_valid_pn_with. fuel%verismo!pgtable_e.def.impl&%0.spec_present. fuel%verismo!pgtable_e.def.impl&%0.spec_write. fuel%verismo!pgtable_e.def.impl&%0.spec_supervisor. fuel%verismo!pgtable_e.def.impl&%0.spec_pwt. fuel%verismo!pgtable_e.def.impl&%0.spec_pcd. fuel%verismo!pgtable_e.def.impl&%0.spec_accessed. fuel%verismo!pgtable_e.def.impl&%0.spec_dirty. fuel%verismo!pgtable_e.def.impl&%0.spec_psize. fuel%verismo!pgtable_e.def.impl&%0.spec_global. fuel%verismo!pgtable_e.def.impl&%0.spec_bit12. fuel%verismo!pgtable_e.def.impl&%0.spec_encrypted. fuel%verismo!pgtable_e.def.impl&%0.spec_page. fuel%verismo!pgtable_e.def.impl&%0.spec_nx. fuel%verismo!pgtable_e.def.impl&%1.spec_set_present. fuel%verismo!pgtable_e.def.impl&%1.spec_set_write. fuel%verismo!pgtable_e.def.impl&%1.spec_set_supervisor. fuel%verismo!pgtable_e.def.impl&%1.spec_set_pwt. fuel%verismo!pgtable_e.def.impl&%1.spec_set_pcd. fuel%verismo!pgtable_e.def.impl&%1.spec_set_accessed. fuel%verismo!pgtable_e.def.impl&%1.spec_set_dirty. fuel%verismo!pgtable_e.def.impl&%1.spec_set_psize. fuel%verismo!pgtable_e.def.impl&%1.spec_set_global. fuel%verismo!pgtable_e.def.impl&%1.spec_set_bit12. fuel%verismo!pgtable_e.def.impl&%1.spec_set_encrypted. fuel%verismo!pgtable_e.def.impl&%1.spec_set_page. fuel%verismo!pgtable_e.def.impl&%1.spec_set_nx. fuel%verismo!pgtable_e.def.impl&%11.spec_size_def. fuel%verismo!pgtable_e.def.impl&%12.spec_eq. fuel%verismo!pgtable_e.def.impl&%13.is_constant. fuel%verismo!pgtable_e.def.impl&%13.is_constant_to. fuel%verismo!pgtable_e.def.impl&%14.wf. fuel%verismo!pgtable_e.def.impl&%16.inv. fuel%verismo!pgtable_e.def.impl&%16.spec_new. fuel%verismo!pgtable_e.def.impl&%16.lemma_new_eq. fuel%verismo!pgtable_e.def.impl&%16.spec_present. fuel%verismo!pgtable_e.def.impl&%16.spec_write. fuel%verismo!pgtable_e.def.impl&%16.spec_supervisor. fuel%verismo!pgtable_e.def.impl&%16.spec_pwt. fuel%verismo!pgtable_e.def.impl&%16.spec_pcd. fuel%verismo!pgtable_e.def.impl&%16.spec_accessed. fuel%verismo!pgtable_e.def.impl&%16.spec_dirty. fuel%verismo!pgtable_e.def.impl&%16.spec_psize. fuel%verismo!pgtable_e.def.impl&%16.spec_global. fuel%verismo!pgtable_e.def.impl&%16.spec_bit12. fuel%verismo!pgtable_e.def.impl&%16.spec_encrypted. fuel%verismo!pgtable_e.def.impl&%16.spec_page. fuel%verismo!pgtable_e.def.impl&%16.spec_nx. fuel%verismo!pgtable_e.def.impl&%16.view. fuel%verismo!ptr.def_s.impl&%4.vspec_cast_to. fuel%verismo!ptr.def_s.impl&%5.spec_size_def. fuel%verismo!ptr.def_s.impl&%7.wf. fuel%verismo!ptr.def_s.impl&%8.is_constant. fuel%verismo!ptr.def_s.impl&%8.is_constant_to. fuel%verismo!ptr.def_s.impl&%19.id. fuel%verismo!ptr.def_s.impl&%20.spec_ptr. fuel%verismo!ptr.def_s.impl&%20.spec_value. fuel%verismo!ptr.def_s.impl&%20.spec_snp. fuel%verismo!ptr.ptr_s.inv_snp_value. fuel%verismo!ptr.ptr_s.impl&%1.snp. fuel%verismo!ptr.ptr_s.impl&%1.hw_snp. fuel%verismo!ptr.ptr_s.impl&%3.vspec_cast_to. fuel%verismo!ptr.ptr_s.impl&%5.is_constant_to. fuel%verismo!ptr.ptr_s.impl&%5.is_constant. fuel%verismo!ptr.ptr_u.impl&%0.wf. fuel%verismo!ptr.ptr_u.impl&%2.value. fuel%verismo!ptr.ptr_u.impl&%2.wf_value. fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_pptr. fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes. fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp. fuel%verismo!ptr.raw_ptr_s.impl&%5.size. fuel%verismo!ptr.raw_ptr_s.impl&%5.range. fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_range. fuel%verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range. fuel%verismo!ptr.raw_ptr_s.impl&%5.wf. fuel%verismo!ptr.raw_ptr_s.impl&%5.bytes. fuel%verismo!ptr.raw_ptr_s.impl&%6.vspec_cast_to. fuel%verismo!ptr.raw_ptr_s.impl&%8.snp. fuel%verismo!ptr.raw_ptr_s.impl&%8.hw_snp. fuel%verismo!registers.core_perm_s.impl&%0.spec_cpu. fuel%verismo!registers.core_perm_s.impl&%0.spec_run. fuel%verismo!registers.core_perm_s.impl&%0.spec_vmpl. fuel%verismo!registers.core_perm_s.impl&%0.spec_count. fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs. fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_mem. fuel%verismo!registers.msr_perm_s.impl&%0.shared. fuel%verismo!registers.msr_perm_s.impl&%0.value. fuel%verismo!registers.msr_perm_s.impl&%1.wf. fuel%verismo!registers.msr_perm_s.impl&%2.view. fuel%verismo!tspec.spec_unused. fuel%verismo!tspec.impl&%5.to_result.))
(declare-sort verismo!ptr.def_s.SnpPointsToRaw. 0)
(declare-sort verismo!registers.core_perm_s.CoreIdPerm. 0)
(declare-sort verismo!registers.msr_perm_s.RegisterPerm. 0)
(declare-sort verismo!snp.cpu.vmsa.SevFeaturesSpec. 0)
(declare-sort verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. 0)
(declare-sort verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<int./tuple%0.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<u8./tuple%0.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<u16./tuple%0.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<u32./tuple%0.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<u64./tuple%0.>. 0)
(declare-sort verismo!tspec.security.sectype.SecType<usize./tuple%0.>. 0)
(declare-sort vstd!map.Map<int./int.>. 0)
(declare-sort vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. 0)
(declare-sort vstd!map.Map<nat./bool.>. 0)
(declare-sort vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. 0)
(declare-sort vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. 0)
(declare-sort vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. 0)
(declare-sort vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. 0)
(declare-sort vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. 0)
(declare-sort vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. 0)
(declare-sort vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. 0)
(declare-sort vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. 0)
(declare-sort vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. 0)
(declare-sort vstd!seq.Seq<u8.>. 0)
(declare-sort vstd!seq.Seq<tuple%2<nat./nat.>.>. 0)
(declare-sort vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. 0)
(declare-sort vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. 0)
(declare-sort vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. 0)
(declare-sort vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. 0)
(declare-sort vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. 0)
(declare-sort vstd!set.Set<int.>. 0)
(declare-sort vstd!set.Set<nat.>. 0)
(declare-sort vstd!set.Set<verismo!arch.entities.VMPL.>. 0)
(declare-sort vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. 0)
(declare-sort vstd!set.Set<verismo!arch.entities.memid.MemID.>. 0)
(declare-sort vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. 0)
(declare-datatypes ((core!option.Option. 0) (verismo!tspec.security.sectype.DataLabel. 0) (verismo!tspec.security.sectype.SpecSecType. 0) (verismo!arch.addr_s.def_s.GuestVir. 0) (verismo!arch.addr_s.def_s.GuestPhy. 0) (verismo!arch.addr_s.def_s.SysPhy. 0) (verismo!arch.addr_s.def_s.SpecPage. 0) (verismo!arch.addr_s.def_s.SpecAddr. 0) (verismo!arch.addr_s.def_s.SpecMem. 0) (verismo!arch.addr_s.def_s.PageSize. 0) (verismo!arch.entities.memid.MemID. 0) (verismo!arch.entities.memid.CpuMemID. 0) (verismo!arch.entities.params.AddrMemID. 0) (verismo!arch.entities.params.PageID. 0) (verismo!arch.entities.params.AddrID. 0) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. 0) (verismo!arch.rmp.def_s.RmpEntry. 0) (verismo!arch.rmp.def_s.RmpAdjustParam. 0) (verismo!arch.rmp.def_s.PvalidateParam. 0) (verismo!arch.rmp.def_s.RmpOp. 0) (verismo!arch.rmp.perm_s.Perm. 0) (verismo!arch.ramdb.def.RamDB. 0) (verismo!arch.pgtable.def.MemMap. 0) (verismo!arch.pgtable.def.SpecPageTableEntry. 0) (verismo!arch.tlb.def_s.TLB. 0) (verismo!arch.vram.def.VRamDB. 0) (verismo!arch.mem.def_s.MemDB. 0) (verismo!arch.x64.def_s.Archx64Op. 0) (verismo!arch.x64.def_s.Archx64. 0) (verismo!arch.x64.def_s.AECode. 0) (verismo!arch.x64.def_s.NAECode. 0) (verismo!arch.x64.def_s.ExceptionCode. 0) (verismo!boot.idt.def.Idtr. 0) (verismo!ptr.snp.snp_u.RmpAttrSpec. 0) (verismo!ptr.snp.snp_u.RmpAttr. 0) (verismo!ptr.snp.snp_u.PTAttr. 0) (verismo!ptr.snp.snp_u.SwSnpMemAttr. 0) (verismo!ptr.snp.snp_u.SnpMemAttr. 0) (verismo!registers.trackedcore.snpcore.SnpCore. 0) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. 0) (verismo!snp.cpu.gdt.DescriptorAttr0_7. 0) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. 0) (verismo!snp.cpu.gdt.DescriptorAttr8_11. 0) (verismo!snp.cpu.gdt.DescriptorSpec. 0) (verismo!snp.cpu.gdt.Descriptor. 0) (verismo!snp.cpu.gdt.Gdtr. 0) (verismo!snp.cpu.vmsa.SevFeatures. 0) (verismo!snp.cpu.vmsa.VmsaSegmentRegister. 0) (verismo!snp.cpu.vmsa.Vmsa. 0) (verismo!arch.entities.VMPL. 0) (verismo!arch.crypto.CryptoMask. 0) (verismo!arch.crypto.SymKey. 0) (verismo!arch.crypto.Encrypted. 0) (verismo!arch.memop.MemOp. 0) (verismo!arch.errors.MemError. 0) (verismo!arch.errors.RmpFault. 0) (verismo!arch.reg.RegName. 0) (verismo!arch.reg.RflagBit. 0) (verismo!pgtable_e.def.SpecPTE. 0) (verismo!pgtable_e.def.PTE. 0) (verismo!ptr.def_s.SnpPPtr. 0) (verismo!ptr.def_s.SnpPointsToData. 0) (verismo!ptr.raw_ptr_s.SnpPointsToBytes. 0) (verismo!registers.core_perm_s.CoreMode. 0) (verismo!registers.msr_perm_s.RegisterPermValue. 0) (verismo!tspec.ResultWithErr. 0) (tuple%0. 0) (tuple%2. 0) (tuple%3. 0)) (((core!option.Option./None ) (core!option.Option./Some (core!option.Option./Some/?0 Poly))) ((verismo!tspec.security.sectype.DataLabel./Symbol ) (verismo!tspec.security.sectype.DataLabel./Unknown ) (verismo!tspec.security.sectype.DataLabel./TrustedRandom ) (verismo!tspec.security.sectype.DataLabel./Secret )) ((verismo!tspec.security.sectype.SpecSecType./SpecSecType (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?val Poly) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?_unused core!option.Option.) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?valsets Poly) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?labels vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.))) ((verismo!arch.addr_s.def_s.GuestVir./GuestVir )) ((verismo!arch.addr_s.def_s.GuestPhy./GuestPhy )) ((verismo!arch.addr_s.def_s.SysPhy./SysPhy )) ((verismo!arch.addr_s.def_s.SpecPage./SpecPage (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?value Int) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?dummy Poly))) ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?value Int) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?dummy Poly))) ((verismo!arch.addr_s.def_s.SpecMem./SpecMem (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?first verismo!arch.addr_s.def_s.SpecAddr.) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?size Int))) ((verismo!arch.addr_s.def_s.PageSize./Size4k ) (verismo!arch.addr_s.def_s.PageSize./Size2m )) ((verismo!arch.entities.memid.MemID./Guest (verismo!arch.entities.memid.MemID./Guest/?0 Int) (verismo!arch.entities.memid.MemID./Guest/?1 verismo!arch.entities.VMPL.)) (verismo!arch.entities.memid.MemID./Hv )) ((verismo!arch.entities.memid.CpuMemID./CpuMemID (verismo!arch.entities.memid.CpuMemID./CpuMemID/?0 Int) (verismo!arch.entities.memid.CpuMemID./CpuMemID/?1 verismo!arch.entities.memid.MemID.))) ((verismo!arch.entities.params.AddrMemID./AddrMemID (verismo!arch.entities.params.AddrMemID./AddrMemID/?range verismo!arch.addr_s.def_s.SpecMem.) (verismo!arch.entities.params.AddrMemID./AddrMemID/?memid verismo!arch.entities.memid.MemID.))) ((verismo!arch.entities.params.PageID./PageID (verismo!arch.entities.params.PageID./PageID/?page verismo!arch.addr_s.def_s.SpecPage.) (verismo!arch.entities.params.PageID./PageID/?memid verismo!arch.entities.memid.MemID.))) ((verismo!arch.entities.params.AddrID./AddrID (verismo!arch.entities.params.AddrID./AddrID/?addr verismo!arch.addr_s.def_s.SpecAddr.) (verismo!arch.entities.params.AddrID./AddrID/?memid verismo!arch.entities.memid.MemID.))) ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?immutable Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?assigned Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?validated Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?vmsa Bool) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?asid Int) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?gpn verismo!arch.addr_s.def_s.SpecPage.) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?size verismo!arch.addr_s.def_s.PageSize.) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?perms vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.))) ((verismo!arch.rmp.def_s.RmpEntry./RmpEntry (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/?val verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.))) ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?gpn verismo!arch.addr_s.def_s.SpecPage.) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?psize verismo!arch.addr_s.def_s.PageSize.) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?vmsa Bool) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?vmpl verismo!arch.entities.VMPL.) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?perms vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.))) ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?gpn verismo!arch.addr_s.def_s.SpecPage.) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?psize verismo!arch.addr_s.def_s.PageSize.) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?val Bool))) ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/?0 verismo!arch.entities.params.PageID.) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/?1 verismo!arch.rmp.def_s.RmpAdjustParam.)) (verismo!arch.rmp.def_s.RmpOp./Pvalidate (verismo!arch.rmp.def_s.RmpOp./Pvalidate/?0 verismo!arch.entities.params.PageID.) (verismo!arch.rmp.def_s.RmpOp./Pvalidate/?1 verismo!arch.rmp.def_s.PvalidateParam.)) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/?0 verismo!arch.entities.params.PageID.) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/?1 verismo!arch.rmp.def_s.RmpEntry.))) ((verismo!arch.rmp.perm_s.Perm./Read ) (verismo!arch.rmp.perm_s.Perm./Write ) (verismo!arch.rmp.perm_s.Perm./ExeU ) (verismo!arch.rmp.perm_s.Perm./ExeS ) (verismo!arch.rmp.perm_s.Perm./Shadow )) ((verismo!arch.ramdb.def.RamDB./RamDB (verismo!arch.ramdb.def.RamDB./RamDB/?data vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.) (verismo!arch.ramdb.def.RamDB./RamDB/?write_count Int) (verismo!arch.ramdb.def.RamDB./RamDB/?crypto_mask vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.))) ((verismo!arch.pgtable.def.MemMap./MemMap (verismo!arch.pgtable.def.MemMap./MemMap/?db Poly))) ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?value Int) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?dummy Poly))) ((verismo!arch.tlb.def_s.TLB./TLB (verismo!arch.tlb.def_s.TLB./TLB/?db verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.))) ((verismo!arch.vram.def.VRamDB./VRamDB (verismo!arch.vram.def.VRamDB./VRamDB/?sram verismo!arch.ramdb.def.RamDB.) (verismo!arch.vram.def.VRamDB./VRamDB/?rmp vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.))) ((verismo!arch.mem.def_s.MemDB./MemDB (verismo!arch.mem.def_s.MemDB./MemDB/?vram verismo!arch.vram.def.VRamDB.) (verismo!arch.mem.def_s.MemDB./MemDB/?l0_entry vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.) (verismo!arch.mem.def_s.MemDB./MemDB/?sysmap vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.) (verismo!arch.mem.def_s.MemDB./MemDB/?tlb verismo!arch.tlb.def_s.TLB.))) ((verismo!arch.x64.def_s.Archx64Op./MemOp (verismo!arch.x64.def_s.Archx64Op./MemOp/?0 verismo!arch.memop.MemOp.) (verismo!arch.x64.def_s.Archx64Op./MemOp/?1 Int)) (verismo!arch.x64.def_s.Archx64Op./RegWrite (verismo!arch.x64.def_s.Archx64Op./RegWrite/?0 verismo!arch.entities.memid.CpuMemID.) (verismo!arch.x64.def_s.Archx64Op./RegWrite/?1 verismo!arch.reg.RegName.) (verismo!arch.x64.def_s.Archx64Op./RegWrite/?2 Int)) (verismo!arch.x64.def_s.Archx64Op./RegRead (verismo!arch.x64.def_s.Archx64Op./RegRead/?0 verismo!arch.entities.memid.CpuMemID.) (verismo!arch.x64.def_s.Archx64Op./RegRead/?1 verismo!arch.reg.RegName.)) (verismo!arch.x64.def_s.Archx64Op./VMGExit (verismo!arch.x64.def_s.Archx64Op./VMGExit/?0 verismo!arch.entities.memid.CpuMemID.)) (verismo!arch.x64.def_s.Archx64Op./LoopHalt (verismo!arch.x64.def_s.Archx64Op./LoopHalt/?0 verismo!arch.entities.memid.CpuMemID.))) ((verismo!arch.x64.def_s.Archx64./Archx64 (verismo!arch.x64.def_s.Archx64./Archx64/?memdb verismo!arch.mem.def_s.MemDB.) (verismo!arch.x64.def_s.Archx64./Archx64/?regdb vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.) (verismo!arch.x64.def_s.Archx64./Archx64/?entities vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.))) ((verismo!arch.x64.def_s.AECode./Mc ) (verismo!arch.x64.def_s.AECode./Intr ) (verismo!arch.x64.def_s.AECode./Nmi ) (verismo!arch.x64.def_s.AECode./Smi ) (verismo!arch.x64.def_s.AECode./Init ) (verismo!arch.x64.def_s.AECode./VIntr ) (verismo!arch.x64.def_s.AECode./Pause ) (verismo!arch.x64.def_s.AECode./Hlt ) (verismo!arch.x64.def_s.AECode./Npf ) (verismo!arch.x64.def_s.AECode./Vmmcall ) (verismo!arch.x64.def_s.AECode./VMGExit ) (verismo!arch.x64.def_s.AECode./Busy ) (verismo!arch.x64.def_s.AECode./Others )) ((verismo!arch.x64.def_s.NAECode./Npf ) (verismo!arch.x64.def_s.NAECode./Vmmcall ) (verismo!arch.x64.def_s.NAECode./Halt ) (verismo!arch.x64.def_s.NAECode./NotValidated (verismo!arch.x64.def_s.NAECode./NotValidated/?0 verismo!arch.x64.def_s.Archx64Op.)) (verismo!arch.x64.def_s.NAECode./Others )) ((verismo!arch.x64.def_s.ExceptionCode./PFault (verismo!arch.x64.def_s.ExceptionCode./PFault/?0 verismo!arch.x64.def_s.Archx64Op.)) (verismo!arch.x64.def_s.ExceptionCode./GP (verismo!arch.x64.def_s.ExceptionCode./GP/?0 verismo!arch.x64.def_s.Archx64Op.))) ((verismo!boot.idt.def.Idtr./Idtr (verismo!boot.idt.def.Idtr./Idtr/?limit verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!boot.idt.def.Idtr./Idtr/?base verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/?vmpl Int) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/?perms Int) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/?vmsa Int))) ((verismo!ptr.snp.snp_u.RmpAttr./RmpAttr (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/?value Int))) ((verismo!ptr.snp.snp_u.PTAttr./PTAttr (verismo!ptr.snp.snp_u.PTAttr./PTAttr/?encrypted Bool) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/?w Bool) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/?x Bool))) ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?rmp verismo!arch.rmp.def_s.RmpEntry.) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?guestmap vstd!map.Map<int./int.>.) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?sysmap vstd!map.Map<int./int.>.) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?rmpmap vstd!map.Map<int./int.>.) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?pte vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?is_pte Bool))) ((verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/?hw verismo!ptr.snp.snp_u.SwSnpMemAttr.) (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/?sw verismo!ptr.snp.snp_u.SwSnpMemAttr.))) ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?coreid verismo!registers.core_perm_s.CoreIdPerm.) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?vmpl Int) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?cpu Int) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?regs vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.))) ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?accessed Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?write Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?conform Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?exe Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?sys Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?dpl Int) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?present Int))) ((verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/?value Int))) ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?avl Int) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?long Int) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?size32_or_16 Int) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?granularity Int))) ((verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/?value Int))) ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?limit0_15 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?base0_23 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?attr_0_7 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?limit16_19 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?attr_8_11 Int) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?base24_31 Int))) ((verismo!snp.cpu.gdt.Descriptor./Descriptor (verismo!snp.cpu.gdt.Descriptor./Descriptor/?value Int))) ((verismo!snp.cpu.gdt.Gdtr./Gdtr (verismo!snp.cpu.gdt.Gdtr./Gdtr/?limit verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!snp.cpu.gdt.Gdtr./Gdtr/?base verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!snp.cpu.vmsa.SevFeatures./SevFeatures (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/?value Int))) ((verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?selector verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?attr verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?limit verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?base verismo!tspec.security.sectype.SecType<u64./tuple%0.>.))) ((verismo!snp.cpu.vmsa.Vmsa./Vmsa (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?es verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cs verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?ss verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?ds verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?fs verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?gs verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?gdtr verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_ldtr_idtr_tr Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?vmpl verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cpl verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved2 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?efer verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved3 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cr4 verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cr3 verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cr0 verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_dr7_6 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rflags verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rip verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved4 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rsp verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved5 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rax verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved6 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?gpat verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved7 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rcx verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rdx verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rbx verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved8 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rbp verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rsi verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rdi verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_9_r9_15_exits_scratch Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?sev_features verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?vintr_ctrl verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?guest_error_code verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?virtual_tom verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_12 Poly) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?xcr0 verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved13 Poly))) ((verismo!arch.entities.VMPL./VMPL0 ) (verismo!arch.entities.VMPL./VMPL1 ) (verismo!arch.entities.VMPL./VMPL2 ) (verismo!arch.entities.VMPL./VMPL3 )) ((verismo!arch.crypto.CryptoMask./CryptoMask (verismo!arch.crypto.CryptoMask./CryptoMask/?0 Int))) ((verismo!arch.crypto.SymKey./SymKey (verismo!arch.crypto.SymKey./SymKey/?key Poly))) ((verismo!arch.crypto.Encrypted./Encrypted (verismo!arch.crypto.Encrypted./Encrypted/?data Poly) (verismo!arch.crypto.Encrypted./Encrypted/?key Poly) (verismo!arch.crypto.Encrypted./Encrypted/?crypto_mask Poly))) ((verismo!arch.memop.MemOp./Read (verismo!arch.memop.MemOp./Read/?0 verismo!arch.entities.params.AddrMemID.) (verismo!arch.memop.MemOp./Read/?1 Bool)) (verismo!arch.memop.MemOp./Write (verismo!arch.memop.MemOp./Write/?0 verismo!arch.entities.params.AddrID.) (verismo!arch.memop.MemOp./Write/?1 Bool) (verismo!arch.memop.MemOp./Write/?2 vstd!seq.Seq<u8.>.)) (verismo!arch.memop.MemOp./InvlPage (verismo!arch.memop.MemOp./InvlPage/?0 verismo!arch.entities.params.AddrMemID.)) (verismo!arch.memop.MemOp./FlushAll (verismo!arch.memop.MemOp./FlushAll/?0 verismo!arch.entities.memid.MemID.)) (verismo!arch.memop.MemOp./RmpOp (verismo!arch.memop.MemOp./RmpOp/?0 verismo!arch.rmp.def_s.RmpOp.))) ((verismo!arch.errors.MemError./Others (verismo!arch.errors.MemError./Others/?0 Poly)) (verismo!arch.errors.MemError./NoRam (verismo!arch.errors.MemError./NoRam/?0 Poly)) (verismo!arch.errors.MemError./NotValidated (verismo!arch.errors.MemError./NotValidated/?0 Poly)) (verismo!arch.errors.MemError./NestedPF (verismo!arch.errors.MemError./NestedPF/?0 Poly)) (verismo!arch.errors.MemError./PageFault (verismo!arch.errors.MemError./PageFault/?0 Poly)) (verismo!arch.errors.MemError./RmpOp (verismo!arch.errors.MemError./RmpOp/?0 verismo!arch.errors.RmpFault.) (verismo!arch.errors.MemError./RmpOp/?1 Poly))) ((verismo!arch.errors.RmpFault./Unsupported ) (verismo!arch.errors.RmpFault./Size ) (verismo!arch.errors.RmpFault./Input ) (verismo!arch.errors.RmpFault./Perm ) (verismo!arch.errors.RmpFault./DoubleVal )) ((verismo!arch.reg.RegName./Rflags ) (verismo!arch.reg.RegName./Rax ) (verismo!arch.reg.RegName./Rsp ) (verismo!arch.reg.RegName./Cs ) (verismo!arch.reg.RegName./Ds ) (verismo!arch.reg.RegName./Ss ) (verismo!arch.reg.RegName./Es ) (verismo!arch.reg.RegName./Gs ) (verismo!arch.reg.RegName./Cpl ) (verismo!arch.reg.RegName./Cr0 ) (verismo!arch.reg.RegName./Cr1 ) (verismo!arch.reg.RegName./Cr2 ) (verismo!arch.reg.RegName./Cr3 ) (verismo!arch.reg.RegName./Cr4 ) (verismo!arch.reg.RegName./XCr0 ) (verismo!arch.reg.RegName./IdtrBaseLimit ) (verismo!arch.reg.RegName./GdtrBaseLimit ) (verismo!arch.reg.RegName./MSR (verismo!arch.reg.RegName./MSR/?0 Int))) ((verismo!arch.reg.RflagBit./CF ) (verismo!arch.reg.RflagBit./R1 ) (verismo!arch.reg.RflagBit./PF ) (verismo!arch.reg.RflagBit./R2 ) (verismo!arch.reg.RflagBit./AF ) (verismo!arch.reg.RflagBit./R3 ) (verismo!arch.reg.RflagBit./ZF ) (verismo!arch.reg.RflagBit./SF ) (verismo!arch.reg.RflagBit./TF ) (verismo!arch.reg.RflagBit./IF ) (verismo!arch.reg.RflagBit./DF ) (verismo!arch.reg.RflagBit./ID )) ((verismo!pgtable_e.def.SpecPTE./SpecPTE (verismo!pgtable_e.def.SpecPTE./SpecPTE/?present Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?write Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?supervisor Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?pwt Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?pcd Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?accessed Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?dirty Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?psize Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?global Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?bit12 Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?encrypted Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?page Int) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?nx Int))) ((verismo!pgtable_e.def.PTE./PTE (verismo!pgtable_e.def.PTE./PTE/?value Int))) ((verismo!ptr.def_s.SnpPPtr./SnpPPtr (verismo!ptr.def_s.SnpPPtr./SnpPPtr/?uptr Int) (verismo!ptr.def_s.SnpPPtr./SnpPPtr/?dummy Poly))) ((verismo!ptr.def_s.SnpPointsToData./SnpPointsToData (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/?ptr Int) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/?value core!option.Option.) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/?snp verismo!ptr.snp.snp_u.SnpMemAttr.))) ((verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/?pptr Int) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/?snp_bytes vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/?snp verismo!ptr.snp.snp_u.SnpMemAttr.))) ((verismo!registers.core_perm_s.CoreMode./CoreMode (verismo!registers.core_perm_s.CoreMode./CoreMode/?cpu Int) (verismo!registers.core_perm_s.CoreMode./CoreMode/?run Bool) (verismo!registers.core_perm_s.CoreMode./CoreMode/?vmpl Int) (verismo!registers.core_perm_s.CoreMode./CoreMode/?count Int) (verismo!registers.core_perm_s.CoreMode./CoreMode/?sent_ghcb_msrs vstd!seq.Seq<tuple%2<nat./nat.>.>.) (verismo!registers.core_perm_s.CoreMode./CoreMode/?sent_mem vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.))) ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?cpu Int) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?id verismo!arch.reg.RegName.) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?shared Bool) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?value Poly))) ((verismo!tspec.ResultWithErr./Ok (verismo!tspec.ResultWithErr./Ok/?0 Poly)) (verismo!tspec.ResultWithErr./Error (verismo!tspec.ResultWithErr./Error/?0 Poly) (verismo!tspec.ResultWithErr./Error/?1 Poly))) ((tuple%0./tuple%0 )) ((tuple%2./tuple%2 (tuple%2./tuple%2/?0 Poly) (tuple%2./tuple%2/?1 Poly))) ((tuple%3./tuple%3 (tuple%3./tuple%3/?0 Poly) (tuple%3./tuple%3/?1 Poly) (tuple%3./tuple%3/?2 Poly)))))
(declare-fun core!option.Option./Some/0 (core!option.Option.) Poly)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (verismo!tspec.security.sectype.SpecSecType.) core!option.Option.)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (verismo!tspec.security.sectype.SpecSecType.) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(declare-fun verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (verismo!arch.addr_s.def_s.SpecPage.) Int)
(declare-fun verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (verismo!arch.addr_s.def_s.SpecPage.) Poly)
(declare-fun verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (verismo!arch.addr_s.def_s.SpecAddr.) Int)
(declare-fun verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (verismo!arch.addr_s.def_s.SpecAddr.) Poly)
(declare-fun verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (verismo!arch.addr_s.def_s.SpecMem.) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (verismo!arch.addr_s.def_s.SpecMem.) Int)
(declare-fun verismo!arch.entities.memid.MemID./Guest/0 (verismo!arch.entities.memid.MemID.) Int)
(declare-fun verismo!arch.entities.memid.MemID./Guest/1 (verismo!arch.entities.memid.MemID.) verismo!arch.entities.VMPL.)
(declare-fun verismo!arch.entities.memid.CpuMemID./CpuMemID/0 (verismo!arch.entities.memid.CpuMemID.) Int)
(declare-fun verismo!arch.entities.memid.CpuMemID./CpuMemID/1 (verismo!arch.entities.memid.CpuMemID.) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.entities.params.AddrMemID./AddrMemID/range (verismo!arch.entities.params.AddrMemID.) verismo!arch.addr_s.def_s.SpecMem.)
(declare-fun verismo!arch.entities.params.AddrMemID./AddrMemID/memid (verismo!arch.entities.params.AddrMemID.) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.entities.params.PageID./PageID/page (verismo!arch.entities.params.PageID.) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.entities.params.PageID./PageID/memid (verismo!arch.entities.params.PageID.) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.entities.params.AddrID./AddrID/addr (verismo!arch.entities.params.AddrID.) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.entities.params.AddrID./AddrID/memid (verismo!arch.entities.params.AddrID.) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Int)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(declare-fun verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (verismo!arch.rmp.def_s.RmpEntry.) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn (verismo!arch.rmp.def_s.RmpAdjustParam.) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/psize (verismo!arch.rmp.def_s.RmpAdjustParam.) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmsa (verismo!arch.rmp.def_s.RmpAdjustParam.) Bool)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmpl (verismo!arch.rmp.def_s.RmpAdjustParam.) verismo!arch.entities.VMPL.)
(declare-fun verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/perms (verismo!arch.rmp.def_s.RmpAdjustParam.) vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)
(declare-fun verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn (verismo!arch.rmp.def_s.PvalidateParam.) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/psize (verismo!arch.rmp.def_s.PvalidateParam.) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/val (verismo!arch.rmp.def_s.PvalidateParam.) Bool)
(declare-fun verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.entities.params.PageID.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.rmp.def_s.RmpAdjustParam.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.entities.params.PageID.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.rmp.def_s.PvalidateParam.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.entities.params.PageID.)
(declare-fun verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (verismo!arch.rmp.def_s.RmpOp.) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun verismo!arch.ramdb.def.RamDB./RamDB/data (verismo!arch.ramdb.def.RamDB.) vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.)
(declare-fun verismo!arch.ramdb.def.RamDB./RamDB/write_count (verismo!arch.ramdb.def.RamDB.) Int)
(declare-fun verismo!arch.ramdb.def.RamDB./RamDB/crypto_mask (verismo!arch.ramdb.def.RamDB.) vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.)
(declare-fun verismo!arch.pgtable.def.MemMap./MemMap/db (verismo!arch.pgtable.def.MemMap.) Poly)
(declare-fun verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value (verismo!arch.pgtable.def.SpecPageTableEntry.) Int)
(declare-fun verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (verismo!arch.pgtable.def.SpecPageTableEntry.) Poly)
(declare-fun verismo!arch.tlb.def_s.TLB./TLB/db (verismo!arch.tlb.def_s.TLB.) verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)
(declare-fun verismo!arch.vram.def.VRamDB./VRamDB/sram (verismo!arch.vram.def.VRamDB.) verismo!arch.ramdb.def.RamDB.)
(declare-fun verismo!arch.vram.def.VRamDB./VRamDB/rmp (verismo!arch.vram.def.VRamDB.) vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.)
(declare-fun verismo!arch.mem.def_s.MemDB./MemDB/vram (verismo!arch.mem.def_s.MemDB.) verismo!arch.vram.def.VRamDB.)
(declare-fun verismo!arch.mem.def_s.MemDB./MemDB/l0_entry (verismo!arch.mem.def_s.MemDB.) vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)
(declare-fun verismo!arch.mem.def_s.MemDB./MemDB/sysmap (verismo!arch.mem.def_s.MemDB.) vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.)
(declare-fun verismo!arch.mem.def_s.MemDB./MemDB/tlb (verismo!arch.mem.def_s.MemDB.) verismo!arch.tlb.def_s.TLB.)
(declare-fun verismo!arch.x64.def_s.Archx64Op./MemOp/0 (verismo!arch.x64.def_s.Archx64Op.) verismo!arch.memop.MemOp.)
(declare-fun verismo!arch.x64.def_s.Archx64Op./MemOp/1 (verismo!arch.x64.def_s.Archx64Op.) Int)
(declare-fun verismo!arch.x64.def_s.Archx64Op./RegWrite/0 (verismo!arch.x64.def_s.Archx64Op.) verismo!arch.entities.memid.CpuMemID.)
(declare-fun verismo!arch.x64.def_s.Archx64Op./RegWrite/1 (verismo!arch.x64.def_s.Archx64Op.) verismo!arch.reg.RegName.)
(declare-fun verismo!arch.x64.def_s.Archx64Op./RegWrite/2 (verismo!arch.x64.def_s.Archx64Op.) Int)
(declare-fun verismo!arch.x64.def_s.Archx64Op./RegRead/0 (verismo!arch.x64.def_s.Archx64Op.) verismo!arch.entities.memid.CpuMemID.)
(declare-fun verismo!arch.x64.def_s.Archx64Op./RegRead/1 (verismo!arch.x64.def_s.Archx64Op.) verismo!arch.reg.RegName.)
(declare-fun verismo!arch.x64.def_s.Archx64Op./VMGExit/0 (verismo!arch.x64.def_s.Archx64Op.) verismo!arch.entities.memid.CpuMemID.)
(declare-fun verismo!arch.x64.def_s.Archx64Op./LoopHalt/0 (verismo!arch.x64.def_s.Archx64Op.) verismo!arch.entities.memid.CpuMemID.)
(declare-fun verismo!arch.x64.def_s.Archx64./Archx64/memdb (verismo!arch.x64.def_s.Archx64.) verismo!arch.mem.def_s.MemDB.)
(declare-fun verismo!arch.x64.def_s.Archx64./Archx64/regdb (verismo!arch.x64.def_s.Archx64.) vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.)
(declare-fun verismo!arch.x64.def_s.Archx64./Archx64/entities (verismo!arch.x64.def_s.Archx64.) vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.)
(declare-fun verismo!arch.x64.def_s.NAECode./NotValidated/0 (verismo!arch.x64.def_s.NAECode.) verismo!arch.x64.def_s.Archx64Op.)
(declare-fun verismo!arch.x64.def_s.ExceptionCode./PFault/0 (verismo!arch.x64.def_s.ExceptionCode.) verismo!arch.x64.def_s.Archx64Op.)
(declare-fun verismo!arch.x64.def_s.ExceptionCode./GP/0 (verismo!arch.x64.def_s.ExceptionCode.) verismo!arch.x64.def_s.Archx64Op.)
(declare-fun verismo!boot.idt.def.Idtr./Idtr/limit (verismo!boot.idt.def.Idtr.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!boot.idt.def.Idtr./Idtr/base (verismo!boot.idt.def.Idtr.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmpl (verismo!ptr.snp.snp_u.RmpAttrSpec.) Int)
(declare-fun verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/perms (verismo!ptr.snp.snp_u.RmpAttrSpec.) Int)
(declare-fun verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmsa (verismo!ptr.snp.snp_u.RmpAttrSpec.) Int)
(declare-fun verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (verismo!ptr.snp.snp_u.RmpAttr.) Int)
(declare-fun verismo!ptr.snp.snp_u.PTAttr./PTAttr/encrypted (verismo!ptr.snp.snp_u.PTAttr.) Bool)
(declare-fun verismo!ptr.snp.snp_u.PTAttr./PTAttr/w (verismo!ptr.snp.snp_u.PTAttr.) Bool)
(declare-fun verismo!ptr.snp.snp_u.PTAttr./PTAttr/x (verismo!ptr.snp.snp_u.PTAttr.) Bool)
(declare-fun verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (verismo!ptr.snp.snp_u.SwSnpMemAttr.) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap (verismo!ptr.snp.snp_u.SwSnpMemAttr.) vstd!map.Map<int./int.>.)
(declare-fun verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/sysmap (verismo!ptr.snp.snp_u.SwSnpMemAttr.) vstd!map.Map<int./int.>.)
(declare-fun verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmpmap (verismo!ptr.snp.snp_u.SwSnpMemAttr.) vstd!map.Map<int./int.>.)
(declare-fun verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (verismo!ptr.snp.snp_u.SwSnpMemAttr.) vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.)
(declare-fun verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/is_pte (verismo!ptr.snp.snp_u.SwSnpMemAttr.) Bool)
(declare-fun verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (verismo!ptr.snp.snp_u.SnpMemAttr.) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (verismo!ptr.snp.snp_u.SnpMemAttr.) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (verismo!registers.trackedcore.snpcore.SnpCore.) verismo!registers.core_perm_s.CoreIdPerm.)
(declare-fun verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (verismo!registers.trackedcore.snpcore.SnpCore.) Int)
(declare-fun verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (verismo!registers.trackedcore.snpcore.SnpCore.) Int)
(declare-fun verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (verismo!registers.trackedcore.snpcore.SnpCore.) vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (verismo!snp.cpu.gdt.DescriptorAttr0_7.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (verismo!snp.cpu.gdt.DescriptorAttr8_11.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 (verismo!snp.cpu.gdt.DescriptorSpec.) Int)
(declare-fun verismo!snp.cpu.gdt.Descriptor./Descriptor/value (verismo!snp.cpu.gdt.Descriptor.) Int)
(declare-fun verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (verismo!snp.cpu.gdt.Gdtr.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!snp.cpu.gdt.Gdtr./Gdtr/base (verismo!snp.cpu.gdt.Gdtr.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (verismo!snp.cpu.vmsa.SevFeatures.) Int)
(declare-fun verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector (verismo!snp.cpu.vmsa.VmsaSegmentRegister.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr (verismo!snp.cpu.vmsa.VmsaSegmentRegister.) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit (verismo!snp.cpu.vmsa.VmsaSegmentRegister.) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base (verismo!snp.cpu.vmsa.VmsaSegmentRegister.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/es (verismo!snp.cpu.vmsa.Vmsa.) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs (verismo!snp.cpu.vmsa.Vmsa.) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss (verismo!snp.cpu.vmsa.Vmsa.) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds (verismo!snp.cpu.vmsa.Vmsa.) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs (verismo!snp.cpu.vmsa.Vmsa.) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs (verismo!snp.cpu.vmsa.Vmsa.) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr (verismo!snp.cpu.vmsa.Vmsa.) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 (verismo!snp.cpu.vmsa.Vmsa.) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun verismo!arch.crypto.CryptoMask./CryptoMask/0 (verismo!arch.crypto.CryptoMask.) Int)
(declare-fun verismo!arch.crypto.SymKey./SymKey/key (verismo!arch.crypto.SymKey.) Poly)
(declare-fun verismo!arch.crypto.Encrypted./Encrypted/data (verismo!arch.crypto.Encrypted.) Poly)
(declare-fun verismo!arch.crypto.Encrypted./Encrypted/key (verismo!arch.crypto.Encrypted.) Poly)
(declare-fun verismo!arch.crypto.Encrypted./Encrypted/crypto_mask (verismo!arch.crypto.Encrypted.) Poly)
(declare-fun verismo!arch.memop.MemOp./Read/0 (verismo!arch.memop.MemOp.) verismo!arch.entities.params.AddrMemID.)
(declare-fun verismo!arch.memop.MemOp./Read/1 (verismo!arch.memop.MemOp.) Bool)
(declare-fun verismo!arch.memop.MemOp./Write/0 (verismo!arch.memop.MemOp.) verismo!arch.entities.params.AddrID.)
(declare-fun verismo!arch.memop.MemOp./Write/1 (verismo!arch.memop.MemOp.) Bool)
(declare-fun verismo!arch.memop.MemOp./Write/2 (verismo!arch.memop.MemOp.) vstd!seq.Seq<u8.>.)
(declare-fun verismo!arch.memop.MemOp./InvlPage/0 (verismo!arch.memop.MemOp.) verismo!arch.entities.params.AddrMemID.)
(declare-fun verismo!arch.memop.MemOp./FlushAll/0 (verismo!arch.memop.MemOp.) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.memop.MemOp./RmpOp/0 (verismo!arch.memop.MemOp.) verismo!arch.rmp.def_s.RmpOp.)
(declare-fun verismo!arch.errors.MemError./Others/0 (verismo!arch.errors.MemError.) Poly)
(declare-fun verismo!arch.errors.MemError./NoRam/0 (verismo!arch.errors.MemError.) Poly)
(declare-fun verismo!arch.errors.MemError./NotValidated/0 (verismo!arch.errors.MemError.) Poly)
(declare-fun verismo!arch.errors.MemError./NestedPF/0 (verismo!arch.errors.MemError.) Poly)
(declare-fun verismo!arch.errors.MemError./PageFault/0 (verismo!arch.errors.MemError.) Poly)
(declare-fun verismo!arch.errors.MemError./RmpOp/0 (verismo!arch.errors.MemError.) verismo!arch.errors.RmpFault.)
(declare-fun verismo!arch.errors.MemError./RmpOp/1 (verismo!arch.errors.MemError.) Poly)
(declare-fun verismo!arch.reg.RegName./MSR/0 (verismo!arch.reg.RegName.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/present (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/write (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/psize (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/global (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/page (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.SpecPTE./SpecPTE/nx (verismo!pgtable_e.def.SpecPTE.) Int)
(declare-fun verismo!pgtable_e.def.PTE./PTE/value (verismo!pgtable_e.def.PTE.) Int)
(declare-fun verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr (verismo!ptr.def_s.SnpPPtr.) Int)
(declare-fun verismo!ptr.def_s.SnpPPtr./SnpPPtr/dummy (verismo!ptr.def_s.SnpPPtr.) Poly)
(declare-fun verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/ptr (verismo!ptr.def_s.SnpPointsToData.) Int)
(declare-fun verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (verismo!ptr.def_s.SnpPointsToData.) core!option.Option.)
(declare-fun verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (verismo!ptr.def_s.SnpPointsToData.) verismo!ptr.snp.snp_u.SnpMemAttr.)
(declare-fun verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (verismo!ptr.raw_ptr_s.SnpPointsToBytes.) Int)
(declare-fun verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes (verismo!ptr.raw_ptr_s.SnpPointsToBytes.) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (verismo!ptr.raw_ptr_s.SnpPointsToBytes.) verismo!ptr.snp.snp_u.SnpMemAttr.)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (verismo!registers.core_perm_s.CoreMode.) Int)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/run (verismo!registers.core_perm_s.CoreMode.) Bool)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (verismo!registers.core_perm_s.CoreMode.) Int)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/count (verismo!registers.core_perm_s.CoreMode.) Int)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs (verismo!registers.core_perm_s.CoreMode.) vstd!seq.Seq<tuple%2<nat./nat.>.>.)
(declare-fun verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem (verismo!registers.core_perm_s.CoreMode.) vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)
(declare-fun verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu (verismo!registers.msr_perm_s.RegisterPermValue.) Int)
(declare-fun verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id (verismo!registers.msr_perm_s.RegisterPermValue.) verismo!arch.reg.RegName.)
(declare-fun verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/shared (verismo!registers.msr_perm_s.RegisterPermValue.) Bool)
(declare-fun verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value (verismo!registers.msr_perm_s.RegisterPermValue.) Poly)
(declare-fun verismo!tspec.ResultWithErr./Ok/0 (verismo!tspec.ResultWithErr.) Poly)
(declare-fun verismo!tspec.ResultWithErr./Error/0 (verismo!tspec.ResultWithErr.) Poly)
(declare-fun verismo!tspec.ResultWithErr./Error/1 (verismo!tspec.ResultWithErr.) Poly)
(declare-fun tuple%2./tuple%2/0 (tuple%2.) Poly)
(declare-fun tuple%2./tuple%2/1 (tuple%2.) Poly)
(declare-fun tuple%3./tuple%3/0 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/1 (tuple%3.) Poly)
(declare-fun tuple%3./tuple%3/2 (tuple%3.) Poly)
(declare-fun TYPE%fun%1. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%fun%2. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun TYPE%core!option.Option. (Dcr Type) Type)
(declare-fun TYPE%vstd!map.Map. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%vstd!seq.Seq. (Dcr Type) Type)
(declare-fun TYPE%vstd!set.Set. (Dcr Type) Type)
(declare-fun TYPE%verismo!tspec.security.sectype.SecType. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!tspec.security.sectype.DataLabel. Type)
(declare-fun TYPE%verismo!tspec.security.sectype.SpecSecType. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.GuestVir. Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.GuestPhy. Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.SysPhy. Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecPage. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecAddr. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.addr_s.def_s.SpecMem. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.addr_s.def_s.PageSize. Type)
(declare-const TYPE%verismo!arch.entities.memid.MemID. Type)
(declare-const TYPE%verismo!arch.entities.memid.CpuMemID. Type)
(declare-fun TYPE%verismo!arch.entities.params.AddrMemID. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.entities.params.PageID. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.entities.params.AddrID. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. Type)
(declare-const TYPE%verismo!arch.rmp.def_s.RmpEntry. Type)
(declare-const TYPE%verismo!arch.rmp.def_s.RmpAdjustParam. Type)
(declare-const TYPE%verismo!arch.rmp.def_s.PvalidateParam. Type)
(declare-fun TYPE%verismo!arch.rmp.def_s.RmpOp. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.rmp.perm_s.Perm. Type)
(declare-const TYPE%verismo!arch.ramdb.def.RamDB. Type)
(declare-fun TYPE%verismo!arch.pgtable.def.MemMap. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.tlb.def_s.TLB. Type)
(declare-const TYPE%verismo!arch.vram.def.VRamDB. Type)
(declare-const TYPE%verismo!arch.mem.def_s.MemDB. Type)
(declare-const TYPE%verismo!arch.x64.def_s.Archx64Op. Type)
(declare-const TYPE%verismo!arch.x64.def_s.Archx64. Type)
(declare-const TYPE%verismo!arch.x64.def_s.AECode. Type)
(declare-const TYPE%verismo!arch.x64.def_s.NAECode. Type)
(declare-const TYPE%verismo!arch.x64.def_s.ExceptionCode. Type)
(declare-const TYPE%verismo!boot.idt.def.Idtr. Type)
(declare-const TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec. Type)
(declare-const TYPE%verismo!ptr.snp.snp_u.RmpAttr. Type)
(declare-const TYPE%verismo!ptr.snp.snp_u.PTAttr. Type)
(declare-const TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr. Type)
(declare-const TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. Type)
(declare-const TYPE%verismo!registers.trackedcore.snpcore.SnpCore. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.DescriptorSpec. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.Descriptor. Type)
(declare-const TYPE%verismo!snp.cpu.gdt.Gdtr. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.SevFeatures. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. Type)
(declare-const TYPE%verismo!snp.cpu.vmsa.Vmsa. Type)
(declare-fun TYPE%verismo!tspec.fmap.FMap. (Dcr Type Dcr Type) Type)
(declare-const TYPE%verismo!arch.entities.VMPL. Type)
(declare-const TYPE%verismo!arch.crypto.CryptoMask. Type)
(declare-fun TYPE%verismo!arch.crypto.SymKey. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.crypto.Encrypted. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%verismo!arch.memop.MemOp. (Dcr Type) Type)
(declare-fun TYPE%verismo!arch.errors.MemError. (Dcr Type) Type)
(declare-const TYPE%verismo!arch.errors.RmpFault. Type)
(declare-const TYPE%verismo!arch.reg.RegName. Type)
(declare-const TYPE%verismo!arch.reg.RflagBit. Type)
(declare-const TYPE%verismo!pgtable_e.def.SpecPTE. Type)
(declare-const TYPE%verismo!pgtable_e.def.PTE. Type)
(declare-fun TYPE%verismo!ptr.def_s.SnpPPtr. (Dcr Type) Type)
(declare-fun TYPE%verismo!ptr.def_s.SnpPointsToData. (Dcr Type) Type)
(declare-const TYPE%verismo!ptr.def_s.SnpPointsToRaw. Type)
(declare-const TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. Type)
(declare-const TYPE%verismo!registers.core_perm_s.CoreMode. Type)
(declare-const TYPE%verismo!registers.core_perm_s.CoreIdPerm. Type)
(declare-fun TYPE%verismo!registers.msr_perm_s.RegisterPermValue. (Dcr Type) Type)
(declare-const TYPE%verismo!registers.msr_perm_s.RegisterPerm. Type)
(declare-fun TYPE%verismo!tspec_e.array.Array. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%verismo!tspec.ResultWithErr. (Dcr Type Dcr Type) Type)
(declare-const TYPE%tuple%0. Type)
(declare-fun TYPE%tuple%2. (Dcr Type Dcr Type) Type)
(declare-fun TYPE%tuple%3. (Dcr Type Dcr Type Dcr Type) Type)
(declare-fun Poly%fun%1. (%%Function%%) Poly)
(declare-fun %Poly%fun%1. (Poly) %%Function%%)
(declare-fun Poly%fun%2. (%%Function%%) Poly)
(declare-fun %Poly%fun%2. (Poly) %%Function%%)
(declare-fun Poly%verismo!ptr.def_s.SnpPointsToRaw. (verismo!ptr.def_s.SnpPointsToRaw.) Poly)
(declare-fun %Poly%verismo!ptr.def_s.SnpPointsToRaw. (Poly) verismo!ptr.def_s.SnpPointsToRaw.)
(declare-fun Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.core_perm_s.CoreIdPerm.) Poly)
(declare-fun %Poly%verismo!registers.core_perm_s.CoreIdPerm. (Poly) verismo!registers.core_perm_s.CoreIdPerm.)
(declare-fun Poly%verismo!registers.msr_perm_s.RegisterPerm. (verismo!registers.msr_perm_s.RegisterPerm.) Poly)
(declare-fun %Poly%verismo!registers.msr_perm_s.RegisterPerm. (Poly) verismo!registers.msr_perm_s.RegisterPerm.)
(declare-fun Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.SevFeaturesSpec.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.) Poly)
(declare-fun %Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (Poly) verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)
(declare-fun Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. (verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.) Poly)
(declare-fun %Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. (Poly) verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. (verismo!tspec.security.sectype.SecType<int./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<int./tuple%0.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!tspec.security.sectype.SecType<u16./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!tspec.security.sectype.SecType<u32./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (verismo!tspec.security.sectype.SecType<usize./tuple%0.>.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (Poly) verismo!tspec.security.sectype.SecType<usize./tuple%0.>.)
(declare-fun Poly%vstd!map.Map<int./int.>. (vstd!map.Map<int./int.>.) Poly)
(declare-fun %Poly%vstd!map.Map<int./int.>. (Poly) vstd!map.Map<int./int.>.)
(declare-fun Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. (vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.) Poly)
(declare-fun %Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. (Poly) vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)
(declare-fun Poly%vstd!map.Map<nat./bool.>. (vstd!map.Map<nat./bool.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./bool.>. (Poly) vstd!map.Map<nat./bool.>.)
(declare-fun Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.) Poly)
(declare-fun %Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (Poly) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (Poly) vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. (vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. (Poly) vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (Poly) vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. (vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. (Poly) vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (Poly) vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (Poly) vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.)
(declare-fun Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.) Poly)
(declare-fun %Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (Poly) vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)
(declare-fun Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq<u8.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<u8.>. (Poly) vstd!seq.Seq<u8.>.)
(declare-fun Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. (vstd!seq.Seq<tuple%2<nat./nat.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. (Poly) vstd!seq.Seq<tuple%2<nat./nat.>.>.)
(declare-fun Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. (vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. (Poly) vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. (vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. (Poly) vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. (vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. (Poly) vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (Poly) vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.)
(declare-fun Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.) Poly)
(declare-fun %Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun Poly%vstd!set.Set<int.>. (vstd!set.Set<int.>.) Poly)
(declare-fun %Poly%vstd!set.Set<int.>. (Poly) vstd!set.Set<int.>.)
(declare-fun Poly%vstd!set.Set<nat.>. (vstd!set.Set<nat.>.) Poly)
(declare-fun %Poly%vstd!set.Set<nat.>. (Poly) vstd!set.Set<nat.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (vstd!set.Set<verismo!arch.entities.VMPL.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (Poly) vstd!set.Set<verismo!arch.entities.VMPL.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. (vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. (Poly) vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. (vstd!set.Set<verismo!arch.entities.memid.MemID.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. (Poly) vstd!set.Set<verismo!arch.entities.memid.MemID.>.)
(declare-fun Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.) Poly)
(declare-fun %Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (Poly) vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)
(declare-fun Poly%core!option.Option. (core!option.Option.) Poly)
(declare-fun %Poly%core!option.Option. (Poly) core!option.Option.)
(declare-fun Poly%verismo!tspec.security.sectype.DataLabel. (verismo!tspec.security.sectype.DataLabel.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.DataLabel. (Poly) verismo!tspec.security.sectype.DataLabel.)
(declare-fun Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType.) Poly)
(declare-fun %Poly%verismo!tspec.security.sectype.SpecSecType. (Poly) verismo!tspec.security.sectype.SpecSecType.)
(declare-fun Poly%verismo!arch.addr_s.def_s.GuestVir. (verismo!arch.addr_s.def_s.GuestVir.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.GuestVir. (Poly) verismo!arch.addr_s.def_s.GuestVir.)
(declare-fun Poly%verismo!arch.addr_s.def_s.GuestPhy. (verismo!arch.addr_s.def_s.GuestPhy.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.GuestPhy. (Poly) verismo!arch.addr_s.def_s.GuestPhy.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SysPhy. (verismo!arch.addr_s.def_s.SysPhy.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SysPhy. (Poly) verismo!arch.addr_s.def_s.SysPhy.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly) verismo!arch.addr_s.def_s.SpecMem.)
(declare-fun Poly%verismo!arch.addr_s.def_s.PageSize. (verismo!arch.addr_s.def_s.PageSize.) Poly)
(declare-fun %Poly%verismo!arch.addr_s.def_s.PageSize. (Poly) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.MemID.) Poly)
(declare-fun %Poly%verismo!arch.entities.memid.MemID. (Poly) verismo!arch.entities.memid.MemID.)
(declare-fun Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.entities.memid.CpuMemID.) Poly)
(declare-fun %Poly%verismo!arch.entities.memid.CpuMemID. (Poly) verismo!arch.entities.memid.CpuMemID.)
(declare-fun Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.entities.params.AddrMemID.) Poly)
(declare-fun %Poly%verismo!arch.entities.params.AddrMemID. (Poly) verismo!arch.entities.params.AddrMemID.)
(declare-fun Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID.) Poly)
(declare-fun %Poly%verismo!arch.entities.params.PageID. (Poly) verismo!arch.entities.params.PageID.)
(declare-fun Poly%verismo!arch.entities.params.AddrID. (verismo!arch.entities.params.AddrID.) Poly)
(declare-fun %Poly%verismo!arch.entities.params.AddrID. (Poly) verismo!arch.entities.params.AddrID.)
(declare-fun Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpEntry.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.RmpEntry. (Poly) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpAdjustParam.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly) verismo!arch.rmp.def_s.RmpAdjustParam.)
(declare-fun Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.PvalidateParam.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly) verismo!arch.rmp.def_s.PvalidateParam.)
(declare-fun Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp.) Poly)
(declare-fun %Poly%verismo!arch.rmp.def_s.RmpOp. (Poly) verismo!arch.rmp.def_s.RmpOp.)
(declare-fun Poly%verismo!arch.rmp.perm_s.Perm. (verismo!arch.rmp.perm_s.Perm.) Poly)
(declare-fun %Poly%verismo!arch.rmp.perm_s.Perm. (Poly) verismo!arch.rmp.perm_s.Perm.)
(declare-fun Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.ramdb.def.RamDB.) Poly)
(declare-fun %Poly%verismo!arch.ramdb.def.RamDB. (Poly) verismo!arch.ramdb.def.RamDB.)
(declare-fun Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.pgtable.def.MemMap.) Poly)
(declare-fun %Poly%verismo!arch.pgtable.def.MemMap. (Poly) verismo!arch.pgtable.def.MemMap.)
(declare-fun Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def.SpecPageTableEntry.) Poly)
(declare-fun %Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (Poly) verismo!arch.pgtable.def.SpecPageTableEntry.)
(declare-fun Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.tlb.def_s.TLB.) Poly)
(declare-fun %Poly%verismo!arch.tlb.def_s.TLB. (Poly) verismo!arch.tlb.def_s.TLB.)
(declare-fun Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.vram.def.VRamDB.) Poly)
(declare-fun %Poly%verismo!arch.vram.def.VRamDB. (Poly) verismo!arch.vram.def.VRamDB.)
(declare-fun Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.MemDB.) Poly)
(declare-fun %Poly%verismo!arch.mem.def_s.MemDB. (Poly) verismo!arch.mem.def_s.MemDB.)
(declare-fun Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op.) Poly)
(declare-fun %Poly%verismo!arch.x64.def_s.Archx64Op. (Poly) verismo!arch.x64.def_s.Archx64Op.)
(declare-fun Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.Archx64.) Poly)
(declare-fun %Poly%verismo!arch.x64.def_s.Archx64. (Poly) verismo!arch.x64.def_s.Archx64.)
(declare-fun Poly%verismo!arch.x64.def_s.AECode. (verismo!arch.x64.def_s.AECode.) Poly)
(declare-fun %Poly%verismo!arch.x64.def_s.AECode. (Poly) verismo!arch.x64.def_s.AECode.)
(declare-fun Poly%verismo!arch.x64.def_s.NAECode. (verismo!arch.x64.def_s.NAECode.) Poly)
(declare-fun %Poly%verismo!arch.x64.def_s.NAECode. (Poly) verismo!arch.x64.def_s.NAECode.)
(declare-fun Poly%verismo!arch.x64.def_s.ExceptionCode. (verismo!arch.x64.def_s.ExceptionCode.) Poly)
(declare-fun %Poly%verismo!arch.x64.def_s.ExceptionCode. (Poly) verismo!arch.x64.def_s.ExceptionCode.)
(declare-fun Poly%verismo!boot.idt.def.Idtr. (verismo!boot.idt.def.Idtr.) Poly)
(declare-fun %Poly%verismo!boot.idt.def.Idtr. (Poly) verismo!boot.idt.def.Idtr.)
(declare-fun Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.RmpAttrSpec.) Poly)
(declare-fun %Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (Poly) verismo!ptr.snp.snp_u.RmpAttrSpec.)
(declare-fun Poly%verismo!ptr.snp.snp_u.RmpAttr. (verismo!ptr.snp.snp_u.RmpAttr.) Poly)
(declare-fun %Poly%verismo!ptr.snp.snp_u.RmpAttr. (Poly) verismo!ptr.snp.snp_u.RmpAttr.)
(declare-fun Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.PTAttr.) Poly)
(declare-fun %Poly%verismo!ptr.snp.snp_u.PTAttr. (Poly) verismo!ptr.snp.snp_u.PTAttr.)
(declare-fun Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SwSnpMemAttr.) Poly)
(declare-fun %Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr.) Poly)
(declare-fun %Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly) verismo!ptr.snp.snp_u.SnpMemAttr.)
(declare-fun Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.SnpCore.) Poly)
(declare-fun %Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly) verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.DescriptorAttr0_7.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.DescriptorAttr8_11.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11.)
(declare-fun Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.DescriptorSpec.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.DescriptorSpec. (Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.Descriptor.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.Descriptor. (Poly) verismo!snp.cpu.gdt.Descriptor.)
(declare-fun Poly%verismo!snp.cpu.gdt.Gdtr. (verismo!snp.cpu.gdt.Gdtr.) Poly)
(declare-fun %Poly%verismo!snp.cpu.gdt.Gdtr. (Poly) verismo!snp.cpu.gdt.Gdtr.)
(declare-fun Poly%verismo!snp.cpu.vmsa.SevFeatures. (verismo!snp.cpu.vmsa.SevFeatures.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.SevFeatures. (Poly) verismo!snp.cpu.vmsa.SevFeatures.)
(declare-fun Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.VmsaSegmentRegister.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.Vmsa.) Poly)
(declare-fun %Poly%verismo!snp.cpu.vmsa.Vmsa. (Poly) verismo!snp.cpu.vmsa.Vmsa.)
(declare-fun Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.VMPL.) Poly)
(declare-fun %Poly%verismo!arch.entities.VMPL. (Poly) verismo!arch.entities.VMPL.)
(declare-fun Poly%verismo!arch.crypto.CryptoMask. (verismo!arch.crypto.CryptoMask.) Poly)
(declare-fun %Poly%verismo!arch.crypto.CryptoMask. (Poly) verismo!arch.crypto.CryptoMask.)
(declare-fun Poly%verismo!arch.crypto.SymKey. (verismo!arch.crypto.SymKey.) Poly)
(declare-fun %Poly%verismo!arch.crypto.SymKey. (Poly) verismo!arch.crypto.SymKey.)
(declare-fun Poly%verismo!arch.crypto.Encrypted. (verismo!arch.crypto.Encrypted.) Poly)
(declare-fun %Poly%verismo!arch.crypto.Encrypted. (Poly) verismo!arch.crypto.Encrypted.)
(declare-fun Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp.) Poly)
(declare-fun %Poly%verismo!arch.memop.MemOp. (Poly) verismo!arch.memop.MemOp.)
(declare-fun Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError.) Poly)
(declare-fun %Poly%verismo!arch.errors.MemError. (Poly) verismo!arch.errors.MemError.)
(declare-fun Poly%verismo!arch.errors.RmpFault. (verismo!arch.errors.RmpFault.) Poly)
(declare-fun %Poly%verismo!arch.errors.RmpFault. (Poly) verismo!arch.errors.RmpFault.)
(declare-fun Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName.) Poly)
(declare-fun %Poly%verismo!arch.reg.RegName. (Poly) verismo!arch.reg.RegName.)
(declare-fun Poly%verismo!arch.reg.RflagBit. (verismo!arch.reg.RflagBit.) Poly)
(declare-fun %Poly%verismo!arch.reg.RflagBit. (Poly) verismo!arch.reg.RflagBit.)
(declare-fun Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.SpecPTE.) Poly)
(declare-fun %Poly%verismo!pgtable_e.def.SpecPTE. (Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.PTE.) Poly)
(declare-fun %Poly%verismo!pgtable_e.def.PTE. (Poly) verismo!pgtable_e.def.PTE.)
(declare-fun Poly%verismo!ptr.def_s.SnpPPtr. (verismo!ptr.def_s.SnpPPtr.) Poly)
(declare-fun %Poly%verismo!ptr.def_s.SnpPPtr. (Poly) verismo!ptr.def_s.SnpPPtr.)
(declare-fun Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.SnpPointsToData.) Poly)
(declare-fun %Poly%verismo!ptr.def_s.SnpPointsToData. (Poly) verismo!ptr.def_s.SnpPointsToData.)
(declare-fun Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.SnpPointsToBytes.) Poly)
(declare-fun %Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly) verismo!ptr.raw_ptr_s.SnpPointsToBytes.)
(declare-fun Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.CoreMode.) Poly)
(declare-fun %Poly%verismo!registers.core_perm_s.CoreMode. (Poly) verismo!registers.core_perm_s.CoreMode.)
(declare-fun Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.RegisterPermValue.) Poly)
(declare-fun %Poly%verismo!registers.msr_perm_s.RegisterPermValue. (Poly) verismo!registers.msr_perm_s.RegisterPermValue.)
(declare-fun Poly%verismo!tspec.ResultWithErr. (verismo!tspec.ResultWithErr.) Poly)
(declare-fun %Poly%verismo!tspec.ResultWithErr. (Poly) verismo!tspec.ResultWithErr.)
(declare-fun Poly%tuple%0. (tuple%0.) Poly)
(declare-fun %Poly%tuple%0. (Poly) tuple%0.)
(declare-fun Poly%tuple%2. (tuple%2.) Poly)
(declare-fun %Poly%tuple%2. (Poly) tuple%2.)
(declare-fun Poly%tuple%3. (tuple%3.) Poly)
(declare-fun %Poly%tuple%3. (Poly) tuple%3.)
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%1. (Poly%fun%1. x))) :pattern ((Poly%fun%1. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (= x (Poly%fun%1. (%Poly%fun%1. x)))) :pattern ((has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(declare-fun %%apply%%0 (%%Function%% Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((has_type (%%apply%%0 x T%0) T%1&)))) (has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%fun%1. (mk_fun x)) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (has_type (%%apply%%0 x T%0) T%1&)) :pattern ((%%apply%%0 x T%0) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%0 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type T%0 T%0&)) (height_lt (height (%%apply%%0 x T%0)) (height (fun_from_recursive_field (Poly%fun%1. (mk_fun x)))))) :pattern ((height (%%apply%%0 x T%0)) (has_type (Poly%fun%1. x) (TYPE%fun%1. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%fun%1. T%0&. T%0& T%1&. T%1&)) (forall ((T%0 Poly)) (! (=> (has_type T%0 T%0&) (ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0))) :pattern ((ext_eq deep T%1& (%%apply%%0 (%Poly%fun%1. x) T%0) (%%apply%%0 (%Poly%fun%1. y) T%0)))))) (ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%fun%1. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x %%Function%%)) (! (= x (%Poly%fun%2. (Poly%fun%2. x))) :pattern ((Poly%fun%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%fun%2. (%Poly%fun%2. x)))) :pattern ((has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(declare-fun %%apply%%1 (%%Function%% Poly Poly) Poly)
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x %%Function%%)) (! (=> (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((has_type (%%apply%%1 x T%0 T%1) T%2&)))) (has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%fun%2. (mk_fun x)) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (has_type (%%apply%%1 x T%0 T%1) T%2&)) :pattern ((%%apply%%1 x T%0 T%1) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (T%0 Poly) (T%1 Poly) (x %%Function%%)) (! (=> (and (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type T%0 T%0&) (has_type T%1 T%1&)) (height_lt (height (%%apply%%1 x T%0 T%1)) (height (fun_from_recursive_field (Poly%fun%2. (mk_fun x)))))) :pattern ((height (%%apply%%1 x T%0 T%1)) (has_type (Poly%fun%2. x) (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (forall ((T%0 Poly) (T%1 Poly)) (! (=> (and (has_type T%0 T%0&) (has_type T%1 T%1&)) (ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1))) :pattern ((ext_eq deep T%2& (%%apply%%1 (%Poly%fun%2. x) T%0 T%1) (%%apply%%1 (%Poly%fun%2. y) T%0 T%1)))))) (ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%fun%2. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsToRaw.)) (! (= x (%Poly%verismo!ptr.def_s.SnpPointsToRaw. (Poly%verismo!ptr.def_s.SnpPointsToRaw. x))) :pattern ((Poly%verismo!ptr.def_s.SnpPointsToRaw. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.def_s.SnpPointsToRaw.) (= x (Poly%verismo!ptr.def_s.SnpPointsToRaw. (%Poly%verismo!ptr.def_s.SnpPointsToRaw. x)))) :pattern ((has_type x TYPE%verismo!ptr.def_s.SnpPointsToRaw.)))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsToRaw.)) (! (has_type (Poly%verismo!ptr.def_s.SnpPointsToRaw. x) TYPE%verismo!ptr.def_s.SnpPointsToRaw.) :pattern ((has_type (Poly%verismo!ptr.def_s.SnpPointsToRaw. x) TYPE%verismo!ptr.def_s.SnpPointsToRaw.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreIdPerm.)) (! (= x (%Poly%verismo!registers.core_perm_s.CoreIdPerm. (Poly%verismo!registers.core_perm_s.CoreIdPerm. x))) :pattern ((Poly%verismo!registers.core_perm_s.CoreIdPerm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreIdPerm.) (= x (Poly%verismo!registers.core_perm_s.CoreIdPerm. (%Poly%verismo!registers.core_perm_s.CoreIdPerm. x)))) :pattern ((has_type x TYPE%verismo!registers.core_perm_s.CoreIdPerm.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreIdPerm.)) (! (has_type (Poly%verismo!registers.core_perm_s.CoreIdPerm. x) TYPE%verismo!registers.core_perm_s.CoreIdPerm.) :pattern ((has_type (Poly%verismo!registers.core_perm_s.CoreIdPerm. x) TYPE%verismo!registers.core_perm_s.CoreIdPerm.)))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPerm.)) (! (= x (%Poly%verismo!registers.msr_perm_s.RegisterPerm. (Poly%verismo!registers.msr_perm_s.RegisterPerm. x))) :pattern ((Poly%verismo!registers.msr_perm_s.RegisterPerm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (= x (Poly%verismo!registers.msr_perm_s.RegisterPerm. (%Poly%verismo!registers.msr_perm_s.RegisterPerm. x)))) :pattern ((has_type x TYPE%verismo!registers.msr_perm_s.RegisterPerm.)))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPerm.)) (! (has_type (Poly%verismo!registers.msr_perm_s.RegisterPerm. x) TYPE%verismo!registers.msr_perm_s.RegisterPerm.) :pattern ((has_type (Poly%verismo!registers.msr_perm_s.RegisterPerm. x) TYPE%verismo!registers.msr_perm_s.RegisterPerm.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.SevFeaturesSpec.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (= x (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (%Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.SevFeaturesSpec.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. x) TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. x) TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.)))))
(assert (forall ((x verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)) (! (= x (%Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x))) :pattern ((Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) (= x (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. (%Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))))))))
(assert (forall ((x verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)) (! (has_type (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x) (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) :pattern ((has_type (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. x) (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))))))))
(assert (forall ((x verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.)) (! (= x (%Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. (Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. x))) :pattern ((Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64))) (= x (Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. (%Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)))))))
(assert (forall ((x verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.)) (! (has_type (Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. x) (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64))) :pattern ((has_type (Poly%verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>. x) (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<int./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<int./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<int./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u16./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u32./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<usize./tuple%0.>.)) (! (= x (%Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. x))) :pattern ((Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.)) (= x (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. (%Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.))))))
(assert (forall ((x verismo!tspec.security.sectype.SecType<usize./tuple%0.>.)) (! (has_type (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.)) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SecType<usize./tuple%0.>. x) (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.))))))
(assert (forall ((x vstd!map.Map<int./int.>.)) (! (= x (%Poly%vstd!map.Map<int./int.>. (Poly%vstd!map.Map<int./int.>. x))) :pattern ((Poly%vstd!map.Map<int./int.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ INT $ INT)) (= x (Poly%vstd!map.Map<int./int.>. (%Poly%vstd!map.Map<int./int.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ INT $ INT))))))
(assert (forall ((x vstd!map.Map<int./int.>.)) (! (has_type (Poly%vstd!map.Map<int./int.>. x) (TYPE%vstd!map.Map. $ INT $ INT)) :pattern ((has_type (Poly%vstd!map.Map<int./int.>. x) (TYPE%vstd!map.Map. $ INT $ INT))))))
(assert (forall ((x vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)) (! (= x (%Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. x))) :pattern ((Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw.)) (= x (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. (%Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw.))))))
(assert (forall ((x vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)) (! (has_type (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. x) (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw.)) :pattern ((has_type (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. x) (TYPE%vstd!map.Map. $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw.))))))
(assert (forall ((x vstd!map.Map<nat./bool.>.)) (! (= x (%Poly%vstd!map.Map<nat./bool.>. (Poly%vstd!map.Map<nat./bool.>. x))) :pattern ((Poly%vstd!map.Map<nat./bool.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ BOOL)) (= x (Poly%vstd!map.Map<nat./bool.>. (%Poly%vstd!map.Map<nat./bool.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ BOOL))))))
(assert (forall ((x vstd!map.Map<nat./bool.>.)) (! (has_type (Poly%vstd!map.Map<nat./bool.>. x) (TYPE%vstd!map.Map. $ NAT $ BOOL)) :pattern ((has_type (Poly%vstd!map.Map<nat./bool.>. x) (TYPE%vstd!map.Map. $ NAT $ BOOL))))))
(assert (forall ((x vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (= x (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x))) :pattern ((Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.)) (= x (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))))))
(assert (forall ((x vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (has_type (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.)) :pattern ((has_type (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. x) (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))))))
(assert (forall ((x vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (= x (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (%Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x) (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x) (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry.)) (= x (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. (%Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry.))))))
(assert (forall ((x vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. x) (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. x) (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry.))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) (= x (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)))) (= x (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64))))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64))))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) (= x (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (= x (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL))) (= x (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL))) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL)))))))
(assert (forall ((x vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)) (! (= x (%Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x))) :pattern ((Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.)) (= x (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. (%Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x)))) :pattern ((has_type x (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.))))))
(assert (forall ((x vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)) (! (has_type (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.)) :pattern ((has_type (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. x) (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (= x (%Poly%vstd!seq.Seq<u8.>. (Poly%vstd!seq.Seq<u8.>. x))) :pattern ((Poly%vstd!seq.Seq<u8.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (UINT 8))) (= x (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<u8.>.)) (! (has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((has_type (Poly%vstd!seq.Seq<u8.>. x) (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((x vstd!seq.Seq<tuple%2<nat./nat.>.>.)) (! (= x (%Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x))) :pattern ((Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT))) (= x (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. (%Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT)))))))
(assert (forall ((x vstd!seq.Seq<tuple%2<nat./nat.>.>.)) (! (has_type (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT))) :pattern ((has_type (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT)))))))
(assert (forall ((x vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)) (! (= x (%Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x))) :pattern ((Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))) (= x (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. (%Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))
(assert (forall ((x vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)) (! (has_type (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))) :pattern ((has_type (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))
(assert (forall ((x vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. (Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%verismo!arch.crypto.CryptoMask.)) (= x (Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. (%Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%verismo!arch.crypto.CryptoMask.))))))
(assert (forall ((x vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. x) (TYPE%vstd!seq.Seq. $ TYPE%verismo!arch.crypto.CryptoMask.)) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. x) (TYPE%vstd!seq.Seq. $ TYPE%verismo!arch.crypto.CryptoMask.))))))
(assert (forall ((x vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!arch.crypto.Encrypted. $ (TYPE%verismo!arch.crypto.SymKey. $ (TYPE%tuple%2. $ NAT $ INT)) $ (UINT 8)))) (= x (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. (%Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!arch.crypto.Encrypted. $ (TYPE%verismo!arch.crypto.SymKey. $ (TYPE%tuple%2. $ NAT $ INT)) $ (UINT 8))))))))
(assert (forall ((x vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!arch.crypto.Encrypted. $ (TYPE%verismo!arch.crypto.SymKey. $ (TYPE%tuple%2. $ NAT $ INT)) $ (UINT 8)))) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!arch.crypto.Encrypted. $ (TYPE%verismo!arch.crypto.SymKey. $ (TYPE%tuple%2. $ NAT $ INT)) $ (UINT 8))))))))
(assert (forall ((x vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.)) (= x (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (%Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.))))))
(assert (forall ((x vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. x) (TYPE%vstd!seq.Seq. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.)) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. x) (TYPE%vstd!seq.Seq. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.))))))
(assert (forall ((x vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)) (! (= x (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x))) :pattern ((Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (= x (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x)))) :pattern ((has_type x (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((x vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)) (! (has_type (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((has_type (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. x) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((x vstd!set.Set<int.>.)) (! (= x (%Poly%vstd!set.Set<int.>. (Poly%vstd!set.Set<int.>. x))) :pattern ((Poly%vstd!set.Set<int.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ INT)) (= x (Poly%vstd!set.Set<int.>. (%Poly%vstd!set.Set<int.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ INT))))))
(assert (forall ((x vstd!set.Set<int.>.)) (! (has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT)) :pattern ((has_type (Poly%vstd!set.Set<int.>. x) (TYPE%vstd!set.Set. $ INT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (= x (%Poly%vstd!set.Set<nat.>. (Poly%vstd!set.Set<nat.>. x))) :pattern ((Poly%vstd!set.Set<nat.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ NAT)) (= x (Poly%vstd!set.Set<nat.>. (%Poly%vstd!set.Set<nat.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<nat.>.)) (! (has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT)) :pattern ((has_type (Poly%vstd!set.Set<nat.>. x) (TYPE%vstd!set.Set. $ NAT))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.VMPL.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.)) (= x (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. (%Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.VMPL.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.entities.VMPL.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.VMPL.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. (Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.CpuMemID.)) (= x (Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. (%Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.CpuMemID.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.CpuMemID.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.entities.memid.CpuMemID.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.CpuMemID.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.memid.MemID.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. (Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.MemID.)) (= x (Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. (%Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.MemID.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.entities.memid.MemID.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.entities.memid.MemID.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.entities.memid.MemID.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (= x (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x))) :pattern ((Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (= x (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x)))) :pattern ((has_type x (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))
(assert (forall ((x vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (has_type (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) :pattern ((has_type (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. x) (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))
(assert (forall ((x core!option.Option.)) (! (= x (%Poly%core!option.Option. (Poly%core!option.Option. x))) :pattern ((Poly%core!option.Option. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (= x (Poly%core!option.Option. (%Poly%core!option.Option. x)))) :pattern ((has_type x (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&)) :pattern ((has_type (Poly%core!option.Option. core!option.Option./None) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_0! Poly)) (! (=> (has_type _0! V&) (has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))) :pattern ((has_type (Poly%core!option.Option. (core!option.Option./Some _0!)) (TYPE%core!option.Option. V&. V&))))))
(assert (forall ((x core!option.Option.)) (! (= (core!option.Option./Some/0 x) (core!option.Option./Some/?0 x)) :pattern ((core!option.Option./Some/0 x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%core!option.Option. V&. V&)) (has_type (core!option.Option./Some/0 (%Poly%core!option.Option. x)) V&)) :pattern ((core!option.Option./Some/0 (%Poly%core!option.Option. x)) (has_type x (TYPE%core!option.Option. V&. V&))))))
(define-fun is-core!option.Option./Some_ ((c core!option.Option.)) Bool ((_ is core!option.Option./Some) c))
(assert (forall ((x core!option.Option.)) (! (=> (is-core!option.Option./Some_ x) (height_lt (height (core!option.Option./Some/0 x)) (height (Poly%core!option.Option. x)))) :pattern ((height (core!option.Option./Some/0 x))))))
(define-fun is-core!option.Option./None_ ((c core!option.Option.)) Bool ((_ is core!option.Option./None) c))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./None_ (%Poly%core!option.Option. x)) (is-core!option.Option./None_ (%Poly%core!option.Option. y))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((V&. Dcr) (V& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%core!option.Option. V&. V&)) (has_type y (TYPE%core!option.Option. V&. V&)) (is-core!option.Option./Some_ (%Poly%core!option.Option. x)) (is-core!option.Option./Some_ (%Poly%core!option.Option. y)) (ext_eq deep V& (core!option.Option./Some/0 (%Poly%core!option.Option. x)) (core!option.Option./Some/0 (%Poly%core!option.Option. y)))) (ext_eq deep (TYPE%core!option.Option. V&. V&) x y)) :pattern ((ext_eq deep (TYPE%core!option.Option. V&. V&) x y)))))
(assert (forall ((x verismo!tspec.security.sectype.DataLabel.)) (! (= x (%Poly%verismo!tspec.security.sectype.DataLabel. (Poly%verismo!tspec.security.sectype.DataLabel. x))) :pattern ((Poly%verismo!tspec.security.sectype.DataLabel. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!tspec.security.sectype.DataLabel.) (= x (Poly%verismo!tspec.security.sectype.DataLabel. (%Poly%verismo!tspec.security.sectype.DataLabel. x)))) :pattern ((has_type x TYPE%verismo!tspec.security.sectype.DataLabel.)))))
(assert (forall ((x verismo!tspec.security.sectype.DataLabel.)) (! (has_type (Poly%verismo!tspec.security.sectype.DataLabel. x) TYPE%verismo!tspec.security.sectype.DataLabel.) :pattern ((has_type (Poly%verismo!tspec.security.sectype.DataLabel. x) TYPE%verismo!tspec.security.sectype.DataLabel.)))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= x (%Poly%verismo!tspec.security.sectype.SpecSecType. (Poly%verismo!tspec.security.sectype.SpecSecType. x))) :pattern ((Poly%verismo!tspec.security.sectype.SpecSecType. x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (= x (Poly%verismo!tspec.security.sectype.SpecSecType. (%Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (_val! Poly) (__unused! core!option.Option.) (_valsets! Poly) (_labels! vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (=> (and (has_type _val! T&) (has_type (Poly%core!option.Option. __unused!) (TYPE%core!option.Option. M&. M&)) (has_type _valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType./SpecSecType _val! __unused! _valsets! _labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SpecSecType./SpecSecType _val! __unused! _valsets! _labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?val x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) T&)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?_unused x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. x))) (TYPE%core!option.Option. M&. M&))) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?valsets x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. x)) (has_type x (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels x) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/?labels x)) :pattern ((verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels x)))))
(define-fun is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ ((c verismo!tspec.security.sectype.SpecSecType.)) Bool ((_ is verismo!tspec.security.sectype.SpecSecType./SpecSecType) c))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x)) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val x))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x))) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused x)))))))
(assert (forall ((x verismo!tspec.security.sectype.SpecSecType.)) (! (=> (is-verismo!tspec.security.sectype.SpecSecType./SpecSecType_ x) (height_lt (height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x)) (height (Poly%verismo!tspec.security.sectype.SpecSecType. x)))) :pattern ((height (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets x))))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestVir.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.GuestVir. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.GuestVir. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.GuestVir.) (= x (Poly%verismo!arch.addr_s.def_s.GuestVir. (%Poly%verismo!arch.addr_s.def_s.GuestVir. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.GuestVir.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestVir.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.GuestVir. x) TYPE%verismo!arch.addr_s.def_s.GuestVir.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.GuestVir. x) TYPE%verismo!arch.addr_s.def_s.GuestVir.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestPhy.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.GuestPhy. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.GuestPhy. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (= x (Poly%verismo!arch.addr_s.def_s.GuestPhy. (%Poly%verismo!arch.addr_s.def_s.GuestPhy. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.GuestPhy.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.GuestPhy. x) TYPE%verismo!arch.addr_s.def_s.GuestPhy.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.GuestPhy. x) TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SysPhy.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SysPhy. (Poly%verismo!arch.addr_s.def_s.SysPhy. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SysPhy. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.SysPhy.) (= x (Poly%verismo!arch.addr_s.def_s.SysPhy. (%Poly%verismo!arch.addr_s.def_s.SysPhy. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.SysPhy.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SysPhy.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.SysPhy. x) TYPE%verismo!arch.addr_s.def_s.SysPhy.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SysPhy. x) TYPE%verismo!arch.addr_s.def_s.SysPhy.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly%verismo!arch.addr_s.def_s.SpecPage. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecPage. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecPage. (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (and (<= 0 _value!) (has_type _dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage./SpecPage _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.def_s.SpecPage./SpecPage _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value x) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?value x)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/?dummy x)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) T&)) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecPage./SpecPage_ ((c verismo!arch.addr_s.def_s.SpecPage.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecPage./SpecPage) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecPage.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecPage./SpecPage_ x) (height_lt (height (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x)) (height (Poly%verismo!arch.addr_s.def_s.SpecPage. x)))) :pattern ((height (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy x))))))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type y (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. y))) (ext_eq deep T& (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. x)) (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. y)))) (ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) x y)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly%verismo!arch.addr_s.def_s.SpecAddr. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecAddr. (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (and (<= 0 _value!) (has_type _dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr _value! _dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value x) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?value x)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/?dummy x)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) T&)) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecAddr./SpecAddr_ ((c verismo!arch.addr_s.def_s.SpecAddr.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecAddr./SpecAddr) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecAddr.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecAddr./SpecAddr_ x) (height_lt (height (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x)) (height (Poly%verismo!arch.addr_s.def_s.SpecAddr. x)))) :pattern ((height (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy x))))))
(assert (forall ((T&. Dcr) (T& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type y (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. y))) (ext_eq deep T& (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. x)) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. y)))) (ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) x y)) :pattern ((ext_eq deep (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) x y)))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.SpecMem. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (= x (Poly%verismo!arch.addr_s.def_s.SpecMem. (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_first! verismo!arch.addr_s.def_s.SpecAddr.) (_size! Int)) (! (=> (and (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. _first!) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (<= 0 _size!)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem./SpecMem _first! _size!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.def_s.SpecMem./SpecMem _first! _size!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?first x)) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. x))) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (= (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size x) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/?size x)) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/size x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. x)) (has_type x (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))))))
(define-fun is-verismo!arch.addr_s.def_s.SpecMem./SpecMem_ ((c verismo!arch.addr_s.def_s.SpecMem.)) Bool ((_ is verismo!arch.addr_s.def_s.SpecMem./SpecMem) c))
(assert (forall ((x verismo!arch.addr_s.def_s.SpecMem.)) (! (=> (is-verismo!arch.addr_s.def_s.SpecMem./SpecMem_ x) (height_lt (height (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x))) (height (Poly%verismo!arch.addr_s.def_s.SpecMem. x)))) :pattern ((height (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first x)))))))
(assert (forall ((x verismo!arch.addr_s.def_s.PageSize.)) (! (= x (%Poly%verismo!arch.addr_s.def_s.PageSize. (Poly%verismo!arch.addr_s.def_s.PageSize. x))) :pattern ((Poly%verismo!arch.addr_s.def_s.PageSize. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.addr_s.def_s.PageSize.) (= x (Poly%verismo!arch.addr_s.def_s.PageSize. (%Poly%verismo!arch.addr_s.def_s.PageSize. x)))) :pattern ((has_type x TYPE%verismo!arch.addr_s.def_s.PageSize.)))))
(assert (forall ((x verismo!arch.addr_s.def_s.PageSize.)) (! (has_type (Poly%verismo!arch.addr_s.def_s.PageSize. x) TYPE%verismo!arch.addr_s.def_s.PageSize.) :pattern ((has_type (Poly%verismo!arch.addr_s.def_s.PageSize. x) TYPE%verismo!arch.addr_s.def_s.PageSize.)))))
(assert (forall ((x verismo!arch.entities.memid.MemID.)) (! (= x (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. x))) :pattern ((Poly%verismo!arch.entities.memid.MemID. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memid.MemID.) (= x (Poly%verismo!arch.entities.memid.MemID. (%Poly%verismo!arch.entities.memid.MemID. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.memid.MemID.)))))
(assert (forall ((_0! Int) (_1! verismo!arch.entities.VMPL.)) (! (=> (<= 0 _0!) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.MemID./Guest _0! _1!)) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.MemID./Guest _0! _1!)) TYPE%verismo!arch.entities.memid.MemID.)))))
(assert (forall ((x verismo!arch.entities.memid.MemID.)) (! (= (verismo!arch.entities.memid.MemID./Guest/0 x) (verismo!arch.entities.memid.MemID./Guest/?0 x)) :pattern ((verismo!arch.entities.memid.MemID./Guest/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memid.MemID.) (<= 0 (verismo!arch.entities.memid.MemID./Guest/0 (%Poly%verismo!arch.entities.memid.MemID. x)))) :pattern ((verismo!arch.entities.memid.MemID./Guest/0 (%Poly%verismo!arch.entities.memid.MemID. x)) (has_type x TYPE%verismo!arch.entities.memid.MemID.)))))
(assert (forall ((x verismo!arch.entities.memid.MemID.)) (! (= (verismo!arch.entities.memid.MemID./Guest/1 x) (verismo!arch.entities.memid.MemID./Guest/?1 x)) :pattern ((verismo!arch.entities.memid.MemID./Guest/1 x)))))
(assert (has_type (Poly%verismo!arch.entities.memid.MemID. verismo!arch.entities.memid.MemID./Hv) TYPE%verismo!arch.entities.memid.MemID.))
(assert (forall ((x verismo!arch.entities.memid.CpuMemID.)) (! (= x (%Poly%verismo!arch.entities.memid.CpuMemID. (Poly%verismo!arch.entities.memid.CpuMemID. x))) :pattern ((Poly%verismo!arch.entities.memid.CpuMemID. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memid.CpuMemID.) (= x (Poly%verismo!arch.entities.memid.CpuMemID. (%Poly%verismo!arch.entities.memid.CpuMemID. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.memid.CpuMemID.)))))
(assert (forall ((_0! Int) (_1! verismo!arch.entities.memid.MemID.)) (! (=> (and (<= 0 _0!) (has_type (Poly%verismo!arch.entities.memid.MemID. _1!) TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.entities.memid.CpuMemID./CpuMemID _0! _1!)) TYPE%verismo!arch.entities.memid.CpuMemID.)) :pattern ((has_type (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.entities.memid.CpuMemID./CpuMemID _0! _1!)) TYPE%verismo!arch.entities.memid.CpuMemID.)))))
(assert (forall ((x verismo!arch.entities.memid.CpuMemID.)) (! (= (verismo!arch.entities.memid.CpuMemID./CpuMemID/0 x) (verismo!arch.entities.memid.CpuMemID./CpuMemID/?0 x)) :pattern ((verismo!arch.entities.memid.CpuMemID./CpuMemID/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memid.CpuMemID.) (<= 0 (verismo!arch.entities.memid.CpuMemID./CpuMemID/0 (%Poly%verismo!arch.entities.memid.CpuMemID. x)))) :pattern ((verismo!arch.entities.memid.CpuMemID./CpuMemID/0 (%Poly%verismo!arch.entities.memid.CpuMemID. x)) (has_type x TYPE%verismo!arch.entities.memid.CpuMemID.)))))
(assert (forall ((x verismo!arch.entities.memid.CpuMemID.)) (! (= (verismo!arch.entities.memid.CpuMemID./CpuMemID/1 x) (verismo!arch.entities.memid.CpuMemID./CpuMemID/?1 x)) :pattern ((verismo!arch.entities.memid.CpuMemID./CpuMemID/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.memid.CpuMemID.) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.CpuMemID./CpuMemID/1 (%Poly%verismo!arch.entities.memid.CpuMemID. x))) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.entities.memid.CpuMemID./CpuMemID/1 (%Poly%verismo!arch.entities.memid.CpuMemID. x)) (has_type x TYPE%verismo!arch.entities.memid.CpuMemID.)))))
(assert (forall ((x verismo!arch.entities.params.AddrMemID.)) (! (= x (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. x))) :pattern ((Poly%verismo!arch.entities.params.AddrMemID. x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&)) (= x (Poly%verismo!arch.entities.params.AddrMemID. (%Poly%verismo!arch.entities.params.AddrMemID. x)))) :pattern ((has_type x (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_range! verismo!arch.addr_s.def_s.SpecMem.) (_memid! verismo!arch.entities.memid.MemID.)) (! (=> (and (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. _range!) (TYPE%verismo!arch.addr_s.def_s.SpecMem. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. _memid!) TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.entities.params.AddrMemID./AddrMemID _range! _memid!)) (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.entities.params.AddrMemID./AddrMemID _range! _memid!)) (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.entities.params.AddrMemID.)) (! (= (verismo!arch.entities.params.AddrMemID./AddrMemID/range x) (verismo!arch.entities.params.AddrMemID./AddrMemID/?range x)) :pattern ((verismo!arch.entities.params.AddrMemID./AddrMemID/range x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. x))) (TYPE%verismo!arch.addr_s.def_s.SpecMem. AddrT&. AddrT&))) :pattern ((verismo!arch.entities.params.AddrMemID./AddrMemID/range (%Poly%verismo!arch.entities.params.AddrMemID. x)) (has_type x (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.entities.params.AddrMemID.)) (! (= (verismo!arch.entities.params.AddrMemID./AddrMemID/memid x) (verismo!arch.entities.params.AddrMemID./AddrMemID/?memid x)) :pattern ((verismo!arch.entities.params.AddrMemID./AddrMemID/memid x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. x))) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. x)) (has_type x (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))))))
(define-fun is-verismo!arch.entities.params.AddrMemID./AddrMemID_ ((c verismo!arch.entities.params.AddrMemID.)) Bool ((_ is verismo!arch.entities.params.AddrMemID./AddrMemID) c))
(assert (forall ((x verismo!arch.entities.params.AddrMemID.)) (! (=> (is-verismo!arch.entities.params.AddrMemID./AddrMemID_ x) (height_lt (height (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.entities.params.AddrMemID./AddrMemID/range x))) (height (Poly%verismo!arch.entities.params.AddrMemID. x)))) :pattern ((height (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.entities.params.AddrMemID./AddrMemID/range x)))))))
(assert (forall ((x verismo!arch.entities.params.PageID.)) (! (= x (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. x))) :pattern ((Poly%verismo!arch.entities.params.PageID. x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (= x (Poly%verismo!arch.entities.params.PageID. (%Poly%verismo!arch.entities.params.PageID. x)))) :pattern ((has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_page! verismo!arch.addr_s.def_s.SpecPage.) (_memid! verismo!arch.entities.memid.MemID.)) (! (=> (and (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. _page!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. _memid!) TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID./PageID _page! _memid!)) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.entities.params.PageID./PageID _page! _memid!)) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.entities.params.PageID.)) (! (= (verismo!arch.entities.params.PageID./PageID/page x) (verismo!arch.entities.params.PageID./PageID/?page x)) :pattern ((verismo!arch.entities.params.PageID./PageID/page x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.entities.params.PageID./PageID/page (%Poly%verismo!arch.entities.params.PageID. x))) (TYPE%verismo!arch.addr_s.def_s.SpecPage. AddrT&. AddrT&))) :pattern ((verismo!arch.entities.params.PageID./PageID/page (%Poly%verismo!arch.entities.params.PageID. x)) (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.entities.params.PageID.)) (! (= (verismo!arch.entities.params.PageID./PageID/memid x) (verismo!arch.entities.params.PageID./PageID/?memid x)) :pattern ((verismo!arch.entities.params.PageID./PageID/memid x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. x))) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. x)) (has_type x (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))))))
(define-fun is-verismo!arch.entities.params.PageID./PageID_ ((c verismo!arch.entities.params.PageID.)) Bool ((_ is verismo!arch.entities.params.PageID./PageID) c))
(assert (forall ((x verismo!arch.entities.params.PageID.)) (! (=> (is-verismo!arch.entities.params.PageID./PageID_ x) (height_lt (height (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.entities.params.PageID./PageID/page x))) (height (Poly%verismo!arch.entities.params.PageID. x)))) :pattern ((height (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.entities.params.PageID./PageID/page x)))))))
(assert (forall ((x verismo!arch.entities.params.AddrID.)) (! (= x (%Poly%verismo!arch.entities.params.AddrID. (Poly%verismo!arch.entities.params.AddrID. x))) :pattern ((Poly%verismo!arch.entities.params.AddrID. x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&)) (= x (Poly%verismo!arch.entities.params.AddrID. (%Poly%verismo!arch.entities.params.AddrID. x)))) :pattern ((has_type x (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_addr! verismo!arch.addr_s.def_s.SpecAddr.) (_memid! verismo!arch.entities.memid.MemID.)) (! (=> (and (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. _addr!) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. _memid!) TYPE%verismo!arch.entities.memid.MemID.)) (has_type (Poly%verismo!arch.entities.params.AddrID. (verismo!arch.entities.params.AddrID./AddrID _addr! _memid!)) (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.entities.params.AddrID. (verismo!arch.entities.params.AddrID./AddrID _addr! _memid!)) (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.entities.params.AddrID.)) (! (= (verismo!arch.entities.params.AddrID./AddrID/addr x) (verismo!arch.entities.params.AddrID./AddrID/?addr x)) :pattern ((verismo!arch.entities.params.AddrID./AddrID/addr x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.entities.params.AddrID./AddrID/addr (%Poly%verismo!arch.entities.params.AddrID. x))) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. AddrT&. AddrT&))) :pattern ((verismo!arch.entities.params.AddrID./AddrID/addr (%Poly%verismo!arch.entities.params.AddrID. x)) (has_type x (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.entities.params.AddrID.)) (! (= (verismo!arch.entities.params.AddrID./AddrID/memid x) (verismo!arch.entities.params.AddrID./AddrID/?memid x)) :pattern ((verismo!arch.entities.params.AddrID./AddrID/memid x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrID./AddrID/memid (%Poly%verismo!arch.entities.params.AddrID. x))) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.entities.params.AddrID./AddrID/memid (%Poly%verismo!arch.entities.params.AddrID. x)) (has_type x (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&))))))
(define-fun is-verismo!arch.entities.params.AddrID./AddrID_ ((c verismo!arch.entities.params.AddrID.)) Bool ((_ is verismo!arch.entities.params.AddrID./AddrID) c))
(assert (forall ((x verismo!arch.entities.params.AddrID.)) (! (=> (is-verismo!arch.entities.params.AddrID./AddrID_ x) (height_lt (height (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.entities.params.AddrID./AddrID/addr x))) (height (Poly%verismo!arch.entities.params.AddrID. x)))) :pattern ((height (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.entities.params.AddrID./AddrID/addr x)))))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= x (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x))) :pattern ((Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (= x (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)))))
(assert (forall ((_immutable! Bool) (_assigned! Bool) (_validated! Bool) (_vmsa! Bool) (_asid! Int) (_gpn! verismo!arch.addr_s.def_s.SpecPage.) (_size! verismo!arch.addr_s.def_s.PageSize.) (_perms! vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (=> (and (<= 0 _asid!) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. _gpn!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP _immutable! _assigned! _validated! _vmsa! _asid! _gpn! _size! _perms!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP _immutable! _assigned! _validated! _vmsa! _asid! _gpn! _size! _perms!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?immutable x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?assigned x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?validated x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?vmsa x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?asid x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (<= 0 (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)))) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)) (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?gpn x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x))) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. x)) (has_type x TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?size x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size x)))))
(assert (forall ((x verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms x) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/?perms x)) :pattern ((verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms x)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpEntry.)) (! (= x (%Poly%verismo!arch.rmp.def_s.RmpEntry. (Poly%verismo!arch.rmp.def_s.RmpEntry. x))) :pattern ((Poly%verismo!arch.rmp.def_s.RmpEntry. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.) (= x (Poly%verismo!arch.rmp.def_s.RmpEntry. (%Poly%verismo!arch.rmp.def_s.RmpEntry. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.)))))
(assert (forall ((_val! verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (=> (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. _val!) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpEntry./RmpEntry _val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpEntry./RmpEntry _val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpEntry.)) (! (= (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val x) (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/?val x)) :pattern ((verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (%Poly%verismo!arch.rmp.def_s.RmpEntry. x))) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (%Poly%verismo!arch.rmp.def_s.RmpEntry. x)) (has_type x TYPE%verismo!arch.rmp.def_s.RmpEntry.)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= x (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x))) :pattern ((Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.) (= x (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)))))
(assert (forall ((_gpn! verismo!arch.addr_s.def_s.SpecPage.) (_psize! verismo!arch.addr_s.def_s.PageSize.) (_vmsa! Bool) (_vmpl! verismo!arch.entities.VMPL.) (_perms! vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)) (! (=> (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. _gpn!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam _gpn! _psize! _vmsa! _vmpl! _perms!)) TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam _gpn! _psize! _vmsa! _vmpl! _perms!)) TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?gpn x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x))) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/gpn (%Poly%verismo!arch.rmp.def_s.RmpAdjustParam. x)) (has_type x TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/psize x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?psize x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/psize x)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmsa x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?vmsa x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmsa x)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmpl x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?vmpl x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/vmpl x)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (= (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/perms x) (verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/?perms x)) :pattern ((verismo!arch.rmp.def_s.RmpAdjustParam./RmpAdjustParam/perms x)))))
(assert (forall ((x verismo!arch.rmp.def_s.PvalidateParam.)) (! (= x (%Poly%verismo!arch.rmp.def_s.PvalidateParam. (Poly%verismo!arch.rmp.def_s.PvalidateParam. x))) :pattern ((Poly%verismo!arch.rmp.def_s.PvalidateParam. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.PvalidateParam.) (= x (Poly%verismo!arch.rmp.def_s.PvalidateParam. (%Poly%verismo!arch.rmp.def_s.PvalidateParam. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.def_s.PvalidateParam.)))))
(assert (forall ((_gpn! verismo!arch.addr_s.def_s.SpecPage.) (_psize! verismo!arch.addr_s.def_s.PageSize.) (_val! Bool)) (! (=> (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. _gpn!) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam _gpn! _psize! _val!)) TYPE%verismo!arch.rmp.def_s.PvalidateParam.)) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam _gpn! _psize! _val!)) TYPE%verismo!arch.rmp.def_s.PvalidateParam.)))))
(assert (forall ((x verismo!arch.rmp.def_s.PvalidateParam.)) (! (= (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn x) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?gpn x)) :pattern ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.def_s.PvalidateParam.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn (%Poly%verismo!arch.rmp.def_s.PvalidateParam. x))) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/gpn (%Poly%verismo!arch.rmp.def_s.PvalidateParam. x)) (has_type x TYPE%verismo!arch.rmp.def_s.PvalidateParam.)))))
(assert (forall ((x verismo!arch.rmp.def_s.PvalidateParam.)) (! (= (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/psize x) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?psize x)) :pattern ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/psize x)))))
(assert (forall ((x verismo!arch.rmp.def_s.PvalidateParam.)) (! (= (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/val x) (verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/?val x)) :pattern ((verismo!arch.rmp.def_s.PvalidateParam./PvalidateParam/val x)))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= x (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. x))) :pattern ((Poly%verismo!arch.rmp.def_s.RmpOp. x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (= x (Poly%verismo!arch.rmp.def_s.RmpOp. (%Poly%verismo!arch.rmp.def_s.RmpOp. x)))) :pattern ((has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.PageID.) (_1! verismo!arch.rmp.def_s.RmpAdjustParam.)) (! (=> (and (has_type (Poly%verismo!arch.entities.params.PageID. _0!) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. _1!) TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 x) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/?0 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 x) (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/?1 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpAdjustParam. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) TYPE%verismo!arch.rmp.def_s.RmpAdjustParam.)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpAdjust/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.PageID.) (_1! verismo!arch.rmp.def_s.PvalidateParam.)) (! (=> (and (has_type (Poly%verismo!arch.entities.params.PageID. _0!) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.PvalidateParam. _1!) TYPE%verismo!arch.rmp.def_s.PvalidateParam.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./Pvalidate _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./Pvalidate _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 x) (verismo!arch.rmp.def_s.RmpOp./Pvalidate/?0 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 x) (verismo!arch.rmp.def_s.RmpOp./Pvalidate/?1 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.PvalidateParam. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) TYPE%verismo!arch.rmp.def_s.PvalidateParam.)) :pattern ((verismo!arch.rmp.def_s.RmpOp./Pvalidate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.PageID.) (_1! verismo!arch.rmp.def_s.RmpEntry.)) (! (=> (and (has_type (Poly%verismo!arch.entities.params.PageID. _0!) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. _1!) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate _0! _1!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 x) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/?0 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (= (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 x) (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/?1 x)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x))) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!arch.rmp.def_s.RmpOp./RmpUpdate/1 (%Poly%verismo!arch.rmp.def_s.RmpOp. x)) (has_type x (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))))))
(define-fun is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ ((c verismo!arch.rmp.def_s.RmpOp.)) Bool ((_ is verismo!arch.rmp.def_s.RmpOp./RmpAdjust) c))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (=> (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ x) (height_lt (height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 x))) (height (Poly%verismo!arch.rmp.def_s.RmpOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 x)))))))
(define-fun is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ ((c verismo!arch.rmp.def_s.RmpOp.)) Bool ((_ is verismo!arch.rmp.def_s.RmpOp./Pvalidate) c))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (=> (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ x) (height_lt (height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 x))) (height (Poly%verismo!arch.rmp.def_s.RmpOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 x)))))))
(define-fun is-verismo!arch.rmp.def_s.RmpOp./RmpUpdate_ ((c verismo!arch.rmp.def_s.RmpOp.)) Bool ((_ is verismo!arch.rmp.def_s.RmpOp./RmpUpdate) c))
(assert (forall ((x verismo!arch.rmp.def_s.RmpOp.)) (! (=> (is-verismo!arch.rmp.def_s.RmpOp./RmpUpdate_ x) (height_lt (height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 x))) (height (Poly%verismo!arch.rmp.def_s.RmpOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 x)))))))
(assert (forall ((x verismo!arch.rmp.perm_s.Perm.)) (! (= x (%Poly%verismo!arch.rmp.perm_s.Perm. (Poly%verismo!arch.rmp.perm_s.Perm. x))) :pattern ((Poly%verismo!arch.rmp.perm_s.Perm. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.rmp.perm_s.Perm.) (= x (Poly%verismo!arch.rmp.perm_s.Perm. (%Poly%verismo!arch.rmp.perm_s.Perm. x)))) :pattern ((has_type x TYPE%verismo!arch.rmp.perm_s.Perm.)))))
(assert (forall ((x verismo!arch.rmp.perm_s.Perm.)) (! (has_type (Poly%verismo!arch.rmp.perm_s.Perm. x) TYPE%verismo!arch.rmp.perm_s.Perm.) :pattern ((has_type (Poly%verismo!arch.rmp.perm_s.Perm. x) TYPE%verismo!arch.rmp.perm_s.Perm.)))))
(assert (forall ((x verismo!arch.ramdb.def.RamDB.)) (! (= x (%Poly%verismo!arch.ramdb.def.RamDB. (Poly%verismo!arch.ramdb.def.RamDB. x))) :pattern ((Poly%verismo!arch.ramdb.def.RamDB. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.ramdb.def.RamDB.) (= x (Poly%verismo!arch.ramdb.def.RamDB. (%Poly%verismo!arch.ramdb.def.RamDB. x)))) :pattern ((has_type x TYPE%verismo!arch.ramdb.def.RamDB.)))))
(assert (forall ((x verismo!arch.ramdb.def.RamDB.)) (! (= (verismo!arch.ramdb.def.RamDB./RamDB/data x) (verismo!arch.ramdb.def.RamDB./RamDB/?data x)) :pattern ((verismo!arch.ramdb.def.RamDB./RamDB/data x)))))
(assert (forall ((x verismo!arch.ramdb.def.RamDB.)) (! (= (verismo!arch.ramdb.def.RamDB./RamDB/write_count x) (verismo!arch.ramdb.def.RamDB./RamDB/?write_count x)) :pattern ((verismo!arch.ramdb.def.RamDB./RamDB/write_count x)))))
(assert (forall ((x verismo!arch.ramdb.def.RamDB.)) (! (= (verismo!arch.ramdb.def.RamDB./RamDB/crypto_mask x) (verismo!arch.ramdb.def.RamDB./RamDB/?crypto_mask x)) :pattern ((verismo!arch.ramdb.def.RamDB./RamDB/crypto_mask x)))))
(assert (forall ((x verismo!arch.ramdb.def.RamDB.)) (! (has_type (Poly%verismo!arch.ramdb.def.RamDB. x) TYPE%verismo!arch.ramdb.def.RamDB.) :pattern ((has_type (Poly%verismo!arch.ramdb.def.RamDB. x) TYPE%verismo!arch.ramdb.def.RamDB.)))))
(assert (forall ((x verismo!arch.pgtable.def.MemMap.)) (! (= x (%Poly%verismo!arch.pgtable.def.MemMap. (Poly%verismo!arch.pgtable.def.MemMap. x))) :pattern ((Poly%verismo!arch.pgtable.def.MemMap. x)))))
(assert (forall ((T&. Dcr) (T& Type) (PT&. Dcr) (PT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&)) (= x (Poly%verismo!arch.pgtable.def.MemMap. (%Poly%verismo!arch.pgtable.def.MemMap. x)))) :pattern ((has_type x (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&))))))
(assert (forall ((T&. Dcr) (T& Type) (PT&. Dcr) (PT& Type) (_db! Poly)) (! (=> (has_type _db! (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&))) (has_type (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.pgtable.def.MemMap./MemMap _db!)) (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&))) :pattern ((has_type (Poly%verismo!arch.pgtable.def.MemMap. (verismo!arch.pgtable.def.MemMap./MemMap _db!)) (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&))))))
(assert (forall ((x verismo!arch.pgtable.def.MemMap.)) (! (= (verismo!arch.pgtable.def.MemMap./MemMap/db x) (verismo!arch.pgtable.def.MemMap./MemMap/?db x)) :pattern ((verismo!arch.pgtable.def.MemMap./MemMap/db x)))))
(assert (forall ((T&. Dcr) (T& Type) (PT&. Dcr) (PT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&)) (has_type (verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. x)) (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. PT&. PT&)))) :pattern ((verismo!arch.pgtable.def.MemMap./MemMap/db (%Poly%verismo!arch.pgtable.def.MemMap. x)) (has_type x (TYPE%verismo!arch.pgtable.def.MemMap. T&. T& PT&. PT&))))))
(define-fun is-verismo!arch.pgtable.def.MemMap./MemMap_ ((c verismo!arch.pgtable.def.MemMap.)) Bool ((_ is verismo!arch.pgtable.def.MemMap./MemMap) c))
(assert (forall ((x verismo!arch.pgtable.def.MemMap.)) (! (=> (is-verismo!arch.pgtable.def.MemMap./MemMap_ x) (height_lt (height (verismo!arch.pgtable.def.MemMap./MemMap/db x)) (height (Poly%verismo!arch.pgtable.def.MemMap. x)))) :pattern ((height (verismo!arch.pgtable.def.MemMap./MemMap/db x))))))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (= x (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x))) :pattern ((Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (= x (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)))) :pattern ((has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_value! Int) (_dummy! Poly)) (! (=> (has_type _dummy! T&) (has_type (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry _value! _dummy!)) (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))) :pattern ((has_type (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry _value! _dummy!)) (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))))))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (= (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value x) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?value x)) :pattern ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/value x)))))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (= (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x) (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/?dummy x)) :pattern ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&)) (has_type (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)) T&)) :pattern ((verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy (%Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)) (has_type x (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. T&. T&))))))
(define-fun is-verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry_ ((c verismo!arch.pgtable.def.SpecPageTableEntry.)) Bool ((_ is verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry) c))
(assert (forall ((x verismo!arch.pgtable.def.SpecPageTableEntry.)) (! (=> (is-verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry_ x) (height_lt (height (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x)) (height (Poly%verismo!arch.pgtable.def.SpecPageTableEntry. x)))) :pattern ((height (verismo!arch.pgtable.def.SpecPageTableEntry./SpecPageTableEntry/dummy x))))))
(assert (forall ((x verismo!arch.tlb.def_s.TLB.)) (! (= x (%Poly%verismo!arch.tlb.def_s.TLB. (Poly%verismo!arch.tlb.def_s.TLB. x))) :pattern ((Poly%verismo!arch.tlb.def_s.TLB. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.tlb.def_s.TLB.) (= x (Poly%verismo!arch.tlb.def_s.TLB. (%Poly%verismo!arch.tlb.def_s.TLB. x)))) :pattern ((has_type x TYPE%verismo!arch.tlb.def_s.TLB.)))))
(assert (forall ((x verismo!arch.tlb.def_s.TLB.)) (! (= (verismo!arch.tlb.def_s.TLB./TLB/db x) (verismo!arch.tlb.def_s.TLB./TLB/?db x)) :pattern ((verismo!arch.tlb.def_s.TLB./TLB/db x)))))
(assert (forall ((x verismo!arch.tlb.def_s.TLB.)) (! (has_type (Poly%verismo!arch.tlb.def_s.TLB. x) TYPE%verismo!arch.tlb.def_s.TLB.) :pattern ((has_type (Poly%verismo!arch.tlb.def_s.TLB. x) TYPE%verismo!arch.tlb.def_s.TLB.)))))
(assert (forall ((x verismo!arch.vram.def.VRamDB.)) (! (= x (%Poly%verismo!arch.vram.def.VRamDB. (Poly%verismo!arch.vram.def.VRamDB. x))) :pattern ((Poly%verismo!arch.vram.def.VRamDB. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.vram.def.VRamDB.) (= x (Poly%verismo!arch.vram.def.VRamDB. (%Poly%verismo!arch.vram.def.VRamDB. x)))) :pattern ((has_type x TYPE%verismo!arch.vram.def.VRamDB.)))))
(assert (forall ((x verismo!arch.vram.def.VRamDB.)) (! (= (verismo!arch.vram.def.VRamDB./VRamDB/sram x) (verismo!arch.vram.def.VRamDB./VRamDB/?sram x)) :pattern ((verismo!arch.vram.def.VRamDB./VRamDB/sram x)))))
(assert (forall ((x verismo!arch.vram.def.VRamDB.)) (! (= (verismo!arch.vram.def.VRamDB./VRamDB/rmp x) (verismo!arch.vram.def.VRamDB./VRamDB/?rmp x)) :pattern ((verismo!arch.vram.def.VRamDB./VRamDB/rmp x)))))
(assert (forall ((x verismo!arch.vram.def.VRamDB.)) (! (has_type (Poly%verismo!arch.vram.def.VRamDB. x) TYPE%verismo!arch.vram.def.VRamDB.) :pattern ((has_type (Poly%verismo!arch.vram.def.VRamDB. x) TYPE%verismo!arch.vram.def.VRamDB.)))))
(assert (forall ((x verismo!arch.mem.def_s.MemDB.)) (! (= x (%Poly%verismo!arch.mem.def_s.MemDB. (Poly%verismo!arch.mem.def_s.MemDB. x))) :pattern ((Poly%verismo!arch.mem.def_s.MemDB. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.mem.def_s.MemDB.) (= x (Poly%verismo!arch.mem.def_s.MemDB. (%Poly%verismo!arch.mem.def_s.MemDB. x)))) :pattern ((has_type x TYPE%verismo!arch.mem.def_s.MemDB.)))))
(assert (forall ((x verismo!arch.mem.def_s.MemDB.)) (! (= (verismo!arch.mem.def_s.MemDB./MemDB/vram x) (verismo!arch.mem.def_s.MemDB./MemDB/?vram x)) :pattern ((verismo!arch.mem.def_s.MemDB./MemDB/vram x)))))
(assert (forall ((x verismo!arch.mem.def_s.MemDB.)) (! (= (verismo!arch.mem.def_s.MemDB./MemDB/l0_entry x) (verismo!arch.mem.def_s.MemDB./MemDB/?l0_entry x)) :pattern ((verismo!arch.mem.def_s.MemDB./MemDB/l0_entry x)))))
(assert (forall ((x verismo!arch.mem.def_s.MemDB.)) (! (= (verismo!arch.mem.def_s.MemDB./MemDB/sysmap x) (verismo!arch.mem.def_s.MemDB./MemDB/?sysmap x)) :pattern ((verismo!arch.mem.def_s.MemDB./MemDB/sysmap x)))))
(assert (forall ((x verismo!arch.mem.def_s.MemDB.)) (! (= (verismo!arch.mem.def_s.MemDB./MemDB/tlb x) (verismo!arch.mem.def_s.MemDB./MemDB/?tlb x)) :pattern ((verismo!arch.mem.def_s.MemDB./MemDB/tlb x)))))
(assert (forall ((x verismo!arch.mem.def_s.MemDB.)) (! (has_type (Poly%verismo!arch.mem.def_s.MemDB. x) TYPE%verismo!arch.mem.def_s.MemDB.) :pattern ((has_type (Poly%verismo!arch.mem.def_s.MemDB. x) TYPE%verismo!arch.mem.def_s.MemDB.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= x (%Poly%verismo!arch.x64.def_s.Archx64Op. (Poly%verismo!arch.x64.def_s.Archx64Op. x))) :pattern ((Poly%verismo!arch.x64.def_s.Archx64Op. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (= x (Poly%verismo!arch.x64.def_s.Archx64Op. (%Poly%verismo!arch.x64.def_s.Archx64Op. x)))) :pattern ((has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((_0! verismo!arch.memop.MemOp.) (_1! Int)) (! (=> (and (has_type (Poly%verismo!arch.memop.MemOp. _0!) (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (<= 0 _1!)) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./MemOp _0! _1!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./MemOp _0! _1!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./MemOp/0 x) (verismo!arch.x64.def_s.Archx64Op./MemOp/?0 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./MemOp/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x))) (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) :pattern ((verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./MemOp/1 x) (verismo!arch.x64.def_s.Archx64Op./MemOp/?1 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./MemOp/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (<= 0 (verismo!arch.x64.def_s.Archx64Op./MemOp/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)))) :pattern ((verismo!arch.x64.def_s.Archx64Op./MemOp/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((_0! verismo!arch.entities.memid.CpuMemID.) (_1! verismo!arch.reg.RegName.) (_2! Int)) (! (=> (and (has_type (Poly%verismo!arch.entities.memid.CpuMemID. _0!) TYPE%verismo!arch.entities.memid.CpuMemID.) (has_type (Poly%verismo!arch.reg.RegName. _1!) TYPE%verismo!arch.reg.RegName.) (uInv 64 _2!)) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./RegWrite _0! _1! _2!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./RegWrite _0! _1! _2!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./RegWrite/0 x) (verismo!arch.x64.def_s.Archx64Op./RegWrite/?0 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegWrite/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.def_s.Archx64Op./RegWrite/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x))) TYPE%verismo!arch.entities.memid.CpuMemID.)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegWrite/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./RegWrite/1 x) (verismo!arch.x64.def_s.Archx64Op./RegWrite/?1 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegWrite/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.reg.RegName. (verismo!arch.x64.def_s.Archx64Op./RegWrite/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. x))) TYPE%verismo!arch.reg.RegName.)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegWrite/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./RegWrite/2 x) (verismo!arch.x64.def_s.Archx64Op./RegWrite/?2 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegWrite/2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (uInv 64 (verismo!arch.x64.def_s.Archx64Op./RegWrite/2 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)))) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegWrite/2 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((_0! verismo!arch.entities.memid.CpuMemID.) (_1! verismo!arch.reg.RegName.)) (! (=> (and (has_type (Poly%verismo!arch.entities.memid.CpuMemID. _0!) TYPE%verismo!arch.entities.memid.CpuMemID.) (has_type (Poly%verismo!arch.reg.RegName. _1!) TYPE%verismo!arch.reg.RegName.)) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./RegRead _0! _1!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./RegRead _0! _1!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./RegRead/0 x) (verismo!arch.x64.def_s.Archx64Op./RegRead/?0 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegRead/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.def_s.Archx64Op./RegRead/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x))) TYPE%verismo!arch.entities.memid.CpuMemID.)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegRead/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./RegRead/1 x) (verismo!arch.x64.def_s.Archx64Op./RegRead/?1 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegRead/1 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.reg.RegName. (verismo!arch.x64.def_s.Archx64Op./RegRead/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. x))) TYPE%verismo!arch.reg.RegName.)) :pattern ((verismo!arch.x64.def_s.Archx64Op./RegRead/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((_0! verismo!arch.entities.memid.CpuMemID.)) (! (=> (has_type (Poly%verismo!arch.entities.memid.CpuMemID. _0!) TYPE%verismo!arch.entities.memid.CpuMemID.) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./VMGExit _0!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./VMGExit _0!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./VMGExit/0 x) (verismo!arch.x64.def_s.Archx64Op./VMGExit/?0 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./VMGExit/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.def_s.Archx64Op./VMGExit/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x))) TYPE%verismo!arch.entities.memid.CpuMemID.)) :pattern ((verismo!arch.x64.def_s.Archx64Op./VMGExit/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((_0! verismo!arch.entities.memid.CpuMemID.)) (! (=> (has_type (Poly%verismo!arch.entities.memid.CpuMemID. _0!) TYPE%verismo!arch.entities.memid.CpuMemID.) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./LoopHalt _0!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./LoopHalt _0!)) TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64Op.)) (! (= (verismo!arch.x64.def_s.Archx64Op./LoopHalt/0 x) (verismo!arch.x64.def_s.Archx64Op./LoopHalt/?0 x)) :pattern ((verismo!arch.x64.def_s.Archx64Op./LoopHalt/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.def_s.Archx64Op./LoopHalt/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x))) TYPE%verismo!arch.entities.memid.CpuMemID.)) :pattern ((verismo!arch.x64.def_s.Archx64Op./LoopHalt/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. x)) (has_type x TYPE%verismo!arch.x64.def_s.Archx64Op.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64.)) (! (= x (%Poly%verismo!arch.x64.def_s.Archx64. (Poly%verismo!arch.x64.def_s.Archx64. x))) :pattern ((Poly%verismo!arch.x64.def_s.Archx64. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.Archx64.) (= x (Poly%verismo!arch.x64.def_s.Archx64. (%Poly%verismo!arch.x64.def_s.Archx64. x)))) :pattern ((has_type x TYPE%verismo!arch.x64.def_s.Archx64.)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64.)) (! (= (verismo!arch.x64.def_s.Archx64./Archx64/memdb x) (verismo!arch.x64.def_s.Archx64./Archx64/?memdb x)) :pattern ((verismo!arch.x64.def_s.Archx64./Archx64/memdb x)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64.)) (! (= (verismo!arch.x64.def_s.Archx64./Archx64/regdb x) (verismo!arch.x64.def_s.Archx64./Archx64/?regdb x)) :pattern ((verismo!arch.x64.def_s.Archx64./Archx64/regdb x)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64.)) (! (= (verismo!arch.x64.def_s.Archx64./Archx64/entities x) (verismo!arch.x64.def_s.Archx64./Archx64/?entities x)) :pattern ((verismo!arch.x64.def_s.Archx64./Archx64/entities x)))))
(assert (forall ((x verismo!arch.x64.def_s.Archx64.)) (! (has_type (Poly%verismo!arch.x64.def_s.Archx64. x) TYPE%verismo!arch.x64.def_s.Archx64.) :pattern ((has_type (Poly%verismo!arch.x64.def_s.Archx64. x) TYPE%verismo!arch.x64.def_s.Archx64.)))))
(assert (forall ((x verismo!arch.x64.def_s.AECode.)) (! (= x (%Poly%verismo!arch.x64.def_s.AECode. (Poly%verismo!arch.x64.def_s.AECode. x))) :pattern ((Poly%verismo!arch.x64.def_s.AECode. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.AECode.) (= x (Poly%verismo!arch.x64.def_s.AECode. (%Poly%verismo!arch.x64.def_s.AECode. x)))) :pattern ((has_type x TYPE%verismo!arch.x64.def_s.AECode.)))))
(assert (forall ((x verismo!arch.x64.def_s.AECode.)) (! (has_type (Poly%verismo!arch.x64.def_s.AECode. x) TYPE%verismo!arch.x64.def_s.AECode.) :pattern ((has_type (Poly%verismo!arch.x64.def_s.AECode. x) TYPE%verismo!arch.x64.def_s.AECode.)))))
(assert (forall ((x verismo!arch.x64.def_s.NAECode.)) (! (= x (%Poly%verismo!arch.x64.def_s.NAECode. (Poly%verismo!arch.x64.def_s.NAECode. x))) :pattern ((Poly%verismo!arch.x64.def_s.NAECode. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.NAECode.) (= x (Poly%verismo!arch.x64.def_s.NAECode. (%Poly%verismo!arch.x64.def_s.NAECode. x)))) :pattern ((has_type x TYPE%verismo!arch.x64.def_s.NAECode.)))))
(assert (has_type (Poly%verismo!arch.x64.def_s.NAECode. verismo!arch.x64.def_s.NAECode./Npf) TYPE%verismo!arch.x64.def_s.NAECode.))
(assert (has_type (Poly%verismo!arch.x64.def_s.NAECode. verismo!arch.x64.def_s.NAECode./Vmmcall) TYPE%verismo!arch.x64.def_s.NAECode.))
(assert (has_type (Poly%verismo!arch.x64.def_s.NAECode. verismo!arch.x64.def_s.NAECode./Halt) TYPE%verismo!arch.x64.def_s.NAECode.))
(assert (forall ((_0! verismo!arch.x64.def_s.Archx64Op.)) (! (=> (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. _0!) TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.x64.def_s.NAECode. (verismo!arch.x64.def_s.NAECode./NotValidated _0!)) TYPE%verismo!arch.x64.def_s.NAECode.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.NAECode. (verismo!arch.x64.def_s.NAECode./NotValidated _0!)) TYPE%verismo!arch.x64.def_s.NAECode.)))))
(assert (forall ((x verismo!arch.x64.def_s.NAECode.)) (! (= (verismo!arch.x64.def_s.NAECode./NotValidated/0 x) (verismo!arch.x64.def_s.NAECode./NotValidated/?0 x)) :pattern ((verismo!arch.x64.def_s.NAECode./NotValidated/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.NAECode.) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.NAECode./NotValidated/0 (%Poly%verismo!arch.x64.def_s.NAECode. x))) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((verismo!arch.x64.def_s.NAECode./NotValidated/0 (%Poly%verismo!arch.x64.def_s.NAECode. x)) (has_type x TYPE%verismo!arch.x64.def_s.NAECode.)))))
(assert (has_type (Poly%verismo!arch.x64.def_s.NAECode. verismo!arch.x64.def_s.NAECode./Others) TYPE%verismo!arch.x64.def_s.NAECode.))
(assert (forall ((x verismo!arch.x64.def_s.ExceptionCode.)) (! (= x (%Poly%verismo!arch.x64.def_s.ExceptionCode. (Poly%verismo!arch.x64.def_s.ExceptionCode. x))) :pattern ((Poly%verismo!arch.x64.def_s.ExceptionCode. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.ExceptionCode.) (= x (Poly%verismo!arch.x64.def_s.ExceptionCode. (%Poly%verismo!arch.x64.def_s.ExceptionCode. x)))) :pattern ((has_type x TYPE%verismo!arch.x64.def_s.ExceptionCode.)))))
(assert (forall ((_0! verismo!arch.x64.def_s.Archx64Op.)) (! (=> (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. _0!) TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.x64.def_s.ExceptionCode. (verismo!arch.x64.def_s.ExceptionCode./PFault _0!)) TYPE%verismo!arch.x64.def_s.ExceptionCode.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.ExceptionCode. (verismo!arch.x64.def_s.ExceptionCode./PFault _0!)) TYPE%verismo!arch.x64.def_s.ExceptionCode.)))))
(assert (forall ((x verismo!arch.x64.def_s.ExceptionCode.)) (! (= (verismo!arch.x64.def_s.ExceptionCode./PFault/0 x) (verismo!arch.x64.def_s.ExceptionCode./PFault/?0 x)) :pattern ((verismo!arch.x64.def_s.ExceptionCode./PFault/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.ExceptionCode.) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.ExceptionCode./PFault/0 (%Poly%verismo!arch.x64.def_s.ExceptionCode. x))) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((verismo!arch.x64.def_s.ExceptionCode./PFault/0 (%Poly%verismo!arch.x64.def_s.ExceptionCode. x)) (has_type x TYPE%verismo!arch.x64.def_s.ExceptionCode.)))))
(assert (forall ((_0! verismo!arch.x64.def_s.Archx64Op.)) (! (=> (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. _0!) TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.x64.def_s.ExceptionCode. (verismo!arch.x64.def_s.ExceptionCode./GP _0!)) TYPE%verismo!arch.x64.def_s.ExceptionCode.)) :pattern ((has_type (Poly%verismo!arch.x64.def_s.ExceptionCode. (verismo!arch.x64.def_s.ExceptionCode./GP _0!)) TYPE%verismo!arch.x64.def_s.ExceptionCode.)))))
(assert (forall ((x verismo!arch.x64.def_s.ExceptionCode.)) (! (= (verismo!arch.x64.def_s.ExceptionCode./GP/0 x) (verismo!arch.x64.def_s.ExceptionCode./GP/?0 x)) :pattern ((verismo!arch.x64.def_s.ExceptionCode./GP/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.x64.def_s.ExceptionCode.) (has_type (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.ExceptionCode./GP/0 (%Poly%verismo!arch.x64.def_s.ExceptionCode. x))) TYPE%verismo!arch.x64.def_s.Archx64Op.)) :pattern ((verismo!arch.x64.def_s.ExceptionCode./GP/0 (%Poly%verismo!arch.x64.def_s.ExceptionCode. x)) (has_type x TYPE%verismo!arch.x64.def_s.ExceptionCode.)))))
(assert (forall ((x verismo!boot.idt.def.Idtr.)) (! (= x (%Poly%verismo!boot.idt.def.Idtr. (Poly%verismo!boot.idt.def.Idtr. x))) :pattern ((Poly%verismo!boot.idt.def.Idtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!boot.idt.def.Idtr.) (= x (Poly%verismo!boot.idt.def.Idtr. (%Poly%verismo!boot.idt.def.Idtr. x)))) :pattern ((has_type x TYPE%verismo!boot.idt.def.Idtr.)))))
(assert (forall ((x verismo!boot.idt.def.Idtr.)) (! (= (verismo!boot.idt.def.Idtr./Idtr/limit x) (verismo!boot.idt.def.Idtr./Idtr/?limit x)) :pattern ((verismo!boot.idt.def.Idtr./Idtr/limit x)))))
(assert (forall ((x verismo!boot.idt.def.Idtr.)) (! (= (verismo!boot.idt.def.Idtr./Idtr/base x) (verismo!boot.idt.def.Idtr./Idtr/?base x)) :pattern ((verismo!boot.idt.def.Idtr./Idtr/base x)))))
(assert (forall ((x verismo!boot.idt.def.Idtr.)) (! (has_type (Poly%verismo!boot.idt.def.Idtr. x) TYPE%verismo!boot.idt.def.Idtr.) :pattern ((has_type (Poly%verismo!boot.idt.def.Idtr. x) TYPE%verismo!boot.idt.def.Idtr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.RmpAttrSpec.)) (! (= x (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x))) :pattern ((Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (= x (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)))) :pattern ((has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)))))
(assert (forall ((_vmpl! Int) (_perms! Int) (_vmsa! Int)) (! (=> (and (uInv 64 _vmpl!) (uInv 64 _perms!) (uInv 64 _vmsa!)) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec _vmpl! _perms! _vmsa!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)) :pattern ((has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec _vmpl! _perms! _vmsa!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.RmpAttrSpec.)) (! (= (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmpl x) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/?vmpl x)) :pattern ((verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (uInv 64 (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmpl (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)))) :pattern ((verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmpl (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)) (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.RmpAttrSpec.)) (! (= (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/perms x) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/?perms x)) :pattern ((verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/perms x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (uInv 64 (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/perms (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)))) :pattern ((verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/perms (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)) (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.RmpAttrSpec.)) (! (= (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmsa x) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/?vmsa x)) :pattern ((verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmsa x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (uInv 64 (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmsa (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)))) :pattern ((verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmsa (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. x)) (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.RmpAttr.)) (! (= x (%Poly%verismo!ptr.snp.snp_u.RmpAttr. (Poly%verismo!ptr.snp.snp_u.RmpAttr. x))) :pattern ((Poly%verismo!ptr.snp.snp_u.RmpAttr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (= x (Poly%verismo!ptr.snp.snp_u.RmpAttr. (%Poly%verismo!ptr.snp.snp_u.RmpAttr. x)))) :pattern ((has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttr.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttr. (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr _value!)) TYPE%verismo!ptr.snp.snp_u.RmpAttr.)) :pattern ((has_type (Poly%verismo!ptr.snp.snp_u.RmpAttr. (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr _value!)) TYPE%verismo!ptr.snp.snp_u.RmpAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.RmpAttr.)) (! (= (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value x) (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/?value x)) :pattern ((verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (uInv 64 (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. x)))) :pattern ((verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. x)) (has_type x TYPE%verismo!ptr.snp.snp_u.RmpAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.PTAttr.)) (! (= x (%Poly%verismo!ptr.snp.snp_u.PTAttr. (Poly%verismo!ptr.snp.snp_u.PTAttr. x))) :pattern ((Poly%verismo!ptr.snp.snp_u.PTAttr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.PTAttr.) (= x (Poly%verismo!ptr.snp.snp_u.PTAttr. (%Poly%verismo!ptr.snp.snp_u.PTAttr. x)))) :pattern ((has_type x TYPE%verismo!ptr.snp.snp_u.PTAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.PTAttr.)) (! (= (verismo!ptr.snp.snp_u.PTAttr./PTAttr/encrypted x) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/?encrypted x)) :pattern ((verismo!ptr.snp.snp_u.PTAttr./PTAttr/encrypted x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.PTAttr.)) (! (= (verismo!ptr.snp.snp_u.PTAttr./PTAttr/w x) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/?w x)) :pattern ((verismo!ptr.snp.snp_u.PTAttr./PTAttr/w x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.PTAttr.)) (! (= (verismo!ptr.snp.snp_u.PTAttr./PTAttr/x x) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/?x x)) :pattern ((verismo!ptr.snp.snp_u.PTAttr./PTAttr/x x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.PTAttr.)) (! (has_type (Poly%verismo!ptr.snp.snp_u.PTAttr. x) TYPE%verismo!ptr.snp.snp_u.PTAttr.) :pattern ((has_type (Poly%verismo!ptr.snp.snp_u.PTAttr. x) TYPE%verismo!ptr.snp.snp_u.PTAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= x (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. x))) :pattern ((Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (= x (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. x)))) :pattern ((has_type x TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)))))
(assert (forall ((_rmp! verismo!arch.rmp.def_s.RmpEntry.) (_guestmap! vstd!map.Map<int./int.>.) (_sysmap! vstd!map.Map<int./int.>.) (_rmpmap! vstd!map.Map<int./int.>.) (_pte! vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.) (_is_pte! Bool)) (! (=> (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. _rmp!) TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr _rmp! _guestmap! _sysmap! _rmpmap! _pte! _is_pte!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr _rmp! _guestmap! _sysmap! _rmpmap! _pte! _is_pte!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp x) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?rmp x)) :pattern ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. x))) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. x)) (has_type x TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap x) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?guestmap x)) :pattern ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/sysmap x) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?sysmap x)) :pattern ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/sysmap x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmpmap x) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?rmpmap x)) :pattern ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmpmap x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte x) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?pte x)) :pattern ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/is_pte x) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/?is_pte x)) :pattern ((verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/is_pte x)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SnpMemAttr.)) (! (= x (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. x))) :pattern ((Poly%verismo!ptr.snp.snp_u.SnpMemAttr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.) (= x (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. x)))) :pattern ((has_type x TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)))))
(assert (forall ((_hw! verismo!ptr.snp.snp_u.SwSnpMemAttr.) (_sw! verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (=> (and (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. _hw!) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. _sw!) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr _hw! _sw!)) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) :pattern ((has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr _hw! _sw!)) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw x) (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/?hw x)) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. x))) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. x)) (has_type x TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)))))
(assert (forall ((x verismo!ptr.snp.snp_u.SnpMemAttr.)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw x) (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/?sw x)) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. x))) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. x)) (has_type x TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= x (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. x))) :pattern ((Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (= x (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)))) :pattern ((has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)))))
(assert (forall ((_coreid! verismo!registers.core_perm_s.CoreIdPerm.) (_vmpl! Int) (_cpu! Int) (_regs! vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)) (! (=> (and (<= 0 _vmpl!) (<= 0 _cpu!)) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore _coreid! _vmpl! _cpu! _regs!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore _coreid! _vmpl! _cpu! _regs!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid x) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?coreid x)) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid x)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl x) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?vmpl x)) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)))) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)) (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu x) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?cpu x)) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)))) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. x)) (has_type x TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)))))
(assert (forall ((x verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs x) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/?regs x)) :pattern ((verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs x)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((_accessed! Int) (_write! Int) (_conform! Int) (_exe! Int) (_sys! Int) (_dpl! Int) (_present! Int)) (! (=> (and (uInv 64 _accessed!) (uInv 64 _write!) (uInv 64 _conform!) (uInv 64 _exe!) (uInv 64 _sys!) (uInv 64 _dpl!) (uInv 64 _present!)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec _accessed! _write! _conform! _exe! _sys! _dpl! _present!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec _accessed! _write! _conform! _exe! _sys! _dpl! _present!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?accessed x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?write x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?conform x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?exe x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?sys x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?dpl x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present x) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/?present x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7 _value!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7 _value!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr0_7.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value x) (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/?value x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((_avl! Int) (_long! Int) (_size32_or_16! Int) (_granularity! Int)) (! (=> (and (uInv 64 _avl!) (uInv 64 _long!) (uInv 64 _size32_or_16!) (uInv 64 _granularity!)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec _avl! _long! _size32_or_16! _granularity!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec _avl! _long! _size32_or_16! _granularity!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl x) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?avl x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long x) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?long x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 x) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?size32_or_16 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity x) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/?granularity x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11 _value!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11 _value!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorAttr8_11.)) (! (= (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value x) (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/?value x)) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= x (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. (Poly%verismo!snp.cpu.gdt.DescriptorSpec. x))) :pattern ((Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (= x (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((_limit0_15! Int) (_base0_23! Int) (_attr_0_7! Int) (_limit16_19! Int) (_attr_8_11! Int) (_base24_31! Int)) (! (=> (and (uInv 64 _limit0_15!) (uInv 64 _base0_23!) (uInv 64 _attr_0_7!) (uInv 64 _limit16_19!) (uInv 64 _attr_8_11!) (uInv 64 _base24_31!)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec _limit0_15! _base0_23! _attr_0_7! _limit16_19! _attr_8_11! _base24_31!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec _limit0_15! _base0_23! _attr_0_7! _limit16_19! _attr_8_11! _base24_31!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?limit0_15 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?base0_23 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?attr_0_7 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?limit16_19 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?attr_8_11 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 x) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/?base24_31 x)) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)))) :pattern ((verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. x)) (has_type x TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)))))
(assert (forall ((x verismo!snp.cpu.gdt.Descriptor.)) (! (= x (%Poly%verismo!snp.cpu.gdt.Descriptor. (Poly%verismo!snp.cpu.gdt.Descriptor. x))) :pattern ((Poly%verismo!snp.cpu.gdt.Descriptor. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.Descriptor.) (= x (Poly%verismo!snp.cpu.gdt.Descriptor. (%Poly%verismo!snp.cpu.gdt.Descriptor. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.Descriptor.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.Descriptor./Descriptor _value!)) TYPE%verismo!snp.cpu.gdt.Descriptor.)) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.Descriptor./Descriptor _value!)) TYPE%verismo!snp.cpu.gdt.Descriptor.)))))
(assert (forall ((x verismo!snp.cpu.gdt.Descriptor.)) (! (= (verismo!snp.cpu.gdt.Descriptor./Descriptor/value x) (verismo!snp.cpu.gdt.Descriptor./Descriptor/?value x)) :pattern ((verismo!snp.cpu.gdt.Descriptor./Descriptor/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. x)))) :pattern ((verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. x)) (has_type x TYPE%verismo!snp.cpu.gdt.Descriptor.)))))
(assert (forall ((x verismo!snp.cpu.gdt.Gdtr.)) (! (= x (%Poly%verismo!snp.cpu.gdt.Gdtr. (Poly%verismo!snp.cpu.gdt.Gdtr. x))) :pattern ((Poly%verismo!snp.cpu.gdt.Gdtr. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.gdt.Gdtr.) (= x (Poly%verismo!snp.cpu.gdt.Gdtr. (%Poly%verismo!snp.cpu.gdt.Gdtr. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.gdt.Gdtr.)))))
(assert (forall ((x verismo!snp.cpu.gdt.Gdtr.)) (! (= (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit x) (verismo!snp.cpu.gdt.Gdtr./Gdtr/?limit x)) :pattern ((verismo!snp.cpu.gdt.Gdtr./Gdtr/limit x)))))
(assert (forall ((x verismo!snp.cpu.gdt.Gdtr.)) (! (= (verismo!snp.cpu.gdt.Gdtr./Gdtr/base x) (verismo!snp.cpu.gdt.Gdtr./Gdtr/?base x)) :pattern ((verismo!snp.cpu.gdt.Gdtr./Gdtr/base x)))))
(assert (forall ((x verismo!snp.cpu.gdt.Gdtr.)) (! (has_type (Poly%verismo!snp.cpu.gdt.Gdtr. x) TYPE%verismo!snp.cpu.gdt.Gdtr.) :pattern ((has_type (Poly%verismo!snp.cpu.gdt.Gdtr. x) TYPE%verismo!snp.cpu.gdt.Gdtr.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.SevFeatures.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.SevFeatures. (Poly%verismo!snp.cpu.vmsa.SevFeatures. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.SevFeatures. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (= x (Poly%verismo!snp.cpu.vmsa.SevFeatures. (%Poly%verismo!snp.cpu.vmsa.SevFeatures. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.SevFeatures.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!snp.cpu.vmsa.SevFeatures. (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures _value!)) TYPE%verismo!snp.cpu.vmsa.SevFeatures.)) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.SevFeatures. (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures _value!)) TYPE%verismo!snp.cpu.vmsa.SevFeatures.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.SevFeatures.)) (! (= (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value x) (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/?value x)) :pattern ((verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. x)))) :pattern ((verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.SevFeatures.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.VmsaSegmentRegister.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (= x (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.VmsaSegmentRegister.)) (! (= (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector x) (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?selector x)) :pattern ((verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.VmsaSegmentRegister.)) (! (= (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr x) (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?attr x)) :pattern ((verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.VmsaSegmentRegister.)) (! (= (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit x) (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?limit x)) :pattern ((verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.VmsaSegmentRegister.)) (! (= (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base x) (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/?base x)) :pattern ((verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.VmsaSegmentRegister.)) (! (has_type (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. x) TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. x) TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= x (%Poly%verismo!snp.cpu.vmsa.Vmsa. (Poly%verismo!snp.cpu.vmsa.Vmsa. x))) :pattern ((Poly%verismo!snp.cpu.vmsa.Vmsa. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (= x (Poly%verismo!snp.cpu.vmsa.Vmsa. (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)))) :pattern ((has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((_es! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (_cs! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (_ss! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (_ds! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (_fs! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (_gs! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (_gdtr! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (_reserved_ldtr_idtr_tr! Poly) (_vmpl! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (_cpl! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (_reserved2! Poly) (_efer! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved3! Poly) (_cr4! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_cr3! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_cr0! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved_dr7_6! Poly) (_rflags! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_rip! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved4! Poly) (_rsp! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved5! Poly) (_rax! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved6! Poly) (_gpat! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved7! Poly) (_rcx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_rdx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_rbx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved8! Poly) (_rbp! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_rsi! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_rdi! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved_9_r9_15_exits_scratch! Poly) (_sev_features! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_vintr_ctrl! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_guest_error_code! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_virtual_tom! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved_12! Poly) (_xcr0! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (_reserved13! Poly)) (! (=> (and (has_type _reserved_ldtr_idtr_tr! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90))) (has_type _reserved2! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4))) (has_type _reserved3! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type _reserved_dr7_6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16))) (has_type _reserved4! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88))) (has_type _reserved5! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24))) (has_type _reserved6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104))) (has_type _reserved7! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152))) (has_type _reserved8! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8))) (has_type _reserved_9_r9_15_exits_scratch! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type _reserved_12! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24))) (has_type _reserved13! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)))) (has_type (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.Vmsa./Vmsa _es! _cs! _ss! _ds! _fs! _gs! _gdtr! _reserved_ldtr_idtr_tr! _vmpl! _cpl! _reserved2! _efer! _reserved3! _cr4! _cr3! _cr0! _reserved_dr7_6! _rflags! _rip! _reserved4! _rsp! _reserved5! _rax! _reserved6! _gpat! _reserved7! _rcx! _rdx! _rbx! _reserved8! _rbp! _rsi! _rdi! _reserved_9_r9_15_exits_scratch! _sev_features! _vintr_ctrl! _guest_error_code! _virtual_tom! _reserved_12! _xcr0! _reserved13!)) TYPE%verismo!snp.cpu.vmsa.Vmsa.)) :pattern ((has_type (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.Vmsa./Vmsa _es! _cs! _ss! _ds! _fs! _gs! _gdtr! _reserved_ldtr_idtr_tr! _vmpl! _cpl! _reserved2! _efer! _reserved3! _cr4! _cr3! _cr0! _reserved_dr7_6! _rflags! _rip! _reserved4! _rsp! _reserved5! _rax! _reserved6! _gpat! _reserved7! _rcx! _rdx! _rbx! _reserved8! _rbp! _rsi! _rdi! _reserved_9_r9_15_exits_scratch! _sev_features! _vintr_ctrl! _guest_error_code! _virtual_tom! _reserved_12! _xcr0! _reserved13!)) TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/es x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?es x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/es x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cs x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?ss x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?ds x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?fs x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?gs x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?gdtr x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_ldtr_idtr_tr x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?vmpl x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cpl x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved2 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?efer x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved3 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cr4 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cr3 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?cr0 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_dr7_6 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rflags x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rip x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved4 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rsp x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved5 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rax x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved6 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?gpat x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved7 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rcx x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rdx x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rbx x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved8 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rbp x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rsi x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?rdi x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_9_r9_15_exits_scratch x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?sev_features x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?vintr_ctrl x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?guest_error_code x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?virtual_tom x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved_12 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?xcr0 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 x)))))
(assert (forall ((x verismo!snp.cpu.vmsa.Vmsa.)) (! (= (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 x) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/?reserved13 x)) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)))) :pattern ((verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (%Poly%verismo!snp.cpu.vmsa.Vmsa. x)) (has_type x TYPE%verismo!snp.cpu.vmsa.Vmsa.)))))
(assert (forall ((x verismo!arch.entities.VMPL.)) (! (= x (%Poly%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. x))) :pattern ((Poly%verismo!arch.entities.VMPL. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.entities.VMPL.) (= x (Poly%verismo!arch.entities.VMPL. (%Poly%verismo!arch.entities.VMPL. x)))) :pattern ((has_type x TYPE%verismo!arch.entities.VMPL.)))))
(assert (forall ((x verismo!arch.entities.VMPL.)) (! (has_type (Poly%verismo!arch.entities.VMPL. x) TYPE%verismo!arch.entities.VMPL.) :pattern ((has_type (Poly%verismo!arch.entities.VMPL. x) TYPE%verismo!arch.entities.VMPL.)))))
(assert (forall ((x verismo!arch.crypto.CryptoMask.)) (! (= x (%Poly%verismo!arch.crypto.CryptoMask. (Poly%verismo!arch.crypto.CryptoMask. x))) :pattern ((Poly%verismo!arch.crypto.CryptoMask. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.crypto.CryptoMask.) (= x (Poly%verismo!arch.crypto.CryptoMask. (%Poly%verismo!arch.crypto.CryptoMask. x)))) :pattern ((has_type x TYPE%verismo!arch.crypto.CryptoMask.)))))
(assert (forall ((x verismo!arch.crypto.CryptoMask.)) (! (= (verismo!arch.crypto.CryptoMask./CryptoMask/0 x) (verismo!arch.crypto.CryptoMask./CryptoMask/?0 x)) :pattern ((verismo!arch.crypto.CryptoMask./CryptoMask/0 x)))))
(assert (forall ((x verismo!arch.crypto.CryptoMask.)) (! (has_type (Poly%verismo!arch.crypto.CryptoMask. x) TYPE%verismo!arch.crypto.CryptoMask.) :pattern ((has_type (Poly%verismo!arch.crypto.CryptoMask. x) TYPE%verismo!arch.crypto.CryptoMask.)))))
(assert (forall ((x verismo!arch.crypto.SymKey.)) (! (= x (%Poly%verismo!arch.crypto.SymKey. (Poly%verismo!arch.crypto.SymKey. x))) :pattern ((Poly%verismo!arch.crypto.SymKey. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.crypto.SymKey. T&. T&)) (= x (Poly%verismo!arch.crypto.SymKey. (%Poly%verismo!arch.crypto.SymKey. x)))) :pattern ((has_type x (TYPE%verismo!arch.crypto.SymKey. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_key! Poly)) (! (=> (has_type _key! T&) (has_type (Poly%verismo!arch.crypto.SymKey. (verismo!arch.crypto.SymKey./SymKey _key!)) (TYPE%verismo!arch.crypto.SymKey. T&. T&))) :pattern ((has_type (Poly%verismo!arch.crypto.SymKey. (verismo!arch.crypto.SymKey./SymKey _key!)) (TYPE%verismo!arch.crypto.SymKey. T&. T&))))))
(assert (forall ((x verismo!arch.crypto.SymKey.)) (! (= (verismo!arch.crypto.SymKey./SymKey/key x) (verismo!arch.crypto.SymKey./SymKey/?key x)) :pattern ((verismo!arch.crypto.SymKey./SymKey/key x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.crypto.SymKey. T&. T&)) (has_type (verismo!arch.crypto.SymKey./SymKey/key (%Poly%verismo!arch.crypto.SymKey. x)) T&)) :pattern ((verismo!arch.crypto.SymKey./SymKey/key (%Poly%verismo!arch.crypto.SymKey. x)) (has_type x (TYPE%verismo!arch.crypto.SymKey. T&. T&))))))
(define-fun is-verismo!arch.crypto.SymKey./SymKey_ ((c verismo!arch.crypto.SymKey.)) Bool ((_ is verismo!arch.crypto.SymKey./SymKey) c))
(assert (forall ((x verismo!arch.crypto.SymKey.)) (! (=> (is-verismo!arch.crypto.SymKey./SymKey_ x) (height_lt (height (verismo!arch.crypto.SymKey./SymKey/key x)) (height (Poly%verismo!arch.crypto.SymKey. x)))) :pattern ((height (verismo!arch.crypto.SymKey./SymKey/key x))))))
(assert (forall ((x verismo!arch.crypto.Encrypted.)) (! (= x (%Poly%verismo!arch.crypto.Encrypted. (Poly%verismo!arch.crypto.Encrypted. x))) :pattern ((Poly%verismo!arch.crypto.Encrypted. x)))))
(assert (forall ((K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&)) (= x (Poly%verismo!arch.crypto.Encrypted. (%Poly%verismo!arch.crypto.Encrypted. x)))) :pattern ((has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&))))))
(assert (forall ((K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (_data! Poly) (_key! Poly) (_crypto_mask! Poly)) (! (=> (and (has_type _data! T&) (has_type _key! K&) (has_type _crypto_mask! T&)) (has_type (Poly%verismo!arch.crypto.Encrypted. (verismo!arch.crypto.Encrypted./Encrypted _data! _key! _crypto_mask!)) (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&))) :pattern ((has_type (Poly%verismo!arch.crypto.Encrypted. (verismo!arch.crypto.Encrypted./Encrypted _data! _key! _crypto_mask!)) (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&))))))
(assert (forall ((x verismo!arch.crypto.Encrypted.)) (! (= (verismo!arch.crypto.Encrypted./Encrypted/data x) (verismo!arch.crypto.Encrypted./Encrypted/?data x)) :pattern ((verismo!arch.crypto.Encrypted./Encrypted/data x)))))
(assert (forall ((K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&)) (has_type (verismo!arch.crypto.Encrypted./Encrypted/data (%Poly%verismo!arch.crypto.Encrypted. x)) T&)) :pattern ((verismo!arch.crypto.Encrypted./Encrypted/data (%Poly%verismo!arch.crypto.Encrypted. x)) (has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&))))))
(assert (forall ((x verismo!arch.crypto.Encrypted.)) (! (= (verismo!arch.crypto.Encrypted./Encrypted/key x) (verismo!arch.crypto.Encrypted./Encrypted/?key x)) :pattern ((verismo!arch.crypto.Encrypted./Encrypted/key x)))))
(assert (forall ((K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&)) (has_type (verismo!arch.crypto.Encrypted./Encrypted/key (%Poly%verismo!arch.crypto.Encrypted. x)) K&)) :pattern ((verismo!arch.crypto.Encrypted./Encrypted/key (%Poly%verismo!arch.crypto.Encrypted. x)) (has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&))))))
(assert (forall ((x verismo!arch.crypto.Encrypted.)) (! (= (verismo!arch.crypto.Encrypted./Encrypted/crypto_mask x) (verismo!arch.crypto.Encrypted./Encrypted/?crypto_mask x)) :pattern ((verismo!arch.crypto.Encrypted./Encrypted/crypto_mask x)))))
(assert (forall ((K&. Dcr) (K& Type) (T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&)) (has_type (verismo!arch.crypto.Encrypted./Encrypted/crypto_mask (%Poly%verismo!arch.crypto.Encrypted. x)) T&)) :pattern ((verismo!arch.crypto.Encrypted./Encrypted/crypto_mask (%Poly%verismo!arch.crypto.Encrypted. x)) (has_type x (TYPE%verismo!arch.crypto.Encrypted. K&. K& T&. T&))))))
(define-fun is-verismo!arch.crypto.Encrypted./Encrypted_ ((c verismo!arch.crypto.Encrypted.)) Bool ((_ is verismo!arch.crypto.Encrypted./Encrypted) c))
(assert (forall ((x verismo!arch.crypto.Encrypted.)) (! (=> (is-verismo!arch.crypto.Encrypted./Encrypted_ x) (height_lt (height (verismo!arch.crypto.Encrypted./Encrypted/data x)) (height (Poly%verismo!arch.crypto.Encrypted. x)))) :pattern ((height (verismo!arch.crypto.Encrypted./Encrypted/data x))))))
(assert (forall ((x verismo!arch.crypto.Encrypted.)) (! (=> (is-verismo!arch.crypto.Encrypted./Encrypted_ x) (height_lt (height (verismo!arch.crypto.Encrypted./Encrypted/key x)) (height (Poly%verismo!arch.crypto.Encrypted. x)))) :pattern ((height (verismo!arch.crypto.Encrypted./Encrypted/key x))))))
(assert (forall ((x verismo!arch.crypto.Encrypted.)) (! (=> (is-verismo!arch.crypto.Encrypted./Encrypted_ x) (height_lt (height (verismo!arch.crypto.Encrypted./Encrypted/crypto_mask x)) (height (Poly%verismo!arch.crypto.Encrypted. x)))) :pattern ((height (verismo!arch.crypto.Encrypted./Encrypted/crypto_mask x))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= x (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. x))) :pattern ((Poly%verismo!arch.memop.MemOp. x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (= x (Poly%verismo!arch.memop.MemOp. (%Poly%verismo!arch.memop.MemOp. x)))) :pattern ((has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.AddrMemID.) (_1! Bool)) (! (=> (has_type (Poly%verismo!arch.entities.params.AddrMemID. _0!) (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./Read _0! _1!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./Read _0! _1!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./Read/0 x) (verismo!arch.memop.MemOp./Read/?0 x)) :pattern ((verismo!arch.memop.MemOp./Read/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.MemOp./Read/0 (%Poly%verismo!arch.memop.MemOp. x))) (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))) :pattern ((verismo!arch.memop.MemOp./Read/0 (%Poly%verismo!arch.memop.MemOp. x)) (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./Read/1 x) (verismo!arch.memop.MemOp./Read/?1 x)) :pattern ((verismo!arch.memop.MemOp./Read/1 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.AddrID.) (_1! Bool) (_2! vstd!seq.Seq<u8.>.)) (! (=> (has_type (Poly%verismo!arch.entities.params.AddrID. _0!) (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./Write _0! _1! _2!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./Write _0! _1! _2!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./Write/0 x) (verismo!arch.memop.MemOp./Write/?0 x)) :pattern ((verismo!arch.memop.MemOp./Write/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.AddrID. (verismo!arch.memop.MemOp./Write/0 (%Poly%verismo!arch.memop.MemOp. x))) (TYPE%verismo!arch.entities.params.AddrID. AddrT&. AddrT&))) :pattern ((verismo!arch.memop.MemOp./Write/0 (%Poly%verismo!arch.memop.MemOp. x)) (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./Write/1 x) (verismo!arch.memop.MemOp./Write/?1 x)) :pattern ((verismo!arch.memop.MemOp./Write/1 x)))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./Write/2 x) (verismo!arch.memop.MemOp./Write/?2 x)) :pattern ((verismo!arch.memop.MemOp./Write/2 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.params.AddrMemID.)) (! (=> (has_type (Poly%verismo!arch.entities.params.AddrMemID. _0!) (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./InvlPage _0!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./InvlPage _0!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./InvlPage/0 x) (verismo!arch.memop.MemOp./InvlPage/?0 x)) :pattern ((verismo!arch.memop.MemOp./InvlPage/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.MemOp./InvlPage/0 (%Poly%verismo!arch.memop.MemOp. x))) (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))) :pattern ((verismo!arch.memop.MemOp./InvlPage/0 (%Poly%verismo!arch.memop.MemOp. x)) (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.entities.memid.MemID.)) (! (=> (has_type (Poly%verismo!arch.entities.memid.MemID. _0!) TYPE%verismo!arch.entities.memid.MemID.) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./FlushAll _0!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./FlushAll _0!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./FlushAll/0 x) (verismo!arch.memop.MemOp./FlushAll/?0 x)) :pattern ((verismo!arch.memop.MemOp./FlushAll/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.memop.MemOp./FlushAll/0 (%Poly%verismo!arch.memop.MemOp. x))) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.memop.MemOp./FlushAll/0 (%Poly%verismo!arch.memop.MemOp. x)) (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (_0! verismo!arch.rmp.def_s.RmpOp.)) (! (=> (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. _0!) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./RmpOp _0!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))) :pattern ((has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.memop.MemOp./RmpOp _0!)) (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (= (verismo!arch.memop.MemOp./RmpOp/0 x) (verismo!arch.memop.MemOp./RmpOp/?0 x)) :pattern ((verismo!arch.memop.MemOp./RmpOp/0 x)))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. x))) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) :pattern ((verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. x)) (has_type x (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&))))))
(define-fun is-verismo!arch.memop.MemOp./Read_ ((c verismo!arch.memop.MemOp.)) Bool ((_ is verismo!arch.memop.MemOp./Read) c))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (=> (is-verismo!arch.memop.MemOp./Read_ x) (height_lt (height (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.MemOp./Read/0 x))) (height (Poly%verismo!arch.memop.MemOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.MemOp./Read/0 x)))))))
(define-fun is-verismo!arch.memop.MemOp./Write_ ((c verismo!arch.memop.MemOp.)) Bool ((_ is verismo!arch.memop.MemOp./Write) c))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (=> (is-verismo!arch.memop.MemOp./Write_ x) (height_lt (height (Poly%verismo!arch.entities.params.AddrID. (verismo!arch.memop.MemOp./Write/0 x))) (height (Poly%verismo!arch.memop.MemOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.AddrID. (verismo!arch.memop.MemOp./Write/0 x)))))))
(define-fun is-verismo!arch.memop.MemOp./InvlPage_ ((c verismo!arch.memop.MemOp.)) Bool ((_ is verismo!arch.memop.MemOp./InvlPage) c))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (=> (is-verismo!arch.memop.MemOp./InvlPage_ x) (height_lt (height (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.MemOp./InvlPage/0 x))) (height (Poly%verismo!arch.memop.MemOp. x)))) :pattern ((height (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.MemOp./InvlPage/0 x)))))))
(define-fun is-verismo!arch.memop.MemOp./RmpOp_ ((c verismo!arch.memop.MemOp.)) Bool ((_ is verismo!arch.memop.MemOp./RmpOp) c))
(assert (forall ((x verismo!arch.memop.MemOp.)) (! (=> (is-verismo!arch.memop.MemOp./RmpOp_ x) (height_lt (height (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 x))) (height (Poly%verismo!arch.memop.MemOp. x)))) :pattern ((height (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 x)))))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= x (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. x))) :pattern ((Poly%verismo!arch.errors.MemError. x)))))
(assert (forall ((Param&. Dcr) (Param& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (= x (Poly%verismo!arch.errors.MemError. (%Poly%verismo!arch.errors.MemError. x)))) :pattern ((has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((Param&. Dcr) (Param& Type) (_0! Poly)) (! (=> (has_type _0! Param&) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./Others _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))) :pattern ((has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./Others _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= (verismo!arch.errors.MemError./Others/0 x) (verismo!arch.errors.MemError./Others/?0 x)) :pattern ((verismo!arch.errors.MemError./Others/0 x)))))
(assert (forall ((Param&. Dcr) (Param& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (has_type (verismo!arch.errors.MemError./Others/0 (%Poly%verismo!arch.errors.MemError. x)) Param&)) :pattern ((verismo!arch.errors.MemError./Others/0 (%Poly%verismo!arch.errors.MemError. x)) (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((Param&. Dcr) (Param& Type) (_0! Poly)) (! (=> (has_type _0! Param&) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NoRam _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))) :pattern ((has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NoRam _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= (verismo!arch.errors.MemError./NoRam/0 x) (verismo!arch.errors.MemError./NoRam/?0 x)) :pattern ((verismo!arch.errors.MemError./NoRam/0 x)))))
(assert (forall ((Param&. Dcr) (Param& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (has_type (verismo!arch.errors.MemError./NoRam/0 (%Poly%verismo!arch.errors.MemError. x)) Param&)) :pattern ((verismo!arch.errors.MemError./NoRam/0 (%Poly%verismo!arch.errors.MemError. x)) (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((Param&. Dcr) (Param& Type) (_0! Poly)) (! (=> (has_type _0! Param&) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NotValidated _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))) :pattern ((has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NotValidated _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= (verismo!arch.errors.MemError./NotValidated/0 x) (verismo!arch.errors.MemError./NotValidated/?0 x)) :pattern ((verismo!arch.errors.MemError./NotValidated/0 x)))))
(assert (forall ((Param&. Dcr) (Param& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (has_type (verismo!arch.errors.MemError./NotValidated/0 (%Poly%verismo!arch.errors.MemError. x)) Param&)) :pattern ((verismo!arch.errors.MemError./NotValidated/0 (%Poly%verismo!arch.errors.MemError. x)) (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((Param&. Dcr) (Param& Type) (_0! Poly)) (! (=> (has_type _0! Param&) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NestedPF _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))) :pattern ((has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NestedPF _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= (verismo!arch.errors.MemError./NestedPF/0 x) (verismo!arch.errors.MemError./NestedPF/?0 x)) :pattern ((verismo!arch.errors.MemError./NestedPF/0 x)))))
(assert (forall ((Param&. Dcr) (Param& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (has_type (verismo!arch.errors.MemError./NestedPF/0 (%Poly%verismo!arch.errors.MemError. x)) Param&)) :pattern ((verismo!arch.errors.MemError./NestedPF/0 (%Poly%verismo!arch.errors.MemError. x)) (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((Param&. Dcr) (Param& Type) (_0! Poly)) (! (=> (has_type _0! Param&) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./PageFault _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))) :pattern ((has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./PageFault _0!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= (verismo!arch.errors.MemError./PageFault/0 x) (verismo!arch.errors.MemError./PageFault/?0 x)) :pattern ((verismo!arch.errors.MemError./PageFault/0 x)))))
(assert (forall ((Param&. Dcr) (Param& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (has_type (verismo!arch.errors.MemError./PageFault/0 (%Poly%verismo!arch.errors.MemError. x)) Param&)) :pattern ((verismo!arch.errors.MemError./PageFault/0 (%Poly%verismo!arch.errors.MemError. x)) (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((Param&. Dcr) (Param& Type) (_0! verismo!arch.errors.RmpFault.) (_1! Poly)) (! (=> (has_type _1! Param&) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp _0! _1!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))) :pattern ((has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp _0! _1!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= (verismo!arch.errors.MemError./RmpOp/0 x) (verismo!arch.errors.MemError./RmpOp/?0 x)) :pattern ((verismo!arch.errors.MemError./RmpOp/0 x)))))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (= (verismo!arch.errors.MemError./RmpOp/1 x) (verismo!arch.errors.MemError./RmpOp/?1 x)) :pattern ((verismo!arch.errors.MemError./RmpOp/1 x)))))
(assert (forall ((Param&. Dcr) (Param& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (has_type (verismo!arch.errors.MemError./RmpOp/1 (%Poly%verismo!arch.errors.MemError. x)) Param&)) :pattern ((verismo!arch.errors.MemError./RmpOp/1 (%Poly%verismo!arch.errors.MemError. x)) (has_type x (TYPE%verismo!arch.errors.MemError. Param&. Param&))))))
(define-fun is-verismo!arch.errors.MemError./Others_ ((c verismo!arch.errors.MemError.)) Bool ((_ is verismo!arch.errors.MemError./Others) c))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (=> (is-verismo!arch.errors.MemError./Others_ x) (height_lt (height (verismo!arch.errors.MemError./Others/0 x)) (height (Poly%verismo!arch.errors.MemError. x)))) :pattern ((height (verismo!arch.errors.MemError./Others/0 x))))))
(define-fun is-verismo!arch.errors.MemError./NoRam_ ((c verismo!arch.errors.MemError.)) Bool ((_ is verismo!arch.errors.MemError./NoRam) c))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (=> (is-verismo!arch.errors.MemError./NoRam_ x) (height_lt (height (verismo!arch.errors.MemError./NoRam/0 x)) (height (Poly%verismo!arch.errors.MemError. x)))) :pattern ((height (verismo!arch.errors.MemError./NoRam/0 x))))))
(define-fun is-verismo!arch.errors.MemError./NotValidated_ ((c verismo!arch.errors.MemError.)) Bool ((_ is verismo!arch.errors.MemError./NotValidated) c))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (=> (is-verismo!arch.errors.MemError./NotValidated_ x) (height_lt (height (verismo!arch.errors.MemError./NotValidated/0 x)) (height (Poly%verismo!arch.errors.MemError. x)))) :pattern ((height (verismo!arch.errors.MemError./NotValidated/0 x))))))
(define-fun is-verismo!arch.errors.MemError./NestedPF_ ((c verismo!arch.errors.MemError.)) Bool ((_ is verismo!arch.errors.MemError./NestedPF) c))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (=> (is-verismo!arch.errors.MemError./NestedPF_ x) (height_lt (height (verismo!arch.errors.MemError./NestedPF/0 x)) (height (Poly%verismo!arch.errors.MemError. x)))) :pattern ((height (verismo!arch.errors.MemError./NestedPF/0 x))))))
(define-fun is-verismo!arch.errors.MemError./PageFault_ ((c verismo!arch.errors.MemError.)) Bool ((_ is verismo!arch.errors.MemError./PageFault) c))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (=> (is-verismo!arch.errors.MemError./PageFault_ x) (height_lt (height (verismo!arch.errors.MemError./PageFault/0 x)) (height (Poly%verismo!arch.errors.MemError. x)))) :pattern ((height (verismo!arch.errors.MemError./PageFault/0 x))))))
(define-fun is-verismo!arch.errors.MemError./RmpOp_ ((c verismo!arch.errors.MemError.)) Bool ((_ is verismo!arch.errors.MemError./RmpOp) c))
(assert (forall ((x verismo!arch.errors.MemError.)) (! (=> (is-verismo!arch.errors.MemError./RmpOp_ x) (height_lt (height (verismo!arch.errors.MemError./RmpOp/1 x)) (height (Poly%verismo!arch.errors.MemError. x)))) :pattern ((height (verismo!arch.errors.MemError./RmpOp/1 x))))))
(assert (forall ((x verismo!arch.errors.RmpFault.)) (! (= x (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. x))) :pattern ((Poly%verismo!arch.errors.RmpFault. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.errors.RmpFault.) (= x (Poly%verismo!arch.errors.RmpFault. (%Poly%verismo!arch.errors.RmpFault. x)))) :pattern ((has_type x TYPE%verismo!arch.errors.RmpFault.)))))
(assert (forall ((x verismo!arch.errors.RmpFault.)) (! (has_type (Poly%verismo!arch.errors.RmpFault. x) TYPE%verismo!arch.errors.RmpFault.) :pattern ((has_type (Poly%verismo!arch.errors.RmpFault. x) TYPE%verismo!arch.errors.RmpFault.)))))
(assert (forall ((x verismo!arch.reg.RegName.)) (! (= x (%Poly%verismo!arch.reg.RegName. (Poly%verismo!arch.reg.RegName. x))) :pattern ((Poly%verismo!arch.reg.RegName. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.reg.RegName.) (= x (Poly%verismo!arch.reg.RegName. (%Poly%verismo!arch.reg.RegName. x)))) :pattern ((has_type x TYPE%verismo!arch.reg.RegName.)))))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rsp) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cs) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Ds) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Ss) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Es) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Gs) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cpl) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr0) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr1) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr2) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr3) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr4) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./XCr0) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./IdtrBaseLimit) TYPE%verismo!arch.reg.RegName.))
(assert (has_type (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./GdtrBaseLimit) TYPE%verismo!arch.reg.RegName.))
(assert (forall ((_0! Int)) (! (=> (uInv 32 _0!) (has_type (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR _0!)) TYPE%verismo!arch.reg.RegName.)) :pattern ((has_type (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR _0!)) TYPE%verismo!arch.reg.RegName.)))))
(assert (forall ((x verismo!arch.reg.RegName.)) (! (= (verismo!arch.reg.RegName./MSR/0 x) (verismo!arch.reg.RegName./MSR/?0 x)) :pattern ((verismo!arch.reg.RegName./MSR/0 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.reg.RegName.) (uInv 32 (verismo!arch.reg.RegName./MSR/0 (%Poly%verismo!arch.reg.RegName. x)))) :pattern ((verismo!arch.reg.RegName./MSR/0 (%Poly%verismo!arch.reg.RegName. x)) (has_type x TYPE%verismo!arch.reg.RegName.)))))
(assert (forall ((x verismo!arch.reg.RflagBit.)) (! (= x (%Poly%verismo!arch.reg.RflagBit. (Poly%verismo!arch.reg.RflagBit. x))) :pattern ((Poly%verismo!arch.reg.RflagBit. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!arch.reg.RflagBit.) (= x (Poly%verismo!arch.reg.RflagBit. (%Poly%verismo!arch.reg.RflagBit. x)))) :pattern ((has_type x TYPE%verismo!arch.reg.RflagBit.)))))
(assert (forall ((x verismo!arch.reg.RflagBit.)) (! (has_type (Poly%verismo!arch.reg.RflagBit. x) TYPE%verismo!arch.reg.RflagBit.) :pattern ((has_type (Poly%verismo!arch.reg.RflagBit. x) TYPE%verismo!arch.reg.RflagBit.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= x (%Poly%verismo!pgtable_e.def.SpecPTE. (Poly%verismo!pgtable_e.def.SpecPTE. x))) :pattern ((Poly%verismo!pgtable_e.def.SpecPTE. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (= x (Poly%verismo!pgtable_e.def.SpecPTE. (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((_present! Int) (_write! Int) (_supervisor! Int) (_pwt! Int) (_pcd! Int) (_accessed! Int) (_dirty! Int) (_psize! Int) (_global! Int) (_bit12! Int) (_encrypted! Int) (_page! Int) (_nx! Int)) (! (=> (and (uInv 64 _present!) (uInv 64 _write!) (uInv 64 _supervisor!) (uInv 64 _pwt!) (uInv 64 _pcd!) (uInv 64 _accessed!) (uInv 64 _dirty!) (uInv 64 _psize!) (uInv 64 _global!) (uInv 64 _bit12!) (uInv 64 _encrypted!) (uInv 64 _page!) (uInv 64 _nx!)) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.SpecPTE./SpecPTE _present! _write! _supervisor! _pwt! _pcd! _accessed! _dirty! _psize! _global! _bit12! _encrypted! _page! _nx!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.SpecPTE./SpecPTE _present! _write! _supervisor! _pwt! _pcd! _accessed! _dirty! _psize! _global! _bit12! _encrypted! _page! _nx!)) TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/present x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?present x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/present x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/present (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/present (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/write x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?write x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/write x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/write (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/write (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?supervisor x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?pwt x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?pcd x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?accessed x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?dirty x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/psize x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?psize x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/psize x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/psize (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/psize (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/global x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?global x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/global x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/global (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/global (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?bit12 x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?encrypted x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/page x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?page x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/page x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/page (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/page (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.SpecPTE.)) (! (= (verismo!pgtable_e.def.SpecPTE./SpecPTE/nx x) (verismo!pgtable_e.def.SpecPTE./SpecPTE/?nx x)) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/nx x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.SpecPTE./SpecPTE/nx (%Poly%verismo!pgtable_e.def.SpecPTE. x)))) :pattern ((verismo!pgtable_e.def.SpecPTE./SpecPTE/nx (%Poly%verismo!pgtable_e.def.SpecPTE. x)) (has_type x TYPE%verismo!pgtable_e.def.SpecPTE.)))))
(assert (forall ((x verismo!pgtable_e.def.PTE.)) (! (= x (%Poly%verismo!pgtable_e.def.PTE. (Poly%verismo!pgtable_e.def.PTE. x))) :pattern ((Poly%verismo!pgtable_e.def.PTE. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.PTE.) (= x (Poly%verismo!pgtable_e.def.PTE. (%Poly%verismo!pgtable_e.def.PTE. x)))) :pattern ((has_type x TYPE%verismo!pgtable_e.def.PTE.)))))
(assert (forall ((_value! Int)) (! (=> (uInv 64 _value!) (has_type (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.PTE./PTE _value!)) TYPE%verismo!pgtable_e.def.PTE.)) :pattern ((has_type (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.PTE./PTE _value!)) TYPE%verismo!pgtable_e.def.PTE.)))))
(assert (forall ((x verismo!pgtable_e.def.PTE.)) (! (= (verismo!pgtable_e.def.PTE./PTE/value x) (verismo!pgtable_e.def.PTE./PTE/?value x)) :pattern ((verismo!pgtable_e.def.PTE./PTE/value x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. x)))) :pattern ((verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. x)) (has_type x TYPE%verismo!pgtable_e.def.PTE.)))))
(assert (forall ((x verismo!ptr.def_s.SnpPPtr.)) (! (= x (%Poly%verismo!ptr.def_s.SnpPPtr. (Poly%verismo!ptr.def_s.SnpPPtr. x))) :pattern ((Poly%verismo!ptr.def_s.SnpPPtr. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) (= x (Poly%verismo!ptr.def_s.SnpPPtr. (%Poly%verismo!ptr.def_s.SnpPPtr. x)))) :pattern ((has_type x (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_uptr! Int) (_dummy! Poly)) (! (=> (and (uInv SZ _uptr!) (has_type _dummy! V&)) (has_type (Poly%verismo!ptr.def_s.SnpPPtr. (verismo!ptr.def_s.SnpPPtr./SnpPPtr _uptr! _dummy!)) (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))) :pattern ((has_type (Poly%verismo!ptr.def_s.SnpPPtr. (verismo!ptr.def_s.SnpPPtr./SnpPPtr _uptr! _dummy!)) (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))))))
(assert (forall ((x verismo!ptr.def_s.SnpPPtr.)) (! (= (verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr x) (verismo!ptr.def_s.SnpPPtr./SnpPPtr/?uptr x)) :pattern ((verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) (uInv SZ (verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr (%Poly%verismo!ptr.def_s.SnpPPtr. x)))) :pattern ((verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr (%Poly%verismo!ptr.def_s.SnpPPtr. x)) (has_type x (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))))))
(assert (forall ((x verismo!ptr.def_s.SnpPPtr.)) (! (= (verismo!ptr.def_s.SnpPPtr./SnpPPtr/dummy x) (verismo!ptr.def_s.SnpPPtr./SnpPPtr/?dummy x)) :pattern ((verismo!ptr.def_s.SnpPPtr./SnpPPtr/dummy x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) (has_type (verismo!ptr.def_s.SnpPPtr./SnpPPtr/dummy (%Poly%verismo!ptr.def_s.SnpPPtr. x)) V&)) :pattern ((verismo!ptr.def_s.SnpPPtr./SnpPPtr/dummy (%Poly%verismo!ptr.def_s.SnpPPtr. x)) (has_type x (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))))))
(define-fun is-verismo!ptr.def_s.SnpPPtr./SnpPPtr_ ((c verismo!ptr.def_s.SnpPPtr.)) Bool ((_ is verismo!ptr.def_s.SnpPPtr./SnpPPtr) c))
(assert (forall ((x verismo!ptr.def_s.SnpPPtr.)) (! (=> (is-verismo!ptr.def_s.SnpPPtr./SnpPPtr_ x) (height_lt (height (verismo!ptr.def_s.SnpPPtr./SnpPPtr/dummy x)) (height (Poly%verismo!ptr.def_s.SnpPPtr. x)))) :pattern ((height (verismo!ptr.def_s.SnpPPtr./SnpPPtr/dummy x))))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsToData.)) (! (= x (%Poly%verismo!ptr.def_s.SnpPointsToData. (Poly%verismo!ptr.def_s.SnpPointsToData. x))) :pattern ((Poly%verismo!ptr.def_s.SnpPointsToData. x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&)) (= x (Poly%verismo!ptr.def_s.SnpPointsToData. (%Poly%verismo!ptr.def_s.SnpPointsToData. x)))) :pattern ((has_type x (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type) (_ptr! Int) (_value! core!option.Option.) (_snp! verismo!ptr.snp.snp_u.SnpMemAttr.)) (! (=> (and (has_type (Poly%core!option.Option. _value!) (TYPE%core!option.Option. V&. V&)) (has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. _snp!) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) (has_type (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData _ptr! _value! _snp!)) (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))) :pattern ((has_type (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData _ptr! _value! _snp!)) (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsToData.)) (! (= (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/ptr x) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/?ptr x)) :pattern ((verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/ptr x)))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsToData.)) (! (= (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value x) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/?value x)) :pattern ((verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&)) (has_type (Poly%core!option.Option. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. x))) (TYPE%core!option.Option. V&. V&))) :pattern ((verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. x)) (has_type x (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))))))
(assert (forall ((x verismo!ptr.def_s.SnpPointsToData.)) (! (= (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp x) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/?snp x)) :pattern ((verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp x)))))
(assert (forall ((V&. Dcr) (V& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&)) (has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (%Poly%verismo!ptr.def_s.SnpPointsToData. x))) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) :pattern ((verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (%Poly%verismo!ptr.def_s.SnpPointsToData. x)) (has_type x (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))))))
(define-fun is-verismo!ptr.def_s.SnpPointsToData./SnpPointsToData_ ((c verismo!ptr.def_s.SnpPointsToData.)) Bool ((_ is verismo!ptr.def_s.SnpPointsToData./SnpPointsToData) c))
(assert (forall ((x verismo!ptr.def_s.SnpPointsToData.)) (! (=> (is-verismo!ptr.def_s.SnpPointsToData./SnpPointsToData_ x) (height_lt (height (Poly%core!option.Option. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value x))) (height (Poly%verismo!ptr.def_s.SnpPointsToData. x)))) :pattern ((height (Poly%core!option.Option. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value x)))))))
(assert (forall ((x verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) (! (= x (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. x))) :pattern ((Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (= x (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. x)))) :pattern ((has_type x TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)))))
(assert (forall ((_pptr! Int) (_snp_bytes! vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.) (_snp! verismo!ptr.snp.snp_u.SnpMemAttr.)) (! (=> (has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. _snp!) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.) (has_type (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes _pptr! _snp_bytes! _snp!)) TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) :pattern ((has_type (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes _pptr! _snp_bytes! _snp!)) TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)))))
(assert (forall ((x verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) (! (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr x) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/?pptr x)) :pattern ((verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr x)))))
(assert (forall ((x verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) (! (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes x) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/?snp_bytes x)) :pattern ((verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes x)))))
(assert (forall ((x verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) (! (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp x) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/?snp x)) :pattern ((verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. x))) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) :pattern ((verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. x)) (has_type x TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= x (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. x))) :pattern ((Poly%verismo!registers.core_perm_s.CoreMode. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.) (= x (Poly%verismo!registers.core_perm_s.CoreMode. (%Poly%verismo!registers.core_perm_s.CoreMode. x)))) :pattern ((has_type x TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((_cpu! Int) (_run! Bool) (_vmpl! Int) (_count! Int) (_sent_ghcb_msrs! vstd!seq.Seq<tuple%2<nat./nat.>.>.) (_sent_mem! vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)) (! (=> (and (<= 0 _cpu!) (<= 0 _vmpl!) (<= 0 _count!)) (has_type (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.CoreMode./CoreMode _cpu! _run! _vmpl! _count! _sent_ghcb_msrs! _sent_mem!)) TYPE%verismo!registers.core_perm_s.CoreMode.)) :pattern ((has_type (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.CoreMode./CoreMode _cpu! _run! _vmpl! _count! _sent_ghcb_msrs! _sent_mem!)) TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?cpu x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/cpu x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. x)))) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. x)) (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/run x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?run x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/run x)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?vmpl x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. x)))) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. x)) (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/count x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?count x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/count x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.CoreMode./CoreMode/count (%Poly%verismo!registers.core_perm_s.CoreMode. x)))) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/count (%Poly%verismo!registers.core_perm_s.CoreMode. x)) (has_type x TYPE%verismo!registers.core_perm_s.CoreMode.)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?sent_ghcb_msrs x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs x)))))
(assert (forall ((x verismo!registers.core_perm_s.CoreMode.)) (! (= (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem x) (verismo!registers.core_perm_s.CoreMode./CoreMode/?sent_mem x)) :pattern ((verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem x)))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= x (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. (Poly%verismo!registers.msr_perm_s.RegisterPermValue. x))) :pattern ((Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (= x (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)))) :pattern ((has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type) (_cpu! Int) (_id! verismo!arch.reg.RegName.) (_shared! Bool) (_value! Poly)) (! (=> (and (<= 0 _cpu!) (has_type (Poly%verismo!arch.reg.RegName. _id!) TYPE%verismo!arch.reg.RegName.) (has_type _value! T&)) (has_type (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue _cpu! _id! _shared! _value!)) (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))) :pattern ((has_type (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue _cpu! _id! _shared! _value!)) (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu x) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?cpu x)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (<= 0 (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)))) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/cpu (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)) (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id x) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?id x)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (has_type (Poly%verismo!arch.reg.RegName. (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x))) TYPE%verismo!arch.reg.RegName.)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/id (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)) (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/shared x) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?shared x)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/shared x)))))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (= (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value x) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/?value x)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value x)))))
(assert (forall ((T&. Dcr) (T& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (has_type (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)) T&)) :pattern ((verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)) (has_type x (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))))))
(define-fun is-verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue_ ((c verismo!registers.msr_perm_s.RegisterPermValue.)) Bool ((_ is verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue) c))
(assert (forall ((x verismo!registers.msr_perm_s.RegisterPermValue.)) (! (=> (is-verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue_ x) (height_lt (height (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value x)) (height (Poly%verismo!registers.msr_perm_s.RegisterPermValue. x)))) :pattern ((height (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value x))))))
(assert (forall ((x verismo!tspec.ResultWithErr.)) (! (= x (%Poly%verismo!tspec.ResultWithErr. (Poly%verismo!tspec.ResultWithErr. x))) :pattern ((Poly%verismo!tspec.ResultWithErr. x)))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (= x (Poly%verismo!tspec.ResultWithErr. (%Poly%verismo!tspec.ResultWithErr. x)))) :pattern ((has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (_0! Poly)) (! (=> (has_type _0! RetValue&) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!tspec.ResultWithErr./Ok _0!)) (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))) :pattern ((has_type (Poly%verismo!tspec.ResultWithErr. (verismo!tspec.ResultWithErr./Ok _0!)) (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(assert (forall ((x verismo!tspec.ResultWithErr.)) (! (= (verismo!tspec.ResultWithErr./Ok/0 x) (verismo!tspec.ResultWithErr./Ok/?0 x)) :pattern ((verismo!tspec.ResultWithErr./Ok/0 x)))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (has_type (verismo!tspec.ResultWithErr./Ok/0 (%Poly%verismo!tspec.ResultWithErr. x)) RetValue&)) :pattern ((verismo!tspec.ResultWithErr./Ok/0 (%Poly%verismo!tspec.ResultWithErr. x)) (has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! RetValue&) (has_type _1! ErrorID&)) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!tspec.ResultWithErr./Error _0! _1!)) (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))) :pattern ((has_type (Poly%verismo!tspec.ResultWithErr. (verismo!tspec.ResultWithErr./Error _0! _1!)) (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(assert (forall ((x verismo!tspec.ResultWithErr.)) (! (= (verismo!tspec.ResultWithErr./Error/0 x) (verismo!tspec.ResultWithErr./Error/?0 x)) :pattern ((verismo!tspec.ResultWithErr./Error/0 x)))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (has_type (verismo!tspec.ResultWithErr./Error/0 (%Poly%verismo!tspec.ResultWithErr. x)) RetValue&)) :pattern ((verismo!tspec.ResultWithErr./Error/0 (%Poly%verismo!tspec.ResultWithErr. x)) (has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(assert (forall ((x verismo!tspec.ResultWithErr.)) (! (= (verismo!tspec.ResultWithErr./Error/1 x) (verismo!tspec.ResultWithErr./Error/?1 x)) :pattern ((verismo!tspec.ResultWithErr./Error/1 x)))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (x Poly)) (! (=> (has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (has_type (verismo!tspec.ResultWithErr./Error/1 (%Poly%verismo!tspec.ResultWithErr. x)) ErrorID&)) :pattern ((verismo!tspec.ResultWithErr./Error/1 (%Poly%verismo!tspec.ResultWithErr. x)) (has_type x (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&))))))
(define-fun is-verismo!tspec.ResultWithErr./Ok_ ((c verismo!tspec.ResultWithErr.)) Bool ((_ is verismo!tspec.ResultWithErr./Ok) c))
(assert (forall ((x verismo!tspec.ResultWithErr.)) (! (=> (is-verismo!tspec.ResultWithErr./Ok_ x) (height_lt (height (verismo!tspec.ResultWithErr./Ok/0 x)) (height (Poly%verismo!tspec.ResultWithErr. x)))) :pattern ((height (verismo!tspec.ResultWithErr./Ok/0 x))))))
(define-fun is-verismo!tspec.ResultWithErr./Error_ ((c verismo!tspec.ResultWithErr.)) Bool ((_ is verismo!tspec.ResultWithErr./Error) c))
(assert (forall ((x verismo!tspec.ResultWithErr.)) (! (=> (is-verismo!tspec.ResultWithErr./Error_ x) (height_lt (height (verismo!tspec.ResultWithErr./Error/0 x)) (height (Poly%verismo!tspec.ResultWithErr. x)))) :pattern ((height (verismo!tspec.ResultWithErr./Error/0 x))))))
(assert (forall ((x verismo!tspec.ResultWithErr.)) (! (=> (is-verismo!tspec.ResultWithErr./Error_ x) (height_lt (height (verismo!tspec.ResultWithErr./Error/1 x)) (height (Poly%verismo!tspec.ResultWithErr. x)))) :pattern ((height (verismo!tspec.ResultWithErr./Error/1 x))))))
(assert (forall ((x tuple%0.)) (! (= x (%Poly%tuple%0. (Poly%tuple%0. x))) :pattern ((Poly%tuple%0. x)))))
(assert (forall ((x Poly)) (! (=> (has_type x TYPE%tuple%0.) (= x (Poly%tuple%0. (%Poly%tuple%0. x)))) :pattern ((has_type x TYPE%tuple%0.)))))
(assert (forall ((x tuple%0.)) (! (has_type (Poly%tuple%0. x) TYPE%tuple%0.) :pattern ((has_type (Poly%tuple%0. x) TYPE%tuple%0.)))))
(assert (forall ((x tuple%2.)) (! (= x (%Poly%tuple%2. (Poly%tuple%2. x))) :pattern ((Poly%tuple%2. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (= x (Poly%tuple%2. (%Poly%tuple%2. x)))) :pattern ((has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (_0! Poly) (_1! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&)) (has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))) :pattern ((has_type (Poly%tuple%2. (tuple%2./tuple%2 _0! _1!)) (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/0 x) (tuple%2./tuple%2/?0 x)) :pattern ((tuple%2./tuple%2/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) T%0&)) :pattern ((tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(assert (forall ((x tuple%2.)) (! (= (tuple%2./tuple%2/1 x) (tuple%2./tuple%2/?1 x)) :pattern ((tuple%2./tuple%2/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) T%1&)) :pattern ((tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&))))))
(define-fun is-tuple%2./tuple%2_ ((c tuple%2.)) Bool ((_ is tuple%2./tuple%2) c))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/0 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/0 x))))))
(assert (forall ((x tuple%2.)) (! (=> (is-tuple%2./tuple%2_ x) (height_lt (height (tuple%2./tuple%2/1 x)) (height (Poly%tuple%2. x)))) :pattern ((height (tuple%2./tuple%2/1 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (has_type y (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&)) (ext_eq deep T%0& (tuple%2./tuple%2/0 (%Poly%tuple%2. x)) (tuple%2./tuple%2/0 (%Poly%tuple%2. y))) (ext_eq deep T%1& (tuple%2./tuple%2/1 (%Poly%tuple%2. x)) (tuple%2./tuple%2/1 (%Poly%tuple%2. y)))) (ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)) :pattern ((ext_eq deep (TYPE%tuple%2. T%0&. T%0& T%1&. T%1&) x y)))))
(assert (forall ((x tuple%3.)) (! (= x (%Poly%tuple%3. (Poly%tuple%3. x))) :pattern ((Poly%tuple%3. x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (= x (Poly%tuple%3. (%Poly%tuple%3. x)))) :pattern ((has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (_0! Poly) (_1! Poly) (_2! Poly)) (! (=> (and (has_type _0! T%0&) (has_type _1! T%1&) (has_type _2! T%2&)) (has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))) :pattern ((has_type (Poly%tuple%3. (tuple%3./tuple%3 _0! _1! _2!)) (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/0 x) (tuple%3./tuple%3/?0 x)) :pattern ((tuple%3./tuple%3/0 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) T%0&)) :pattern ((tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/1 x) (tuple%3./tuple%3/?1 x)) :pattern ((tuple%3./tuple%3/1 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) T%1&)) :pattern ((tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(assert (forall ((x tuple%3.)) (! (= (tuple%3./tuple%3/2 x) (tuple%3./tuple%3/?2 x)) :pattern ((tuple%3./tuple%3/2 x)))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (x Poly)) (! (=> (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) T%2&)) :pattern ((tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&))))))
(define-fun is-tuple%3./tuple%3_ ((c tuple%3.)) Bool ((_ is tuple%3./tuple%3) c))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/0 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/0 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/1 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/1 x))))))
(assert (forall ((x tuple%3.)) (! (=> (is-tuple%3./tuple%3_ x) (height_lt (height (tuple%3./tuple%3/2 x)) (height (Poly%tuple%3. x)))) :pattern ((height (tuple%3./tuple%3/2 x))))))
(assert (forall ((T%0&. Dcr) (T%0& Type) (T%1&. Dcr) (T%1& Type) (T%2&. Dcr) (T%2& Type) (deep Bool) (x Poly) (y Poly)) (! (=> (and (has_type x (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (has_type y (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&)) (ext_eq deep T%0& (tuple%3./tuple%3/0 (%Poly%tuple%3. x)) (tuple%3./tuple%3/0 (%Poly%tuple%3. y))) (ext_eq deep T%1& (tuple%3./tuple%3/1 (%Poly%tuple%3. x)) (tuple%3./tuple%3/1 (%Poly%tuple%3. y))) (ext_eq deep T%2& (tuple%3./tuple%3/2 (%Poly%tuple%3. x)) (tuple%3./tuple%3/2 (%Poly%tuple%3. y)))) (ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)) :pattern ((ext_eq deep (TYPE%tuple%3. T%0&. T%0& T%1&. T%1& T%2&. T%2&) x y)))))
(declare-fun tr_bound%vstd!std_specs.option.OptionAdditionalFns. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.cast.VTypeCast. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.default.SpecDefault. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.isconst.IsConstant. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecEq. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecAdd. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecSub. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.ops.VSpecMul. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.range_set.VRange. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.security.sectype.SecMemType. (Dcr Type Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.integer.IntValue. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.integer.IntOrd. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.size_s.SpecSize. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!tspec.wellformed.WellFormed. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!arch.addr_s.def_s.AddrType. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!primitives_e.sectype.ToSecSeq. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!primitives_e.sectype.FromSecSeq. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!addr_e.addr_interface.SpecAddrTrait. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!addr_e.addr_interface.SpecPageTrait. (Dcr Type) Bool)
(declare-fun tr_bound%verismo!addr_e.addr_interface.PageTrait. (Dcr Type Dcr Type) Bool)
(declare-fun tr_bound%verismo!ptr.snp.snp_u.SnpMemAttrTrait. (Dcr Type) Bool)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_Some%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.get_Some_0%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!std_specs.option.OptionAdditionalFns.is_None%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!layout.size_of.? (Dcr Type) Int)
(declare-fun vstd!map.impl&%0.empty.? (Dcr Type Dcr Type) Poly)
(declare-fun vstd!map.impl&%0.new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.dom.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!map.impl&%0.index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!map.impl&%0.remove.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.contains_key.? (Dcr Type Dcr Type Poly Poly) Bool)
(declare-fun vstd!map_lib.impl&%0.union_prefer_right.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.remove_keys.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!map_lib.impl&%0.restrict.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!pervasive.arbitrary.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.empty.? (Dcr Type) Poly)
(declare-fun vstd!seq.Seq.new.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.len.? (Dcr Type Poly) Int)
(declare-fun vstd!seq.Seq.index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_index.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.push.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.update.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.Seq.subrange.? (Dcr Type Poly Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.take.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.skip.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.impl&%0.spec_add.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!seq.Seq.last.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.empty.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.full.? (Dcr Type) Poly)
(declare-fun vstd!set.impl&%0.contains.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.subset_of.? (Dcr Type Poly Poly) Bool)
(declare-fun vstd!set.impl&%0.insert.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.remove.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.union.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.intersect.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.difference.? (Dcr Type Poly Poly) Poly)
(declare-fun vstd!set.impl&%0.complement.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.finite.? (Dcr Type Poly) Bool)
(declare-fun vstd!set.impl&%0.len.? (Dcr Type Poly) Int)
(declare-fun vstd!set.impl&%0.choose.? (Dcr Type Poly) Poly)
(declare-fun vstd!set.impl&%0.mk_map.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!ptr.snp.rmp.rmp_e.spec_perm_requires_pvalidate.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.rmp.rmp_e.spec_perms_requires_pvalidate.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.rmp.rmp_e.spec_perm_ensures_pvalidate.? (Poly Poly Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.rmp.rmp_e.spec_perms_ensures_pvalidate.? (Poly Poly Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires_at.? (Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjust.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjmem.? (Poly Poly Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.rmp.rmp_t.RMP_4K.? () Int)
(declare-fun verismo!tspec.math.bits_p.spec_bit_set.? (Poly Poly) Int)
(declare-fun verismo!tspec.math.bits_p.spec_has_bit_set.? (Poly Poly) Bool)
(declare-fun verismo!tspec.math.pow_s.spec_nat_pow2.? (Poly) Int)
(declare-fun verismo!tspec.math.pow_s.rec%spec_nat_pow2.? (Poly Fuel) Int)
(declare-fun verismo!tspec.security.sectype.impl&%0.is_Symbol.? (Poly) Bool)
(declare-fun verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? (Poly) Bool)
(declare-fun verismo!tspec.security.sectype.impl&%0.is_Secret.? (Poly) Bool)
(declare-fun verismo!tspec.security.sectype.impl&%2.spec_new.? (Dcr Type Dcr Type Poly Poly Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_val.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.impl&%3.spec__unused.? (Dcr Type Dcr Type Poly) core!option.Option.)
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_valsets.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.impl&%3.spec_labels.? (Dcr Type Dcr Type Poly) vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)
(declare-fun verismo!tspec.security.sectype.SecMemType.view.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.SecMemType.view%default%.? (Dcr Type Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.impl&%9.spec_new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.impl&%9.wf_value.? (Dcr Type Dcr Type Poly) Bool)
(declare-fun verismo!tspec.security.sectype.impl&%16.wf_vmpl.? (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-fun verismo!tspec.security.sectype.impl&%16.wf_value.? (Dcr Type Dcr Type Poly) Bool)
(declare-fun verismo!tspec.security.sectype.impl&%16.bop_new.? (Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(declare-fun verismo!tspec.security.sectype.impl&%16.uop_new.? (Dcr Type Dcr Type Dcr Type Poly Poly) verismo!tspec.security.sectype.SpecSecType.)
(declare-fun verismo!tspec.security.sectype.impl&%16.constant.? (Dcr Type Dcr Type Poly) verismo!tspec.security.sectype.SpecSecType.)
(declare-fun verismo!tspec.security.sectype.impl&%17.spec_constant.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.security.sectype.impl&%20.wf.? (Dcr Type Poly) Bool)
(declare-fun verismo!tspec.security.seq.fn_spec_to_seq_index.? (Dcr Type Poly) %%Function%%)
(declare-fun verismo!tspec.stream.basic.bool_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!tspec.stream.basic.char_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!tspec.stream.basic.u8_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!tspec.stream.basic.u16_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!tspec.stream.basic.u32_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!tspec.stream.basic.u64_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!tspec.stream.basic.u128_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!tspec.stream.basic.usize_to_stream.? (Poly) vstd!seq.Seq<u8.>.)
(declare-fun verismo!arch.addr_s.def_s.PAGE_SIZE.? () Int)
(declare-fun verismo!arch.addr_s.def_s.VM_PAGE_NUM.? () Int)
(declare-fun verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? (Poly) core!option.Option.)
(declare-fun verismo!arch.addr_s.def_s.impl&%39.is_Size4k.? (Poly) Bool)
(declare-fun verismo!arch.addr_s.page.impl&%2.value.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.addr_s.page.impl&%2.to_page.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.addr_s.page.impl&%2.to_offset.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.addr_s.page.impl&%2.new2.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.page.impl&%2.new.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.page.impl&%2.null.? (Dcr Type) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.page.impl&%2.to_mem.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecMem.)
(declare-fun verismo!arch.addr_s.page.impl&%3.value.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.addr_s.page.impl&%3.new.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.addr_s.page.impl&%3.new2.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.addr_s.page.impl&%3.to_addr.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.page.impl&%3.to_mem.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecMem.)
(declare-fun verismo!arch.addr_s.page.impl&%8.from_range.? (Dcr Type Poly Poly) verismo!arch.addr_s.def_s.SpecMem.)
(declare-fun verismo!arch.addr_s.page.impl&%8.first.? (Dcr Type Poly) verismo!arch.addr_s.def_s.SpecAddr.)
(declare-fun verismo!arch.addr_s.page.impl&%8.offset.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.addr_s.page.impl&%8.len.? (Dcr Type Poly) Int)
(declare-fun verismo!arch.entities.memid.impl&%0.is_Guest.? (Poly) Bool)
(declare-fun verismo!arch.entities.memid.impl&%2.cpu.? (Poly) Int)
(declare-fun verismo!arch.entities.memid.impl&%2.memid.? (Poly) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.entities.memid.impl&%3.to_asid.? (Poly) Int)
(declare-fun verismo!arch.entities.memid.impl&%3.to_vmpl.? (Poly) verismo!arch.entities.VMPL.)
(declare-fun verismo!arch.rmp.access_u.impl&%0.view.? (Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun verismo!arch.rmp.access_u.impl&%1.inv.? (Poly) Bool)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_immutable.? (Poly) Bool)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_assigned.? (Poly) Bool)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly) Bool)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? (Poly) Bool)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly) Int)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly) verismo!arch.addr_s.def_s.SpecPage.)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly) verismo!arch.addr_s.def_s.PageSize.)
(declare-fun verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(declare-fun verismo!arch.rmp.def_s.impl&%1.spec_set_validated.? (Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.? (Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun verismo!arch.rmp.def_s.impl&%1.spec_set_perms.? (Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun verismo!arch.rmp.def_s.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun verismo!arch.rmp.def_s.impl&%3.spec_val.? (Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun verismo!arch.rmp.def_s.impl&%4.spec_set_val.? (Poly Poly) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun verismo!arch.rmp.def_s.impl&%5.spec_new.? (Poly) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun verismo!arch.rmp.def_s.impl&%7.is_RmpAdjust.? (Dcr Type Poly) Bool)
(declare-fun verismo!arch.rmp.def_s.impl&%7.is_Pvalidate.? (Dcr Type Poly) Bool)
(declare-fun verismo!arch.rmp.def_s.RMP_FAIL_INPUT.? () Int)
(declare-fun verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.? () Int)
(declare-fun verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.? () Int)
(declare-fun verismo!arch.rmp.access_s.impl&%0.rmpadjust.? (Poly Poly Poly Poly Poly Poly Poly) verismo!tspec.ResultWithErr.)
(declare-fun verismo!arch.rmp.access_s.impl&%0.pvalidate.? (Poly Poly Poly Poly Poly) verismo!tspec.ResultWithErr.)
(declare-fun verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel.? (Poly Poly) Bool)
(declare-fun verismo!arch.rmp.entry_s.impl&%0.spec_set_perm.? (Poly Poly Poly) verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)
(declare-fun verismo!arch.rmp.entry_s.impl&%0.spec_perm.? (Poly Poly) vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)
(declare-fun verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private.? (Poly Poly) Bool)
(declare-fun verismo!arch.rmp.entry_s.impl&%0.is_confidential_to.? (Poly Poly) Bool)
(declare-fun verismo!arch.rmp.entry_s.impl&%0.is_valid.? (Poly) Bool)
(declare-fun verismo!arch.rmp.entry_s.impl&%0.fault_rmp_update.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!arch.rmp.perm_s.rmp_perm_init.? (Poly) vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)
(declare-fun verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.? (Dcr Type Poly) verismo!arch.entities.params.PageID.)
(declare-fun verismo!arch.memop.memop.impl&%0.to_addr_memid.? (Dcr Type Poly) verismo!arch.entities.params.AddrMemID.)
(declare-fun verismo!arch.memop.memop.impl&%0.to_memid.? (Dcr Type Poly) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.ramdb.def.impl&%0.spec_data.? (Poly) vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.)
(declare-fun verismo!arch.ramdb.def.impl&%0.spec_write_count.? (Poly) Int)
(declare-fun verismo!arch.ramdb.def.impl&%0.spec_crypto_mask.? (Poly) vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.)
(declare-fun verismo!arch.ramdb.def.impl&%2.spec_new.? (Poly Poly Poly) verismo!arch.ramdb.def.RamDB.)
(declare-fun verismo!arch.tlb.def_s.impl&%1.spec_new.? (Poly) verismo!arch.tlb.def_s.TLB.)
(declare-fun verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly) verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)
(declare-fun verismo!arch.vram.def.impl&%1.spec_new.? (Poly Poly) verismo!arch.vram.def.VRamDB.)
(declare-fun verismo!arch.vram.def.impl&%2.spec_sram.? (Poly) verismo!arch.ramdb.def.RamDB.)
(declare-fun verismo!arch.vram.def.impl&%2.spec_rmp.? (Poly) vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.)
(declare-fun verismo!arch.mem.def_s.impl&%0.spec_vram.? (Poly) verismo!arch.vram.def.VRamDB.)
(declare-fun verismo!arch.mem.def_s.impl&%0.spec_l0_entry.? (Poly) vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.)
(declare-fun verismo!arch.mem.def_s.impl&%0.spec_sysmap.? (Poly) vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.)
(declare-fun verismo!arch.mem.def_s.impl&%0.spec_tlb.? (Poly) verismo!arch.tlb.def_s.TLB.)
(declare-fun verismo!arch.mem.def_s.impl&%2.spec_new.? (Poly Poly Poly Poly) verismo!arch.mem.def_s.MemDB.)
(declare-fun verismo!arch.x64.def_s.impl&%0.is_MemOp.? (Poly) Bool)
(declare-fun verismo!arch.x64.def_s.impl&%0.get_MemOp_0.? (Poly) verismo!arch.memop.MemOp.)
(declare-fun verismo!arch.x64.def_s.impl&%4.spec_memdb.? (Poly) verismo!arch.mem.def_s.MemDB.)
(declare-fun verismo!arch.x64.def_s.impl&%4.spec_regdb.? (Poly) vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.)
(declare-fun verismo!arch.x64.def_s.impl&%4.spec_entities.? (Poly) vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.)
(declare-fun verismo!arch.x64.def_s.impl&%5.spec_set_regdb.? (Poly Poly) verismo!arch.x64.def_s.Archx64.)
(declare-fun verismo!arch.x64.def_s.impl&%5.spec_set_entities.? (Poly Poly) verismo!arch.x64.def_s.Archx64.)
(declare-fun verismo!arch.x64.def_s.impl&%6.spec_new.? (Poly Poly Poly) verismo!arch.x64.def_s.Archx64.)
(declare-fun verismo!arch.x64.x64_s.impl&%0.cpu_memid.? (Poly) verismo!arch.entities.memid.CpuMemID.)
(declare-fun verismo!arch.x64.x64_s.impl&%0.cpu.? (Poly) Int)
(declare-fun verismo!arch.x64.x64_s.impl&%0.to_memid.? (Poly) verismo!arch.entities.memid.MemID.)
(declare-fun verismo!arch.x64.x64_s.impl&%1.is_run.? (Poly Poly) Bool)
(declare-fun verismo!arch.x64.x64_s.impl&%1.stop_cpu.? (Poly Poly Poly) verismo!arch.x64.def_s.Archx64.)
(declare-fun verismo!arch.x64.x64_s.impl&%1.spec_vc_handle.? (Poly Poly Poly) verismo!arch.x64.def_s.Archx64.)
(declare-fun verismo!arch.x64.x64_s.impl&%1.spec_exception_handle.? (Poly Poly Poly) verismo!arch.x64.def_s.Archx64.)
(declare-fun verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle.? (Poly Poly Poly) verismo!arch.x64.def_s.Archx64.)
(declare-fun verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn.? (Poly) tuple%2.)
(declare-fun verismo!arch.x64.x64_s.impl&%1.op_write_reg.? (Poly Poly Poly Poly) verismo!arch.x64.def_s.Archx64.)
(declare-fun verismo!ptr.snp.snp_s.impl&%0.requires_pvalidate.? (Poly Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_s.impl&%0.ensures_pvalidated.? (Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust.? (Poly Poly Poly Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust_mem.? (Poly Poly Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_s.impl&%0.ensures_rmpadjust.? (Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_s.impl&%1.valid_memmap.? (Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_s.impl&%1.rmpadjust_ret.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_s.impl&%1.pvalidate_ret.? (Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_s.impl&%2.pvalidate_ret.? (Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_s.impl&%2.rmpadjust_ret.? (Poly Poly Poly Poly Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? (Poly) Int)
(declare-fun verismo!ptr.snp.snp_u.impl&%0.spec_perms.? (Poly) Int)
(declare-fun verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? (Poly) Int)
(declare-fun verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.? (Poly Poly) verismo!ptr.snp.snp_u.RmpAttrSpec.)
(declare-fun verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.? (Poly Poly) verismo!ptr.snp.snp_u.RmpAttrSpec.)
(declare-fun verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.? (Poly Poly) verismo!ptr.snp.snp_u.RmpAttrSpec.)
(declare-fun verismo!ptr.snp.snp_u.impl&%2.spec_new.? (Poly Poly Poly) verismo!ptr.snp.snp_u.RmpAttrSpec.)
(declare-fun verismo!ptr.snp.snp_u.impl&%3.new.? (Poly) verismo!ptr.snp.snp_u.RmpAttrSpec.)
(declare-fun verismo!ptr.snp.snp_u.impl&%3.to_value.? (Poly) verismo!ptr.snp.snp_u.RmpAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%16.inv.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%16.spec_new.? (Poly) verismo!ptr.snp.snp_u.RmpAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.? (Poly) Int)
(declare-fun verismo!ptr.snp.snp_u.impl&%16.spec_perms.? (Poly) Int)
(declare-fun verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.? (Poly) Int)
(declare-fun verismo!ptr.snp.snp_u.impl&%16.view.? (Poly) verismo!ptr.snp.snp_u.RmpAttrSpec.)
(declare-fun verismo!ptr.snp.snp_u.impl&%18.spec_new.? (Poly Poly Poly) verismo!ptr.snp.snp_u.PTAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%19.spec_w.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%19.spec_x.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? (Poly Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.? (Poly Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.? (Poly Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.? (Poly Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly Poly Poly Poly Poly Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? (Poly) verismo!arch.rmp.def_s.RmpEntry.)
(declare-fun verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? (Poly) vstd!map.Map<int./int.>.)
(declare-fun verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? (Poly) vstd!map.Map<int./int.>.)
(declare-fun verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? (Poly) vstd!map.Map<int./int.>.)
(declare-fun verismo!ptr.snp.snp_u.impl&%24.spec_pte.? (Poly) vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.)
(declare-fun verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%25.perms.? (Poly) vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.)
(declare-fun verismo!ptr.snp.snp_u.impl&%25.is_vmsa.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%25.vmpl.? (Poly) verismo!arch.entities.VMPL.)
(declare-fun verismo!ptr.snp.snp_u.impl&%25.valid_vmpl.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.pte.? (Poly) verismo!ptr.snp.snp_u.PTAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.encrypted.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.deterministic_pte.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private.? (Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? (Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%27.inv_confidential.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel.? (Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? (Dcr Type Poly) Poly)
(declare-fun verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? (Dcr Type Poly) Poly)
(declare-fun verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!ptr.snp.snp_u.impl&%31.wf.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%31.init.? (Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%31.allocator_default.? (Poly) verismo!ptr.snp.snp_u.SwSnpMemAttr.)
(declare-fun verismo!ptr.snp.snp_u.impl&%35.sw_eq.? (Poly Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf.? (Poly) Bool)
(declare-fun verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly) Bool)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? (Poly) verismo!registers.core_perm_s.CoreIdPerm.)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? (Poly) Int)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? (Poly) Int)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? (Poly) vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly Poly Poly Poly) verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.? (Poly) Bool)
(declare-fun verismo!registers.trackedcore.snpcore.impl&%3.inv.? (Poly) Bool)
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_accessed.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_write.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_conform.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_exe.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_sys.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_dpl.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%0.spec_present.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_write.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%1.spec_set_present.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%3.new.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%3.to_value.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7.)
(declare-fun verismo!snp.cpu.gdt.impl&%16.inv.? (Poly) Bool)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_new.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7.)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_accessed.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_write.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_conform.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_exe.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_sys.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_dpl.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%16.spec_present.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%16.view.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%17.spec_avl.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%17.spec_long.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%17.spec_granularity.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%18.spec_set_long.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%19.spec_new.? (Poly Poly Poly Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%20.new.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%20.to_value.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11.)
(declare-fun verismo!snp.cpu.gdt.impl&%33.inv.? (Poly) Bool)
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_new.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11.)
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_avl.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_long.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%33.spec_granularity.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%33.view.? (Poly) verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? (Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%36.spec_new.? (Poly Poly Poly Poly Poly Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%37.new.? (Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.gdt.impl&%37.to_value.? (Poly) verismo!snp.cpu.gdt.Descriptor.)
(declare-fun verismo!snp.cpu.gdt.impl&%50.inv.? (Poly) Bool)
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_new.? (Poly) verismo!snp.cpu.gdt.Descriptor.)
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? (Poly) Int)
(declare-fun verismo!snp.cpu.gdt.impl&%50.view.? (Poly) verismo!snp.cpu.gdt.DescriptorSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%0.spec_snp.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%1.spec_set_snp.? (Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom.? (Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc.? (Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj.? (Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj.? (Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation.? (Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc.? (Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%3.new.? (Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%3.to_value.? (Poly) verismo!snp.cpu.vmsa.SevFeatures.)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.inv.? (Poly) Bool)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_new.? (Poly) verismo!snp.cpu.vmsa.SevFeatures.)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_snp.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_vtom.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%16.view.? (Poly) verismo!snp.cpu.vmsa.SevFeaturesSpec.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_es.? (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_cs.? (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_ss.? (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_ds.? (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_fs.? (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_gs.? (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? (Poly) verismo!snp.cpu.vmsa.VmsaSegmentRegister.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? (Poly) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? (Poly) verismo!tspec.security.sectype.SecType<u8./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_efer.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rip.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rax.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? (Poly) verismo!tspec.security.sectype.SecType<u64./tuple%0.>.)
(declare-fun verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? (Poly) Poly)
(declare-fun verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly) verismo!snp.cpu.vmsa.Vmsa.)
(declare-fun verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.? (Poly) Int)
(declare-fun verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.? (Poly) Int)
(declare-fun verismo!snp.ghcb.proto_s.SM_TERM_INVALID_PARAM.? () Int)
(declare-fun verismo!tspec_e.array.array_t.impl&%2._spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec_e.array.array_t.impl&%2.view.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec_e.array.array_t.impl&%4.spec_len.? (Dcr Type Dcr Type) Int)
(declare-fun verismo!tspec.cast.VTypeCast.vspec_cast_to.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.cast.VTypeCast.vspec_cast_to%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.cast.field_at.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.cast.field_set.? (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-fun verismo!tspec.cast.fn_vspec_cast_to.? (Dcr Type Dcr Type) %%Function%%)
(declare-fun verismo!tspec.default.SpecDefault.spec_default.? (Dcr Type) Poly)
(declare-fun verismo!tspec.default.SpecDefault.spec_default%default%.? (Dcr Type) Poly)
(declare-fun verismo!tspec.fmap.impl&%0.spec_map.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.fmap.impl&%1.spec_set_map.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.fmap.impl&%2.spec_new.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!tspec.fmap.impl&%3.insert.? (Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun verismo!tspec.fmap.impl&%3.spec_index.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.isconst.IsConstant.is_constant.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.isconst.IsConstant.is_constant%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.isconst.IsConstant.is_constant_to.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.isconst.IsConstant.is_constant_to%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecEq.spec_eq.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecEq.spec_eq%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecAdd.spec_add.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecAdd.spec_add%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecSub.spec_sub.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecSub.spec_sub%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecMul.spec_mul.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.ops.VSpecMul.spec_mul%default%.? (Dcr Type Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!tspec.range_set.VRange.end.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.range_set.VRange.end%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_add_int_int_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_sub_int_int_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_mul_int_int_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? (Poly) %%Function%%)
(declare-fun verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? (Poly) %%Function%%)
(declare-fun verismo!tspec.integer.IntValue.as_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.as_int%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.from_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntValue.from_int%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntOrd.ord_int.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.integer.IntOrd.ord_int%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.setlib.uop_to_bop.? (Dcr Type Dcr Type Dcr Type Poly) %%Function%%)
(declare-fun verismo!tspec.setlib.set_op.? (Dcr Type Dcr Type Dcr Type Poly Poly Poly) Poly)
(declare-fun verismo!tspec.size_s.spec_max_count.? (Dcr Type) Int)
(declare-fun verismo!tspec.size_s.SpecSize.spec_size_def.? (Dcr Type) Poly)
(declare-fun verismo!tspec.size_s.SpecSize.spec_size_def%default%.? (Dcr Type) Poly)
(declare-fun verismo!tspec.size_s.spec_size.? (Dcr Type) Int)
(declare-fun verismo!tspec.wellformed.WellFormed.wf.? (Dcr Type Poly) Poly)
(declare-fun verismo!tspec.wellformed.WellFormed.wf%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!arch.entities.impl&%6.spec_from_int.? (Poly) core!option.Option.)
(declare-fun verismo!arch.entities.impl&%9.is_VMPL0.? (Poly) Bool)
(declare-fun verismo!arch.memop.impl&%0.is_RmpOp.? (Dcr Type Poly) Bool)
(declare-fun verismo!arch.memop.impl&%0.get_RmpOp_0.? (Dcr Type Poly) verismo!arch.rmp.def_s.RmpOp.)
(declare-fun verismo!arch.errors.impl&%3.from_err.? (Dcr Type Dcr Type Poly Poly) verismo!arch.errors.MemError.)
(declare-fun verismo!arch.errors.impl&%3.with_param.? (Dcr Type Dcr Type Poly Poly) verismo!arch.errors.MemError.)
(declare-fun verismo!arch.reg.impl&%5.spec_from_int.? (Poly) core!option.Option.)
(declare-fun verismo!arch.reg.MSR_GHCB_BASE.? () Int)
(declare-fun verismo!arch.reg.MSR_EFER_BASE.? () Int)
(declare-fun verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? (Dcr Type Poly) Poly)
(declare-fun verismo!primitives_e.sectype.ToSecSeq.sec_bytes%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!primitives_e.seq.recursive_sec_bytes.? (Dcr Type Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun verismo!primitives_e.seq.rec%recursive_sec_bytes.? (Dcr Type Poly Fuel) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun verismo!addr_e.addr_interface.spec_va_to_pa.? (Poly) Int)
(declare-fun verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.SpecAddrTrait.to_page%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with%default%.? (Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.SpecPageTrait.to_addr%default%.? (Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.spec_to_addr%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with%default%.? (Dcr Type Dcr Type Poly Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.paget_to_int.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!addr_e.addr_interface.PageTrait.paget_to_int%default%.? (Dcr Type Dcr Type Poly) Poly)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_present.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_write.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_supervisor.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_pwt.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_pcd.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_accessed.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_dirty.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_psize.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_global.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_bit12.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_encrypted.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_page.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%0.spec_nx.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_present.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_write.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_pwt.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_pcd.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_accessed.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_dirty.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_psize.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_global.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_bit12.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_page.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%1.spec_set_nx.? (Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%3.new.? (Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.impl&%3.to_value.? (Poly) verismo!pgtable_e.def.PTE.)
(declare-fun verismo!pgtable_e.def.impl&%16.inv.? (Poly) Bool)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_new.? (Poly) verismo!pgtable_e.def.PTE.)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_present.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_write.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_supervisor.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_pwt.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_pcd.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_accessed.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_dirty.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_psize.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_global.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_bit12.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_encrypted.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_page.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.spec_nx.? (Poly) Int)
(declare-fun verismo!pgtable_e.def.impl&%16.view.? (Poly) verismo!pgtable_e.def.SpecPTE.)
(declare-fun verismo!pgtable_e.def.static_cr3_value.? (Poly) Int)
(declare-fun verismo!ptr.def_s.impl&%19.id.? (Dcr Type Poly) Int)
(declare-fun verismo!ptr.def_s.impl&%20.spec_ptr.? (Dcr Type Poly) Int)
(declare-fun verismo!ptr.def_s.impl&%20.spec_value.? (Dcr Type Poly) core!option.Option.)
(declare-fun verismo!ptr.def_s.impl&%20.spec_snp.? (Dcr Type Poly) verismo!ptr.snp.snp_u.SnpMemAttr.)
(declare-fun verismo!ptr.def_s.impl&%22.spec_new.? (Dcr Type Poly Poly Poly) verismo!ptr.def_s.SnpPointsToData.)
(declare-fun verismo!ptr.ptr_s.inv_snp_value.? (Dcr Type Poly Poly) Bool)
(declare-fun verismo!ptr.ptr_u.impl&%2.value.? (Dcr Type Poly) core!option.Option.)
(declare-fun verismo!ptr.ptr_u.impl&%2.wf_value.? (Dcr Type Poly Poly) Bool)
(declare-fun verismo!ptr.raw_ptr_s.impl&%1.spec_new.? (Poly Poly Poly) verismo!ptr.raw_ptr_s.SnpPointsToBytes.)
(declare-fun verismo!ptr.raw_ptr_s.impl&%2.spec_pptr.? (Poly) Int)
(declare-fun verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes.? (Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun verismo!ptr.raw_ptr_s.impl&%2.spec_snp.? (Poly) verismo!ptr.snp.snp_u.SnpMemAttr.)
(declare-fun verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly) verismo!ptr.raw_ptr_s.SnpPointsToBytes.)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly) Int)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly) tuple%2.)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.wf_range.? (Poly Poly) Bool)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.? (Poly Poly) Bool)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.wf.? (Poly) Bool)
(declare-fun verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly) vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.)
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_cpu.? (Poly) Int)
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_run.? (Poly) Bool)
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_vmpl.? (Poly) Int)
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_count.? (Poly) Int)
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? (Poly) vstd!seq.Seq<tuple%2<nat./nat.>.>.)
(declare-fun verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? (Poly) vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)
(declare-fun verismo!registers.core_perm_s.impl&%2.spec_new.? (Poly Poly Poly Poly Poly Poly) verismo!registers.core_perm_s.CoreMode.)
(declare-fun verismo!registers.core_perm_s.impl&%4.view.? (Poly) verismo!registers.core_perm_s.CoreMode.)
(declare-fun verismo!registers.msr_perm_s.impl&%0.shared.? (Dcr Type Poly) Bool)
(declare-fun verismo!registers.msr_perm_s.impl&%0.value.? (Dcr Type Poly) Poly)
(declare-fun verismo!registers.msr_perm_s.impl&%1.wf.? (Dcr Type Poly) Bool)
(declare-fun verismo!registers.msr_perm_s.impl&%2.view.? (Dcr Type Poly) verismo!registers.msr_perm_s.RegisterPermValue.)
(declare-fun verismo!registers.msr_perm_s.impl&%2.cpu.? (Poly) Int)
(declare-fun verismo!registers.msr_perm_s.impl&%2.id.? (Poly) verismo!arch.reg.RegName.)
(declare-fun verismo!registers.msr_perm_s.impl&%2.shared.? (Poly) Bool)
(declare-fun verismo!registers.msr_perm_s.impl&%2.val.? (Dcr Type Poly) Poly)
(declare-fun verismo!registers.msr_perm_s.impl&%2.wf.? (Poly) Bool)
(declare-fun verismo!tspec.spec_unused.? (Dcr Type) Poly)
(declare-fun verismo!tspec.impl&%5.to_result.? (Dcr Type Dcr Type Poly) Poly)
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.isconst.IsConstant.is_constant.? Self%&. Self%& self!) BOOL)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (vmpl! Poly)) (! (=> (and (has_type self! Self%&) (has_type vmpl! NAT)) (has_type (verismo!tspec.isconst.IsConstant.is_constant_to.? Self%&. Self%& self! vmpl!) BOOL)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? Self%&. Self%& self! vmpl!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.wellformed.WellFormed.wf.? Self%&. Self%& self!) BOOL)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? Self%&. Self%& self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (has_type (Poly%verismo!arch.reg.RegName. (verismo!registers.msr_perm_s.impl&%2.id.? self!)) TYPE%verismo!arch.reg.RegName.)) :pattern ((verismo!registers.msr_perm_s.impl&%2.id.? self!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (has_type (verismo!registers.msr_perm_s.impl&%2.val.? T&. T& self!) T&)) :pattern ((verismo!registers.msr_perm_s.impl&%2.val.? T&. T& self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (<= 0 (verismo!registers.msr_perm_s.impl&%2.cpu.? self!))) :pattern ((verismo!registers.msr_perm_s.impl&%2.cpu.? self!)))))
(assert (fuel_bool_default fuel%verismo!registers.msr_perm_s.impl&%2.view.))
(assert (=> (fuel_bool fuel%verismo!registers.msr_perm_s.impl&%2.view.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue (%I (I (verismo!registers.msr_perm_s.impl&%2.cpu.? self!))) (%Poly%verismo!arch.reg.RegName. (Poly%verismo!arch.reg.RegName. (verismo!registers.msr_perm_s.impl&%2.id.? self!))) (%B (B (verismo!registers.msr_perm_s.impl&%2.shared.? self!))) (verismo!registers.msr_perm_s.impl&%2.val.? T&. T& self!))) :pattern ((verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (has_type (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!)) (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&))) :pattern ((verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!registers.msr_perm_s.impl&%0.shared.))
(assert (=> (fuel_bool fuel%verismo!registers.msr_perm_s.impl&%0.shared.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!registers.msr_perm_s.impl&%0.shared.? T&. T& self!) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/shared (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. self!))) :pattern ((verismo!registers.msr_perm_s.impl&%0.shared.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!registers.msr_perm_s.impl&%0.value.))
(assert (=> (fuel_bool fuel%verismo!registers.msr_perm_s.impl&%0.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!) (verismo!registers.msr_perm_s.RegisterPermValue./RegisterPermValue/value (%Poly%verismo!registers.msr_perm_s.RegisterPermValue. self!))) :pattern ((verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!registers.msr_perm_s.RegisterPermValue. T&. T&)) (has_type (verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!) T&)) :pattern ((verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? Self%&. Self%& T&. T& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!) T&)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? Self%&. Self%& T&. T& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!) BOOL)) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? Self%&. Self%& T&. T& self!)))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_None.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_None.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./None_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_None.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.is_Some.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.is_Some.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.is_Some.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(assert (fuel_bool_default fuel%vstd!std_specs.option.impl&%0.get_Some_0.))
(assert (=> (fuel_bool fuel%vstd!std_specs.option.impl&%0.get_Some_0.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!) (core!option.Option./Some/0 (%Poly%core!option.Option. self!))) :pattern ((vstd!std_specs.option.OptionAdditionalFns.get_Some_0.? $ (TYPE%core!option.Option. T&. T&) T&. T& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (<= 0 (vstd!seq.Seq.len.? A&. A& self!))) :pattern ((vstd!seq.Seq.len.? A&. A& self!)))))
(declare-fun req%vstd!seq.Seq.index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%0 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.Seq.index. A&. A& self! i!) (=> %%global_location_label%%0 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.index. A&. A& self! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.Seq.index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.Seq.index.? A&. A& self! i!)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!seq.Seq.empty.? A&. A&) (TYPE%vstd!seq.Seq. A&. A&)) :pattern ((vstd!seq.Seq.empty.? A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (has_type (vstd!seq.Seq.push.? A&. A& self! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.push.? A&. A& self! a!)))))
(declare-fun req%vstd!seq.impl&%0.spec_index. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%1 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (req%vstd!seq.impl&%0.spec_index. A&. A& self! i!) (=> %%global_location_label%%1 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.impl&%0.spec_index. A&. A& self! i!)))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_index.) (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (= (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) (vstd!seq.Seq.index.? A&. A& self! i!)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (has_type (vstd!seq.impl&%0.spec_index.? A&. A& self! i!) A&)) :pattern ((vstd!seq.impl&%0.spec_index.? A&. A& self! i!)))))
(declare-fun req%vstd!seq.Seq.subrange. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%2 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (= (req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!) (=> %%global_location_label%%2 (and (and (<= 0 (%I start_inclusive!)) (<= (%I start_inclusive!) (%I end_exclusive!))) (<= (%I end_exclusive!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.subrange. A&. A& self! start_inclusive! end_exclusive!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (start_inclusive! Poly) (end_exclusive! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type start_inclusive! INT) (has_type end_exclusive! INT)) (has_type (vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.subrange.? A&. A& self! start_inclusive! end_exclusive!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.Seq.add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.add.? A&. A& self! rhs!)))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.spec_add.) (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (= (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (vstd!seq.Seq.add.? A&. A& self! rhs!)) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type rhs! (TYPE%vstd!seq.Seq. A&. A&))) (has_type (vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.spec_add.? A&. A& self! rhs!)))))
(declare-fun req%vstd!seq.Seq.update. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%3 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (= (req%vstd!seq.Seq.update. A&. A& self! i! a!) (=> %%global_location_label%%3 (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& self!))))) :pattern ((req%vstd!seq.Seq.update. A&. A& self! i! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (has_type (vstd!seq.Seq.update.? A&. A& self! i! a!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.update.? A&. A& self! i! a!)))))
(assert (forall ((V&. Dcr) (V& Type)) (! (<= 0 (vstd!layout.size_of.? V&. V&)) :pattern ((vstd!layout.size_of.? V&. V&)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (has_type (vstd!map.impl&%0.empty.? K&. K& V&. V&) (TYPE%vstd!map.Map. K&. K& V&. V&)) :pattern ((vstd!map.impl&%0.empty.? K&. K& V&. V&)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) (TYPE%vstd!set.Set. K&. K&))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& self!)))))
(declare-fun req%vstd!map.impl&%0.index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%4 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!) (=> %%global_location_label%%4 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.index. K&. K& V&. V& self! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (has_type (vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.insert.? K&. K& V&. V& self! key! value!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.remove.? K&. K& V&. V& self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_insert. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!) (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.insert.? K&. K& V&. V& pre%self! key! value!)))) :pattern ((ens%vstd!map.impl&%0.tracked_insert. K&. K& V&. V& pre%self! self! key! value!)))))
(declare-fun req%vstd!map.impl&%0.spec_index. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%5 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!) (=> %%global_location_label%%5 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) key!))) :pattern ((req%vstd!map.impl&%0.spec_index. K&. K& V&. V& self! key!)))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.spec_index.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (= (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) (vstd!map.impl&%0.index.? K&. K& V&. V& self! key!)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (key! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (has_type (vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!) V&)) :pattern ((vstd!map.impl&%0.spec_index.? K&. K& V&. V& self! key!)))))
(declare-fun req%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%6 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (key! Poly)) (! (= (req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!) (=> %%global_location_label%%6 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& pre%self!) key!))) :pattern ((req%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! key!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_remove. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (key! Poly) (v! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!) (and (has_type v! V&) (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map.impl&%0.remove.? K&. K& V&. V& pre%self! key!)) (= v! (vstd!map.impl&%0.index.? K&. K& V&. V& pre%self! key!)))) :pattern ((ens%vstd!map.impl&%0.tracked_remove. K&. K& V&. V& pre%self! self! key! v!)))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.subset_of.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.subset_of.) (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (= (vstd!set.impl&%0.subset_of.? A&. A& self! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (=> (vstd!set.impl&%0.contains.? A&. A& self! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& self! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$))))) :pattern ((vstd!set.impl&%0.subset_of.? A&. A& self! s2!))))))
(assert (forall ((A&. Dcr) (A& Type) (V&. Dcr) (V& Type) (F&. Dcr) (F& Type) (self! Poly) (f! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type f! F&)) (has_type (vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!) (TYPE%vstd!map.Map. A&. A& V&. V&))) :pattern ((vstd!set.impl&%0.mk_map.? A&. A& V&. V& F&. F& self! f!)))))
(assert (forall ((A&. Dcr) (A& Type) (F&. Dcr) (F& Type) (f! Poly)) (! (=> (has_type f! F&) (has_type (vstd!set.impl&%0.new.? A&. A& F&. F& f!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.new.? A&. A& F&. F& f!)))))
(assert (fuel_bool_default fuel%vstd!map.impl&%0.new.))
(assert (=> (fuel_bool fuel%vstd!map.impl&%0.new.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (= (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (vstd!set.impl&%0.mk_map.? K&. K& V&. V& impl%3&. impl%3& (vstd!set.impl&%0.new.? K&. K& impl%2&. impl%2& fk!) fv!)) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (impl%2&. Dcr) (impl%2& Type) (impl%3&. Dcr) (impl%3& Type) (fk! Poly) (fv! Poly)) (! (=> (and (has_type fk! impl%2&) (has_type fv! impl%3&)) (has_type (vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map.impl&%0.new.? K&. K& V&. V& impl%2&. impl%2& impl%3&. impl%3& fk! fv!)))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.remove_keys.))
(declare-fun %%lambda%%0 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (not (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$))))) :pattern ((%%apply%%0 (%%lambda%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%1 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$) (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 k$)) :pattern ((%%apply%%0 (%%lambda%%1 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.remove_keys.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%0 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& self! keys!)))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.restrict.))
(declare-fun %%lambda%%2 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (and (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%2 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.restrict.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (= (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%2 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& keys!))) (Poly%fun%1. (mk_fun (%%lambda%%1 K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (keys! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type keys! (TYPE%vstd!set.Set. K&. K&))) (has_type (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& self! keys!)))))
(declare-fun req%vstd!map.impl&%0.tracked_remove_keys. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%7 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (keys! Poly)) (! (= (req%vstd!map.impl&%0.tracked_remove_keys. K&. K& V&. V& pre%self! keys!) (=> %%global_location_label%%7 (vstd!set.impl&%0.subset_of.? K&. K& keys! (vstd!map.impl&%0.dom.? K&. K& V&. V& pre%self!)))) :pattern ((req%vstd!map.impl&%0.tracked_remove_keys. K&. K& V&. V& pre%self! keys!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_remove_keys. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (keys! Poly) (out_map! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_remove_keys. K&. K& V&. V& pre%self! self! keys! out_map!) (and (has_type out_map! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map_lib.impl&%0.remove_keys.? K&. K& V&. V& pre%self! keys!)) (= out_map! (vstd!map_lib.impl&%0.restrict.? K&. K& V&. V& pre%self! keys!)))) :pattern ((ens%vstd!map.impl&%0.tracked_remove_keys. K&. K& V&. V& pre%self! self! keys! out_map!)))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.union_prefer_right.))
(declare-fun %%lambda%%3 (Dcr Type Poly Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$) (B (or (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 k$)))) :pattern ((%%apply%%0 (%%lambda%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5) k$)))))
(declare-fun %%lambda%%4 (Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Poly) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (k$ Poly)) (! (= (%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$) (ite (vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 k$) (vstd!map.impl&%0.index.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 k$) (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 k$))) :pattern ((%%apply%%0 (%%lambda%%4 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12) k$)))))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.union_prefer_right.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (= (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (vstd!map.impl&%0.new.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& $ BOOL) $ (TYPE%fun%1. K&. K& V&. V&) (Poly%fun%1. (mk_fun (%%lambda%%3 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)))) (Poly%fun%1. (mk_fun (%%lambda%%4 K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!) K&. K& V&. V& m2! K&. K& V&. V& self!))))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (m2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& self! m2!)))))
(declare-fun ens%vstd!map.impl&%0.tracked_union_prefer_right. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (pre%self! Poly) (self! Poly) (right! Poly)) (! (= (ens%vstd!map.impl&%0.tracked_union_prefer_right. K&. K& V&. V& pre%self! self! right!) (and (has_type self! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= self! (vstd!map_lib.impl&%0.union_prefer_right.? K&. K& V&. V& pre%self! right!)))) :pattern ((ens%vstd!map.impl&%0.tracked_union_prefer_right. K&. K& V&. V& pre%self! self! right!)))))
(declare-fun req%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%8 Bool)
(declare-const %%global_location_label%%9 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (and (=> %%global_location_label%%8 (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!))) (=> %%global_location_label%%9 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)))) :pattern ((req%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_finite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!))) :pattern ((ens%vstd!map.axiom_map_index_decreases_finite. K&. K& V&. V& m! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (and (vstd!set.impl&%0.finite.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!)) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height m!)))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(declare-fun req%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%10 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (=> %%global_location_label%%10 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((req%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(declare-fun ens%vstd!map.axiom_map_index_decreases_infinite. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!)))) :pattern ((ens%vstd!map.axiom_map_index_decreases_infinite. K&. K& V&. V& m! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!) (height_lt (height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!)) (height (fun_from_recursive_field m!))))) :pattern ((height (vstd!map.impl&%0.index.? K&. K& V&. V& m! key!))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.empty.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.empty.? A&. A&)))))
(declare-fun ens%vstd!map.axiom_map_empty. (Dcr Type Dcr Type) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (ens%vstd!map.axiom_map_empty. K&. K& V&. V&) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&))) :pattern ((ens%vstd!map.axiom_map_empty. K&. K& V&. V&)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type)) (! (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&)) (vstd!set.impl&%0.empty.? K&. K&)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.empty.? K&. K& V&. V&))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.insert.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.insert.? A&. A& self! a!)))))
(declare-fun ens%vstd!map.axiom_map_insert_domain. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_insert_domain. K&. K& V&. V& m! key! value!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!)) (vstd!set.impl&%0.insert.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!))))))
(declare-fun ens%vstd!map.axiom_map_insert_same. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((ens%vstd!map.axiom_map_insert_same. K&. K& V&. V& m! key! value!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&) (has_type value! V&)) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!) value!)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key! value!) key!)))))
(declare-fun req%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%11 Bool)
(declare-const %%global_location_label%%12 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (and (=> %%global_location_label%%11 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%12 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(declare-fun ens%vstd!map.axiom_map_insert_different. (Dcr Type Dcr Type Poly Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (= (ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_insert_different. K&. K& V&. V& m! key1! key2! value!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly) (value! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&) (has_type value! V&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.insert.? K&. K& V&. V& m! key2! value!) key1!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (a! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (has_type (vstd!set.impl&%0.remove.? A&. A& self! a!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.remove.? A&. A& self! a!)))))
(declare-fun ens%vstd!map.axiom_map_remove_domain. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (= (ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((ens%vstd!map.axiom_map_remove_domain. K&. K& V&. V& m! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key! K&)) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!)) (vstd!set.impl&%0.remove.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key!))) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key!))))))
(declare-fun req%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%13 Bool)
(declare-const %%global_location_label%%14 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (and (=> %%global_location_label%%13 (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!)) (=> %%global_location_label%%14 (not (= key1! key2!))))) :pattern ((req%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(declare-fun ens%vstd!map.axiom_map_remove_different. (Dcr Type Dcr Type Poly Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (= (ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!))) :pattern ((ens%vstd!map.axiom_map_remove_different. K&. K& V&. V& m! key1! key2!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m! Poly) (key1! Poly) (key2! Poly)) (! (=> (and (has_type m! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type key1! K&) (has_type key2! K&)) (=> (and (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m!) key1!) (not (= key1! key2!))) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!) (vstd!map.impl&%0.index.? K&. K& V&. V& m! key1!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!map.impl&%0.remove.? K&. K& V&. V& m! key2!) key1!)))))
(declare-fun ens%vstd!map.axiom_map_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal. K&. K& V&. V& m1! m2!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq false (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (= (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq false (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(declare-fun ens%vstd!map.axiom_map_ext_equal_deep. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (= (ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ens%vstd!map.axiom_map_ext_equal_deep. K&. K& V&. V& m1! m2!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (m1! Poly) (m2! Poly)) (! (=> (and (has_type m1! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type m2! (TYPE%vstd!map.Map. K&. K& V&. V&))) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!) (and (ext_eq true (TYPE%vstd!set.Set. K&. K&) (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) (vstd!map.impl&%0.dom.? K&. K& V&. V& m2!)) (forall ((k$ Poly)) (! (=> (has_type k$ K&) (=> (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& m1!) k$) (ext_eq true V& (vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$) (vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m1! k$)) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& m2! k$))))))) :pattern ((ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) m1! m2!)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!pervasive.arbitrary.? A&. A&) A&) :pattern ((vstd!pervasive.arbitrary.? A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type) (impl%1&. Dcr) (impl%1& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! impl%1&)) (has_type (vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.Seq.new.? A&. A& impl%1&. impl%1& len! f!)))))
(declare-fun req%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(declare-const %%global_location_label%%15 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (=> %%global_location_label%%15 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_index_decreases. (Dcr Type Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! (I i!))) (height s!))) :pattern ((ens%vstd!seq.axiom_seq_index_decreases. A&. A& s! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (height_lt (height (vstd!seq.Seq.index.? A&. A& s! i!)) (height s!)))) :pattern ((height (vstd!seq.Seq.index.? A&. A& s! i!))))))
(declare-fun ens%vstd!seq.axiom_seq_empty. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!seq.axiom_seq_empty. A&. A&) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0)) :pattern ((ens%vstd!seq.axiom_seq_empty. A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&)) 0) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.empty.? A&. A&))))))
(declare-fun ens%vstd!seq.axiom_seq_new_len. (Dcr Type Int %%Function%%) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%)) (! (= (ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!))) len!)) :pattern ((ens%vstd!seq.axiom_seq_new_len. A&. A& len! f!)))))
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!)) (%I len!))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!))))))
(declare-fun req%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(declare-const %%global_location_label%%16 Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (=> %%global_location_label%%16 (and (<= 0 i!) (< i! len!)))) :pattern ((req%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_new_index. (Dcr Type Int %%Function%% Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (len! Int) (f! %%Function%%) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) (I len!) (Poly%fun%1. f!)) (I i!)) (%%apply%%0 f! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_new_index. A&. A& len! f! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (len! Poly) (f! Poly) (i! Poly)) (! (=> (and (has_type len! NAT) (has_type f! (TYPE%fun%1. $ INT A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (%I len!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!) (%%apply%%0 (%Poly%fun%1. f!) i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.new.? A&. A& $ (TYPE%fun%1. $ INT A&. A&) len! f!) i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((ens%vstd!seq.axiom_seq_push_len. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&)) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s!) 1)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!))))))
(declare-fun req%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%17 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (=> %%global_location_label%%17 (= i! (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((req%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_same. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_push_index_same. A&. A& s! a! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (= (%I i!) (vstd!seq.Seq.len.? A&. A& s!)) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(declare-fun req%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%18 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (=> %%global_location_label%%18 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_push_index_different. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_push_index_different. A&. A& s! a! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type a! A&) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!) (vstd!seq.Seq.index.? A&. A& s! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.push.? A&. A& s! a!) i!)))))
(declare-fun req%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%19 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (=> %%global_location_label%%19 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_len. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!)) (vstd!seq.Seq.len.? A&. A& s!))) :pattern ((ens%vstd!seq.axiom_seq_update_len. A&. A& s! i! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!)) (vstd!seq.Seq.len.? A&. A& s!)))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!))))))
(declare-fun req%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(declare-const %%global_location_label%%20 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (=> %%global_location_label%%20 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_same. (Dcr Type Poly Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i!) a!) (I i!)) a!)) :pattern ((ens%vstd!seq.axiom_seq_update_same. A&. A& s! i! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT) (has_type a! A&)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!) a!))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i! a!) i!)))))
(declare-fun req%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(declare-const %%global_location_label%%21 Bool)
(declare-const %%global_location_label%%22 Bool)
(declare-const %%global_location_label%%23 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (and (=> %%global_location_label%%21 (and (<= 0 i1!) (< i1! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%22 (and (<= 0 i2!) (< i2! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%23 (not (= i1! i2!))))) :pattern ((req%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(declare-fun ens%vstd!seq.axiom_seq_update_different. (Dcr Type Poly Int Int Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Int) (i2! Int) (a! Poly)) (! (= (ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! (I i2!) a!) (I i1!)) (vstd!seq.Seq.index.? A&. A& s! (I i1!)))) :pattern ((ens%vstd!seq.axiom_seq_update_different. A&. A& s! i1! i2! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (i1! Poly) (i2! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i1! INT) (has_type i2! INT) (has_type a! A&)) (=> (and (and (and (<= 0 (%I i1!)) (< (%I i1!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i2!)) (< (%I i2!) (vstd!seq.Seq.len.? A&. A& s!)))) (not (= i1! i2!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!) (vstd!seq.Seq.index.? A&. A& s! i1!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.update.? A&. A& s! i2! a!) i1!)))))
(declare-fun ens%vstd!seq.axiom_seq_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq false (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(declare-fun ens%vstd!seq.axiom_seq_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ens%vstd!seq.axiom_seq_ext_equal_deep. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!) (and (= (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? A&. A& s1!))) (ext_eq true A& (vstd!seq.Seq.index.? A&. A& s1! i$) (vstd!seq.Seq.index.? A&. A& s2! i$)))) :pattern ((vstd!seq.Seq.index.? A&. A& s1! i$)) :pattern ((vstd!seq.Seq.index.? A&. A& s2! i$))))))) :pattern ((ext_eq true (TYPE%vstd!seq.Seq. A&. A&) s1! s2!)))))
(declare-fun req%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(declare-const %%global_location_label%%24 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (=> %%global_location_label%%24 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!))))) :pattern ((req%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_len. (Dcr Type Poly Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!))) (Sub k! j!))) :pattern ((ens%vstd!seq.axiom_seq_subrange_len. A&. A& s! j! k!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT)) (=> (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!)) (Sub (%I k!) (%I j!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!))))))
(declare-fun req%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(declare-const %%global_location_label%%25 Bool)
(declare-const %%global_location_label%%26 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (and (=> %%global_location_label%%25 (and (and (<= 0 j!) (<= j! k!)) (<= k! (vstd!seq.Seq.len.? A&. A& s!)))) (=> %%global_location_label%%26 (and (<= 0 i!) (< i! (Sub k! j!)))))) :pattern ((req%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_subrange_index. (Dcr Type Poly Int Int Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Int) (k! Int) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! (I j!) (I k!)) (I i!)) (vstd!seq.Seq.index.? A&. A& s! (I (Add i! j!))))) :pattern ((ens%vstd!seq.axiom_seq_subrange_index. A&. A& s! j! k! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (j! Poly) (k! Poly) (i! Poly)) (! (=> (and (has_type s! (TYPE%vstd!seq.Seq. A&. A&)) (has_type j! INT) (has_type k! INT) (has_type i! INT)) (=> (and (and (and (<= 0 (%I j!)) (<= (%I j!) (%I k!))) (<= (%I k!) (vstd!seq.Seq.len.? A&. A& s!))) (and (<= 0 (%I i!)) (< (%I i!) (Sub (%I k!) (%I j!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!) (vstd!seq.Seq.index.? A&. A& s! (I (Add (%I i!) (%I j!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.subrange.? A&. A& s! j! k!) i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((ens%vstd!seq.axiom_seq_add_len. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&))) (= (vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!)) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) :pattern ((vstd!seq.Seq.len.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!))))))
(declare-fun req%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%27 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (=> %%global_location_label%%27 (and (<= 0 i!) (< i! (vstd!seq.Seq.len.? A&. A& s1!))))) :pattern ((req%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index1. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s1! (I i!)))) :pattern ((ens%vstd!seq.axiom_seq_add_index1. A&. A& s1! s2! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= 0 (%I i!)) (< (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s1! i!)))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(declare-fun req%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(declare-const %%global_location_label%%28 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (=> %%global_location_label%%28 (and (<= (vstd!seq.Seq.len.? A&. A& s1!) i!) (< i! (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))))) :pattern ((req%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(declare-fun ens%vstd!seq.axiom_seq_add_index2. (Dcr Type Poly Poly Int) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Int)) (! (= (ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) (I i!)) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub i! (vstd!seq.Seq.len.? A&. A& s1!)))))) :pattern ((ens%vstd!seq.axiom_seq_add_index2. A&. A& s1! s2! i!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (i! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!seq.Seq. A&. A&)) (has_type s2! (TYPE%vstd!seq.Seq. A&. A&)) (has_type i! INT)) (=> (and (<= (vstd!seq.Seq.len.? A&. A& s1!) (%I i!)) (< (%I i!) (nClip (Add (vstd!seq.Seq.len.? A&. A& s1!) (vstd!seq.Seq.len.? A&. A& s2!))))) (= (vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!) (vstd!seq.Seq.index.? A&. A& s2! (I (Sub (%I i!) (vstd!seq.Seq.len.? A&. A& s1!))))))) :pattern ((vstd!seq.Seq.index.? A&. A& (vstd!seq.Seq.add.? A&. A& s1! s2!) i!)))))
(declare-fun req%vstd!seq.Seq.last. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%29 Bool)
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (req%vstd!seq.Seq.last. A&. A& self!) (=> %%global_location_label%%29 (< 0 (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((req%vstd!seq.Seq.last. A&. A& self!)))))
(assert (fuel_bool_default fuel%vstd!seq.Seq.last.))
(assert (=> (fuel_bool fuel%vstd!seq.Seq.last.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!seq.Seq.last.? A&. A& self!) (vstd!seq.Seq.index.? A&. A& self! (I (Sub (vstd!seq.Seq.len.? A&. A& self!) 1)))) :pattern ((vstd!seq.Seq.last.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type (vstd!seq.Seq.last.? A&. A& self!) A&)) :pattern ((vstd!seq.Seq.last.? A&. A& self!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.union.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.union.? A&. A& self! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.intersect.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.intersect.? A&. A& self! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (s2! Poly)) (! (=> (and (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (has_type (vstd!set.impl&%0.difference.? A&. A& self! s2!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.difference.? A&. A& self! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.complement.? A&. A& self!) (TYPE%vstd!set.Set. A&. A&))) :pattern ((vstd!set.impl&%0.complement.? A&. A& self!)))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (<= 0 (vstd!set.impl&%0.len.? A&. A& self!))) :pattern ((vstd!set.impl&%0.len.? A&. A& self!)))))
(declare-fun ens%vstd!set.axiom_set_empty. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (= (ens%vstd!set.axiom_set_empty. A&. A& a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((ens%vstd!set.axiom_set_empty. A&. A& a!)))))
(assert (forall ((A&. Dcr) (A& Type) (a! Poly)) (! (=> (has_type a! A&) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.empty.? A&. A&) a!)))))
(declare-fun ens%vstd!set.axiom_set_new. (Dcr Type %%Function%% Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (f! %%Function%%) (a! Poly)) (! (= (ens%vstd!set.axiom_set_new. A&. A& f! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) (Poly%fun%1. f!)) a!) (%B (%%apply%%0 f! a!)))) :pattern ((ens%vstd!set.axiom_set_new. A&. A& f! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (f! Poly) (a! Poly)) (! (=> (and (has_type f! (TYPE%fun%1. A&. A& $ BOOL)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!) (%B (%%apply%%0 (%Poly%fun%1. f!) a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.new.? A&. A& $ (TYPE%fun%1. A&. A& $ BOOL) f!) a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_same. A&. A& s! a!) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((ens%vstd!set.axiom_set_insert_same. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!) a!)))))
(declare-fun req%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%30 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (=> %%global_location_label%%30 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_insert_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_insert_different. A&. A& s! a1! a2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a2!) a1!)))))
(declare-fun ens%vstd!set.axiom_set_remove_same. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_same. A&. A& s! a!) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((ens%vstd!set.axiom_set_remove_same. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (not (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!)))))
(declare-fun req%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%31 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (=> %%global_location_label%%31 (vstd!set.impl&%0.contains.? A&. A& s! a!))) :pattern ((req%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_insert. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!)) :pattern ((ens%vstd!set.axiom_set_remove_insert. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.contains.? A&. A& s! a!) (= (vstd!set.impl&%0.insert.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!) a!) s!))) :pattern ((vstd!set.impl&%0.remove.? A&. A& s! a!)))))
(declare-fun req%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(declare-const %%global_location_label%%32 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (=> %%global_location_label%%32 (not (= a1! a2!)))) :pattern ((req%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(declare-fun ens%vstd!set.axiom_set_remove_different. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (= (ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!))) :pattern ((ens%vstd!set.axiom_set_remove_different. A&. A& s! a1! a2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a1! Poly) (a2! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a1! A&) (has_type a2! A&)) (=> (not (= a1! a2!)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!) (vstd!set.impl&%0.contains.? A&. A& s! a1!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a2!) a1!)))))
(declare-fun ens%vstd!set.axiom_set_union. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_union. A&. A& s1! s2! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!) (or (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!) a!)))))
(declare-fun ens%vstd!set.axiom_set_intersect. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((ens%vstd!set.axiom_set_intersect. A&. A& s1! s2! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (vstd!set.impl&%0.contains.? A&. A& s2! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!) a!)))))
(declare-fun ens%vstd!set.axiom_set_difference. (Dcr Type Poly Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((ens%vstd!set.axiom_set_difference. A&. A& s1! s2! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly) (a! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!) (and (vstd!set.impl&%0.contains.? A&. A& s1! a!) (not (vstd!set.impl&%0.contains.? A&. A& s2! a!))))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!) a!)))))
(declare-fun ens%vstd!set.axiom_set_complement. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_complement. A&. A& s! a!) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((ens%vstd!set.axiom_set_complement. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (= (vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!) (not (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& (vstd!set.impl&%0.complement.? A&. A& s!) a!)))))
(declare-fun ens%vstd!set.axiom_set_ext_equal. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ens%vstd!set.axiom_set_ext_equal. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!) (forall ((a$ Poly)) (! (=> (has_type a$ A&) (= (vstd!set.impl&%0.contains.? A&. A& s1! a$) (vstd!set.impl&%0.contains.? A&. A& s2! a$))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s1! a$)) :pattern ((vstd!set.impl&%0.contains.? A&. A& s2! a$)))))) :pattern ((ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_ext_equal_deep. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ens%vstd!set.axiom_set_ext_equal_deep. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (= (ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!) (ext_eq false (TYPE%vstd!set.Set. A&. A&) s1! s2!))) :pattern ((ext_eq true (TYPE%vstd!set.Set. A&. A&) s1! s2!)))))
(declare-fun ens%vstd!set.axiom_mk_map_domain. (Dcr Type Dcr Type Poly %%Function%%) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%)) (! (= (ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!))) s!)) :pattern ((ens%vstd!set.axiom_mk_map_domain. K&. K& V&. V& s! f!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&))) (= (vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!)) s!)) :pattern ((vstd!map.impl&%0.dom.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!))))))
(declare-fun req%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(declare-const %%global_location_label%%33 Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (=> %%global_location_label%%33 (vstd!set.impl&%0.contains.? K&. K& s! key!))) :pattern ((req%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(declare-fun ens%vstd!set.axiom_mk_map_index. (Dcr Type Dcr Type Poly %%Function%% Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! %%Function%%) (key! Poly)) (! (= (ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! (Poly%fun%1. f!)) key!) (%%apply%%0 f! key!))) :pattern ((ens%vstd!set.axiom_mk_map_index. K&. K& V&. V& s! f! key!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (s! Poly) (f! Poly) (key! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. K&. K&)) (has_type f! (TYPE%fun%1. K&. K& V&. V&)) (has_type key! K&)) (=> (vstd!set.impl&%0.contains.? K&. K& s! key!) (= (vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!) (%%apply%%0 (%Poly%fun%1. f!) key!)))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (vstd!set.impl&%0.mk_map.? K&. K& V&. V& $ (TYPE%fun%1. K&. K& V&. V&) s! f!) key!)))))
(declare-fun ens%vstd!set.axiom_set_empty_finite. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_finite. A&. A&) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((ens%vstd!set.axiom_set_empty_finite. A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(declare-fun req%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%34 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (=> %%global_location_label%%34 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_insert_finite. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(declare-fun req%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%35 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (=> %%global_location_label%%35 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))) :pattern ((ens%vstd!set.axiom_set_remove_finite. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(declare-fun req%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%36 Bool)
(declare-const %%global_location_label%%37 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (and (=> %%global_location_label%%36 (vstd!set.impl&%0.finite.? A&. A& s1!)) (=> %%global_location_label%%37 (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_union_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_union_finite. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (and (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.union.? A&. A& s1! s2!))))))
(declare-fun req%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%38 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (=> %%global_location_label%%38 (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)))) :pattern ((req%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_intersect_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_intersect_finite. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (or (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& s2!)) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.intersect.? A&. A& s1! s2!))))))
(declare-fun req%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%39 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (=> %%global_location_label%%39 (vstd!set.impl&%0.finite.? A&. A& s1!))) :pattern ((req%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(declare-fun ens%vstd!set.axiom_set_difference_finite. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (= (ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))) :pattern ((ens%vstd!set.axiom_set_difference_finite. A&. A& s1! s2!)))))
(assert (forall ((A&. Dcr) (A& Type) (s1! Poly) (s2! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. A&. A&)) (has_type s2! (TYPE%vstd!set.Set. A&. A&))) (=> (vstd!set.impl&%0.finite.? A&. A& s1!) (vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!)))) :pattern ((vstd!set.impl&%0.finite.? A&. A& (vstd!set.impl&%0.difference.? A&. A& s1! s2!))))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.choose.))
(declare-fun %%choose%%0 (Type Dcr Type Poly Dcr Type Poly) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Poly) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly)) (! (=> (exists ((a$ Poly)) (! (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$)))) (exists ((a$ Poly)) (! (and (and (has_type a$ %%hole%%0) (vstd!set.impl&%0.contains.? %%hole%%1 %%hole%%2 %%hole%%3 a$)) (= (%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) a$)) :pattern ((vstd!set.impl&%0.contains.? %%hole%%4 %%hole%%5 %%hole%%6 a$))))) :pattern ((%%choose%%0 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6)))))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.choose.) (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (= (vstd!set.impl&%0.choose.? A&. A& self!) (as_type (%%choose%%0 A& A&. A& self! A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly)) (! (=> (has_type self! (TYPE%vstd!set.Set. A&. A&)) (has_type (vstd!set.impl&%0.choose.? A&. A& self!) A&)) :pattern ((vstd!set.impl&%0.choose.? A&. A& self!)))))
(declare-fun req%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%40 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_finite. A&. A& s!) (=> %%global_location_label%%40 (not (vstd!set.impl&%0.finite.? A&. A& s!)))) :pattern ((req%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_finite. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_finite. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_finite. A&. A& s!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (not (vstd!set.impl&%0.finite.? A&. A& s!)) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(declare-fun ens%vstd!set.axiom_set_empty_len. (Dcr Type) Bool)
(assert (forall ((A&. Dcr) (A& Type)) (! (= (ens%vstd!set.axiom_set_empty_len. A&. A&) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0)) :pattern ((ens%vstd!set.axiom_set_empty_len. A&. A&)))))
(assert (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&)) 0) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))))))
(declare-fun req%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%41 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_insert_len. A&. A& s! a!) (=> %%global_location_label%%41 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_insert_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_insert_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1)))) :pattern ((ens%vstd!set.axiom_set_insert_len. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!)) (Add (vstd!set.impl&%0.len.? A&. A& s!) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 0 1))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.insert.? A&. A& s! a!))))))
(declare-fun req%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%42 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_remove_len. A&. A& s! a!) (=> %%global_location_label%%42 (vstd!set.impl&%0.finite.? A&. A& s!))) :pattern ((req%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_remove_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_remove_len. A&. A& s! a!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0)))) :pattern ((ens%vstd!set.axiom_set_remove_len. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (vstd!set.impl&%0.finite.? A&. A& s!) (= (vstd!set.impl&%0.len.? A&. A& s!) (Add (vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!)) (ite (vstd!set.impl&%0.contains.? A&. A& s! a!) 1 0))))) :pattern ((vstd!set.impl&%0.len.? A&. A& (vstd!set.impl&%0.remove.? A&. A& s! a!))))))
(declare-fun req%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%43 Bool)
(declare-const %%global_location_label%%44 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (req%vstd!set.axiom_set_contains_len. A&. A& s! a!) (and (=> %%global_location_label%%43 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%44 (vstd!set.impl&%0.contains.? A&. A& s! a!)))) :pattern ((req%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(declare-fun ens%vstd!set.axiom_set_contains_len. (Dcr Type Poly Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (= (ens%vstd!set.axiom_set_contains_len. A&. A& s! a!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) :pattern ((ens%vstd!set.axiom_set_contains_len. A&. A& s! a!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly) (a! Poly)) (! (=> (and (has_type s! (TYPE%vstd!set.Set. A&. A&)) (has_type a! A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! a!)) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0)))) :pattern ((vstd!set.impl&%0.contains.? A&. A& s! a!) (vstd!set.impl&%0.len.? A&. A& s!)))))
(declare-fun req%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%45 Bool)
(declare-const %%global_location_label%%46 Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (req%vstd!set.axiom_set_choose_len. A&. A& s!) (and (=> %%global_location_label%%45 (vstd!set.impl&%0.finite.? A&. A& s!)) (=> %%global_location_label%%46 (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))))) :pattern ((req%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(declare-fun ens%vstd!set.axiom_set_choose_len. (Dcr Type Poly) Bool)
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (= (ens%vstd!set.axiom_set_choose_len. A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))) :pattern ((ens%vstd!set.axiom_set_choose_len. A&. A& s!)))))
(assert (forall ((A&. Dcr) (A& Type) (s! Poly)) (! (=> (has_type s! (TYPE%vstd!set.Set. A&. A&)) (=> (and (vstd!set.impl&%0.finite.? A&. A& s!) (not (= (vstd!set.impl&%0.len.? A&. A& s!) 0))) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!)))) :pattern ((vstd!set.impl&%0.len.? A&. A& s!) (vstd!set.impl&%0.contains.? A&. A& s! (vstd!set.impl&%0.choose.? A&. A& s!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.size.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.size.) (forall ((self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.size.? self!) (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.size.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (<= 0 (verismo!ptr.raw_ptr_s.impl&%5.size.? self!))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.size.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.range.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.range.) (forall ((self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.range.? self!) (tuple%2./tuple%2 (I (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))) (I (verismo!ptr.raw_ptr_s.impl&%5.size.? self!)))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.range.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (has_type (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? self!)) (TYPE%tuple%2. $ INT $ NAT))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.range.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_asid.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (<= 0 (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_assigned.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/assigned (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_validated.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!))))))
(assert (fuel_bool_default fuel%vstd!set.impl&%0.full.))
(assert (=> (fuel_bool fuel%vstd!set.impl&%0.full.) (forall ((A&. Dcr) (A& Type)) (! (= (vstd!set.impl&%0.full.? A&. A&) (vstd!set.impl&%0.complement.? A&. A& (vstd!set.impl&%0.empty.? A&. A&))) :pattern ((vstd!set.impl&%0.full.? A&. A&))))))
(assert (forall ((A&. Dcr) (A& Type)) (! (has_type (vstd!set.impl&%0.full.? A&. A&) (TYPE%vstd!set.Set. A&. A&)) :pattern ((vstd!set.impl&%0.full.? A&. A&)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.entry_s.impl&%0.is_valid.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.entry_s.impl&%0.is_valid.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.entry_s.impl&%0.is_valid.? self!) (and (and (or (not (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!) 0)) (not (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!))) (or (not (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!)) (and (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!) (not (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!) 0))))) (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL0)) (vstd!set.impl&%0.full.? $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) :pattern ((verismo!arch.rmp.entry_s.impl&%0.is_valid.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel.) (forall ((self! Poly) (preventry! Poly)) (! (= (verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel.? self! preventry!) (and (and (verismo!arch.rmp.entry_s.impl&%0.is_valid.? self!) (=> (not (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (not (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/validated (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))))) (=> (not (= self! preventry!)) (and (and (and (and (and (and (and (ext_eq true (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL0)) (vstd!set.impl&%0.full.? $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (ext_eq true (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL0)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL0)))) (vstd!set.impl&%0.subset_of.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)))) (vstd!set.impl&%0.subset_of.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)))) (vstd!set.impl&%0.subset_of.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)))) (or (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1))))) (or (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2))))) (or (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (= (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. preventry!))) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)))))))) :pattern ((verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel.? self! preventry!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%3.spec_val.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%3.spec_val.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%3.spec_val.? self!) (verismo!arch.rmp.def_s.RmpEntry./RmpEntry/val (%Poly%verismo!arch.rmp.def_s.RmpEntry. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%3.spec_val.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%3.spec_val.? self!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%3.spec_val.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.access_u.impl&%0.view.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.access_u.impl&%0.view.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.access_u.impl&%0.view.? self!) (verismo!arch.rmp.def_s.impl&%3.spec_val.? self!)) :pattern ((verismo!arch.rmp.access_u.impl&%0.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.access_u.impl&%0.view.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel.) (forall ((self! Poly) (prev! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel.? self! prev!) (and (verismo!arch.rmp.entry_s.impl&%0.inv_hvupdate_rel.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))) (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. prev!)))))) (= (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. prev!))))) :pattern ((verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel.? self! prev!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.access_u.impl&%1.inv.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.access_u.impl&%1.inv.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.access_u.impl&%1.inv.? self!) (verismo!arch.rmp.entry_s.impl&%0.is_valid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!)))) :pattern ((verismo!arch.rmp.access_u.impl&%1.inv.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf.? self!) (and (verismo!ptr.snp.snp_u.impl&%28.hvupdate_rel.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!))) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!)))) (verismo!arch.rmp.access_u.impl&%1.inv.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!))))))))) :pattern ((verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.encrypted.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.encrypted.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.encrypted.? self!) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/encrypted (%Poly%verismo!ptr.snp.snp_u.PTAttr. (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%27.pte.? self!))))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.encrypted.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.? self!) (and (verismo!ptr.snp.snp_u.impl&%27.encrypted.? self!) (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_perms.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%6.spec_from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%6.spec_from_int.) (forall ((val! Poly)) (! (= (verismo!arch.entities.impl&%6.spec_from_int.? val!) (ite (< (%I val!) 0) core!option.Option./None (ite (= (%I val!) 0) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL0)) (ite (= (%I val!) 1) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)) (ite (= (%I val!) 2) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)) (ite (= (%I val!) 3) (core!option.Option./Some (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)) core!option.Option./None)))))) :pattern ((verismo!arch.entities.impl&%6.spec_from_int.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%core!option.Option. (verismo!arch.entities.impl&%6.spec_from_int.? val!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.entities.VMPL.))) :pattern ((verismo!arch.entities.impl&%6.spec_from_int.? val!)))))
(declare-fun req%verismo!arch.rmp.entry_s.impl&%0.is_confidential_to. (Poly Poly) Bool)
(declare-const %%global_location_label%%47 Bool)
(assert (forall ((self! Poly) (vmpl! Poly)) (! (= (req%verismo!arch.rmp.entry_s.impl&%0.is_confidential_to. self! vmpl!) (=> %%global_location_label%%47 (and (< 0 (%I vmpl!)) (<= (%I vmpl!) 4)))) :pattern ((req%verismo!arch.rmp.entry_s.impl&%0.is_confidential_to. self! vmpl!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.entry_s.impl&%0.is_confidential_to.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.entry_s.impl&%0.is_confidential_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!arch.rmp.entry_s.impl&%0.is_confidential_to.? self! vmpl!) (ite (>= (%I vmpl!) 4) (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!) (and (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!) (ext_eq false (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.entities.impl&%6.spec_from_int.? vmpl!))))) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.))))) :pattern ((verismo!arch.rmp.entry_s.impl&%0.is_confidential_to.? self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! vmpl!) (and (verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.? self!) (verismo!arch.rmp.entry_s.impl&%0.is_confidential_to.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))) vmpl!))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.inv_confidential.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.inv_confidential.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.inv_confidential.? self!) (and (=> (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! (I 4)) (verismo!ptr.snp.snp_u.impl&%27.encrypted.? self!)) (=> (or (or (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! (I 1)) (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! (I 2))) (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! (I 3))) (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? self! (I 4))))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.inv_confidential.? self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.spec_va_to_pa.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.spec_va_to_pa.) (forall ((pa! Poly)) (! (= (verismo!addr_e.addr_interface.spec_va_to_pa.? pa!) (%I pa!)) :pattern ((verismo!addr_e.addr_interface.spec_va_to_pa.? pa!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.deterministic_pte.))
(declare-fun %%lambda%%5 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (gva$ Poly)) (! (= (%%apply%%0 (%%lambda%%5 %%hole%%0) gva$) %%hole%%0) :pattern ((%%apply%%0 (%%lambda%%5 %%hole%%0) gva$)))))
(declare-fun %%lambda%%6 () %%Function%%)
(assert (forall ((gva$ Poly)) (! (= (%%apply%%0 %%lambda%%6 gva$) (I (verismo!addr_e.addr_interface.spec_va_to_pa.? gva$))) :pattern ((%%apply%%0 %%lambda%%6 gva$)))))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.deterministic_pte.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.deterministic_pte.? self!) (and (and (= (vstd!seq.Seq.len.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))) 1) (= (verismo!ptr.snp.snp_u.impl&%27.pte.? self!) (%Poly%verismo!ptr.snp.snp_u.PTAttr. (vstd!seq.Seq.last.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))))) (ext_eq true (TYPE%vstd!map.Map. $ INT $ INT) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) (vstd!map.impl&%0.new.? $ INT $ INT $ (TYPE%fun%1. $ INT $ BOOL) $ (TYPE%fun%1. $ INT $ INT) (Poly%fun%1. (mk_fun (%%lambda%%5 (B true)))) (Poly%fun%1. (mk_fun %%lambda%%6)))))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.deterministic_pte.? self!))))))
(assert (forall ((rmp! Poly) (guestmap! Poly) (sysmap! Poly) (rmpmap! Poly) (pte! Poly) (is_pte! Poly)) (! (=> (and (has_type rmp! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type guestmap! (TYPE%vstd!map.Map. $ INT $ INT)) (has_type sysmap! (TYPE%vstd!map.Map. $ INT $ INT)) (has_type rmpmap! (TYPE%vstd!map.Map. $ INT $ INT)) (has_type pte! (TYPE%vstd!seq.Seq. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.)) (has_type is_pte! BOOL)) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmp.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmp.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? self!) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? self!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? self!) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? self!) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/sysmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? self!) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmpmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? self!) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/is_pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.? self! val!) (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? self!)) val! (B (verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type val! (TYPE%vstd!seq.Seq. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.))) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.? self! val!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%24.spec_pte.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%24.spec_pte.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%24.spec_pte.? self!) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%24.spec_pte.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? self! val!) (verismo!ptr.snp.snp_u.impl&%23.spec_new.? val! (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? self!)) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.impl&%24.spec_pte.? self!)) (B (verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type val! TYPE%verismo!arch.rmp.def_s.RmpEntry.)) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? self! val!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? self! val!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (verismo!tspec.default.SpecDefault.spec_default.? Self%&. Self%&) Self%&) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? Self%&. Self%&)))))
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%9.is_VMPL0.))
(define-fun is-verismo!arch.entities.VMPL./VMPL0_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL0) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%9.is_VMPL0.) (forall ((self! Poly)) (! (= (verismo!arch.entities.impl&%9.is_VMPL0.? self!) (is-verismo!arch.entities.VMPL./VMPL0_ (%Poly%verismo!arch.entities.VMPL. self!))) :pattern ((verismo!arch.entities.impl&%9.is_VMPL0.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.perm_s.rmp_perm_init.))
(declare-fun %%lambda%%7 (Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1) vmpl$) (ite (is-verismo!arch.entities.VMPL./VMPL0_ (%Poly%verismo!arch.entities.VMPL. vmpl$)) %%hole%%0 %%hole%%1)) :pattern ((%%apply%%0 (%%lambda%%7 %%hole%%0 %%hole%%1) vmpl$)))))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.perm_s.rmp_perm_init.) (forall ((no%param Poly)) (! (= (verismo!arch.rmp.perm_s.rmp_perm_init.? no%param) (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (vstd!map.impl&%0.new.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) $ (TYPE%fun%1. $ TYPE%verismo!arch.entities.VMPL. $ BOOL) $ (TYPE%fun%1. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (Poly%fun%1. (mk_fun (%%lambda%%5 (B true)))) (Poly%fun%1. (mk_fun (%%lambda%%7 (vstd!set.impl&%0.full.? $ TYPE%verismo!arch.rmp.perm_s.Perm.) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))) :pattern ((verismo!arch.rmp.perm_s.rmp_perm_init.? no%param))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%4.spec_set_val.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%4.spec_set_val.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%4.spec_set_val.? self! val!) (verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)) :pattern ((verismo!arch.rmp.def_s.impl&%4.spec_set_val.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type val! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (has_type (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%4.spec_set_val.? self! val!)) TYPE%verismo!arch.rmp.def_s.RmpEntry.)) :pattern ((verismo!arch.rmp.def_s.impl&%4.spec_set_val.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%21.spec_default.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%21.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr.) (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.PTAttr./PTAttr (%B (B true)) (%B (B true)) (%B (B false)))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%31.init.))
(declare-fun %%lambda%%8 () %%Function%%)
(assert (forall ((gva$ Poly)) (! (= (%%apply%%0 %%lambda%%8 gva$) gva$) :pattern ((%%apply%%0 %%lambda%%8 gva$)))))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%31.init.) (forall ((no%param Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%31.init.? no%param) (let ((rmp_psp$ (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP (%B (B false)) (%B (B true)) (%B (B false)) (%B (B false)) (%I (I (nClip (Add (%I (vstd!pervasive.arbitrary.? $ NAT)) 1)))) (%Poly%verismo!arch.addr_s.def_s.SpecPage. (vstd!pervasive.arbitrary.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (%Poly%verismo!arch.addr_s.def_s.PageSize. (Poly%verismo!arch.addr_s.def_s.PageSize. verismo!arch.addr_s.def_s.PageSize./Size4k)) (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (vstd!map.impl&%0.new.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) $ (TYPE%fun%1. $ TYPE%verismo!arch.entities.VMPL. $ BOOL) $ (TYPE%fun%1. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (Poly%fun%1. (mk_fun (%%lambda%%5 (B true)))) (Poly%fun%1. (mk_fun (%%lambda%%7 (vstd!set.impl&%0.full.? $ TYPE%verismo!arch.rmp.perm_s.Perm.) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))))))) (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr (%Poly%verismo!arch.rmp.def_s.RmpEntry. (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%4.spec_set_val.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!arch.rmp.def_s.RmpEntry.) (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. rmp_psp$)))) (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.new.? $ INT $ INT $ (TYPE%fun%1. $ INT $ BOOL) $ (TYPE%fun%1. $ INT $ INT) (Poly%fun%1. (mk_fun (%%lambda%%5 (B true)))) (Poly%fun%1. (mk_fun %%lambda%%8)))) (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.empty.? $ INT $ INT)) (%Poly%vstd!map.Map<int./int.>. (vstd!map.impl&%0.empty.? $ INT $ INT)) (%Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (vstd!seq.Seq.push.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (vstd!seq.Seq.empty.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr.) (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr.))) (%B (B false))))) :pattern ((verismo!ptr.snp.snp_u.impl&%31.init.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%31.init.? no%param)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%31.init.? no%param)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%31.allocator_default.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%31.allocator_default.) (forall ((no%param Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%31.allocator_default.? no%param) (let ((rmp_psp$ (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP (%B (B false)) (%B (B true)) (%B (B true)) (%B (B false)) (%I (I (nClip (Add (%I (vstd!pervasive.arbitrary.? $ NAT)) 1)))) (%Poly%verismo!arch.addr_s.def_s.SpecPage. (vstd!pervasive.arbitrary.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (%Poly%verismo!arch.addr_s.def_s.PageSize. (Poly%verismo!arch.addr_s.def_s.PageSize. verismo!arch.addr_s.def_s.PageSize./Size4k)) (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (vstd!map.impl&%0.new.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) $ (TYPE%fun%1. $ TYPE%verismo!arch.entities.VMPL. $ BOOL) $ (TYPE%fun%1. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)) (Poly%fun%1. (mk_fun (%%lambda%%5 (B true)))) (Poly%fun%1. (mk_fun (%%lambda%%7 (vstd!set.impl&%0.full.? $ TYPE%verismo!arch.rmp.perm_s.Perm.) (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.))))))))))) (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%31.init.? (I 0))) (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.RmpEntry./RmpEntry (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. rmp_psp$))))))) :pattern ((verismo!ptr.snp.snp_u.impl&%31.allocator_default.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%31.allocator_default.? no%param)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%31.allocator_default.? no%param)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%32.spec_default.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%32.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%31.allocator_default.? (I 0))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_gpn.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_size.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_size.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/size (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_size.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.? self!) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/encrypted (%Poly%verismo!ptr.snp.snp_u.PTAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%31.wf.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%31.wf.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%31.wf.? self!) (and (and (and (and (and (and (and (verismo!arch.rmp.access_u.impl&%1.inv.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))) (verismo!ptr.snp.snp_u.impl&%27.inv_confidential.? self!)) (and (and (= (vstd!seq.Seq.len.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))) 1) (= (verismo!ptr.snp.snp_u.impl&%27.pte.? self!) (%Poly%verismo!ptr.snp.snp_u.PTAttr. (vstd!seq.Seq.last.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))))) (ext_eq true (TYPE%vstd!map.Map. $ INT $ INT) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) (vstd!map.impl&%0.new.? $ INT $ INT $ (TYPE%fun%1. $ INT $ BOOL) $ (TYPE%fun%1. $ INT $ INT) (Poly%fun%1. (mk_fun (%%lambda%%5 (B true)))) (Poly%fun%1. (mk_fun %%lambda%%6)))))) (= (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!) (verismo!ptr.snp.snp_u.impl&%22.spec_set_pte.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))) (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.))))))))) (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))) (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.))))))))) (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))) (verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.))))))))) (=> (not (verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.? (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%27.pte.? self!)))) (not (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))))))) :pattern ((verismo!ptr.snp.snp_u.impl&%31.wf.? self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? Self%&. Self%& self!) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? Self%&. Self%& self!) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%30.snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%30.snp.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. self!) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!)))) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%35.wf.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%35.wf.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%35.wf.? self!) (and (verismo!ptr.snp.snp_u.impl&%35.hw_rmp_wf.? self!) (verismo!ptr.snp.snp_u.impl&%31.wf.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%35.wf.? self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!) (B (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$))))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%1.is_constant.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%1.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) self!) (B (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$))))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%1.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%1.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) self! vmpl!) (B (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= 0 (%I i$)) (< (%I i$) (vstd!seq.Seq.len.? T&. T& self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& (vstd!seq.Seq.index.? T&. T& self! i$) vmpl!)))) :pattern ((vstd!seq.Seq.index.? T&. T& self! i$)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) self!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) self! vmpl!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%vstd!seq.Seq. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%vstd!seq.Seq. T&. T&))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./Symbol_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./Symbol) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_Symbol.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_Symbol.? self!) (is-verismo!tspec.security.sectype.DataLabel./Symbol_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_Symbol.? self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./TrustedRandom) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? self!) (is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_TrustedRandom.? self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%0.is_Secret.))
(define-fun is-verismo!tspec.security.sectype.DataLabel./Secret_ ((c verismo!tspec.security.sectype.DataLabel.)) Bool ((_ is verismo!tspec.security.sectype.DataLabel./Secret) c))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%0.is_Secret.) (forall ((self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%0.is_Secret.? self!) (is-verismo!tspec.security.sectype.DataLabel./Secret_ (%Poly%verismo!tspec.security.sectype.DataLabel. self!))) :pattern ((verismo!tspec.security.sectype.impl&%0.is_Secret.? self!))))))
(assert (fuel_bool_default fuel%vstd!map_lib.impl&%0.contains_key.))
(assert (=> (fuel_bool fuel%vstd!map_lib.impl&%0.contains_key.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& self!) k!)) :pattern ((vstd!map_lib.impl&%0.contains_key.? K&. K& V&. V& self! k!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.wf_vmpl.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (valsets! Poly) (labels! Poly) (vmpl! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& valsets! labels! vmpl!) (and (and (and (and (and (=> (is-verismo!tspec.security.sectype.DataLabel./TrustedRandom_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels! vmpl!))) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!) (vstd!set.impl&%0.full.? T&. T&))) (=> (is-verismo!tspec.security.sectype.DataLabel./Secret_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels! vmpl!))) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!) (vstd!set.impl&%0.full.? T&. T&)))) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. labels!) vmpl!)) (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets!) vmpl!)) (> (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!)) 0)) (vstd!set.impl&%0.finite.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) valsets! vmpl!)))) :pattern ((verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& valsets! labels! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.wf_value.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.wf_value.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!) (and (and (and (and (and (and (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 1)) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 2))) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 3))) (verismo!tspec.security.sectype.impl&%16.wf_vmpl.? T&. T& M&. M& (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (I 4))) (= (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) core!option.Option./None)) (ext_eq true (TYPE%vstd!set.Set. $ NAT) (vstd!map.impl&%0.dom.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.empty.? $ NAT) (I 1)) (I 2)) (I 3)) (I 4)))) (ext_eq true (TYPE%vstd!set.Set. $ NAT) (vstd!map.impl&%0.dom.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.insert.? $ NAT (vstd!set.impl&%0.empty.? $ NAT) (I 1)) (I 2)) (I 3)) (I 4))))) :pattern ((verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%12.is_constant_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! vmpl!) (B (and (and (and (= (vstd!set.impl&%0.len.? T&. T& (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) vmpl!)) 1) (ext_eq true (TYPE%vstd!set.Set. T&. T&) (vstd!map.impl&%0.index.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) vmpl!) (vstd!set.impl&%0.insert.? T&. T& (vstd!set.impl&%0.empty.? T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))))) (is-verismo!tspec.security.sectype.DataLabel./Symbol_ (%Poly%verismo!tspec.security.sectype.DataLabel. (vstd!map.impl&%0.index.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) vmpl!)))) (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%12.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%12.is_constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self!) (B (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self! (I 4)))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.) self!) (B (verismo!tspec.security.sectype.impl&%16.wf_value.? T&. T& $ TYPE%tuple%0. self!))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.) self!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.)) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& $ TYPE%tuple%0.))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_s.inv_snp_value.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_s.inv_snp_value.) (forall ((T&. Dcr) (T& Type) (snp! Poly) (val! Poly)) (! (= (verismo!ptr.ptr_s.inv_snp_value.? T&. T& snp! val!) (and (and (and (and (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& val!)) (=> (not (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? snp! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& val! (I 1))))) (=> (not (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? snp! (I 2))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& val! (I 2))))) (=> (not (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? snp! (I 3))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& val! (I 3))))) (=> (not (verismo!ptr.snp.snp_u.impl&%27.is_confidential_to.? snp! (I 4))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& val! (I 4)))))) :pattern ((verismo!ptr.ptr_s.inv_snp_value.? T&. T& snp! val!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.? self! val!) (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? self!)) val! (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? self!)) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.impl&%24.spec_pte.? self!)) (B (verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type val! (TYPE%vstd!map.Map. $ INT $ INT))) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.? self! val!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.? self! val!) (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? self!)) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? self!)) val! (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.impl&%24.spec_pte.? self!)) (B (verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (has_type val! (TYPE%vstd!map.Map. $ INT $ INT))) (has_type (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.? self! val!)) TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%8.snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%8.snp.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_sysmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmpmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!)))))) (vstd!map.impl&%0.empty.? $ INT $ INT))) (vstd!map.impl&%0.empty.? $ INT $ INT)))) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.integer.IntValue.as_int.? Self%&. Self%& self!) INT)) :pattern ((verismo!tspec.integer.IntValue.as_int.? Self%&. Self%& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (val! Poly)) (! (=> (has_type val! INT) (has_type (verismo!tspec.integer.IntValue.from_int.? Self%&. Self%& val!) Self%&)) :pattern ((verismo!tspec.integer.IntValue.from_int.? Self%&. Self%& val!)))))
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%4.as_int.))
(define-fun is-verismo!arch.entities.VMPL./VMPL1_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL1) c))
(define-fun is-verismo!arch.entities.VMPL./VMPL2_ ((c verismo!arch.entities.VMPL.)) Bool ((_ is verismo!arch.entities.VMPL./VMPL2) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%4.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. self!) (I (let ((val$ (ite (is-verismo!arch.entities.VMPL./VMPL0_ (%Poly%verismo!arch.entities.VMPL. self!)) 0 (ite (is-verismo!arch.entities.VMPL./VMPL1_ (%Poly%verismo!arch.entities.VMPL. self!)) 1 (ite (is-verismo!arch.entities.VMPL./VMPL2_ (%Poly%verismo!arch.entities.VMPL. self!)) 2 3))))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private.? self! vmpl!) (and (and (and (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!) (=> (not (= vmpl! (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)))) (not (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL1)) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write))))) (=> (not (= vmpl! (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)))) (not (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL2)) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write))))) (=> (not (= vmpl! (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)))) (not (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)) (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL3)) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write)))))) :pattern ((verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private.? self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private.? self! vmpl!) (and (verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.? self!) (verismo!arch.rmp.entry_s.impl&%0.is_vmpl_private.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))) vmpl!))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private.? self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.? self!) (verismo!ptr.snp.snp_u.impl&%27.is_vmpl_private.? self! (I 0))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.? self!))))))
(declare-fun req%verismo!ptr.raw_ptr_s.impl&%5.bytes. (Poly) Bool)
(declare-const %%global_location_label%%48 Bool)
(assert (forall ((self! Poly)) (! (= (req%verismo!ptr.raw_ptr_s.impl&%5.bytes. self!) (=> %%global_location_label%%48 (verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!)))) :pattern ((req%verismo!ptr.raw_ptr_s.impl&%5.bytes. self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.bytes.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.bytes.) (forall ((self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.bytes.? self!) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.bytes.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.wf.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.wf.) (forall ((self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.wf.? self!) (and (verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!)))) (verismo!ptr.ptr_s.inv_snp_value.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? self!))))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.wf.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_range.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.wf_range.) (forall ((self! Poly) (range! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.wf_range.? self! range!) (and (= (verismo!ptr.raw_ptr_s.impl&%5.range.? self!) (%Poly%tuple%2. range!)) (verismo!ptr.raw_ptr_s.impl&%5.wf.? self!))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.wf_range.? self! range!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.def_s.SnpPointsToRaw.) (has_type (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? self!)) TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) :pattern ((verismo!ptr.raw_ptr_s.impl&%4.view.? self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly) (size! Poly)) (! (=> (and (has_type self! Self%&) (has_type size! NAT)) (has_type (verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? Self%&. Self%& self! size!) BOOL)) :pattern ((verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? Self%&. Self%& self! size!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? Self%&. Self%& self!) INT)) :pattern ((verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%0.to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%0.to_addr.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT self!) (I (Mul (%I self!) 4096))) :pattern ((verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.PAGE_SIZE.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.PAGE_SIZE.) (= verismo!arch.addr_s.def_s.PAGE_SIZE.? 4096)))
(assert (uInv SZ verismo!arch.addr_s.def_s.PAGE_SIZE.?))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.cast.VTypeCast.vspec_cast_to.? Self%&. Self%& T&. T& self!) T&)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? Self%&. Self%& T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%44.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%44.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%657.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64) self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.security.sectype.SecMemType.view.? Self%&. Self%& T&. T& M&. M& self!) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? Self%&. Self%& T&. T& M&. M& self!)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! Poly) (valsets! Poly) (labels! Poly)) (! (=> (and (has_type val! T&) (has_type _unused! (TYPE%core!option.Option. M&. M&)) (has_type valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&))) (has_type labels! (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec__unused.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec__unused.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (Poly%core!option.Option. (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!)) (TYPE%core!option.Option. M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_valsets.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!) (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&)))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_labels.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_labels.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/labels (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%656.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.core_perm_s.CoreIdPerm.) (has_type (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? self!)) TYPE%verismo!registers.core_perm_s.CoreMode.)) :pattern ((verismo!registers.core_perm_s.impl&%4.view.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.reg.MSR_GHCB_BASE.))
(assert (=> (fuel_bool fuel%verismo!arch.reg.MSR_GHCB_BASE.) (= verismo!arch.reg.MSR_GHCB_BASE.? 3221291312)))
(assert (uInv 32 verismo!arch.reg.MSR_GHCB_BASE.?))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%15.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%15.is_constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!))) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%60.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%60.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self!))))))
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%25.is_constant.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%25.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.idt.def.Idtr. self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.idt.def.Idtr. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.reg.MSR_EFER_BASE.))
(assert (=> (fuel_bool fuel%verismo!arch.reg.MSR_EFER_BASE.) (= verismo!arch.reg.MSR_EFER_BASE.? 3221225600)))
(assert (uInv 32 verismo!arch.reg.MSR_EFER_BASE.?))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.? self!) (let ((regs$ (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))) (let ((coreid$ (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))) (let ((cr3_pte$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr3)))))))))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid$))))) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) (verismo!registers.core_perm_s.CoreMode./CoreMode/run (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid$)))))) (= (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid$))))) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)))) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.reg.RegName. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$)) id$)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.reg.RegName. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$)) id$))))) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (= (verismo!registers.msr_perm_s.impl&%2.cpu.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$)) (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid$))))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (= (verismo!registers.msr_perm_s.impl&%2.id.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$)) (%Poly%verismo!arch.reg.RegName. id$))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (verismo!registers.msr_perm_s.impl&%2.wf.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) (= (verismo!registers.msr_perm_s.impl&%2.shared.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR (%I (I verismo!arch.reg.MSR_GHCB_BASE.?)))))) true)) (forall ((id$ Poly)) (! (=> (has_type id$ TYPE%verismo!arch.reg.RegName.) (=> (not (= (%Poly%verismo!arch.reg.RegName. id$) (verismo!arch.reg.RegName./MSR (%I (I verismo!arch.reg.MSR_GHCB_BASE.?))))) (not (verismo!registers.msr_perm_s.impl&%2.shared.? (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) :pattern ((vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) id$))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. (verismo!registers.msr_perm_s.impl&%2.val.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./GdtrBaseLimit)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!boot.idt.def.Idtr. (verismo!registers.msr_perm_s.impl&%2.val.? $ TYPE%verismo!boot.idt.def.Idtr. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./IdtrBaseLimit)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./XCr0)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr0)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr1)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr2)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr3)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cr4)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Cs)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!registers.msr_perm_s.impl&%2.val.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm. (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs$) (Poly%verismo!arch.reg.RegName. (verismo!arch.reg.RegName./MSR (%I (I verismo!arch.reg.MSR_EFER_BASE.?))))))))) (= cr3_pte$ (verismo!pgtable_e.def.static_cr3_value.? (I 0)))))))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.? self!))))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%3.inv.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%3.inv.? self!) (and (verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.? self!) (= (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!)) 0))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%3.inv.? self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? Self%&. Self%& AddrT&. AddrT& self!) AddrT&)) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? Self%&. Self%& AddrT&. AddrT& self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (AddrT&. Dcr) (AddrT& Type) (self! Poly) (ret! Poly)) (! (=> (and (has_type self! Self%&) (has_type ret! AddrT&)) (has_type (verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? Self%&. Self%& AddrT&. AddrT& self! ret!) BOOL)) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? Self%&. Self%& AddrT&. AddrT& self! ret!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (AddrT&. Dcr) (AddrT& Type) (self! Poly) (size! Poly)) (! (=> (and (has_type self! Self%&) (has_type size! NAT)) (has_type (verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? Self%&. Self%& AddrT&. AddrT& self! size!) BOOL)) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? Self%&. Self%& AddrT&. AddrT& self! size!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (AddrT&. Dcr) (AddrT& Type) (v! Poly)) (! (=> (has_type v! AddrT&) (has_type (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? Self%&. Self%& AddrT&. AddrT& v!) INT)) :pattern ((verismo!addr_e.addr_interface.PageTrait.paget_to_int.? Self%&. Self%& AddrT&. AddrT& v!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecEq.spec_eq.? Self%&. Self%& Rhs&. Rhs& self! rhs!) BOOL)) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? Self%&. Self%& Rhs&. Rhs& self! rhs!)))))
(assert (fuel_bool_default fuel%verismo!tspec.ops.impl&%6.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.ops.impl&%6.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ BOOL $ BOOL self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ BOOL $ BOOL self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%72.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%72.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!) (I (nClip (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!))))))
(declare-fun req%verismo!addr_e.addr_interface.PageTrait.to_addr. (Dcr Type Dcr Type Poly) Bool)
(declare-const %%global_location_label%%49 Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (req%verismo!addr_e.addr_interface.PageTrait.to_addr. Self%&. Self%& AddrT&. AddrT& self!) (=> %%global_location_label%%49 (%B (verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? Self%&. Self%& AddrT&. AddrT& self! (I 0))))) :pattern ((req%verismo!addr_e.addr_interface.PageTrait.to_addr. Self%&. Self%& AddrT&. AddrT& self!)))))
(declare-fun ens%verismo!addr_e.addr_interface.PageTrait.to_addr. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((Self%&. Dcr) (Self%& Type) (AddrT&. Dcr) (AddrT& Type) (self! Poly) (ret! Poly)) (! (= (ens%verismo!addr_e.addr_interface.PageTrait.to_addr. Self%&. Self%& AddrT&. AddrT& self! ret!) (and (has_type ret! AddrT&) (= ret! (verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? Self%&. Self%& AddrT&. AddrT& self!)) (%B (verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? Self%&. Self%& AddrT&. AddrT& self! ret!)))) :pattern ((ens%verismo!addr_e.addr_interface.PageTrait.to_addr. Self%&. Self%& AddrT&. AddrT& self! ret!)))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%63.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%63.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.VM_PAGE_NUM.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.VM_PAGE_NUM.) (= verismo!arch.addr_s.def_s.VM_PAGE_NUM.? 1099511627776)))
(assert (uInv SZ verismo!arch.addr_s.def_s.VM_PAGE_NUM.?))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%0.spec_valid_pn_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%0.spec_valid_pn_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? $ INT self! size!) (B (and (let ((tmp%%$ (Add (%I self!) (%I size!)))) (and (<= 0 tmp%%$) (<= tmp%%$ verismo!arch.addr_s.def_s.VM_PAGE_NUM.?))) (and (<= 0 (%I self!)) (<= (%I self!) verismo!arch.addr_s.def_s.VM_PAGE_NUM.?))))) :pattern ((verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? $ INT self! size!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%9.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%9.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT SZ) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%5.spec_valid_pn_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%5.spec_valid_pn_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (UINT SZ) $ (UINT SZ) self! size!) (B (let ((start$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!)))) (and (%B (verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? $ INT (I start$) size!)) (%B (B true)))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (UINT SZ) $ (UINT SZ) self! size!))))))
(assert (forall ((immutable! Poly) (assigned! Poly) (validated! Poly) (vmsa! Poly) (asid! Poly) (gpn! Poly) (size! Poly) (perms! Poly)) (! (=> (and (has_type immutable! BOOL) (has_type assigned! BOOL) (has_type validated! BOOL) (has_type vmsa! BOOL) (has_type asid! NAT) (has_type gpn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type size! TYPE%verismo!arch.addr_s.def_s.PageSize.) (has_type perms! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_immutable.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/immutable (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%0.spec_vmsa.) (forall ((self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!) (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/vmsa (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_perms.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_perms.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%1.spec_set_perms.? self! val!) (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!)) (I (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) (Poly%verismo!arch.addr_s.def_s.PageSize. (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!)) val!)) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_perms.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type val! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%1.spec_set_perms.? self! val!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_perms.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_s.impl&%0.requires_pvalidate.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_s.impl&%0.requires_pvalidate.) (forall ((self! Poly) (vaddr! Poly) (is_2m! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_s.impl&%0.requires_pvalidate.? self! vaddr! is_2m! val!) (and (and (and (= (EucMod (%I is_2m!) 2) 0) (= (= (EucMod (%I val!) 2) 0) (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))))) (and (and (= (vstd!seq.Seq.len.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))) 1) (= (verismo!ptr.snp.snp_u.impl&%27.pte.? self!) (%Poly%verismo!ptr.snp.snp_u.PTAttr. (vstd!seq.Seq.last.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))))) (ext_eq true (TYPE%vstd!map.Map. $ INT $ INT) (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) (vstd!map.impl&%0.new.? $ INT $ INT $ (TYPE%fun%1. $ INT $ BOOL) $ (TYPE%fun%1. $ INT $ INT) (Poly%fun%1. (mk_fun (%%lambda%%5 (B true)))) (Poly%fun%1. (mk_fun %%lambda%%6)))))) (verismo!ptr.snp.snp_u.impl&%27.encrypted.? self!))) :pattern ((verismo!ptr.snp.snp_s.impl&%0.requires_pvalidate.? self! vaddr! is_2m! val!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.new2.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.new2.) (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!) (verismo!arch.addr_s.def_s.SpecPage./SpecPage (%I (I (nClip (%I val!)))) dummy!)) :pattern ((verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (=> (and (has_type val! INT) (has_type dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! dummy!)))))
(assert (fuel_bool_default fuel%verismo!tspec.spec_unused.))
(assert (=> (fuel_bool fuel%verismo!tspec.spec_unused.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.spec_unused.? T&. T&) (vstd!pervasive.arbitrary.? T&. T&)) :pattern ((verismo!tspec.spec_unused.? T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (verismo!tspec.spec_unused.? T&. T&) T&) :pattern ((verismo!tspec.spec_unused.? T&. T&)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.new.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.new.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!) (verismo!arch.addr_s.page.impl&%3.new2.? T&. T& val! (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%5.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%5.as_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!) (I (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/value (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.value.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.value.? T&. T& self!) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!))) :pattern ((verismo!arch.addr_s.page.impl&%2.value.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.to_page.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.to_page.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!) (verismo!arch.addr_s.page.impl&%3.new.? T&. T& (I (EucDiv (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!)) 4096)))) :pattern ((verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.new2.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.new2.) (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!) (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr (%I (I (nClip (%I val!)))) dummy!)) :pattern ((verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly) (dummy! Poly)) (! (=> (and (has_type val! INT) (has_type dummy! T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! dummy!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.new.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.new.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!) (verismo!arch.addr_s.page.impl&%2.new2.? T&. T& val! (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!)))))
(assert (fuel_bool_default fuel%verismo!arch.entities.memid.impl&%0.is_Guest.))
(define-fun is-verismo!arch.entities.memid.MemID./Guest_ ((c verismo!arch.entities.memid.MemID.)) Bool ((_ is verismo!arch.entities.memid.MemID./Guest) c))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memid.impl&%0.is_Guest.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memid.impl&%0.is_Guest.? self!) (is-verismo!arch.entities.memid.MemID./Guest_ (%Poly%verismo!arch.entities.memid.MemID. self!))) :pattern ((verismo!arch.entities.memid.impl&%0.is_Guest.? self!))))))
(declare-fun req%verismo!arch.entities.memid.impl&%3.to_vmpl. (Poly) Bool)
(declare-const %%global_location_label%%50 Bool)
(assert (forall ((self! Poly)) (! (= (req%verismo!arch.entities.memid.impl&%3.to_vmpl. self!) (=> %%global_location_label%%50 (is-verismo!arch.entities.memid.MemID./Guest_ (%Poly%verismo!arch.entities.memid.MemID. self!)))) :pattern ((req%verismo!arch.entities.memid.impl&%3.to_vmpl. self!)))))
(assert (fuel_bool_default fuel%verismo!arch.entities.memid.impl&%3.to_vmpl.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memid.impl&%3.to_vmpl.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memid.impl&%3.to_vmpl.? self!) (ite (is-verismo!arch.entities.memid.MemID./Guest_ (%Poly%verismo!arch.entities.memid.MemID. self!)) (let ((vmpl$ (verismo!arch.entities.memid.MemID./Guest/1 (%Poly%verismo!arch.entities.memid.MemID. self!)))) vmpl$) verismo!arch.entities.VMPL./VMPL0)) :pattern ((verismo!arch.entities.memid.impl&%3.to_vmpl.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.entry_s.impl&%0.fault_rmp_update.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.entry_s.impl&%0.fault_rmp_update.) (forall ((self! Poly) (asid! Poly) (gpn! Poly) (size! Poly)) (! (= (verismo!arch.rmp.entry_s.impl&%0.fault_rmp_update.? self! asid! gpn! size!) (or (or (or (or (or (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!) (not (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!))) (not (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!) (%Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!)))) (not (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!) (%I asid!)))) (and (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!) verismo!arch.addr_s.def_s.PageSize./Size2m) (= (%Poly%verismo!arch.addr_s.def_s.PageSize. size!) verismo!arch.addr_s.def_s.PageSize./Size4k))) (not (verismo!arch.rmp.entry_s.impl&%0.is_valid.? self!)))) :pattern ((verismo!arch.rmp.entry_s.impl&%0.fault_rmp_update.? self! asid! gpn! size!))))))
(assert (fuel_bool_default fuel%verismo!arch.entities.memid.impl&%3.to_asid.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memid.impl&%3.to_asid.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memid.impl&%3.to_asid.? self!) (ite (is-verismo!arch.entities.memid.MemID./Guest_ (%Poly%verismo!arch.entities.memid.MemID. self!)) (let ((id_minus_one$ (verismo!arch.entities.memid.MemID./Guest/0 (%Poly%verismo!arch.entities.memid.MemID. self!)))) (nClip (Add id_minus_one$ 1))) 0)) :pattern ((verismo!arch.entities.memid.impl&%3.to_asid.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.entities.memid.MemID.) (<= 0 (verismo!arch.entities.memid.impl&%3.to_asid.? self!))) :pattern ((verismo!arch.entities.memid.impl&%3.to_asid.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_validated.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_validated.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%1.spec_set_validated.? self! val!) (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!)) val! (B (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? self!)) (I (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) (Poly%verismo!arch.addr_s.def_s.PageSize. (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!)) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)))) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_validated.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type val! BOOL)) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%1.spec_set_validated.? self! val!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_validated.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.access_s.impl&%0.pvalidate.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.access_s.impl&%0.pvalidate.) (forall ((self! Poly) (memid! Poly) (psize! Poly) (gpn! Poly) (val! Poly)) (! (= (verismo!arch.rmp.access_s.impl&%0.pvalidate.? self! memid! psize! gpn! val!) (ite (not (is-verismo!arch.entities.VMPL./VMPL0_ (%Poly%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.memid.impl&%3.to_vmpl.? memid!))))) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. verismo!arch.errors.RmpFault./Perm)) (Poly%tuple%0. tuple%0./tuple%0)))) (ite (verismo!arch.rmp.entry_s.impl&%0.fault_rmp_update.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!)) (I (verismo!arch.entities.memid.impl&%3.to_asid.? memid!)) gpn! psize!) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NestedPF (Poly%tuple%0. tuple%0./tuple%0)))) (ite (and (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!))) verismo!arch.addr_s.def_s.PageSize./Size4k) (= (%Poly%verismo!arch.addr_s.def_s.PageSize. psize!) verismo!arch.addr_s.def_s.PageSize./Size2m)) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. verismo!arch.errors.RmpFault./Size)) (Poly%tuple%0. tuple%0./tuple%0)))) (ite (= (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!))) (%B val!)) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. verismo!arch.errors.RmpFault./DoubleVal)) (Poly%tuple%0. tuple%0./tuple%0)))) (let ((hidden$ (verismo!arch.rmp.def_s.impl&%1.spec_set_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!)) val!))) (verismo!tspec.ResultWithErr./Ok (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%4.spec_set_val.? self! (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. hidden$)))))))))) :pattern ((verismo!arch.rmp.access_s.impl&%0.pvalidate.? self! memid! psize! gpn! val!))))))
(assert (forall ((self! Poly) (memid! Poly) (psize! Poly) (gpn! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type psize! TYPE%verismo!arch.addr_s.def_s.PageSize.) (has_type gpn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type val! BOOL)) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!arch.rmp.access_s.impl&%0.pvalidate.? self! memid! psize! gpn! val!)) (TYPE%verismo!tspec.ResultWithErr. $ TYPE%verismo!arch.rmp.def_s.RmpEntry. $ (TYPE%verismo!arch.errors.MemError. $ TYPE%tuple%0.)))) :pattern ((verismo!arch.rmp.access_s.impl&%0.pvalidate.? self! memid! psize! gpn! val!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%39.is_Size4k.))
(define-fun is-verismo!arch.addr_s.def_s.PageSize./Size4k_ ((c verismo!arch.addr_s.def_s.PageSize.)) Bool ((_ is verismo!arch.addr_s.def_s.PageSize./Size4k) c))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%39.is_Size4k.) (forall ((self! Poly)) (! (= (verismo!arch.addr_s.def_s.impl&%39.is_Size4k.? self!) (is-verismo!arch.addr_s.def_s.PageSize./Size4k_ (%Poly%verismo!arch.addr_s.def_s.PageSize. self!))) :pattern ((verismo!arch.addr_s.def_s.impl&%39.is_Size4k.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_s.impl&%1.valid_memmap.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_s.impl&%1.valid_memmap.) (forall ((self! Poly) (start! Poly) (size! Poly)) (! (= (verismo!ptr.snp.snp_s.impl&%1.valid_memmap.? self! start! size!) (forall ((vaddr$ Poly)) (! (=> (has_type vaddr$ INT) (=> (and (<= (%I start!) (%I vaddr$)) (< (%I vaddr$) (Add (%I start!) (%I size!)))) (= (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) vaddr$) (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmpmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/sysmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) vaddr$)))))) :pattern ((vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) vaddr$))))) :pattern ((verismo!ptr.snp.snp_s.impl&%1.valid_memmap.? self! start! size!))))))
(assert (fuel_bool_default fuel%verismo!arch.memop.impl&%0.is_RmpOp.))
(assert (=> (fuel_bool fuel%verismo!arch.memop.impl&%0.is_RmpOp.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.memop.impl&%0.is_RmpOp.? AddrT&. AddrT& self!) (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. self!))) :pattern ((verismo!arch.memop.impl&%0.is_RmpOp.? AddrT&. AddrT& self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%7.is_Pvalidate.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%7.is_Pvalidate.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%7.is_Pvalidate.? AddrT&. AddrT& self!) (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%7.is_Pvalidate.? AddrT&. AddrT& self!))))))
(assert (fuel_bool_default fuel%verismo!arch.memop.impl&%0.get_RmpOp_0.))
(assert (=> (fuel_bool fuel%verismo!arch.memop.impl&%0.get_RmpOp_0.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.memop.impl&%0.get_RmpOp_0.? AddrT&. AddrT& self!) (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. self!))) :pattern ((verismo!arch.memop.impl&%0.get_RmpOp_0.? AddrT&. AddrT& self!))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.impl&%0.get_RmpOp_0.? AddrT&. AddrT& self!)) (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&))) :pattern ((verismo!arch.memop.impl&%0.get_RmpOp_0.? AddrT&. AddrT& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.entities.memid.impl&%2.memid.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memid.impl&%2.memid.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memid.impl&%2.memid.? self!) (verismo!arch.entities.memid.CpuMemID./CpuMemID/1 (%Poly%verismo!arch.entities.memid.CpuMemID. self!))) :pattern ((verismo!arch.entities.memid.impl&%2.memid.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.entities.memid.CpuMemID.) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.memid.impl&%2.memid.? self!)) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.entities.memid.impl&%2.memid.? self!)))))
(assert (tr_bound%verismo!arch.addr_s.def_s.AddrType. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%5.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%5.from_int.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) val!) (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new.? T&. T& val!))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) val!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecSub.spec_sub.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%1.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%1.spec_sub.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (Sub (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecAdd.spec_add.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%0.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%0.spec_add.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (Add (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(declare-fun req%verismo!arch.addr_s.page.impl&%8.from_range. (Dcr Type Poly Poly) Bool)
(declare-const %%global_location_label%%51 Bool)
(assert (forall ((T&. Dcr) (T& Type) (addr! Poly) (size! Poly)) (! (= (req%verismo!arch.addr_s.page.impl&%8.from_range. T&. T& addr! size!) (=> %%global_location_label%%51 (= (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) $ INT $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) $ INT $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) addr! size!) (I 1))) (verismo!arch.addr_s.page.impl&%2.to_page.? T&. T& addr!)))) :pattern ((req%verismo!arch.addr_s.page.impl&%8.from_range. T&. T& addr! size!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.from_range.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.from_range.) (forall ((T&. Dcr) (T& Type) (addr! Poly) (size! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.from_range.? T&. T& addr! size!) (verismo!arch.addr_s.def_s.SpecMem./SpecMem (%Poly%verismo!arch.addr_s.def_s.SpecAddr. addr!) (%I size!))) :pattern ((verismo!arch.addr_s.page.impl&%8.from_range.? T&. T& addr! size!))))))
(assert (forall ((T&. Dcr) (T& Type) (addr! Poly) (size! Poly)) (! (=> (and (has_type addr! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type size! NAT)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%8.from_range.? T&. T& addr! size!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%8.from_range.? T&. T& addr! size!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.to_mem.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.to_mem.) (forall ((T&. Dcr) (T& Type) (self! Poly) (n! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.to_mem.? T&. T& self! n!) (verismo!arch.addr_s.page.impl&%8.from_range.? T&. T& self! n!)) :pattern ((verismo!arch.addr_s.page.impl&%2.to_mem.? T&. T& self! n!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type n! NAT)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%2.to_mem.? T&. T& self! n!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%2.to_mem.? T&. T& self! n!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.? AddrT&. AddrT& self!) (ite (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)) (let ((page_id$ (verismo!arch.rmp.def_s.RmpOp./RmpAdjust/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) page_id$) (ite (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)) (let ((page_id$ (verismo!arch.rmp.def_s.RmpOp./Pvalidate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) page_id$) (let ((page_id$ (verismo!arch.rmp.def_s.RmpOp./RmpUpdate/0 (%Poly%verismo!arch.rmp.def_s.RmpOp. self!)))) page_id$)))) :pattern ((verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.? AddrT&. AddrT& self!))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.rmp.def_s.RmpOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.PageID. (verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.? AddrT&. AddrT& self!)) (TYPE%verismo!arch.entities.params.PageID. AddrT&. AddrT&))) :pattern ((verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.? AddrT&. AddrT& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%4.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%4.as_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!) (I (verismo!arch.addr_s.def_s.SpecPage./SpecPage/value (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.value.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.value.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!))) :pattern ((verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.to_addr.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.to_addr.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& self!) (let ((page$ (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!))) (verismo!arch.addr_s.page.impl&%2.new.? T&. T& (I (Mul (verismo!arch.addr_s.page.impl&%3.value.? T&. T& self!) 4096))))) :pattern ((verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%3.to_mem.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%3.to_mem.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%3.to_mem.? T&. T& self!) (let ((page$ (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!))) (verismo!arch.addr_s.page.impl&%2.to_mem.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%3.to_addr.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. page$))) (I 4096)))) :pattern ((verismo!arch.addr_s.page.impl&%3.to_mem.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%3.to_mem.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%3.to_mem.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.null.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.null.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!arch.addr_s.page.impl&%2.null.? T&. T&) (verismo!arch.addr_s.page.impl&%2.new.? T&. T& (I 0))) :pattern ((verismo!arch.addr_s.page.impl&%2.null.? T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.null.? T&. T&)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) :pattern ((verismo!arch.addr_s.page.impl&%2.null.? T&. T&)))))
(assert (fuel_bool_default fuel%verismo!arch.memop.memop.impl&%0.to_addr_memid.))
(assert (=> (fuel_bool fuel%verismo!arch.memop.memop.impl&%0.to_addr_memid.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.memop.memop.impl&%0.to_addr_memid.? AddrT&. AddrT& self!) (ite (is-verismo!arch.memop.MemOp./Read_ (%Poly%verismo!arch.memop.MemOp. self!)) (let ((addr_id$ (verismo!arch.memop.MemOp./Read/0 (%Poly%verismo!arch.memop.MemOp. self!)))) addr_id$) (ite (is-verismo!arch.memop.MemOp./Write_ (%Poly%verismo!arch.memop.MemOp. self!)) (let ((addr_id$ (verismo!arch.memop.MemOp./Write/0 (%Poly%verismo!arch.memop.MemOp. self!)))) (let ((bytes$ (verismo!arch.memop.MemOp./Write/2 (%Poly%verismo!arch.memop.MemOp. self!)))) (verismo!arch.entities.params.AddrMemID./AddrMemID (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%2.to_mem.? AddrT&. AddrT& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.entities.params.AddrID./AddrID/addr (%Poly%verismo!arch.entities.params.AddrID. (Poly%verismo!arch.entities.params.AddrID. addr_id$)))) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. bytes$)))))) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrID./AddrID/memid (%Poly%verismo!arch.entities.params.AddrID. (Poly%verismo!arch.entities.params.AddrID. addr_id$)))))))) (ite (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. self!)) (let ((rmpop$ (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. self!)))) (let ((tmp%%$ (verismo!arch.rmp.rmpop_u.impl&%0.to_page_memid.? AddrT&. AddrT& (Poly%verismo!arch.rmp.def_s.RmpOp. rmpop$)))) (let ((memid$ (verismo!arch.entities.params.PageID./PageID/memid (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. tmp%%$))))) (let ((page$ (verismo!arch.entities.params.PageID./PageID/page (%Poly%verismo!arch.entities.params.PageID. (Poly%verismo!arch.entities.params.PageID. tmp%%$))))) (verismo!arch.entities.params.AddrMemID./AddrMemID (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%3.to_mem.? AddrT&. AddrT& (Poly%verismo!arch.addr_s.def_s.SpecPage. page$)))) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. memid$))))))) (ite (is-verismo!arch.memop.MemOp./InvlPage_ (%Poly%verismo!arch.memop.MemOp. self!)) (let ((addr_id$ (verismo!arch.memop.MemOp./InvlPage/0 (%Poly%verismo!arch.memop.MemOp. self!)))) addr_id$) (let ((memid$ (verismo!arch.memop.MemOp./FlushAll/0 (%Poly%verismo!arch.memop.MemOp. self!)))) (verismo!arch.entities.params.AddrMemID./AddrMemID (%Poly%verismo!arch.addr_s.def_s.SpecMem. (Poly%verismo!arch.addr_s.def_s.SpecMem. (verismo!arch.addr_s.page.impl&%8.from_range.? AddrT&. AddrT& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.null.? AddrT&. AddrT&)) (I 0)))) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. memid$))))))))) :pattern ((verismo!arch.memop.memop.impl&%0.to_addr_memid.? AddrT&. AddrT& self!))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? AddrT&. AddrT& self!)) (TYPE%verismo!arch.entities.params.AddrMemID. AddrT&. AddrT&))) :pattern ((verismo!arch.memop.memop.impl&%0.to_addr_memid.? AddrT&. AddrT& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.memop.memop.impl&%0.to_memid.))
(assert (=> (fuel_bool fuel%verismo!arch.memop.memop.impl&%0.to_memid.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.memop.memop.impl&%0.to_memid.? AddrT&. AddrT& self!) (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? AddrT&. AddrT& self!))))) :pattern ((verismo!arch.memop.memop.impl&%0.to_memid.? AddrT&. AddrT& self!))))))
(assert (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.memop.MemOp. AddrT&. AddrT&)) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.memop.memop.impl&%0.to_memid.? AddrT&. AddrT& self!)) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.memop.memop.impl&%0.to_memid.? AddrT&. AddrT& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%0.cpu_memid.))
(define-fun is-verismo!arch.x64.def_s.Archx64Op./MemOp_ ((c verismo!arch.x64.def_s.Archx64Op.)) Bool ((_ is verismo!arch.x64.def_s.Archx64Op./MemOp) c))
(define-fun is-verismo!arch.x64.def_s.Archx64Op./RegWrite_ ((c verismo!arch.x64.def_s.Archx64Op.)) Bool ((_ is verismo!arch.x64.def_s.Archx64Op./RegWrite) c))
(define-fun is-verismo!arch.x64.def_s.Archx64Op./RegRead_ ((c verismo!arch.x64.def_s.Archx64Op.)) Bool ((_ is verismo!arch.x64.def_s.Archx64Op./RegRead) c))
(define-fun is-verismo!arch.x64.def_s.Archx64Op./VMGExit_ ((c verismo!arch.x64.def_s.Archx64Op.)) Bool ((_ is verismo!arch.x64.def_s.Archx64Op./VMGExit) c))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%0.cpu_memid.) (forall ((self! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? self!) (ite (is-verismo!arch.x64.def_s.Archx64Op./MemOp_ (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)) (let ((memop$ (verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) (let ((cpu$ (verismo!arch.x64.def_s.Archx64Op./MemOp/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) (verismo!arch.entities.memid.CpuMemID./CpuMemID (%I (I cpu$)) (%Poly%verismo!arch.entities.memid.MemID. (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.entities.params.AddrMemID./AddrMemID/memid (%Poly%verismo!arch.entities.params.AddrMemID. (Poly%verismo!arch.entities.params.AddrMemID. (verismo!arch.memop.memop.impl&%0.to_addr_memid.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.memop.MemOp. memop$)))))))))) (ite (is-verismo!arch.x64.def_s.Archx64Op./RegWrite_ (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)) (let ((id$ (verismo!arch.x64.def_s.Archx64Op./RegWrite/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) (let ((reg_name$ (verismo!arch.x64.def_s.Archx64Op./RegWrite/1 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) id$)) (ite (is-verismo!arch.x64.def_s.Archx64Op./RegRead_ (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)) (let ((id$ (verismo!arch.x64.def_s.Archx64Op./RegRead/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) id$) (ite (is-verismo!arch.x64.def_s.Archx64Op./VMGExit_ (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)) (let ((id$ (verismo!arch.x64.def_s.Archx64Op./VMGExit/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) id$) (let ((id$ (verismo!arch.x64.def_s.Archx64Op./LoopHalt/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!)))) id$)))))) :pattern ((verismo!arch.x64.x64_s.impl&%0.cpu_memid.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? self!)) TYPE%verismo!arch.entities.memid.CpuMemID.)) :pattern ((verismo!arch.x64.x64_s.impl&%0.cpu_memid.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%0.to_memid.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%0.to_memid.) (forall ((self! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%0.to_memid.? self!) (verismo!arch.entities.memid.impl&%2.memid.? (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? self!)))) :pattern ((verismo!arch.x64.x64_s.impl&%0.to_memid.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? self!)) TYPE%verismo!arch.entities.memid.MemID.)) :pattern ((verismo!arch.x64.x64_s.impl&%0.to_memid.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%0.is_MemOp.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%0.is_MemOp.) (forall ((self! Poly)) (! (= (verismo!arch.x64.def_s.impl&%0.is_MemOp.? self!) (is-verismo!arch.x64.def_s.Archx64Op./MemOp_ (%Poly%verismo!arch.x64.def_s.Archx64Op. self!))) :pattern ((verismo!arch.x64.def_s.impl&%0.is_MemOp.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%0.get_MemOp_0.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%0.get_MemOp_0.) (forall ((self! Poly)) (! (= (verismo!arch.x64.def_s.impl&%0.get_MemOp_0.? self!) (verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. self!))) :pattern ((verismo!arch.x64.def_s.impl&%0.get_MemOp_0.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.x64.def_s.Archx64Op.) (has_type (Poly%verismo!arch.memop.MemOp. (verismo!arch.x64.def_s.impl&%0.get_MemOp_0.? self!)) (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) :pattern ((verismo!arch.x64.def_s.impl&%0.get_MemOp_0.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%4.spec_entities.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%4.spec_entities.) (forall ((self! Poly)) (! (= (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!) (verismo!arch.x64.def_s.Archx64./Archx64/entities (%Poly%verismo!arch.x64.def_s.Archx64. self!))) :pattern ((verismo!arch.x64.def_s.impl&%4.spec_entities.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%4.spec_memdb.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%4.spec_memdb.) (forall ((self! Poly)) (! (= (verismo!arch.x64.def_s.impl&%4.spec_memdb.? self!) (verismo!arch.x64.def_s.Archx64./Archx64/memdb (%Poly%verismo!arch.x64.def_s.Archx64. self!))) :pattern ((verismo!arch.x64.def_s.impl&%4.spec_memdb.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%4.spec_regdb.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%4.spec_regdb.) (forall ((self! Poly)) (! (= (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!) (verismo!arch.x64.def_s.Archx64./Archx64/regdb (%Poly%verismo!arch.x64.def_s.Archx64. self!))) :pattern ((verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%5.spec_set_entities.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%5.spec_set_entities.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.x64.def_s.impl&%5.spec_set_entities.? self! val!) (verismo!arch.x64.def_s.impl&%6.spec_new.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.x64.def_s.impl&%4.spec_memdb.? self!)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!)) val!)) :pattern ((verismo!arch.x64.def_s.impl&%5.spec_set_entities.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.stop_cpu.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.stop_cpu.) (forall ((self! Poly) (memid! Poly) (cpu! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.stop_cpu.? self! memid! cpu!) (let ((memid_entries$ (%Poly%vstd!map.Map<nat./bool.>. (vstd!map.impl&%0.insert.? $ NAT $ BOOL (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)) memid!) cpu! (B false))))) (verismo!arch.x64.def_s.impl&%5.spec_set_entities.? self! (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)) memid! (Poly%vstd!map.Map<nat./bool.>. memid_entries$))))) :pattern ((verismo!arch.x64.x64_s.impl&%1.stop_cpu.? self! memid! cpu!))))))
(assert (fuel_bool_default fuel%verismo!arch.entities.memid.impl&%2.cpu.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.memid.impl&%2.cpu.) (forall ((self! Poly)) (! (= (verismo!arch.entities.memid.impl&%2.cpu.? self!) (verismo!arch.entities.memid.CpuMemID./CpuMemID/0 (%Poly%verismo!arch.entities.memid.CpuMemID. self!))) :pattern ((verismo!arch.entities.memid.impl&%2.cpu.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.entities.memid.CpuMemID.) (<= 0 (verismo!arch.entities.memid.impl&%2.cpu.? self!))) :pattern ((verismo!arch.entities.memid.impl&%2.cpu.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%0.cpu.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%0.cpu.) (forall ((self! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%0.cpu.? self!) (verismo!arch.entities.memid.impl&%2.cpu.? (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? self!)))) :pattern ((verismo!arch.x64.x64_s.impl&%0.cpu.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!arch.x64.def_s.Archx64Op.) (<= 0 (verismo!arch.x64.x64_s.impl&%0.cpu.? self!))) :pattern ((verismo!arch.x64.x64_s.impl&%0.cpu.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle.))
(define-fun is-verismo!arch.x64.def_s.AECode./VMGExit_ ((c verismo!arch.x64.def_s.AECode.)) Bool ((_ is verismo!arch.x64.def_s.AECode./VMGExit) c))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle.) (forall ((self! Poly) (op! Poly) (err! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle.? self! op! err!) (ite (is-verismo!arch.x64.def_s.AECode./VMGExit_ (%Poly%verismo!arch.x64.def_s.AECode. err!)) (%Poly%verismo!arch.x64.def_s.Archx64. self!) (verismo!arch.x64.x64_s.impl&%1.stop_cpu.? self! (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? op!)) (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op!))))) :pattern ((verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle.? self! op! err!))))))
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.spec_vc_handle.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.spec_vc_handle.) (forall ((self! Poly) (op! Poly) (err! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.spec_vc_handle.? self! op! err!) (verismo!arch.x64.x64_s.impl&%1.stop_cpu.? self! (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? op!)) (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op!)))) :pattern ((verismo!arch.x64.x64_s.impl&%1.spec_vc_handle.? self! op! err!))))))
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.spec_exception_handle.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.spec_exception_handle.) (forall ((self! Poly) (op! Poly) (err! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.spec_exception_handle.? self! op! err!) (verismo!arch.x64.x64_s.impl&%1.stop_cpu.? self! (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? op!)) (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op!)))) :pattern ((verismo!arch.x64.x64_s.impl&%1.spec_exception_handle.? self! op! err!))))))
(assert (fuel_bool_default fuel%verismo!arch.x64.def_s.impl&%5.spec_set_regdb.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.def_s.impl&%5.spec_set_regdb.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.x64.def_s.impl&%5.spec_set_regdb.? self! val!) (verismo!arch.x64.def_s.impl&%6.spec_new.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.x64.def_s.impl&%4.spec_memdb.? self!)) val! (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)))) :pattern ((verismo!arch.x64.def_s.impl&%5.spec_set_regdb.? self! val!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (map! Poly)) (! (=> (has_type map! (TYPE%vstd!map.Map. K&. K& V&. V&)) (has_type (verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!) (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&))) :pattern ((verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!)))))
(assert (fuel_bool_default fuel%verismo!tspec.fmap.impl&%1.spec_set_map.))
(assert (=> (fuel_bool fuel%verismo!tspec.fmap.impl&%1.spec_set_map.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (val! Poly)) (! (= (verismo!tspec.fmap.impl&%1.spec_set_map.? K&. K& V&. V& self! val!) (verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& val!)) :pattern ((verismo!tspec.fmap.impl&%1.spec_set_map.? K&. K& V&. V& self! val!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (val! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type val! (TYPE%vstd!map.Map. K&. K& V&. V&))) (has_type (verismo!tspec.fmap.impl&%1.spec_set_map.? K&. K& V&. V& self! val!) (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&))) :pattern ((verismo!tspec.fmap.impl&%1.spec_set_map.? K&. K& V&. V& self! val!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) (TYPE%vstd!map.Map. K&. K& V&. V&))) :pattern ((verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec.fmap.impl&%3.insert.))
(assert (=> (fuel_bool fuel%verismo!tspec.fmap.impl&%3.insert.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (= (verismo!tspec.fmap.impl&%3.insert.? K&. K& V&. V& self! k! v!) (verismo!tspec.fmap.impl&%1.spec_set_map.? K&. K& V&. V& self! (vstd!map.impl&%0.insert.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) k! v!))) :pattern ((verismo!tspec.fmap.impl&%3.insert.? K&. K& V&. V& self! k! v!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly) (v! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type k! K&) (has_type v! V&)) (has_type (verismo!tspec.fmap.impl&%3.insert.? K&. K& V&. V& self! k! v!) (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&))) :pattern ((verismo!tspec.fmap.impl&%3.insert.? K&. K& V&. V& self! k! v!)))))
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.op_write_reg.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.op_write_reg.) (forall ((self! Poly) (memid! Poly) (name! Poly) (val! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.op_write_reg.? self! memid! name! val!) (verismo!arch.x64.def_s.impl&%5.spec_set_regdb.? self! (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!)) memid! (verismo!tspec.fmap.impl&%1.spec_set_map.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!)) memid!) (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!)) memid!)) name! val!))))) :pattern ((verismo!arch.x64.x64_s.impl&%1.op_write_reg.? self! memid! name! val!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.) (= verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.? 6)))
(assert (uInv 64 verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.?))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.RMP_FAIL_INPUT.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.RMP_FAIL_INPUT.) (= verismo!arch.rmp.def_s.RMP_FAIL_INPUT.? 1)))
(assert (uInv 64 verismo!arch.rmp.def_s.RMP_FAIL_INPUT.?))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.) (= verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.? 2)))
(assert (uInv 64 verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.?))
(assert (fuel_bool_default fuel%verismo!tspec.fmap.impl&%3.spec_index.))
(assert (=> (fuel_bool fuel%verismo!tspec.fmap.impl&%3.spec_index.) (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (= (verismo!tspec.fmap.impl&%3.spec_index.? K&. K& V&. V& self! k!) (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) k!)) :pattern ((verismo!tspec.fmap.impl&%3.spec_index.? K&. K& V&. V& self! k!))))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (k! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type k! K&)) (has_type (verismo!tspec.fmap.impl&%3.spec_index.? K&. K& V&. V& self! k!) V&)) :pattern ((verismo!tspec.fmap.impl&%3.spec_index.? K&. K& V&. V& self! k!)))))
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_bit_set.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_bit_set.) (forall ((val! Poly) (bit! Poly)) (! (= (verismo!tspec.math.bits_p.spec_bit_set.? val! bit!) (uClip 64 (uintor 64 (I (%I val!)) (I (uClip 64 (uintshl 64 (I 1) (I (%I bit!)))))))) :pattern ((verismo!tspec.math.bits_p.spec_bit_set.? val! bit!))))))
(assert (forall ((val! Poly) (bit! Poly)) (! (=> (and (has_type val! (UINT 64)) (has_type bit! (UINT 64))) (uInv 64 (verismo!tspec.math.bits_p.spec_bit_set.? val! bit!))) :pattern ((verismo!tspec.math.bits_p.spec_bit_set.? val! bit!)))))
(assert (fuel_bool_default fuel%verismo!arch.reg.impl&%3.as_int.))
(define-fun is-verismo!arch.reg.RflagBit./CF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./CF) c))
(define-fun is-verismo!arch.reg.RflagBit./R1_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./R1) c))
(define-fun is-verismo!arch.reg.RflagBit./PF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./PF) c))
(define-fun is-verismo!arch.reg.RflagBit./R2_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./R2) c))
(define-fun is-verismo!arch.reg.RflagBit./AF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./AF) c))
(define-fun is-verismo!arch.reg.RflagBit./R3_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./R3) c))
(define-fun is-verismo!arch.reg.RflagBit./ZF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./ZF) c))
(define-fun is-verismo!arch.reg.RflagBit./SF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./SF) c))
(define-fun is-verismo!arch.reg.RflagBit./TF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./TF) c))
(define-fun is-verismo!arch.reg.RflagBit./IF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./IF) c))
(define-fun is-verismo!arch.reg.RflagBit./DF_ ((c verismo!arch.reg.RflagBit.)) Bool ((_ is verismo!arch.reg.RflagBit./DF) c))
(assert (=> (fuel_bool fuel%verismo!arch.reg.impl&%3.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. self!) (I (let ((val$ (ite (is-verismo!arch.reg.RflagBit./CF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 0 (ite (is-verismo!arch.reg.RflagBit./R1_ (%Poly%verismo!arch.reg.RflagBit. self!)) 1 (ite (is-verismo!arch.reg.RflagBit./PF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 2 (ite (is-verismo!arch.reg.RflagBit./R2_ (%Poly%verismo!arch.reg.RflagBit. self!)) 3 (ite (is-verismo!arch.reg.RflagBit./AF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 4 (ite (is-verismo!arch.reg.RflagBit./R3_ (%Poly%verismo!arch.reg.RflagBit. self!)) 5 (ite (is-verismo!arch.reg.RflagBit./ZF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 6 (ite (is-verismo!arch.reg.RflagBit./SF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 7 (ite (is-verismo!arch.reg.RflagBit./TF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 8 (ite (is-verismo!arch.reg.RflagBit./IF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 9 (ite (is-verismo!arch.reg.RflagBit./DF_ (%Poly%verismo!arch.reg.RflagBit. self!)) 10 21))))))))))))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn.))
(declare-fun %%lambda%%9 (Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (arch$ Poly) (op$ Poly)) (! (= (%%apply%%1 (%%lambda%%9 %%hole%%0) arch$ op$) (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.spec_vmexit_handle.? arch$ op$ %%hole%%0))) :pattern ((%%apply%%1 (%%lambda%%9 %%hole%%0) arch$ op$)))))
(declare-fun %%lambda%%10 (verismo!arch.memop.MemOp.) %%Function%%)
(assert (forall ((%%hole%%0 verismo!arch.memop.MemOp.) (arch$ Poly) (op$ Poly)) (! (= (%%apply%%1 (%%lambda%%10 %%hole%%0) arch$ op$) (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.spec_vc_handle.? arch$ op$ (Poly%verismo!arch.x64.def_s.NAECode. (verismo!arch.x64.def_s.NAECode./NotValidated (%Poly%verismo!arch.x64.def_s.Archx64Op. (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./MemOp %%hole%%0 (%I (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op$))))))))))) :pattern ((%%apply%%1 (%%lambda%%10 %%hole%%0) arch$ op$)))))
(declare-fun %%lambda%%11 (verismo!arch.memop.MemOp.) %%Function%%)
(assert (forall ((%%hole%%0 verismo!arch.memop.MemOp.) (arch$ Poly) (op$ Poly)) (! (= (%%apply%%1 (%%lambda%%11 %%hole%%0) arch$ op$) (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.spec_exception_handle.? arch$ op$ (Poly%verismo!arch.x64.def_s.ExceptionCode. (verismo!arch.x64.def_s.ExceptionCode./PFault (%Poly%verismo!arch.x64.def_s.Archx64Op. (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./MemOp %%hole%%0 (%I (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op$))))))))))) :pattern ((%%apply%%1 (%%lambda%%11 %%hole%%0) arch$ op$)))))
(declare-fun %%lambda%%12 (verismo!arch.memop.MemOp.) %%Function%%)
(assert (forall ((%%hole%%0 verismo!arch.memop.MemOp.) (arch$ Poly) (op$ Poly)) (! (= (%%apply%%1 (%%lambda%%12 %%hole%%0) arch$ op$) (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.spec_exception_handle.? arch$ op$ (Poly%verismo!arch.x64.def_s.ExceptionCode. (verismo!arch.x64.def_s.ExceptionCode./GP (%Poly%verismo!arch.x64.def_s.Archx64Op. (Poly%verismo!arch.x64.def_s.Archx64Op. (verismo!arch.x64.def_s.Archx64Op./MemOp %%hole%%0 (%I (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op$))))))))))) :pattern ((%%apply%%1 (%%lambda%%12 %%hole%%0) arch$ op$)))))
(declare-fun %%lambda%%13 (Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Poly) (%%hole%%1 Poly) (arch$ Poly) (op$ Poly)) (! (= (%%apply%%1 (%%lambda%%13 %%hole%%0 %%hole%%1) arch$ op$) (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.op_write_reg.? arch$ (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? op$)) %%hole%%0 %%hole%%1))) :pattern ((%%apply%%1 (%%lambda%%13 %%hole%%0 %%hole%%1) arch$ op$)))))
(declare-fun %%lambda%%14 (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Int Int Poly Int Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Poly) (%%hole%%13 Int) (%%hole%%14 Int) (%%hole%%15 Poly) (%%hole%%16 Int) (%%hole%%17 Poly) (arch$ Poly) (op$ Poly)) (! (= (%%apply%%1 (%%lambda%%14 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17) arch$ op$) (Poly%verismo!arch.x64.def_s.Archx64. (let ((rflags$ (%I (vstd!map.impl&%0.index.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 (verismo!tspec.fmap.impl&%0.spec_map.? %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? arch$)) (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? op$)))) %%hole%%12)))) (let ((update$ (uClip %%hole%%16 (uintor %%hole%%14 (I (%I (I (uClip %%hole%%13 rflags$)))) %%hole%%15)))) (verismo!arch.x64.x64_s.impl&%1.op_write_reg.? arch$ (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? op$)) %%hole%%17 (I update$)))))) :pattern ((%%apply%%1 (%%lambda%%14 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17) arch$ op$)))))
(declare-fun %%lambda%%15 () %%Function%%)
(assert (forall ((arch$ Poly) (op$ Poly)) (! (= (%%apply%%1 %%lambda%%15 arch$ op$) (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.x64_s.impl&%1.stop_cpu.? arch$ (Poly%verismo!arch.entities.memid.MemID. (verismo!arch.x64.x64_s.impl&%0.to_memid.? op$)) (I (verismo!arch.x64.x64_s.impl&%0.cpu.? op$))))) :pattern ((%%apply%%1 %%lambda%%15 arch$ op$)))))
(define-fun is-verismo!arch.errors.RmpFault./Unsupported_ ((c verismo!arch.errors.RmpFault.)) Bool ((_ is verismo!arch.errors.RmpFault./Unsupported) c))
(define-fun is-verismo!arch.errors.RmpFault./Size_ ((c verismo!arch.errors.RmpFault.)) Bool ((_ is verismo!arch.errors.RmpFault./Size) c))
(define-fun is-verismo!arch.errors.RmpFault./Input_ ((c verismo!arch.errors.RmpFault.)) Bool ((_ is verismo!arch.errors.RmpFault./Input) c))
(define-fun is-verismo!arch.errors.RmpFault./Perm_ ((c verismo!arch.errors.RmpFault.)) Bool ((_ is verismo!arch.errors.RmpFault./Perm) c))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn.) (forall ((err! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn.? err!) (ite (is-verismo!arch.errors.MemError./NoRam_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((memop$ (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NoRam/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%9 (Poly%verismo!arch.x64.def_s.AECode. verismo!arch.x64.def_s.AECode./Npf)))))) (ite (is-verismo!arch.errors.MemError./NotValidated_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((memop$ (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NotValidated/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%10 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$))))))) (ite (is-verismo!arch.errors.MemError./NestedPF_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((memop$ (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NestedPF/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%9 (Poly%verismo!arch.x64.def_s.AECode. verismo!arch.x64.def_s.AECode./Npf)))))) (ite (is-verismo!arch.errors.MemError./PageFault_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((memop$ (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./PageFault/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%11 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$))))))) (ite (is-verismo!arch.errors.MemError./RmpOp_ (%Poly%verismo!arch.errors.MemError. err!)) (let ((fault$ (verismo!arch.errors.MemError./RmpOp/0 (%Poly%verismo!arch.errors.MemError. err!)))) (let ((memop$ (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./RmpOp/1 (%Poly%verismo!arch.errors.MemError. err!))))) (ite (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$))) (ite (is-verismo!arch.errors.RmpFault./Unsupported_ fault$) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%12 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$)))))) (ite (is-verismo!arch.errors.RmpFault./Size_ fault$) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%13 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.?))))) (ite (is-verismo!arch.errors.RmpFault./Input_ fault$) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%13 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_INPUT.?))))) (ite (is-verismo!arch.errors.RmpFault./Perm_ fault$) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%13 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.?))))) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%14 $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags) 64 64 (I (uClip 64 (uintshl 64 (I 1) (I (%I (I (uClip 64 (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./CF)))))))))) 64 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags))))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun %%lambda%%15)))))) (let ((memop$ (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./Others/0 (%Poly%verismo!arch.errors.MemError. err!))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%12 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$))))))))))))) :pattern ((verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn.? err!))))))
(assert (forall ((err! Poly)) (! (=> (has_type err! (TYPE%verismo!arch.errors.MemError. $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))) (has_type (Poly%tuple%2. (verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn.? err!)) (TYPE%tuple%2. $ BOOL $ (TYPE%fun%2. $ TYPE%verismo!arch.x64.def_s.Archx64. $ TYPE%verismo!arch.x64.def_s.Archx64Op. $ TYPE%verismo!arch.x64.def_s.Archx64.)))) :pattern ((verismo!arch.x64.x64_s.impl&%1.handle_mem_err_fn.? err!)))))
(assert (fuel_bool_default fuel%verismo!arch.errors.impl&%3.with_param.))
(assert (=> (fuel_bool fuel%verismo!arch.errors.impl&%3.with_param.) (forall ((Param&. Dcr) (Param& Type) (T&. Dcr) (T& Type) (self! Poly) (param! Poly)) (! (= (verismo!arch.errors.impl&%3.with_param.? Param&. Param& T&. T& self! param!) (ite (is-verismo!arch.errors.MemError./Others_ (%Poly%verismo!arch.errors.MemError. self!)) (verismo!arch.errors.MemError./Others param!) (ite (is-verismo!arch.errors.MemError./NoRam_ (%Poly%verismo!arch.errors.MemError. self!)) (verismo!arch.errors.MemError./NoRam param!) (ite (is-verismo!arch.errors.MemError./NotValidated_ (%Poly%verismo!arch.errors.MemError. self!)) (verismo!arch.errors.MemError./NotValidated param!) (ite (is-verismo!arch.errors.MemError./NestedPF_ (%Poly%verismo!arch.errors.MemError. self!)) (verismo!arch.errors.MemError./NestedPF param!) (ite (is-verismo!arch.errors.MemError./PageFault_ (%Poly%verismo!arch.errors.MemError. self!)) (verismo!arch.errors.MemError./PageFault param!) (let ((fault$ (verismo!arch.errors.MemError./RmpOp/0 (%Poly%verismo!arch.errors.MemError. self!)))) (verismo!arch.errors.MemError./RmpOp (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. fault$)) param!)))))))) :pattern ((verismo!arch.errors.impl&%3.with_param.? Param&. Param& T&. T& self! param!))))))
(assert (forall ((Param&. Dcr) (Param& Type) (T&. Dcr) (T& Type) (self! Poly) (param! Poly)) (! (=> (and (has_type self! (TYPE%verismo!arch.errors.MemError. Param&. Param&)) (has_type param! T&)) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.with_param.? Param&. Param& T&. T& self! param!)) (TYPE%verismo!arch.errors.MemError. T&. T&))) :pattern ((verismo!arch.errors.impl&%3.with_param.? Param&. Param& T&. T& self! param!)))))
(assert (fuel_bool_default fuel%verismo!arch.errors.impl&%3.from_err.))
(assert (=> (fuel_bool fuel%verismo!arch.errors.impl&%3.from_err.) (forall ((Param&. Dcr) (Param& Type) (T&. Dcr) (T& Type) (err! Poly) (param! Poly)) (! (= (verismo!arch.errors.impl&%3.from_err.? Param&. Param& T&. T& err! param!) (verismo!arch.errors.impl&%3.with_param.? T&. T& Param&. Param& err! param!)) :pattern ((verismo!arch.errors.impl&%3.from_err.? Param&. Param& T&. T& err! param!))))))
(assert (forall ((Param&. Dcr) (Param& Type) (T&. Dcr) (T& Type) (err! Poly) (param! Poly)) (! (=> (and (has_type err! (TYPE%verismo!arch.errors.MemError. T&. T&)) (has_type param! Param&)) (has_type (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? Param&. Param& T&. T& err! param!)) (TYPE%verismo!arch.errors.MemError. Param&. Param&))) :pattern ((verismo!arch.errors.impl&%3.from_err.? Param&. Param& T&. T& err! param!)))))
(assert (fuel_bool_default fuel%verismo!arch.x64.x64_s.impl&%1.is_run.))
(assert (=> (fuel_bool fuel%verismo!arch.x64.x64_s.impl&%1.is_run.) (forall ((self! Poly) (cpu_memid! Poly)) (! (= (verismo!arch.x64.x64_s.impl&%1.is_run.? self! cpu_memid!) (let ((memid$ (verismo!arch.entities.memid.impl&%2.memid.? cpu_memid!))) (let ((cpu$ (verismo!arch.entities.memid.impl&%2.cpu.? cpu_memid!))) (and (vstd!set.impl&%0.contains.? $ NAT (vstd!map.impl&%0.dom.? $ NAT $ BOOL (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)) (Poly%verismo!arch.entities.memid.MemID. memid$))) (I cpu$)) (%B (vstd!map.impl&%0.index.? $ NAT $ BOOL (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!)) (Poly%verismo!arch.entities.memid.MemID. memid$)) (I cpu$))))))) :pattern ((verismo!arch.x64.x64_s.impl&%1.is_run.? self! cpu_memid!))))))
(assert (fuel_bool_default fuel%verismo!tspec.impl&%5.to_result.))
(assert (=> (fuel_bool fuel%verismo!tspec.impl&%5.to_result.) (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (self! Poly)) (! (= (verismo!tspec.impl&%5.to_result.? RetValue&. RetValue& ErrorID&. ErrorID& self!) (ite (is-verismo!tspec.ResultWithErr./Ok_ (%Poly%verismo!tspec.ResultWithErr. self!)) (let ((ret$ (verismo!tspec.ResultWithErr./Ok/0 (%Poly%verismo!tspec.ResultWithErr. self!)))) ret$) (let ((ret$ (verismo!tspec.ResultWithErr./Error/0 (%Poly%verismo!tspec.ResultWithErr. self!)))) ret$))) :pattern ((verismo!tspec.impl&%5.to_result.? RetValue&. RetValue& ErrorID&. ErrorID& self!))))))
(assert (forall ((RetValue&. Dcr) (RetValue& Type) (ErrorID&. Dcr) (ErrorID& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.ResultWithErr. RetValue&. RetValue& ErrorID&. ErrorID&)) (has_type (verismo!tspec.impl&%5.to_result.? RetValue&. RetValue& ErrorID&. ErrorID& self!) RetValue&)) :pattern ((verismo!tspec.impl&%5.to_result.? RetValue&. RetValue& ErrorID&. ErrorID& self!)))))
(declare-fun req%verismo!ptr.snp.snp_s.impl&%1.pvalidate_ret. (Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%52 Bool)
(assert (forall ((self! Poly) (new! Poly) (rax! Poly) (rflags! Poly) (vmid! Poly) (vaddr! Poly) (psize! Poly) (val! Poly)) (! (= (req%verismo!ptr.snp.snp_s.impl&%1.pvalidate_ret. self! new! rax! rflags! vmid! vaddr! psize! val!) (=> %%global_location_label%%52 (> (%I vmid!) 0))) :pattern ((req%verismo!ptr.snp.snp_s.impl&%1.pvalidate_ret. self! new! rax! rflags! vmid! vaddr! psize! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_s.impl&%1.pvalidate_ret.))
(declare-fun %%choose%%1 (Type) Poly)
(assert (forall ((%%hole%%0 Type)) (! (=> (exists ((memop$1 Poly)) (! (and (has_type memop$1 %%hole%%0) (and (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. memop$1)) (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. memop$1))))))) :pattern ((verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. memop$1))))) (exists ((memop$1 Poly)) (! (and (and (has_type memop$1 %%hole%%0) (and (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. memop$1)) (is-verismo!arch.rmp.def_s.RmpOp./Pvalidate_ (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. memop$1))))))) (= (%%choose%%1 %%hole%%0) memop$1)) :pattern ((verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. memop$1)))))) :pattern ((%%choose%%1 %%hole%%0)))))
(declare-fun %%choose%%2 (Type verismo!arch.entities.memid.MemID. verismo!arch.memop.MemOp.) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 verismo!arch.entities.memid.MemID.) (%%hole%%2 verismo!arch.memop.MemOp.)) (! (=> (exists ((op$1 Poly)) (! (and (has_type op$1 %%hole%%0) (and (and (= (verismo!arch.x64.x64_s.impl&%0.to_memid.? op$1) %%hole%%1) (is-verismo!arch.x64.def_s.Archx64Op./MemOp_ (%Poly%verismo!arch.x64.def_s.Archx64Op. op$1))) (= (verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. op$1)) %%hole%%2))) :pattern ((verismo!arch.x64.x64_s.impl&%0.to_memid.? op$1)))) (exists ((op$1 Poly)) (! (and (and (has_type op$1 %%hole%%0) (and (and (= (verismo!arch.x64.x64_s.impl&%0.to_memid.? op$1) %%hole%%1) (is-verismo!arch.x64.def_s.Archx64Op./MemOp_ (%Poly%verismo!arch.x64.def_s.Archx64Op. op$1))) (= (verismo!arch.x64.def_s.Archx64Op./MemOp/0 (%Poly%verismo!arch.x64.def_s.Archx64Op. op$1)) %%hole%%2))) (= (%%choose%%2 %%hole%%0 %%hole%%1 %%hole%%2) op$1)) :pattern ((verismo!arch.x64.x64_s.impl&%0.to_memid.? op$1))))) :pattern ((%%choose%%2 %%hole%%0 %%hole%%1 %%hole%%2)))))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_s.impl&%1.pvalidate_ret.) (forall ((self! Poly) (new! Poly) (rax! Poly) (rflags! Poly) (vmid! Poly) (vaddr! Poly) (psize! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_s.impl&%1.pvalidate_ret.? self! new! rax! rflags! vmid! vaddr! psize! val!) (let ((memid$ (verismo!arch.entities.memid.MemID./Guest (%I (I (nClip (Sub (%I vmid!) 1)))) (%Poly%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL0))))) (let ((page$ (verismo!arch.addr_s.page.impl&%2.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. vaddr!))))) (let ((ret$ (verismo!arch.rmp.access_s.impl&%0.pvalidate.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) (Poly%verismo!arch.entities.memid.MemID. memid$) psize! (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/gpn (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))))) val!))) (let ((size$ (ite (is-verismo!arch.addr_s.def_s.PageSize./Size4k_ (%Poly%verismo!arch.addr_s.def_s.PageSize. psize!)) 4096 33554432))) (let ((map_ok$ (verismo!ptr.snp.snp_s.impl&%1.valid_memmap.? self! vaddr! (I (nClip size$))))) (and map_ok$ (ite (is-verismo!tspec.ResultWithErr./Error_ ret$) (let ((memerr$ (%Poly%verismo!arch.errors.MemError. (verismo!tspec.ResultWithErr./Error/1 (%Poly%verismo!tspec.ResultWithErr. (Poly%verismo!tspec.ResultWithErr. ret$)))))) (let ((arch$ (%Poly%verismo!arch.x64.def_s.Archx64. (vstd!pervasive.arbitrary.? $ TYPE%verismo!arch.x64.def_s.Archx64.)))) (let ((memop$ (%Poly%verismo!arch.memop.MemOp. (as_type (%%choose%%1 (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))))) (let ((op$ (%Poly%verismo!arch.x64.def_s.Archx64Op. (as_type (%%choose%%2 TYPE%verismo!arch.x64.def_s.Archx64Op. memid$ memop$) TYPE%verismo!arch.x64.def_s.Archx64Op.)))) (let ((tmp%%$ (ite (is-verismo!arch.errors.MemError./NoRam_ (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$))))) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NoRam/0 (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$)))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%9 (Poly%verismo!arch.x64.def_s.AECode. verismo!arch.x64.def_s.AECode./Npf)))))) (ite (is-verismo!arch.errors.MemError./NotValidated_ (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$))))) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NotValidated/0 (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$)))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%10 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0))))))) (ite (is-verismo!arch.errors.MemError./NestedPF_ (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$))))) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NestedPF/0 (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$)))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%9 (Poly%verismo!arch.x64.def_s.AECode. verismo!arch.x64.def_s.AECode./Npf)))))) (ite (is-verismo!arch.errors.MemError./PageFault_ (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$))))) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./PageFault/0 (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$)))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%11 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0))))))) (ite (is-verismo!arch.errors.MemError./RmpOp_ (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$))))) (let ((fault$$0 (verismo!arch.errors.MemError./RmpOp/0 (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$))))))) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./RmpOp/1 (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$)))))))) (ite (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0))) (ite (is-verismo!arch.errors.RmpFault./Unsupported_ fault$$0) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%12 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0)))))) (ite (is-verismo!arch.errors.RmpFault./Size_ fault$$0) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%13 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.?))))) (ite (is-verismo!arch.errors.RmpFault./Input_ fault$$0) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%13 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_INPUT.?))))) (ite (is-verismo!arch.errors.RmpFault./Perm_ fault$$0) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%13 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.?))))) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%14 $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags) 64 64 (I (uClip 64 (uintshl 64 (I 1) (I (%I (I (uClip 64 (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./CF)))))))))) 64 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags))))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun %%lambda%%15)))))) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./Others/0 (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$)))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%12 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0)))))))))))))) (let ((trap$ (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((trans$ (%Poly%fun%2. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (not trap$) (and (and (and (= rax! (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? (%%apply%%1 trans$ (Poly%verismo!arch.x64.def_s.Archx64. arch$) (Poly%verismo!arch.x64.def_s.Archx64Op. op$)))) (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? (Poly%verismo!arch.x64.def_s.Archx64Op. op$))))) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax))) (= rflags! (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? (%%apply%%1 trans$ (Poly%verismo!arch.x64.def_s.Archx64. arch$) (Poly%verismo!arch.x64.def_s.Archx64Op. op$)))) (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? (Poly%verismo!arch.x64.def_s.Archx64Op. op$))))) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags)))) (= self! new!)) (verismo!arch.x64.x64_s.impl&%1.is_run.? (Poly%verismo!arch.x64.def_s.Archx64. arch$) (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? (Poly%verismo!arch.x64.def_s.Archx64Op. op$))))))))))))) (= (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. new!) (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? self! (verismo!tspec.impl&%5.to_result.? $ TYPE%verismo!arch.rmp.def_s.RmpEntry. $ (TYPE%verismo!arch.errors.MemError. $ TYPE%tuple%0.) (Poly%verismo!tspec.ResultWithErr. ret$)))))))))))) :pattern ((verismo!ptr.snp.snp_s.impl&%1.pvalidate_ret.? self! new! rax! rflags! vmid! vaddr! psize! val!))))))
(assert (fuel_bool_default fuel%verismo!tspec.math.bits_p.spec_has_bit_set.))
(assert (=> (fuel_bool fuel%verismo!tspec.math.bits_p.spec_has_bit_set.) (forall ((val! Poly) (bit! Poly)) (! (= (verismo!tspec.math.bits_p.spec_has_bit_set.? val! bit!) (= (uClip 64 (uintshl 64 (I 1) (I (%I bit!)))) (uClip 64 (uintand 64 (I (%I val!)) (I (uClip 64 (uintshl 64 (I 1) (I (%I bit!))))))))) :pattern ((verismo!tspec.math.bits_p.spec_has_bit_set.? val! bit!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_s.impl&%0.ensures_pvalidated.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_s.impl&%0.ensures_pvalidated.) (forall ((self! Poly) (prev! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_s.impl&%0.ensures_pvalidated.? self! prev! val!) (and (= (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))) (verismo!arch.rmp.def_s.impl&%1.spec_set_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. prev!))))) val!)) (= (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!) (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? prev! (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))))) :pattern ((verismo!ptr.snp.snp_s.impl&%0.ensures_pvalidated.? self! prev! val!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_s.impl&%2.pvalidate_ret.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_s.impl&%2.pvalidate_ret.) (forall ((self! Poly) (new! Poly) (rax! Poly) (rflags! Poly) (vaddr! Poly) (is_2m! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_s.impl&%2.pvalidate_ret.? self! new! rax! rflags! vaddr! is_2m! val!) (let ((psize$ (ite (= (EucMod (%I is_2m!) 2) 0) verismo!arch.addr_s.def_s.PageSize./Size4k verismo!arch.addr_s.def_s.PageSize./Size4k))) (let ((validated$ (= (EucMod (%I val!) 2) 1))) (and (verismo!ptr.snp.snp_s.impl&%1.pvalidate_ret.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!))) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. new!))) rax! rflags! (I (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!))))))))))) vaddr! (Poly%verismo!arch.addr_s.def_s.PageSize. psize$) (B validated$)) (ite (and (= (%I rax!) 0) (not (= (uClip 64 (uintshl 64 (I 1) (I (%I (I (uClip 64 (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./CF))))))))) (uClip 64 (uintand 64 (I (%I rflags!)) (I (uClip 64 (uintshl 64 (I 1) (I (%I (I (uClip 64 (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./CF))))))))))))))) (verismo!ptr.snp.snp_s.impl&%0.ensures_pvalidated.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. new!))) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!))) (B validated$)) (= (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. new!)) (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!)))))))) :pattern ((verismo!ptr.snp.snp_s.impl&%2.pvalidate_ret.? self! new! rax! rflags! vaddr! is_2m! val!))))))
(declare-fun req%verismo!ptr.snp.rmp.rmp_t.pvalidate. (Int Int Int Int verismo!registers.trackedcore.snpcore.SnpCore. verismo!ptr.def_s.SnpPointsToRaw.) Bool)
(declare-const %%global_location_label%%53 Bool)
(declare-const %%global_location_label%%54 Bool)
(declare-const %%global_location_label%%55 Bool)
(assert (forall ((vaddr! Int) (psize! Int) (validate! Int) (pre%rflags! Int) (mycore! verismo!registers.trackedcore.snpcore.SnpCore.) (pre%perm! verismo!ptr.def_s.SnpPointsToRaw.)) (! (= (req%verismo!ptr.snp.rmp.rmp_t.pvalidate. vaddr! psize! validate! pre%rflags! mycore! pre%perm!) (and (=> %%global_location_label%%53 (verismo!ptr.snp.snp_s.impl&%0.requires_pvalidate.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. pre%perm!)))) (I vaddr!) (I psize!) (I validate!))) (=> %%global_location_label%%54 (= (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. mycore!)))))))) 0)) (=> %%global_location_label%%55 (verismo!registers.trackedcore.snpcore.impl&%3.inv.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. mycore!))))) :pattern ((req%verismo!ptr.snp.rmp.rmp_t.pvalidate. vaddr! psize! validate! pre%rflags! mycore! pre%perm!)))))
(declare-fun ens%verismo!ptr.snp.rmp.rmp_t.pvalidate. (Int Int Int Int Int verismo!registers.trackedcore.snpcore.SnpCore. verismo!ptr.def_s.SnpPointsToRaw. verismo!ptr.def_s.SnpPointsToRaw. Int) Bool)
(assert (forall ((vaddr! Int) (psize! Int) (validate! Int) (pre%rflags! Int) (rflags! Int) (mycore! verismo!registers.trackedcore.snpcore.SnpCore.) (pre%perm! verismo!ptr.def_s.SnpPointsToRaw.) (perm! verismo!ptr.def_s.SnpPointsToRaw.) (ret! Int)) (! (= (ens%verismo!ptr.snp.rmp.rmp_t.pvalidate. vaddr! psize! validate! pre%rflags! rflags! mycore! pre%perm! perm! ret!) (and (uInv 64 ret!) (uInv 64 rflags!) (verismo!ptr.snp.snp_s.impl&%2.pvalidate_ret.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. pre%perm!)))))) (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. perm!)))))) (I ret!) (I rflags!) (I vaddr!) (I psize!) (I validate!)) (= (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. pre%perm!)))) (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. perm!))))) (=> (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. pre%perm!))))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. perm!)))))))))) :pattern ((ens%verismo!ptr.snp.rmp.rmp_t.pvalidate. vaddr! psize! validate! pre%rflags! rflags! mycore! pre%perm! perm! ret!)))))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u8_to_stream.))
(declare-fun %%lambda%%16 (Int Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (%%hole%%2 Int) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%16 %%hole%%0 %%hole%%1 %%hole%%2) i$) (I (ite (= (%I i$) %%hole%%0) %%hole%%1 %%hole%%2))) :pattern ((%%apply%%0 (%%lambda%%16 %%hole%%0 %%hole%%1 %%hole%%2) i$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u8_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u8_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.new.? $ (UINT 8) $ (TYPE%fun%1. $ INT $ (UINT 8)) (I 1) (Poly%fun%1. (mk_fun (%%lambda%%16 0 (%I data!) 0)))))) :pattern ((verismo!tspec.stream.basic.u8_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u16_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u16_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u16_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I data!))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I data!) 256))))))))) :pattern ((verismo!tspec.stream.basic.u16_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%3.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I self!))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I self!) 256)))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (forall ((T&. Dcr) (T& Type)) (! (<= 0 (verismo!tspec.size_s.spec_size.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_size.? T&. T&)))))
(assert (fuel_bool_default fuel%verismo!tspec.setlib.set_op.))
(declare-fun %%lambda%%17 (Dcr Type Poly Dcr Type Poly Type Type Dcr Type Poly Dcr Type Poly %%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Type) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Poly) (%%hole%%11 Dcr) (%%hole%%12 Type) (%%hole%%13 Poly) (%%hole%%14 %%Function%%) (val$ Poly)) (! (= (%%apply%%0 (%%lambda%%17 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14) val$) (B (exists ((v1$ Poly) (v2$ Poly)) (! (and (and (has_type v1$ %%hole%%6) (has_type v2$ %%hole%%7)) (and (and (vstd!set.impl&%0.contains.? %%hole%%8 %%hole%%9 %%hole%%10 v1$) (vstd!set.impl&%0.contains.? %%hole%%11 %%hole%%12 %%hole%%13 v2$)) (= val$ (%%apply%%1 %%hole%%14 v1$ v2$)))) :pattern ((vstd!set.impl&%0.contains.? %%hole%%0 %%hole%%1 %%hole%%2 v1$) (vstd!set.impl&%0.contains.? %%hole%%3 %%hole%%4 %%hole%%5 v2$)))))) :pattern ((%%apply%%0 (%%lambda%%17 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14) val$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.setlib.set_op.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (s1! Poly) (s2! Poly) (op_fn! Poly)) (! (= (verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!) (vstd!set.impl&%0.new.? T3&. T3& $ (TYPE%fun%1. T3&. T3& $ BOOL) (Poly%fun%1. (mk_fun (%%lambda%%17 T1&. T1& s1! T2&. T2& s2! T1& T2& T1&. T1& s1! T2&. T2& s2! (%Poly%fun%2. op_fn!)))))) :pattern ((verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (s1! Poly) (s2! Poly) (op_fn! Poly)) (! (=> (and (has_type s1! (TYPE%vstd!set.Set. T1&. T1&)) (has_type s2! (TYPE%vstd!set.Set. T2&. T2&)) (has_type op_fn! (TYPE%fun%2. T1&. T1& T2&. T2& T3&. T3&))) (has_type (verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!) (TYPE%vstd!set.Set. T3&. T3&))) :pattern ((verismo!tspec.setlib.set_op.? T1&. T1& T2&. T2& T3&. T3& s1! s2! op_fn!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.bop_new.))
(declare-fun %%lambda%%18 (Int Int) %%Function%%)
(assert (forall ((%%hole%%0 Int) (%%hole%%1 Int) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%18 %%hole%%0 %%hole%%1) vmpl$) (B (and (<= %%hole%%0 (%I vmpl$)) (<= (%I vmpl$) %%hole%%1)))) :pattern ((%%apply%%0 (%%lambda%%18 %%hole%%0 %%hole%%1) vmpl$)))))
(declare-fun %%lambda%%19 (Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Poly Dcr Type Dcr Type Type Type Dcr Type Dcr Type %%Function%% Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (%%hole%%5 Dcr) (%%hole%%6 Type) (%%hole%%7 Dcr) (%%hole%%8 Type) (%%hole%%9 Poly) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Poly) (%%hole%%15 Dcr) (%%hole%%16 Type) (%%hole%%17 Dcr) (%%hole%%18 Type) (%%hole%%19 Poly) (%%hole%%20 Dcr) (%%hole%%21 Type) (%%hole%%22 Dcr) (%%hole%%23 Type) (%%hole%%24 Type) (%%hole%%25 Type) (%%hole%%26 Dcr) (%%hole%%27 Type) (%%hole%%28 Dcr) (%%hole%%29 Type) (%%hole%%30 %%Function%%) (%%hole%%31 Dcr) (%%hole%%32 Type) (%%hole%%33 Dcr) (%%hole%%34 Type) (vmpl$ Poly)) (! (= (%%apply%%0 (%%lambda%%19 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28 %%hole%%29 %%hole%%30 %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34) vmpl$) (vstd!set.impl&%0.new.? %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34 (Poly%fun%1. (mk_fun (%%lambda%%17 %%hole%%20 %%hole%%21 (vstd!map.impl&%0.index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 vmpl$) %%hole%%22 %%hole%%23 (vstd!map.impl&%0.index.? %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 vmpl$) %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 (vstd!map.impl&%0.index.? %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 vmpl$) %%hole%%28 %%hole%%29 (vstd!map.impl&%0.index.? %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 vmpl$) %%hole%%30))))) :pattern ((%%apply%%0 (%%lambda%%19 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 %%hole%%18 %%hole%%19 %%hole%%20 %%hole%%21 %%hole%%22 %%hole%%23 %%hole%%24 %%hole%%25 %%hole%%26 %%hole%%27 %%hole%%28 %%hole%%29 %%hole%%30 %%hole%%31 %%hole%%32 %%hole%%33 %%hole%%34) vmpl$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.bop_new.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (Rhs&. Dcr) (Rhs& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly) (op! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType (%%apply%%1 (%Poly%fun%2. op!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!))) (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!tspec.security.sectype.SpecSecType./SpecSecType/_unused (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)))) (vstd!map.impl&%0.new.? $ NAT $ (TYPE%vstd!set.Set. T2&. T2&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ (TYPE%vstd!set.Set. T2&. T2&)) (Poly%fun%1. (mk_fun (%%lambda%%18 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%19 $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) $ NAT $ (TYPE%vstd!set.Set. Rhs&. Rhs&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) $ NAT $ (TYPE%vstd!set.Set. T&. T&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)) $ NAT $ (TYPE%vstd!set.Set. Rhs&. Rhs&) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/valsets (%Poly%verismo!tspec.security.sectype.SpecSecType. rhs!)) T&. T& Rhs&. Rhs& T& Rhs& T&. T& Rhs&. Rhs& (%Poly%fun%2. op!) T2&. T2& $ (TYPE%fun%1. T2&. T2& $ BOOL))))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.) (Poly%fun%1. (mk_fun (%%lambda%%18 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%5 (Poly%verismo!tspec.security.sectype.DataLabel. verismo!tspec.security.sectype.DataLabel./Symbol)))))))) :pattern ((verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (Rhs&. Dcr) (Rhs& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly) (op! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type rhs! (TYPE%verismo!tspec.security.sectype.SpecSecType. Rhs&. Rhs& M&. M&)) (has_type op! (TYPE%fun%2. T&. T& Rhs&. Rhs& T2&. T2&))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& Rhs&. Rhs& T2&. T2& self! rhs! op!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType val! (%Poly%core!option.Option. (Poly%core!option.Option. core!option.Option./None)) (vstd!map.impl&%0.new.? $ NAT $ (TYPE%vstd!set.Set. T&. T&) $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ (TYPE%vstd!set.Set. T&. T&)) (Poly%fun%1. (mk_fun (%%lambda%%18 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%5 (vstd!set.impl&%0.insert.? T&. T& (vstd!set.impl&%0.empty.? T&. T&) val!))))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. (vstd!map.impl&%0.new.? $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel. $ (TYPE%fun%1. $ NAT $ BOOL) $ (TYPE%fun%1. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.) (Poly%fun%1. (mk_fun (%%lambda%%18 1 4))) (Poly%fun%1. (mk_fun (%%lambda%%5 (Poly%verismo!tspec.security.sectype.DataLabel. verismo!tspec.security.sectype.DataLabel./Symbol)))))))) :pattern ((verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! T&) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)))))
(assert (fuel_bool_default fuel%verismo!tspec.setlib.uop_to_bop.))
(declare-fun %%lambda%%20 (%%Function%%) %%Function%%)
(assert (forall ((%%hole%%0 %%Function%%) (v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 (%%lambda%%20 %%hole%%0) v1$ v2$) (%%apply%%0 %%hole%%0 v1$)) :pattern ((%%apply%%1 (%%lambda%%20 %%hole%%0) v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.setlib.uop_to_bop.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (op! Poly)) (! (= (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!) (mk_fun (%%lambda%%20 (%Poly%fun%1. op!)))) :pattern ((verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (op! Poly)) (! (=> (has_type op! (TYPE%fun%1. T1&. T1& T3&. T3&)) (has_type (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!)) (TYPE%fun%2. T1&. T1& T2&. T2& T3&. T3&))) :pattern ((verismo!tspec.setlib.uop_to_bop.? T1&. T1& T2&. T2& T3&. T3& op!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%16.uop_new.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%16.uop_new.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (T2&. Dcr) (T2& Type) (self! Poly) (op! Poly)) (! (= (verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!) (verismo!tspec.security.sectype.impl&%16.bop_new.? T&. T& M&. M& T&. T& T2&. T2& self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& (vstd!pervasive.arbitrary.? T&. T&))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T&. T& T&. T& T2&. T2& op!)))) :pattern ((verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (T2&. Dcr) (T2& Type) (self! Poly) (op! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type op! (TYPE%fun%1. T&. T& T2&. T2&))) (has_type (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!)) (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%16.uop_new.? T&. T& M&. M& T2&. T2& self! op!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.fn_spec_to_seq_index.))
(declare-fun %%lambda%%21 (Dcr Type Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Poly) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%21 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) v$) (vstd!seq.Seq.index.? %%hole%%4 %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 v$) %%hole%%6)) :pattern ((%%apply%%0 (%%lambda%%21 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) v$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.fn_spec_to_seq_index.) (forall ((T&. Dcr) (T& Type) (i! Poly)) (! (= (verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!) (mk_fun (%%lambda%%21 T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) i!))) :pattern ((verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!))))))
(assert (forall ((T&. Dcr) (T& Type) (i! Poly)) (! (=> (has_type i! INT) (has_type (Poly%fun%1. (verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!)) (TYPE%fun%1. T&. T& $ (UINT 8)))) :pattern ((verismo!tspec.security.seq.fn_spec_to_seq_index.? T&. T& i!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to.))
(declare-fun %%lambda%%22 (Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Dcr Type Poly Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Dcr) (%%hole%%5 Type) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type) (%%hole%%10 Dcr) (%%hole%%11 Type) (%%hole%%12 Dcr) (%%hole%%13 Type) (%%hole%%14 Dcr) (%%hole%%15 Type) (%%hole%%16 Poly) (%%hole%%17 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%22 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17) i$) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17 (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 (Poly%fun%1. (verismo!tspec.security.seq.fn_spec_to_seq_index.? %%hole%%0 %%hole%%1 i$))))))) :pattern ((%%apply%%0 (%%lambda%%22 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 %%hole%%10 %%hole%%11 %%hole%%12 %%hole%%13 %%hole%%14 %%hole%%15 %%hole%%16 %%hole%%17) i$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.impl&%0.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) (I (verismo!tspec.size_s.spec_size.? T&. T&)) (Poly%fun%1. (mk_fun (%%lambda%%22 T&. T& T&. T& T&. T& $ (UINT 8) T&. T& M&. M& T&. T& $ (UINT 8) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& (vstd!pervasive.arbitrary.? T&. T&)))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u32_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u32_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u32_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I data!)))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I data!)))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I data!) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I data!) 65536))))) 256)))))))))))) :pattern ((verismo!tspec.stream.basic.u32_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I self!)))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I self!)))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I self!) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I self!) 65536))))) 256))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u64_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u64_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u64_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I data!))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I data!))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I data!)))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I data!)))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I data!) 4294967296))))) 65536))))) 256))))))))))))))) :pattern ((verismo!tspec.stream.basic.u64_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%7.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%7.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I self!))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I self!))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I self!)))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I self!)))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I self!) 4294967296))))) 65536))))) 256)))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%20.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%20.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? Self%&. Self%& self!) (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%2.sec_bytes.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&)) :pattern ((tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%1.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%1.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? self!))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.recursive_sec_bytes.))
(declare-const fuel_nat%verismo!primitives_e.seq.recursive_sec_bytes. Fuel)
(assert (forall ((T&. Dcr) (T& Type) (s! Poly) (fuel% Fuel)) (! (= (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! fuel%) (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! zero)) :pattern ((verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! fuel%)))))
(assert (forall ((T&. Dcr) (T& Type) (s! Poly) (fuel% Fuel)) (! (=> (and (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (has_type s! (TYPE%vstd!seq.Seq. T&. T&))) (= (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel%)) (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (ite (> (vstd!seq.Seq.len.? T&. T& s!) 0) (let ((prevs$ (vstd!seq.Seq.subrange.? T&. T& s! (I 0) (I (Sub (vstd!seq.Seq.len.? T&. T& s!) 1))))) (ite (< (vstd!seq.Seq.len.? T&. T& prevs$) (vstd!seq.Seq.len.? T&. T& s!)) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& prevs$ fuel%)) (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? T&. T& (vstd!seq.Seq.last.? T&. T& s!))) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel%))))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.recursive_sec_bytes.) (forall ((T&. Dcr) (T& Type) (s! Poly)) (! (=> (and (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (has_type s! (TYPE%vstd!seq.Seq. T&. T&))) (= (verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& s!) (verismo!primitives_e.seq.rec%recursive_sec_bytes.? T&. T& s! (succ fuel_nat%verismo!primitives_e.seq.recursive_sec_bytes.)))) :pattern ((verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& s!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%2.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!primitives_e.seq.recursive_sec_bytes.? T&. T& self!))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_t.impl&%4.spec_len.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_t.impl&%4.spec_len.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&) (const_int N&)) :pattern ((verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (<= 0 (verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&)) :pattern ((verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&)))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (i! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) (has_type i! INT)) (has_type (verismo!tspec_e.array.array_t.impl&%2._spec_index.? T&. T& N&. N& self! i!) T&)) :pattern ((verismo!tspec_e.array.array_t.impl&%2._spec_index.? T&. T& N&. N& self! i!)))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_t.impl&%2.view.))
(declare-fun %%lambda%%23 (Dcr Type Dcr Type Poly) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (%%hole%%4 Poly) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%23 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$) (verismo!tspec_e.array.array_t.impl&%2._spec_index.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 i$)) :pattern ((%%apply%%0 (%%lambda%%23 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4) i$)))))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_t.impl&%2.view.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) (vstd!seq.Seq.new.? T&. T& $ (TYPE%fun%1. $ INT T&. T&) (I (verismo!tspec_e.array.array_t.impl&%4.spec_len.? T&. T& N&. N&)) (Poly%fun%1. (mk_fun (%%lambda%%23 T&. T& N&. N& self!))))) :pattern ((verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) (has_type (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) (TYPE%vstd!seq.Seq. T&. T&))) :pattern ((verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%3.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%31.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%31.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/es (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? Self%&. Self%& T&. T& self!) T&)) :pattern ((verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? Self%&. Self%& T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes.))
(declare-fun %%choose%%3 (Type Dcr Type Bool Type Poly Dcr Type) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Bool) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type)) (! (=> (exists ((v$ Poly)) (! (and (has_type v$ %%hole%%0) (ext_eq %%hole%%3 %%hole%%4 (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%1 %%hole%%2 v$) %%hole%%5)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%6 %%hole%%7 v$)))) (exists ((v$ Poly)) (! (and (and (has_type v$ %%hole%%0) (ext_eq %%hole%%3 %%hole%%4 (verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%1 %%hole%%2 v$) %%hole%%5)) (= (%%choose%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7) v$)) :pattern ((verismo!primitives_e.sectype.ToSecSeq.sec_bytes.? %%hole%%6 %%hole%%7 v$))))) :pattern ((%%choose%%3 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7)))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%3.from_sec_bytes.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!) (as_type (%%choose%%3 T& T&. T& true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self! T&. T&) T&)) :pattern ((verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%4.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!) (verismo!primitives_e.sectype.FromSecSeq.from_sec_bytes.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? self!) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmpl (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (uInv 64 (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? self!) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/vmsa (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (uInv 64 (verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%25.is_vmsa.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%25.is_vmsa.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%25.is_vmsa.? self!) (= (verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? self!) 1)) :pattern ((verismo!ptr.snp.snp_u.impl&%25.is_vmsa.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust_mem.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust_mem.) (forall ((self! Poly) (vaddr! Poly) (is_2m! Poly) (attr! Poly) (newcore! Poly)) (! (= (verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust_mem.? self! vaddr! is_2m! attr! newcore!) (and (and (and (and (and (= (EucMod (%I is_2m!) 2) 0) (let ((tmp%%$ (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? attr!))) (and (<= 1 tmp%%$) (<= tmp%%$ 3)))) (=> (verismo!ptr.snp.snp_u.impl&%25.is_vmsa.? attr!) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. newcore!)))))) (=> (not (verismo!ptr.snp.snp_u.impl&%25.is_vmsa.? attr!)) (%B (B (is-core!option.Option./None_ (%Poly%core!option.Option. newcore!)))))) (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))))) (verismo!ptr.snp.snp_u.impl&%31.wf.? self!))) :pattern ((verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust_mem.? self! vaddr! is_2m! attr! newcore!))))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.integer.IntOrd.ord_int.? Self%&. Self%& self!) INT)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%480.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%480.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%481.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%481.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%30.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%30.spec_eq.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ NAT self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust.) (forall ((self! Poly) (vaddr! Poly) (is_2m! Poly) (attr! Poly) (newcore! Poly) (memperm! Poly)) (! (= (verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust.? self! vaddr! is_2m! attr! newcore! memperm!) (let ((vmsa$ (%Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ TYPE%verismo!snp.cpu.vmsa.Vmsa. (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? memperm!)))))) (let ((vmpl$ (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. (Poly%verismo!snp.cpu.vmsa.Vmsa. vmsa$))))) (and (verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust_mem.? self! vaddr! is_2m! attr! newcore!) (=> (verismo!ptr.snp.snp_u.impl&%25.is_vmsa.? attr!) (%B (B (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl$)) (I (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (core!option.Option./Some/0 (%Poly%core!option.Option. newcore!))))))))))))))) :pattern ((verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust.? self! vaddr! is_2m! attr! newcore! memperm!))))))
(assert (forall ((vmpl! Poly) (perms! Poly) (vmsa! Poly)) (! (=> (and (has_type vmpl! (UINT 64)) (has_type perms! (UINT 64)) (has_type vmsa! (UINT 64))) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%2.spec_new.? vmpl! perms! vmsa!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)) :pattern ((verismo!ptr.snp.snp_u.impl&%2.spec_new.? vmpl! perms! vmsa!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%0.spec_perms.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%0.spec_perms.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%0.spec_perms.? self!) (verismo!ptr.snp.snp_u.RmpAttrSpec./RmpAttrSpec/perms (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%0.spec_perms.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (uInv 64 (verismo!ptr.snp.snp_u.impl&%0.spec_perms.? self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%0.spec_perms.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.? self! val!) (verismo!ptr.snp.snp_u.impl&%2.spec_new.? (I (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? self!)) (I (verismo!ptr.snp.snp_u.impl&%0.spec_perms.? self!)) val!)) :pattern ((verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.? self! val!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)) :pattern ((verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.? self! val!) (verismo!ptr.snp.snp_u.impl&%2.spec_new.? (I (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? self!)) val! (I (verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.? self! val!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)) :pattern ((verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.? self! val!) (verismo!ptr.snp.snp_u.impl&%2.spec_new.? val! (I (verismo!ptr.snp.snp_u.impl&%0.spec_perms.? self!)) (I (verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? self!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.? self! val!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)) :pattern ((verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.? self!) (let ((mask$ (uClip 64 255))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (uInv 64 (verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.? self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%16.spec_perms.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%16.spec_perms.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%16.spec_perms.? self!) (let ((mask$ (uClip 64 255))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. self!)))) (I (uClip 64 8))))) (I mask$))))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_perms.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (uInv 64 (verismo!ptr.snp.snp_u.impl&%16.spec_perms.? self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_perms.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. self!)))) (I (uClip 64 16))))) (I mask$))))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (uInv 64 (verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.? self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%16.view.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%16.view.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%16.view.? self!) (verismo!ptr.snp.snp_u.impl&%1.spec_set_vmsa.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%1.spec_set_perms.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%1.spec_set_vmpl.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (I (uClip 64 (verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.? self!))))) (I (uClip 64 (verismo!ptr.snp.snp_u.impl&%16.spec_perms.? self!))))) (I (uClip 64 (verismo!ptr.snp.snp_u.impl&%16.spec_vmsa.? self!))))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%16.view.? self!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)) :pattern ((verismo!ptr.snp.snp_u.impl&%16.view.? self!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.entry_s.impl&%0.spec_perm.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.entry_s.impl&%0.spec_perm.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!arch.rmp.entry_s.impl&%0.spec_perm.? self! vmpl!) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)) vmpl!))) :pattern ((verismo!arch.rmp.entry_s.impl&%0.spec_perm.? self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.? self! val!) (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? self!)) (B (verismo!arch.rmp.def_s.impl&%0.spec_validated.? self!)) val! (I (verismo!arch.rmp.def_s.impl&%0.spec_asid.? self!)) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? self!)) (Poly%verismo!arch.addr_s.def_s.PageSize. (verismo!arch.rmp.def_s.impl&%0.spec_size.? self!)) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)))) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type val! BOOL)) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.? self! val!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.entry_s.impl&%0.spec_set_perm.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.entry_s.impl&%0.spec_set_perm.) (forall ((self! Poly) (vmpl! Poly) (perm! Poly)) (! (= (verismo!arch.rmp.entry_s.impl&%0.spec_set_perm.? self! vmpl! perm!) (verismo!arch.rmp.def_s.impl&%1.spec_set_perms.? self! (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? self!)) vmpl! perm!))) :pattern ((verismo!arch.rmp.entry_s.impl&%0.spec_set_perm.? self! vmpl! perm!))))))
(assert (forall ((self! Poly) (vmpl! Poly) (perm! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (has_type vmpl! TYPE%verismo!arch.entities.VMPL.) (has_type perm! (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) (has_type (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.entry_s.impl&%0.spec_set_perm.? self! vmpl! perm!)) TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) :pattern ((verismo!arch.rmp.entry_s.impl&%0.spec_set_perm.? self! vmpl! perm!)))))
(declare-fun req%verismo!arch.rmp.access_s.impl&%0.rmpadjust. (Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%56 Bool)
(declare-const %%global_location_label%%57 Bool)
(assert (forall ((self! Poly) (memid! Poly) (vmpl! Poly) (psize! Poly) (gpn! Poly) (vmsa! Poly) (perms! Poly)) (! (= (req%verismo!arch.rmp.access_s.impl&%0.rmpadjust. self! memid! vmpl! psize! gpn! vmsa! perms!) (and (=> %%global_location_label%%56 (= (verismo!arch.entities.memid.impl&%3.to_asid.? memid!) (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!))))) (=> %%global_location_label%%57 (is-verismo!arch.entities.memid.MemID./Guest_ (%Poly%verismo!arch.entities.memid.MemID. memid!))))) :pattern ((req%verismo!arch.rmp.access_s.impl&%0.rmpadjust. self! memid! vmpl! psize! gpn! vmsa! perms!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.access_s.impl&%0.rmpadjust.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.access_s.impl&%0.rmpadjust.) (forall ((self! Poly) (memid! Poly) (vmpl! Poly) (psize! Poly) (gpn! Poly) (vmsa! Poly) (perms! Poly)) (! (= (verismo!arch.rmp.access_s.impl&%0.rmpadjust.? self! memid! vmpl! psize! gpn! vmsa! perms!) (ite (<= (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. vmpl!)) (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.memid.impl&%3.to_vmpl.? memid!))))) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. verismo!arch.errors.RmpFault./Perm)) (Poly%tuple%0. tuple%0./tuple%0)))) (ite (verismo!arch.rmp.entry_s.impl&%0.fault_rmp_update.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!)) (I (verismo!arch.entities.memid.impl&%3.to_asid.? memid!)) gpn! psize!) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NestedPF (Poly%tuple%0. tuple%0./tuple%0)))) (ite (not (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!)))) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./NotValidated (Poly%tuple%0. tuple%0./tuple%0)))) (ite (and (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!))) verismo!arch.addr_s.def_s.PageSize./Size4k) (= (%Poly%verismo!arch.addr_s.def_s.PageSize. psize!) verismo!arch.addr_s.def_s.PageSize./Size2m)) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. verismo!arch.errors.RmpFault./Size)) (Poly%tuple%0. tuple%0./tuple%0)))) (let ((cur_perm$ (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!)))) (Poly%verismo!arch.entities.VMPL. (verismo!arch.entities.memid.impl&%3.to_vmpl.? memid!)))))) (ite (not (vstd!set.impl&%0.subset_of.? $ TYPE%verismo!arch.rmp.perm_s.Perm. perms! (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. cur_perm$))) (verismo!tspec.ResultWithErr./Error self! (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.MemError./RmpOp (%Poly%verismo!arch.errors.RmpFault. (Poly%verismo!arch.errors.RmpFault. verismo!arch.errors.RmpFault./Perm)) (Poly%tuple%0. tuple%0./tuple%0)))) (let ((hidden$ (verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%1.spec_set_perms.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!)) (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? self!)))) vmpl! perms!))) vmsa!))) (verismo!tspec.ResultWithErr./Ok (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%4.spec_set_val.? self! (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. hidden$)))))))))))) :pattern ((verismo!arch.rmp.access_s.impl&%0.rmpadjust.? self! memid! vmpl! psize! gpn! vmsa! perms!))))))
(assert (forall ((self! Poly) (memid! Poly) (vmpl! Poly) (psize! Poly) (gpn! Poly) (vmsa! Poly) (perms! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.) (has_type vmpl! TYPE%verismo!arch.entities.VMPL.) (has_type psize! TYPE%verismo!arch.addr_s.def_s.PageSize.) (has_type gpn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type vmsa! BOOL) (has_type perms! (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) (has_type (Poly%verismo!tspec.ResultWithErr. (verismo!arch.rmp.access_s.impl&%0.rmpadjust.? self! memid! vmpl! psize! gpn! vmsa! perms!)) (TYPE%verismo!tspec.ResultWithErr. $ TYPE%verismo!arch.rmp.def_s.RmpEntry. $ (TYPE%verismo!arch.errors.MemError. $ TYPE%tuple%0.)))) :pattern ((verismo!arch.rmp.access_s.impl&%0.rmpadjust.? self! memid! vmpl! psize! gpn! vmsa! perms!)))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.def_s.impl&%7.is_RmpAdjust.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.def_s.impl&%7.is_RmpAdjust.) (forall ((AddrT&. Dcr) (AddrT& Type) (self! Poly)) (! (= (verismo!arch.rmp.def_s.impl&%7.is_RmpAdjust.? AddrT&. AddrT& self!) (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ (%Poly%verismo!arch.rmp.def_s.RmpOp. self!))) :pattern ((verismo!arch.rmp.def_s.impl&%7.is_RmpAdjust.? AddrT&. AddrT& self!))))))
(declare-fun req%verismo!ptr.snp.snp_s.impl&%1.rmpadjust_ret. (Poly Poly Poly Poly Poly Poly Poly Poly Poly) Bool)
(declare-const %%global_location_label%%58 Bool)
(assert (forall ((self! Poly) (new! Poly) (rax! Poly) (vmid! Poly) (vaddr! Poly) (psize! Poly) (vmpl! Poly) (is_vmsa! Poly) (perms! Poly)) (! (= (req%verismo!ptr.snp.snp_s.impl&%1.rmpadjust_ret. self! new! rax! vmid! vaddr! psize! vmpl! is_vmsa! perms!) (=> %%global_location_label%%58 (> (%I vmid!) 0))) :pattern ((req%verismo!ptr.snp.snp_s.impl&%1.rmpadjust_ret. self! new! rax! vmid! vaddr! psize! vmpl! is_vmsa! perms!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_s.impl&%1.rmpadjust_ret.))
(declare-fun %%choose%%4 (Type) Poly)
(assert (forall ((%%hole%%0 Type)) (! (=> (exists ((memop$1 Poly)) (! (and (has_type memop$1 %%hole%%0) (and (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. memop$1)) (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. memop$1))))))) :pattern ((verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. memop$1))))) (exists ((memop$1 Poly)) (! (and (and (has_type memop$1 %%hole%%0) (and (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. memop$1)) (is-verismo!arch.rmp.def_s.RmpOp./RmpAdjust_ (%Poly%verismo!arch.rmp.def_s.RmpOp. (Poly%verismo!arch.rmp.def_s.RmpOp. (verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. memop$1))))))) (= (%%choose%%4 %%hole%%0) memop$1)) :pattern ((verismo!arch.memop.MemOp./RmpOp/0 (%Poly%verismo!arch.memop.MemOp. memop$1)))))) :pattern ((%%choose%%4 %%hole%%0)))))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_s.impl&%1.rmpadjust_ret.) (forall ((self! Poly) (new! Poly) (rax! Poly) (vmid! Poly) (vaddr! Poly) (psize! Poly) (vmpl! Poly) (is_vmsa! Poly) (perms! Poly)) (! (= (verismo!ptr.snp.snp_s.impl&%1.rmpadjust_ret.? self! new! rax! vmid! vaddr! psize! vmpl! is_vmsa! perms!) (let ((memid$ (verismo!arch.entities.memid.MemID./Guest (%I (I (nClip (Sub (%I vmid!) 1)))) (%Poly%verismo!arch.entities.VMPL. (Poly%verismo!arch.entities.VMPL. verismo!arch.entities.VMPL./VMPL0))))) (let ((ret$ (verismo!arch.rmp.access_s.impl&%0.rmpadjust.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) (Poly%verismo!arch.entities.memid.MemID. memid$) vmpl! psize! (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%2.to_page.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%2.new.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. (vstd!map.impl&%0.index.? $ INT $ INT (Poly%vstd!map.Map<int./int.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/guestmap (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))) vaddr!))))) is_vmsa! perms!))) (let ((size$ (nClip (ite (is-verismo!arch.addr_s.def_s.PageSize./Size4k_ (%Poly%verismo!arch.addr_s.def_s.PageSize. psize!)) 4096 33554432)))) (let ((map_ok$ (verismo!ptr.snp.snp_s.impl&%1.valid_memmap.? new! vaddr! (I size$)))) (and map_ok$ (ite (is-verismo!tspec.ResultWithErr./Error_ ret$) (let ((memerr$ (%Poly%verismo!arch.errors.MemError. (verismo!tspec.ResultWithErr./Error/1 (%Poly%verismo!tspec.ResultWithErr. (Poly%verismo!tspec.ResultWithErr. ret$)))))) (let ((arch$ (%Poly%verismo!arch.x64.def_s.Archx64. (vstd!pervasive.arbitrary.? $ TYPE%verismo!arch.x64.def_s.Archx64.)))) (let ((memop$ (%Poly%verismo!arch.memop.MemOp. (as_type (%%choose%%4 (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.)) (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))))) (let ((op$ (%Poly%verismo!arch.x64.def_s.Archx64Op. (as_type (%%choose%%2 TYPE%verismo!arch.x64.def_s.Archx64Op. memid$ memop$) TYPE%verismo!arch.x64.def_s.Archx64Op.)))) (let ((tmp%%$ (ite (is-verismo!arch.errors.MemError./NoRam_ (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$))))) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NoRam/0 (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$)))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%9 (Poly%verismo!arch.x64.def_s.AECode. verismo!arch.x64.def_s.AECode./Npf)))))) (ite (is-verismo!arch.errors.MemError./NotValidated_ (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$))))) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NotValidated/0 (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$)))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%10 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0))))))) (ite (is-verismo!arch.errors.MemError./NestedPF_ (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$))))) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./NestedPF/0 (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$)))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%9 (Poly%verismo!arch.x64.def_s.AECode. verismo!arch.x64.def_s.AECode./Npf)))))) (ite (is-verismo!arch.errors.MemError./PageFault_ (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$))))) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./PageFault/0 (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$)))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%11 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0))))))) (ite (is-verismo!arch.errors.MemError./RmpOp_ (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$))))) (let ((fault$$0 (verismo!arch.errors.MemError./RmpOp/0 (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$))))))) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./RmpOp/1 (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$)))))))) (ite (is-verismo!arch.memop.MemOp./RmpOp_ (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0))) (ite (is-verismo!arch.errors.RmpFault./Unsupported_ fault$$0) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%12 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0)))))) (ite (is-verismo!arch.errors.RmpFault./Size_ fault$$0) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%13 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_SIZEMISMATCH.?))))) (ite (is-verismo!arch.errors.RmpFault./Input_ fault$$0) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%13 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_INPUT.?))))) (ite (is-verismo!arch.errors.RmpFault./Perm_ fault$$0) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%13 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax) (I verismo!arch.rmp.def_s.RMP_FAIL_PERMISSION.?))))) (tuple%2./tuple%2 (B false) (Poly%fun%2. (mk_fun (%%lambda%%14 $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags) 64 64 (I (uClip 64 (uintshl 64 (I 1) (I (%I (I (uClip 64 (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./CF)))))))))) 64 (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rflags))))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun %%lambda%%15)))))) (let ((memop$$0 (%Poly%verismo!arch.memop.MemOp. (verismo!arch.errors.MemError./Others/0 (%Poly%verismo!arch.errors.MemError. (Poly%verismo!arch.errors.MemError. (verismo!arch.errors.impl&%3.from_err.? $ (TYPE%verismo!arch.memop.MemOp. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ TYPE%tuple%0. (Poly%verismo!arch.errors.MemError. memerr$) (Poly%verismo!arch.memop.MemOp. memop$)))))))) (tuple%2./tuple%2 (B true) (Poly%fun%2. (mk_fun (%%lambda%%12 (%Poly%verismo!arch.memop.MemOp. (Poly%verismo!arch.memop.MemOp. memop$$0)))))))))))))) (let ((trap$ (%B (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (let ((trans$ (%Poly%fun%2. (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. tmp%%$)))))) (and (not trap$) (and (and (= rax! (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (verismo!tspec.fmap.impl&%0.spec_map.? $ TYPE%verismo!arch.reg.RegName. $ (UINT 64) (vstd!map.impl&%0.index.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? (%%apply%%1 trans$ (Poly%verismo!arch.x64.def_s.Archx64. arch$) (Poly%verismo!arch.x64.def_s.Archx64Op. op$)))) (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? (Poly%verismo!arch.x64.def_s.Archx64Op. op$))))) (Poly%verismo!arch.reg.RegName. verismo!arch.reg.RegName./Rax))) (= new! self!)) (verismo!arch.x64.x64_s.impl&%1.is_run.? (Poly%verismo!arch.x64.def_s.Archx64. arch$) (Poly%verismo!arch.entities.memid.CpuMemID. (verismo!arch.x64.x64_s.impl&%0.cpu_memid.? (Poly%verismo!arch.x64.def_s.Archx64Op. op$))))))))))))) (= (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. new!) (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? self! (verismo!tspec.impl&%5.to_result.? $ TYPE%verismo!arch.rmp.def_s.RmpEntry. $ (TYPE%verismo!arch.errors.MemError. $ TYPE%tuple%0.) (Poly%verismo!tspec.ResultWithErr. ret$))))))))))) :pattern ((verismo!ptr.snp.snp_s.impl&%1.rmpadjust_ret.? self! new! rax! vmid! vaddr! psize! vmpl! is_vmsa! perms!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%25.valid_vmpl.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%25.valid_vmpl.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%25.valid_vmpl.? self!) (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.entities.impl&%6.spec_from_int.? (I (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? self!))))))))) :pattern ((verismo!ptr.snp.snp_u.impl&%25.valid_vmpl.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%4.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%4.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.entities.VMPL. val!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.entities.impl&%6.spec_from_int.? val!))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.entities.VMPL. val!))))))
(declare-fun req%verismo!ptr.snp.snp_u.impl&%25.vmpl. (Poly) Bool)
(declare-const %%global_location_label%%59 Bool)
(assert (forall ((self! Poly)) (! (= (req%verismo!ptr.snp.snp_u.impl&%25.vmpl. self!) (=> %%global_location_label%%59 (verismo!ptr.snp.snp_u.impl&%25.valid_vmpl.? self!))) :pattern ((req%verismo!ptr.snp.snp_u.impl&%25.vmpl. self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%25.vmpl.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%25.vmpl.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%25.vmpl.? self!) (%Poly%verismo!arch.entities.VMPL. (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.entities.VMPL. (I (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? self!))))) :pattern ((verismo!ptr.snp.snp_u.impl&%25.vmpl.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.perm_s.impl&%1.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.perm_s.impl&%1.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) val!) (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (let ((ret$ (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.empty.? $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) (let ((ret$1 (ite (= (EucMod (%I val!) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Read))) ret$))) (let ((ret$2 (ite (= (EucMod (EucDiv (%I val!) 2) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$1) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write))) ret$1))) (let ((ret$3 (ite (= (EucMod (EucDiv (%I val!) 4) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$2) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeU))) ret$2))) (let ((ret$4 (ite (= (EucMod (EucDiv (%I val!) 8) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$3) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeS))) ret$3))) (let ((ret$5 (ite (= (EucMod (EucDiv (%I val!) 16) 2) 1) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (vstd!set.impl&%0.insert.? $ TYPE%verismo!arch.rmp.perm_s.Perm. (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. ret$4) (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Shadow))) ret$4))) ret$5)))))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) val!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%25.perms.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%25.perms.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%25.perms.? self!) (%Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (verismo!tspec.integer.IntValue.from_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (I (verismo!ptr.snp.snp_u.impl&%0.spec_perms.? self!))))) :pattern ((verismo!ptr.snp.snp_u.impl&%25.perms.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_s.impl&%0.ensures_rmpadjust.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_s.impl&%0.ensures_rmpadjust.) (forall ((self! Poly) (prev! Poly) (attr! Poly)) (! (= (verismo!ptr.snp.snp_s.impl&%0.ensures_rmpadjust.? self! prev! attr!) (and (= (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))) (verismo!arch.rmp.def_s.impl&%1.spec_set_vmsa.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%1.spec_set_perms.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. prev!))))) (vstd!map.impl&%0.insert.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/perms (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. prev!)))))))) (Poly%verismo!arch.entities.VMPL. (verismo!ptr.snp.snp_u.impl&%25.vmpl.? attr!)) (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (verismo!ptr.snp.snp_u.impl&%25.perms.? attr!))))) (B (verismo!ptr.snp.snp_u.impl&%25.is_vmsa.? attr!)))) (= (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!) (verismo!ptr.snp.snp_u.impl&%22.spec_set_rmp.? prev! (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))))) :pattern ((verismo!ptr.snp.snp_s.impl&%0.ensures_rmpadjust.? self! prev! attr!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_s.impl&%2.rmpadjust_ret.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_s.impl&%2.rmpadjust_ret.) (forall ((self! Poly) (new! Poly) (rax! Poly) (vaddr! Poly) (is_2m! Poly) (attr! Poly)) (! (= (verismo!ptr.snp.snp_s.impl&%2.rmpadjust_ret.? self! new! rax! vaddr! is_2m! attr!) (let ((psize$ (ite (= (EucMod (%I is_2m!) 2) 0) verismo!arch.addr_s.def_s.PageSize./Size4k verismo!arch.addr_s.def_s.PageSize./Size4k))) (and (verismo!ptr.snp.snp_s.impl&%1.rmpadjust_ret.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!))) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. new!))) rax! (I (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP./HiddenRmpEntryForPSP/asid (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/rmp (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!))))))))))) vaddr! (Poly%verismo!arch.addr_s.def_s.PageSize. psize$) (Poly%verismo!arch.entities.VMPL. (verismo!ptr.snp.snp_u.impl&%25.vmpl.? attr!)) (B (verismo!ptr.snp.snp_u.impl&%25.is_vmsa.? attr!)) (Poly%vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>. (verismo!ptr.snp.snp_u.impl&%25.perms.? attr!))) (ite (= (%I rax!) 0) (verismo!ptr.snp.snp_s.impl&%0.ensures_rmpadjust.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. new!))) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!))) attr!) (= (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. new!)) (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!))))))) :pattern ((verismo!ptr.snp.snp_s.impl&%2.rmpadjust_ret.? self! new! rax! vaddr! is_2m! attr!))))))
(declare-fun req%verismo!ptr.snp.rmp.rmp_t.rmpadjust. (Int Int verismo!ptr.snp.snp_u.RmpAttr. verismo!registers.trackedcore.snpcore.SnpCore. core!option.Option. verismo!ptr.def_s.SnpPointsToRaw.) Bool)
(declare-const %%global_location_label%%60 Bool)
(declare-const %%global_location_label%%61 Bool)
(declare-const %%global_location_label%%62 Bool)
(assert (forall ((vaddr! Int) (psize! Int) (attr! verismo!ptr.snp.snp_u.RmpAttr.) (mycore! verismo!registers.trackedcore.snpcore.SnpCore.) (newcore! core!option.Option.) (pre%perm! verismo!ptr.def_s.SnpPointsToRaw.)) (! (= (req%verismo!ptr.snp.rmp.rmp_t.rmpadjust. vaddr! psize! attr! mycore! newcore! pre%perm!) (and (=> %%global_location_label%%60 (verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. pre%perm!)))) (I vaddr!) (I psize!) (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%16.view.? (Poly%verismo!ptr.snp.snp_u.RmpAttr. attr!))) (Poly%core!option.Option. newcore!) (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. pre%perm!))))) (=> %%global_location_label%%61 (= (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. mycore!)))))))) 0)) (=> %%global_location_label%%62 (> (verismo!ptr.snp.snp_u.impl&%16.spec_vmpl.? (Poly%verismo!ptr.snp.snp_u.RmpAttr. attr!)) (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. mycore!)))))))))))) :pattern ((req%verismo!ptr.snp.rmp.rmp_t.rmpadjust. vaddr! psize! attr! mycore! newcore! pre%perm!)))))
(declare-fun ens%verismo!ptr.snp.rmp.rmp_t.rmpadjust. (Int Int verismo!ptr.snp.snp_u.RmpAttr. verismo!registers.trackedcore.snpcore.SnpCore. core!option.Option. verismo!ptr.def_s.SnpPointsToRaw. verismo!ptr.def_s.SnpPointsToRaw. Int) Bool)
(assert (forall ((vaddr! Int) (psize! Int) (attr! verismo!ptr.snp.snp_u.RmpAttr.) (mycore! verismo!registers.trackedcore.snpcore.SnpCore.) (newcore! core!option.Option.) (pre%perm! verismo!ptr.def_s.SnpPointsToRaw.) (perm! verismo!ptr.def_s.SnpPointsToRaw.) (ret! Int)) (! (= (ens%verismo!ptr.snp.rmp.rmp_t.rmpadjust. vaddr! psize! attr! mycore! newcore! pre%perm! perm! ret!) (and (uInv 64 ret!) (verismo!ptr.snp.snp_s.impl&%2.rmpadjust_ret.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. pre%perm!)))))) (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. perm!)))))) (I ret!) (I vaddr!) (I psize!) (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%16.view.? (Poly%verismo!ptr.snp.snp_u.RmpAttr. attr!)))) (= (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. pre%perm!)))) (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. perm!))))) (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. pre%perm!))))) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. perm!)))))))) :pattern ((ens%verismo!ptr.snp.rmp.rmp_t.rmpadjust. vaddr! psize! attr! mycore! newcore! pre%perm! perm! ret!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%3.spec_val.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%3.spec_val.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!) T&)) :pattern ((verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& self!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. (Dcr Type Dcr Type Poly core!option.Option. Poly vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! core!option.Option.) (valsets! Poly) (labels! vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>.)) (! (= (ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. T&. T& M&. M& val! _unused! valsets! labels!) (and (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) val!) (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) _unused!) (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) valsets!) (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! (Poly%core!option.Option. _unused!) valsets! (Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) labels!))) :pattern ((ens%verismo!tspec.security.sectype.impl&%2.axiom_spec_new. T&. T& M&. M& val! _unused! valsets! labels!)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (_unused! Poly) (valsets! Poly) (labels! Poly)) (! (=> (and (has_type val! T&) (has_type _unused! (TYPE%core!option.Option. M&. M&)) (has_type valsets! (TYPE%vstd!map.Map. $ NAT $ (TYPE%vstd!set.Set. T&. T&))) (has_type labels! (TYPE%vstd!map.Map. $ NAT $ TYPE%verismo!tspec.security.sectype.DataLabel.))) (and (and (and (= (verismo!tspec.security.sectype.impl&%3.spec_val.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) val!) (= (verismo!tspec.security.sectype.impl&%3.spec__unused.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) (%Poly%core!option.Option. _unused!))) (= (verismo!tspec.security.sectype.impl&%3.spec_valsets.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) valsets!)) (= (verismo!tspec.security.sectype.impl&%3.spec_labels.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!))) (%Poly%vstd!map.Map<nat./verismo!tspec.security.sectype.DataLabel.>. labels!)))) :pattern ((verismo!tspec.security.sectype.impl&%2.spec_new.? T&. T& M&. M& val! _unused! valsets! labels!)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (has_type (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. (Dcr Type Dcr Type verismo!tspec.security.sectype.SpecSecType.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! verismo!tspec.security.sectype.SpecSecType.)) (! (= (ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. T&. T& M&. M& val!) (= (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. val!)))) val!)) :pattern ((ens%verismo!tspec.security.sectype.impl&%9.axiom_spec_new. T&. T& M&. M& val!)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&)) (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)) val!)) :pattern ((verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& val!)))))
(declare-fun ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (val2! Poly)) (! (= (ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. T&. T& M&. M& val! val2!) (= (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)) (= val! val2!))) :pattern ((ens%verismo!tspec.security.sectype.impl&%9.axiom_ext_equal. T&. T& M&. M& val! val2!)))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly) (val2! Poly)) (! (=> (and (has_type val! (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (has_type val2! (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) (= (= (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)) (= val! val2!))) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)) :pattern ((verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& val2!)))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%46.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%46.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT SZ)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.fn_vspec_cast_to.))
(declare-fun %%lambda%%24 (Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Dcr) (%%hole%%3 Type) (v$ Poly)) (! (= (%%apply%%0 (%%lambda%%24 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 v$)) :pattern ((%%apply%%0 (%%lambda%%24 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3) v$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.fn_vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (= (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&) (mk_fun (%%lambda%%24 T1&. T1& T2&. T2&))) :pattern ((verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (has_type (Poly%fun%1. (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&)) (TYPE%fun%1. T1&. T1& T2&. T2&)) :pattern ((verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%18.vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? T1&. T1& M&. M& T1&. T1& T2&. T2& self! (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T1&. T1& M&. M& (vstd!pervasive.arbitrary.? T1&. T1&))) (Poly%fun%2. (verismo!tspec.setlib.uop_to_bop.? T1&. T1& T1&. T1& T2&. T2& (Poly%fun%1. (verismo!tspec.cast.fn_vspec_cast_to.? T1&. T1& T2&. T2&))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%19.vspec_cast_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? T2&. T2& M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) T1&. T1& M&. M& self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%43.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%43.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 32)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%42.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%42.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 16)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%41.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%41.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 8)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%38.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%38.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT SZ)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%36.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%36.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%34.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%34.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 16)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%33.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%33.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 8)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%30.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%30.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT SZ)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%28.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%28.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%27.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%27.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 32)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%25.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%25.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 8)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%22.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%22.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT SZ)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%20.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%20.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%19.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%19.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 32)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%18.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%18.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 16)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%60.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%60.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%59.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%59.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 32)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%58.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%58.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 16)))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%57.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%57.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 8)))
(declare-fun ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. (Dcr Type verismo!arch.addr_s.def_s.SpecAddr. verismo!arch.addr_s.def_s.SpecAddr.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (left! verismo!arch.addr_s.def_s.SpecAddr.) (right! verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. T&. T& left! right!) (and (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!))) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!)))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!))) (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. left!))) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecAddr. right!)))) (= left! right!)))) :pattern ((ens%verismo!arch.addr_s.page.impl&%0.axiom_equal. T&. T& left! right!)))))
(assert (forall ((T&. Dcr) (T& Type) (left! Poly) (right! Poly)) (! (=> (and (has_type left! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (has_type right! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) (and (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left!)) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) right!))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left! right!)) (= (= (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left!)) (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) right!))) (= left! right!)))) :pattern ((ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) left! right!)))))
(declare-fun ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. (Dcr Type verismo!arch.addr_s.def_s.SpecAddr.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecAddr.)) (! (= (ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. T&. T& self!) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. (Poly%verismo!arch.addr_s.def_s.SpecAddr. self!))) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((ens%verismo!arch.addr_s.page.impl&%0.axiom_addr_type_dummy_holder. T&. T& self!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.def_s.SpecAddr./SpecAddr/dummy (%Poly%verismo!arch.addr_s.def_s.SpecAddr. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&)))))
(declare-fun ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. (Dcr Type verismo!arch.addr_s.def_s.SpecPage. verismo!arch.addr_s.def_s.SpecPage.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (left! verismo!arch.addr_s.def_s.SpecPage.) (right! verismo!arch.addr_s.def_s.SpecPage.)) (! (= (ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. T&. T& left! right!) (and (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. left!)) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) (Poly%verismo!arch.addr_s.def_s.SpecPage. left!) (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. left!)) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecPage. right!))) (= left! right!)))) :pattern ((ens%verismo!arch.addr_s.page.impl&%1.axiom_equal. T&. T& left! right!)))))
(assert (forall ((T&. Dcr) (T& Type) (left! Poly) (right! Poly)) (! (=> (and (has_type left! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (has_type right! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))) (and (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& left!) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& right!)) (ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) left! right!)) (= (= (verismo!arch.addr_s.page.impl&%3.value.? T&. T& left!) (verismo!arch.addr_s.page.impl&%3.value.? T&. T& right!)) (= left! right!)))) :pattern ((ext_eq false (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) left! right!)))))
(declare-fun ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. (Dcr Type verismo!arch.addr_s.def_s.SpecPage.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecPage.)) (! (= (ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. T&. T& self!) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. (Poly%verismo!arch.addr_s.def_s.SpecPage. self!))) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((ens%verismo!arch.addr_s.page.impl&%1.axiom_addr_type_dummy_holder. T&. T& self!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) (= (verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&))) :pattern ((verismo!arch.addr_s.def_s.SpecPage./SpecPage/dummy (%Poly%verismo!arch.addr_s.def_s.SpecPage. self!)) (vstd!pervasive.arbitrary.? (GHOST T&.) T&)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%2.to_offset.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%2.to_offset.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& self!) (EucMod (%I (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!)) verismo!arch.addr_s.def_s.PAGE_SIZE.?)) :pattern ((verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.first.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.first.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (has_type (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!)) (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))) :pattern ((verismo!arch.addr_s.page.impl&%8.first.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.offset.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.offset.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) (nClip (verismo!arch.addr_s.page.impl&%2.to_offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecAddr. (verismo!arch.addr_s.def_s.SpecMem./SpecMem/first (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!)))))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%8.len.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%8.len.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!) (verismo!arch.addr_s.def_s.SpecMem./SpecMem/size (%Poly%verismo!arch.addr_s.def_s.SpecMem. self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (<= 0 (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!)))))
(declare-fun ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. (Dcr Type verismo!arch.addr_s.def_s.SpecMem.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!arch.addr_s.def_s.SpecMem.)) (! (= (ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. T&. T& self!) (and (<= (nClip (Add (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)) (verismo!arch.addr_s.page.impl&%8.len.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)))) 4096) (< (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& (Poly%verismo!arch.addr_s.def_s.SpecMem. self!)) 4096))) :pattern ((ens%verismo!arch.addr_s.page.impl&%8.axiom_inv. T&. T& self!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!arch.addr_s.def_s.SpecMem. T&. T&)) (and (<= (nClip (Add (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) (verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!))) 4096) (< (verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!) 4096))) :pattern ((verismo!arch.addr_s.page.impl&%8.offset.? T&. T& self!)) :pattern ((verismo!arch.addr_s.page.impl&%8.len.? T&. T& self!)))))
(declare-fun ens%verismo!arch.rmp.def_s.impl&%2.axiom_spec_new. (Bool Bool Bool Bool Int verismo!arch.addr_s.def_s.SpecPage. verismo!arch.addr_s.def_s.PageSize. vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) Bool)
(assert (forall ((immutable! Bool) (assigned! Bool) (validated! Bool) (vmsa! Bool) (asid! Int) (gpn! verismo!arch.addr_s.def_s.SpecPage.) (size! verismo!arch.addr_s.def_s.PageSize.) (perms! vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.)) (! (= (ens%verismo!arch.rmp.def_s.impl&%2.axiom_spec_new. immutable! assigned! validated! vmsa! asid! gpn! size! perms!) (and (= (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) immutable!) (= (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) assigned!) (= (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) validated!) (= (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) vmsa!) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) asid!) (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) gpn!) (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) size!) (= (verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? (B immutable!) (B assigned!) (B validated!) (B vmsa!) (I asid!) (Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!) (Poly%verismo!arch.addr_s.def_s.PageSize. size!) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) perms!))) :pattern ((ens%verismo!arch.rmp.def_s.impl&%2.axiom_spec_new. immutable! assigned! validated! vmsa! asid! gpn! size! perms!)))))
(assert (forall ((immutable! Poly) (assigned! Poly) (validated! Poly) (vmsa! Poly) (asid! Poly) (gpn! Poly) (size! Poly) (perms! Poly)) (! (=> (and (has_type immutable! BOOL) (has_type assigned! BOOL) (has_type validated! BOOL) (has_type vmsa! BOOL) (has_type asid! NAT) (has_type gpn! (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)) (has_type size! TYPE%verismo!arch.addr_s.def_s.PageSize.) (has_type perms! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))) (and (and (and (and (and (and (and (= (verismo!arch.rmp.def_s.impl&%0.spec_immutable.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B immutable!)) (= (verismo!arch.rmp.def_s.impl&%0.spec_assigned.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B assigned!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_validated.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B validated!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_vmsa.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%B vmsa!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_asid.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%I asid!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_gpn.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%Poly%verismo!arch.addr_s.def_s.SpecPage. gpn!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_size.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%Poly%verismo!arch.addr_s.def_s.PageSize. size!))) (= (verismo!arch.rmp.def_s.impl&%0.spec_perms.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. (verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!))) (%Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. perms!)))) :pattern ((verismo!arch.rmp.def_s.impl&%2.spec_new.? immutable! assigned! validated! vmsa! asid! gpn! size! perms!)))))
(declare-fun ens%verismo!arch.rmp.def_s.impl&%5.axiom_spec_new. (verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) Bool)
(assert (forall ((val! verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.)) (! (= (ens%verismo!arch.rmp.def_s.impl&%5.axiom_spec_new. val!) (= (verismo!arch.rmp.def_s.impl&%3.spec_val.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%5.spec_new.? (Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. val!)))) val!)) :pattern ((ens%verismo!arch.rmp.def_s.impl&%5.axiom_spec_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP.) (= (verismo!arch.rmp.def_s.impl&%3.spec_val.? (Poly%verismo!arch.rmp.def_s.RmpEntry. (verismo!arch.rmp.def_s.impl&%5.spec_new.? val!))) (%Poly%verismo!arch.rmp.def_s.HiddenRmpEntryForPSP. val!))) :pattern ((verismo!arch.rmp.def_s.impl&%5.spec_new.? val!)))))
(declare-fun ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. (vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. verismo!arch.entities.VMPL.) Bool)
(assert (forall ((p! vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>.) (vmpl! verismo!arch.entities.VMPL.)) (! (= (ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. p! vmpl!) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) (Poly%vstd!map.Map<verismo!arch.entities.VMPL./vstd!set.Set<verismo!arch.rmp.perm_s.Perm.>.>. p!)) (Poly%verismo!arch.entities.VMPL. vmpl!))) :pattern ((ens%verismo!arch.rmp.perm_s.rmp_perm_track_dom. p! vmpl!)))))
(assert (forall ((p! Poly) (vmpl! Poly)) (! (=> (and (has_type p! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.))) (has_type vmpl! TYPE%verismo!arch.entities.VMPL.)) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) p!) vmpl!)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.VMPL. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.VMPL. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) p!) vmpl!)))))
(assert (fuel_bool_default fuel%verismo!arch.ramdb.def.impl&%0.spec_data.))
(assert (=> (fuel_bool fuel%verismo!arch.ramdb.def.impl&%0.spec_data.) (forall ((self! Poly)) (! (= (verismo!arch.ramdb.def.impl&%0.spec_data.? self!) (verismo!arch.ramdb.def.RamDB./RamDB/data (%Poly%verismo!arch.ramdb.def.RamDB. self!))) :pattern ((verismo!arch.ramdb.def.impl&%0.spec_data.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.ramdb.def.impl&%0.spec_write_count.))
(assert (=> (fuel_bool fuel%verismo!arch.ramdb.def.impl&%0.spec_write_count.) (forall ((self! Poly)) (! (= (verismo!arch.ramdb.def.impl&%0.spec_write_count.? self!) (verismo!arch.ramdb.def.RamDB./RamDB/write_count (%Poly%verismo!arch.ramdb.def.RamDB. self!))) :pattern ((verismo!arch.ramdb.def.impl&%0.spec_write_count.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.ramdb.def.impl&%0.spec_crypto_mask.))
(assert (=> (fuel_bool fuel%verismo!arch.ramdb.def.impl&%0.spec_crypto_mask.) (forall ((self! Poly)) (! (= (verismo!arch.ramdb.def.impl&%0.spec_crypto_mask.? self!) (verismo!arch.ramdb.def.RamDB./RamDB/crypto_mask (%Poly%verismo!arch.ramdb.def.RamDB. self!))) :pattern ((verismo!arch.ramdb.def.impl&%0.spec_crypto_mask.? self!))))))
(declare-fun ens%verismo!arch.ramdb.def.impl&%2.axiom_spec_new. (vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. Int vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.) Bool)
(assert (forall ((data! vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>.) (write_count! Int) (crypto_mask! vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>.)) (! (= (ens%verismo!arch.ramdb.def.impl&%2.axiom_spec_new. data! write_count! crypto_mask!) (and (= (verismo!arch.ramdb.def.impl&%0.spec_data.? (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.ramdb.def.impl&%2.spec_new.? (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. data!) (I write_count!) (Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. crypto_mask!)))) data!) (= (verismo!arch.ramdb.def.impl&%0.spec_write_count.? (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.ramdb.def.impl&%2.spec_new.? (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. data!) (I write_count!) (Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. crypto_mask!)))) write_count!) (= (verismo!arch.ramdb.def.impl&%0.spec_crypto_mask.? (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.ramdb.def.impl&%2.spec_new.? (Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. data!) (I write_count!) (Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. crypto_mask!)))) crypto_mask!))) :pattern ((ens%verismo!arch.ramdb.def.impl&%2.axiom_spec_new. data! write_count! crypto_mask!)))))
(assert (forall ((data! Poly) (write_count! Poly) (crypto_mask! Poly)) (! (=> (and (has_type data! (TYPE%vstd!seq.Seq. $ (TYPE%verismo!arch.crypto.Encrypted. $ (TYPE%verismo!arch.crypto.SymKey. $ (TYPE%tuple%2. $ NAT $ INT)) $ (UINT 8)))) (has_type write_count! INT) (has_type crypto_mask! (TYPE%vstd!seq.Seq. $ TYPE%verismo!arch.crypto.CryptoMask.))) (and (and (= (verismo!arch.ramdb.def.impl&%0.spec_data.? (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.ramdb.def.impl&%2.spec_new.? data! write_count! crypto_mask!))) (%Poly%vstd!seq.Seq<verismo!arch.crypto.Encrypted<verismo!arch.crypto.SymKey<tuple%2<nat./int.>.>./u8.>.>. data!)) (= (verismo!arch.ramdb.def.impl&%0.spec_write_count.? (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.ramdb.def.impl&%2.spec_new.? data! write_count! crypto_mask!))) (%I write_count!))) (= (verismo!arch.ramdb.def.impl&%0.spec_crypto_mask.? (Poly%verismo!arch.ramdb.def.RamDB. (verismo!arch.ramdb.def.impl&%2.spec_new.? data! write_count! crypto_mask!))) (%Poly%vstd!seq.Seq<verismo!arch.crypto.CryptoMask.>. crypto_mask!)))) :pattern ((verismo!arch.ramdb.def.impl&%2.spec_new.? data! write_count! crypto_mask!)))))
(assert (fuel_bool_default fuel%verismo!tspec.math.pow_s.spec_nat_pow2.))
(declare-const fuel_nat%verismo!tspec.math.pow_s.spec_nat_pow2. Fuel)
(assert (forall ((e! Poly) (fuel% Fuel)) (! (= (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! fuel%) (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! zero)) :pattern ((verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! fuel%)))))
(assert (forall ((e! Poly) (fuel% Fuel)) (! (=> (has_type e! NAT) (= (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel%)) (ite (= (%I e!) 0) 1 (Mul 2 (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? (I (nClip (Sub (%I e!) 1))) fuel%))))) :pattern ((verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel%))))))
(assert (=> (fuel_bool fuel%verismo!tspec.math.pow_s.spec_nat_pow2.) (forall ((e! Poly)) (! (=> (has_type e! NAT) (= (verismo!tspec.math.pow_s.spec_nat_pow2.? e!) (verismo!tspec.math.pow_s.rec%spec_nat_pow2.? e! (succ fuel_nat%verismo!tspec.math.pow_s.spec_nat_pow2.)))) :pattern ((verismo!tspec.math.pow_s.spec_nat_pow2.? e!))))))
(assert (fuel_bool_default fuel%verismo!arch.tlb.def_s.impl&%2.spec_db.))
(assert (=> (fuel_bool fuel%verismo!arch.tlb.def_s.impl&%2.spec_db.) (forall ((self! Poly)) (! (= (verismo!arch.tlb.def_s.impl&%2.spec_db.? self!) (verismo!arch.tlb.def_s.TLB./TLB/db (%Poly%verismo!arch.tlb.def_s.TLB. self!))) :pattern ((verismo!arch.tlb.def_s.impl&%2.spec_db.? self!))))))
(declare-fun ens%verismo!arch.tlb.def_s.impl&%1.axiom_spec_new. (verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.) Bool)
(assert (forall ((db! verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>.)) (! (= (ens%verismo!arch.tlb.def_s.impl&%1.axiom_spec_new. db!) (= (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.tlb.def_s.impl&%1.spec_new.? (Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. db!)))) db!)) :pattern ((ens%verismo!arch.tlb.def_s.impl&%1.axiom_spec_new. db!)))))
(assert (forall ((db! Poly)) (! (=> (has_type db! (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.)))) (= (verismo!arch.tlb.def_s.impl&%2.spec_db.? (Poly%verismo!arch.tlb.def_s.TLB. (verismo!arch.tlb.def_s.impl&%1.spec_new.? db!))) (%Poly%verismo!tspec.fmap.FMap<verismo!arch.entities.memid.MemID./vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.GuestVir.>./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.>. db!))) :pattern ((verismo!arch.tlb.def_s.impl&%1.spec_new.? db!)))))
(assert (fuel_bool_default fuel%verismo!arch.vram.def.impl&%2.spec_sram.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.def.impl&%2.spec_sram.) (forall ((self! Poly)) (! (= (verismo!arch.vram.def.impl&%2.spec_sram.? self!) (verismo!arch.vram.def.VRamDB./VRamDB/sram (%Poly%verismo!arch.vram.def.VRamDB. self!))) :pattern ((verismo!arch.vram.def.impl&%2.spec_sram.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.vram.def.impl&%2.spec_rmp.))
(assert (=> (fuel_bool fuel%verismo!arch.vram.def.impl&%2.spec_rmp.) (forall ((self! Poly)) (! (= (verismo!arch.vram.def.impl&%2.spec_rmp.? self!) (verismo!arch.vram.def.VRamDB./VRamDB/rmp (%Poly%verismo!arch.vram.def.VRamDB. self!))) :pattern ((verismo!arch.vram.def.impl&%2.spec_rmp.? self!))))))
(declare-fun ens%verismo!arch.vram.def.impl&%1.axiom_spec_new. (verismo!arch.ramdb.def.RamDB. vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.) Bool)
(assert (forall ((sram! verismo!arch.ramdb.def.RamDB.) (rmp! vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>.)) (! (= (ens%verismo!arch.vram.def.impl&%1.axiom_spec_new. sram! rmp!) (and (= (verismo!arch.vram.def.impl&%2.spec_sram.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.vram.def.impl&%1.spec_new.? (Poly%verismo!arch.ramdb.def.RamDB. sram!) (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. rmp!)))) sram!) (= (verismo!arch.vram.def.impl&%2.spec_rmp.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.vram.def.impl&%1.spec_new.? (Poly%verismo!arch.ramdb.def.RamDB. sram!) (Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. rmp!)))) rmp!))) :pattern ((ens%verismo!arch.vram.def.impl&%1.axiom_spec_new. sram! rmp!)))))
(assert (forall ((sram! Poly) (rmp! Poly)) (! (=> (and (has_type sram! TYPE%verismo!arch.ramdb.def.RamDB.) (has_type rmp! (TYPE%vstd!map.Map. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) $ TYPE%verismo!arch.rmp.def_s.RmpEntry.))) (and (= (verismo!arch.vram.def.impl&%2.spec_sram.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.vram.def.impl&%1.spec_new.? sram! rmp!))) (%Poly%verismo!arch.ramdb.def.RamDB. sram!)) (= (verismo!arch.vram.def.impl&%2.spec_rmp.? (Poly%verismo!arch.vram.def.VRamDB. (verismo!arch.vram.def.impl&%1.spec_new.? sram! rmp!))) (%Poly%vstd!map.Map<verismo!arch.addr_s.def_s.SpecPage<verismo!arch.addr_s.def_s.SysPhy.>./verismo!arch.rmp.def_s.RmpEntry.>. rmp!)))) :pattern ((verismo!arch.vram.def.impl&%1.spec_new.? sram! rmp!)))))
(assert (tr_bound%verismo!arch.addr_s.def_s.AddrType. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%673.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%672.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%11.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%11.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (tr_bound%verismo!arch.addr_s.def_s.AddrType. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%47.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%47.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%645.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%644.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!arch.mem.def_s.impl&%0.spec_vram.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.def_s.impl&%0.spec_vram.) (forall ((self! Poly)) (! (= (verismo!arch.mem.def_s.impl&%0.spec_vram.? self!) (verismo!arch.mem.def_s.MemDB./MemDB/vram (%Poly%verismo!arch.mem.def_s.MemDB. self!))) :pattern ((verismo!arch.mem.def_s.impl&%0.spec_vram.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.mem.def_s.impl&%0.spec_l0_entry.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.def_s.impl&%0.spec_l0_entry.) (forall ((self! Poly)) (! (= (verismo!arch.mem.def_s.impl&%0.spec_l0_entry.? self!) (verismo!arch.mem.def_s.MemDB./MemDB/l0_entry (%Poly%verismo!arch.mem.def_s.MemDB. self!))) :pattern ((verismo!arch.mem.def_s.impl&%0.spec_l0_entry.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.mem.def_s.impl&%0.spec_sysmap.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.def_s.impl&%0.spec_sysmap.) (forall ((self! Poly)) (! (= (verismo!arch.mem.def_s.impl&%0.spec_sysmap.? self!) (verismo!arch.mem.def_s.MemDB./MemDB/sysmap (%Poly%verismo!arch.mem.def_s.MemDB. self!))) :pattern ((verismo!arch.mem.def_s.impl&%0.spec_sysmap.? self!))))))
(assert (fuel_bool_default fuel%verismo!arch.mem.def_s.impl&%0.spec_tlb.))
(assert (=> (fuel_bool fuel%verismo!arch.mem.def_s.impl&%0.spec_tlb.) (forall ((self! Poly)) (! (= (verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!) (verismo!arch.mem.def_s.MemDB./MemDB/tlb (%Poly%verismo!arch.mem.def_s.MemDB. self!))) :pattern ((verismo!arch.mem.def_s.impl&%0.spec_tlb.? self!))))))
(declare-fun ens%verismo!arch.mem.def_s.impl&%2.axiom_spec_new. (verismo!arch.vram.def.VRamDB. vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. verismo!arch.tlb.def_s.TLB.) Bool)
(assert (forall ((vram! verismo!arch.vram.def.VRamDB.) (l0_entry! vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>.) (sysmap! vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>.) (tlb! verismo!arch.tlb.def_s.TLB.)) (! (= (ens%verismo!arch.mem.def_s.impl&%2.axiom_spec_new. vram! l0_entry! sysmap! tlb!) (and (= (verismo!arch.mem.def_s.impl&%0.spec_vram.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? (Poly%verismo!arch.vram.def.VRamDB. vram!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. l0_entry!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. sysmap!) (Poly%verismo!arch.tlb.def_s.TLB. tlb!)))) vram!) (= (verismo!arch.mem.def_s.impl&%0.spec_l0_entry.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? (Poly%verismo!arch.vram.def.VRamDB. vram!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. l0_entry!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. sysmap!) (Poly%verismo!arch.tlb.def_s.TLB. tlb!)))) l0_entry!) (= (verismo!arch.mem.def_s.impl&%0.spec_sysmap.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? (Poly%verismo!arch.vram.def.VRamDB. vram!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. l0_entry!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. sysmap!) (Poly%verismo!arch.tlb.def_s.TLB. tlb!)))) sysmap!) (= (verismo!arch.mem.def_s.impl&%0.spec_tlb.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? (Poly%verismo!arch.vram.def.VRamDB. vram!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. l0_entry!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. sysmap!) (Poly%verismo!arch.tlb.def_s.TLB. tlb!)))) tlb!))) :pattern ((ens%verismo!arch.mem.def_s.impl&%2.axiom_spec_new. vram! l0_entry! sysmap! tlb!)))))
(assert (forall ((vram! Poly) (l0_entry! Poly) (sysmap! Poly) (tlb! Poly)) (! (=> (and (has_type vram! TYPE%verismo!arch.vram.def.VRamDB.) (has_type l0_entry! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.SpecPageTableEntry. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))) (has_type sysmap! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%verismo!arch.pgtable.def.MemMap. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))) (has_type tlb! TYPE%verismo!arch.tlb.def_s.TLB.)) (and (and (and (= (verismo!arch.mem.def_s.impl&%0.spec_vram.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? vram! l0_entry! sysmap! tlb!))) (%Poly%verismo!arch.vram.def.VRamDB. vram!)) (= (verismo!arch.mem.def_s.impl&%0.spec_l0_entry.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? vram! l0_entry! sysmap! tlb!))) (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.SpecPageTableEntry<verismo!arch.addr_s.def_s.GuestPhy.>.>. l0_entry!))) (= (verismo!arch.mem.def_s.impl&%0.spec_sysmap.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? vram! l0_entry! sysmap! tlb!))) (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./verismo!arch.pgtable.def.MemMap<verismo!arch.addr_s.def_s.GuestPhy./verismo!arch.addr_s.def_s.SysPhy.>.>. sysmap!))) (= (verismo!arch.mem.def_s.impl&%0.spec_tlb.? (Poly%verismo!arch.mem.def_s.MemDB. (verismo!arch.mem.def_s.impl&%2.spec_new.? vram! l0_entry! sysmap! tlb!))) (%Poly%verismo!arch.tlb.def_s.TLB. tlb!)))) :pattern ((verismo!arch.mem.def_s.impl&%2.spec_new.? vram! l0_entry! sysmap! tlb!)))))
(assert (fuel_bool_default fuel%verismo!arch.entities.impl&%5.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.entities.impl&%5.ord_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.entities.VMPL. self!) (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.entities.VMPL. self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.entities.VMPL. self!))))))
(assert (tr_bound%verismo!tspec.integer.IntOrd. $ TYPE%verismo!arch.entities.VMPL.))
(declare-fun ens%verismo!arch.x64.def_s.impl&%6.axiom_spec_new. (verismo!arch.mem.def_s.MemDB. vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.) Bool)
(assert (forall ((memdb! verismo!arch.mem.def_s.MemDB.) (regdb! vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>.) (entities! vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>.)) (! (= (ens%verismo!arch.x64.def_s.impl&%6.axiom_spec_new. memdb! regdb! entities!) (and (= (verismo!arch.x64.def_s.impl&%4.spec_memdb.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.impl&%6.spec_new.? (Poly%verismo!arch.mem.def_s.MemDB. memdb!) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. regdb!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. entities!)))) memdb!) (= (verismo!arch.x64.def_s.impl&%4.spec_regdb.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.impl&%6.spec_new.? (Poly%verismo!arch.mem.def_s.MemDB. memdb!) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. regdb!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. entities!)))) regdb!) (= (verismo!arch.x64.def_s.impl&%4.spec_entities.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.impl&%6.spec_new.? (Poly%verismo!arch.mem.def_s.MemDB. memdb!) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. regdb!) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. entities!)))) entities!))) :pattern ((ens%verismo!arch.x64.def_s.impl&%6.axiom_spec_new. memdb! regdb! entities!)))))
(assert (forall ((memdb! Poly) (regdb! Poly) (entities! Poly)) (! (=> (and (has_type memdb! TYPE%verismo!arch.mem.def_s.MemDB.) (has_type regdb! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)))) (has_type entities! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL)))) (and (and (= (verismo!arch.x64.def_s.impl&%4.spec_memdb.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.impl&%6.spec_new.? memdb! regdb! entities!))) (%Poly%verismo!arch.mem.def_s.MemDB. memdb!)) (= (verismo!arch.x64.def_s.impl&%4.spec_regdb.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.impl&%6.spec_new.? memdb! regdb! entities!))) (%Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. regdb!))) (= (verismo!arch.x64.def_s.impl&%4.spec_entities.? (Poly%verismo!arch.x64.def_s.Archx64. (verismo!arch.x64.def_s.impl&%6.spec_new.? memdb! regdb! entities!))) (%Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. entities!)))) :pattern ((verismo!arch.x64.def_s.impl&%6.spec_new.? memdb! regdb! entities!)))))
(declare-fun ens%verismo!arch.x64.x64_s.impl&%1.axiom_reg_dom. (verismo!arch.x64.def_s.Archx64. verismo!arch.entities.memid.CpuMemID.) Bool)
(assert (forall ((self! verismo!arch.x64.def_s.Archx64.) (cpumemid! verismo!arch.entities.memid.CpuMemID.)) (! (= (ens%verismo!arch.x64.x64_s.impl&%1.axiom_reg_dom. self! cpumemid!) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.memid.CpuMemID. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? (Poly%verismo!arch.x64.def_s.Archx64. self!)))) (Poly%verismo!arch.entities.memid.CpuMemID. cpumemid!))) :pattern ((ens%verismo!arch.x64.x64_s.impl&%1.axiom_reg_dom. self! cpumemid!)))))
(assert (forall ((self! Poly) (cpumemid! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.x64.def_s.Archx64.) (has_type cpumemid! TYPE%verismo!arch.entities.memid.CpuMemID.)) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.memid.CpuMemID. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!))) cpumemid!)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.memid.CpuMemID. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.memid.CpuMemID. $ (TYPE%verismo!tspec.fmap.FMap. $ TYPE%verismo!arch.reg.RegName. $ (UINT 64)) (Poly%vstd!map.Map<verismo!arch.entities.memid.CpuMemID./verismo!tspec.fmap.FMap<verismo!arch.reg.RegName./u64.>.>. (verismo!arch.x64.def_s.impl&%4.spec_regdb.? self!))) cpumemid!)))))
(declare-fun ens%verismo!arch.x64.x64_s.impl&%1.axiom_entities_dom. (verismo!arch.x64.def_s.Archx64. verismo!arch.entities.memid.MemID.) Bool)
(assert (forall ((self! verismo!arch.x64.def_s.Archx64.) (memid! verismo!arch.entities.memid.MemID.)) (! (= (ens%verismo!arch.x64.x64_s.impl&%1.axiom_entities_dom. self! memid!) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.memid.MemID. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? (Poly%verismo!arch.x64.def_s.Archx64. self!)))) (Poly%verismo!arch.entities.memid.MemID. memid!))) :pattern ((ens%verismo!arch.x64.x64_s.impl&%1.axiom_entities_dom. self! memid!)))))
(assert (forall ((self! Poly) (memid! Poly)) (! (=> (and (has_type self! TYPE%verismo!arch.x64.def_s.Archx64.) (has_type memid! TYPE%verismo!arch.entities.memid.MemID.)) (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.memid.MemID. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!))) memid!)) :pattern ((vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.entities.memid.MemID. (vstd!map.impl&%0.dom.? $ TYPE%verismo!arch.entities.memid.MemID. $ (TYPE%vstd!map.Map. $ NAT $ BOOL) (Poly%vstd!map.Map<verismo!arch.entities.memid.MemID./vstd!map.Map<nat./bool.>.>. (verismo!arch.x64.def_s.impl&%4.spec_entities.? self!))) memid!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%17.spec_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%17.spec_constant.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (= (verismo!tspec.security.sectype.impl&%17.spec_constant.? T&. T& M&. M& val!) (verismo!tspec.security.sectype.impl&%9.spec_new.? T&. T& M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? T&. T& M&. M& val!)))) :pattern ((verismo!tspec.security.sectype.impl&%17.spec_constant.? T&. T& M&. M& val!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (val! Poly)) (! (=> (has_type val! T&) (has_type (verismo!tspec.security.sectype.impl&%17.spec_constant.? T&. T& M&. M& val!) (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((verismo!tspec.security.sectype.impl&%17.spec_constant.? T&. T& M&. M& val!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%96.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%96.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (I 0))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%102.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%102.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I 0))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%18.spec_default.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%18.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!boot.idt.def.Idtr.) (Poly%verismo!boot.idt.def.Idtr. (verismo!boot.idt.def.Idtr./Idtr (%Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) $ TYPE%tuple%0. (I 0))))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) $ TYPE%tuple%0. (I 0))))))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%20.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%20.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.security.sectype.impl&%20.wf.? T&. T& self!) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& $ TYPE%tuple%0. self!)) :pattern ((verismo!tspec.security.sectype.impl&%20.wf.? T&. T& self!))))))
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%24.wf.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%24.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.idt.def.Idtr. self!) (B (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!boot.idt.def.Idtr. self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%8.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%8.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT SZ) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT SZ) self!))))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%2.axiom_spec_new. (Int Int Int) Bool)
(assert (forall ((vmpl! Int) (perms! Int) (vmsa! Int)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%2.axiom_spec_new. vmpl! perms! vmsa!) (and (= (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%2.spec_new.? (I vmpl!) (I perms!) (I vmsa!)))) vmpl!) (= (verismo!ptr.snp.snp_u.impl&%0.spec_perms.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%2.spec_new.? (I vmpl!) (I perms!) (I vmsa!)))) perms!) (= (verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%2.spec_new.? (I vmpl!) (I perms!) (I vmsa!)))) vmsa!))) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%2.axiom_spec_new. vmpl! perms! vmsa!)))))
(assert (forall ((vmpl! Poly) (perms! Poly) (vmsa! Poly)) (! (=> (and (has_type vmpl! (UINT 64)) (has_type perms! (UINT 64)) (has_type vmsa! (UINT 64))) (and (and (= (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%2.spec_new.? vmpl! perms! vmsa!))) (%I vmpl!)) (= (verismo!ptr.snp.snp_u.impl&%0.spec_perms.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%2.spec_new.? vmpl! perms! vmsa!))) (%I perms!))) (= (verismo!ptr.snp.snp_u.impl&%0.spec_vmsa.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%2.spec_new.? vmpl! perms! vmsa!))) (%I vmsa!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%2.spec_new.? vmpl! perms! vmsa!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%3.new.? val!)) TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.)) :pattern ((verismo!ptr.snp.snp_u.impl&%3.new.? val!)))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%3.axiom_new. (verismo!ptr.snp.snp_u.RmpAttr.) Bool)
(assert (forall ((val! verismo!ptr.snp.snp_u.RmpAttr.)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%3.axiom_new. val!) (= (verismo!ptr.snp.snp_u.impl&%3.new.? (I (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. (Poly%verismo!ptr.snp.snp_u.RmpAttr. val!))))) (verismo!ptr.snp.snp_u.impl&%16.view.? (Poly%verismo!ptr.snp.snp_u.RmpAttr. val!)))) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%3.axiom_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (= (verismo!ptr.snp.snp_u.impl&%3.new.? (I (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. val!)))) (verismo!ptr.snp.snp_u.impl&%16.view.? val!))) :pattern ((verismo!ptr.snp.snp_u.impl&%3.new.? (I (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. val!)))) (verismo!ptr.snp.snp_u.impl&%16.view.? val!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttr. (verismo!ptr.snp.snp_u.impl&%3.to_value.? self!)) TYPE%verismo!ptr.snp.snp_u.RmpAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%3.to_value.? self!)))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%3.axiom_into. (verismo!ptr.snp.snp_u.RmpAttrSpec.) Bool)
(assert (forall ((self! verismo!ptr.snp.snp_u.RmpAttrSpec.)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%3.axiom_into. self!) (= (verismo!ptr.snp.snp_u.impl&%16.view.? (Poly%verismo!ptr.snp.snp_u.RmpAttr. (verismo!ptr.snp.snp_u.impl&%3.to_value.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. self!)))) self!)) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%3.axiom_into. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttrSpec.) (= (verismo!ptr.snp.snp_u.impl&%16.view.? (Poly%verismo!ptr.snp.snp_u.RmpAttr. (verismo!ptr.snp.snp_u.impl&%3.to_value.? self!))) (%Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%3.to_value.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%16.inv.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%16.inv.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 65535)))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.inv.? self!))))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%16.axiom_inv. (verismo!ptr.snp.snp_u.RmpAttr.) Bool)
(assert (forall ((self! verismo!ptr.snp.snp_u.RmpAttr.)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%16.axiom_inv. self!) (and (verismo!ptr.snp.snp_u.impl&%16.inv.? (Poly%verismo!ptr.snp.snp_u.RmpAttr. self!)) (let ((tmp%%$ (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. (Poly%verismo!ptr.snp.snp_u.RmpAttr. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 65535))))) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%16.axiom_inv. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (and (verismo!ptr.snp.snp_u.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 65535))))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.inv.? self!) (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%19.spec_w.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%19.spec_w.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%19.spec_w.? self!) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/w (%Poly%verismo!ptr.snp.snp_u.PTAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%19.spec_w.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%19.spec_x.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%19.spec_x.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%19.spec_x.? self!) (verismo!ptr.snp.snp_u.PTAttr./PTAttr/x (%Poly%verismo!ptr.snp.snp_u.PTAttr. self!))) :pattern ((verismo!ptr.snp.snp_u.impl&%19.spec_x.? self!))))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%18.axiom_spec_new. (Bool Bool Bool) Bool)
(assert (forall ((encrypted! Bool) (w! Bool) (x! Bool)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%18.axiom_spec_new. encrypted! w! x!) (and (= (verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.? (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%18.spec_new.? (B encrypted!) (B w!) (B x!)))) encrypted!) (= (verismo!ptr.snp.snp_u.impl&%19.spec_w.? (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%18.spec_new.? (B encrypted!) (B w!) (B x!)))) w!) (= (verismo!ptr.snp.snp_u.impl&%19.spec_x.? (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%18.spec_new.? (B encrypted!) (B w!) (B x!)))) x!))) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%18.axiom_spec_new. encrypted! w! x!)))))
(assert (forall ((encrypted! Poly) (w! Poly) (x! Poly)) (! (=> (and (has_type encrypted! BOOL) (has_type w! BOOL) (has_type x! BOOL)) (and (and (= (verismo!ptr.snp.snp_u.impl&%19.spec_encrypted.? (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%18.spec_new.? encrypted! w! x!))) (%B encrypted!)) (= (verismo!ptr.snp.snp_u.impl&%19.spec_w.? (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%18.spec_new.? encrypted! w! x!))) (%B w!))) (= (verismo!ptr.snp.snp_u.impl&%19.spec_x.? (Poly%verismo!ptr.snp.snp_u.PTAttr. (verismo!ptr.snp.snp_u.impl&%18.spec_new.? encrypted! w! x!))) (%B x!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%18.spec_new.? encrypted! w! x!)))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%23.axiom_spec_new. (verismo!arch.rmp.def_s.RmpEntry. vstd!map.Map<int./int.>. vstd!map.Map<int./int.>. vstd!map.Map<int./int.>. vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. Bool) Bool)
(assert (forall ((rmp! verismo!arch.rmp.def_s.RmpEntry.) (guestmap! vstd!map.Map<int./int.>.) (sysmap! vstd!map.Map<int./int.>.) (rmpmap! vstd!map.Map<int./int.>.) (pte! vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>.) (is_pte! Bool)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%23.axiom_spec_new. rmp! guestmap! sysmap! rmpmap! pte! is_pte!) (and (= (verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. rmp!) (Poly%vstd!map.Map<int./int.>. guestmap!) (Poly%vstd!map.Map<int./int.>. sysmap!) (Poly%vstd!map.Map<int./int.>. rmpmap!) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. pte!) (B is_pte!)))) rmp!) (= (verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. rmp!) (Poly%vstd!map.Map<int./int.>. guestmap!) (Poly%vstd!map.Map<int./int.>. sysmap!) (Poly%vstd!map.Map<int./int.>. rmpmap!) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. pte!) (B is_pte!)))) guestmap!) (= (verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. rmp!) (Poly%vstd!map.Map<int./int.>. guestmap!) (Poly%vstd!map.Map<int./int.>. sysmap!) (Poly%vstd!map.Map<int./int.>. rmpmap!) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. pte!) (B is_pte!)))) sysmap!) (= (verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. rmp!) (Poly%vstd!map.Map<int./int.>. guestmap!) (Poly%vstd!map.Map<int./int.>. sysmap!) (Poly%vstd!map.Map<int./int.>. rmpmap!) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. pte!) (B is_pte!)))) rmpmap!) (= (verismo!ptr.snp.snp_u.impl&%24.spec_pte.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. rmp!) (Poly%vstd!map.Map<int./int.>. guestmap!) (Poly%vstd!map.Map<int./int.>. sysmap!) (Poly%vstd!map.Map<int./int.>. rmpmap!) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. pte!) (B is_pte!)))) pte!) (= (verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? (Poly%verismo!arch.rmp.def_s.RmpEntry. rmp!) (Poly%vstd!map.Map<int./int.>. guestmap!) (Poly%vstd!map.Map<int./int.>. sysmap!) (Poly%vstd!map.Map<int./int.>. rmpmap!) (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. pte!) (B is_pte!)))) is_pte!))) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%23.axiom_spec_new. rmp! guestmap! sysmap! rmpmap! pte! is_pte!)))))
(assert (forall ((rmp! Poly) (guestmap! Poly) (sysmap! Poly) (rmpmap! Poly) (pte! Poly) (is_pte! Poly)) (! (=> (and (has_type rmp! TYPE%verismo!arch.rmp.def_s.RmpEntry.) (has_type guestmap! (TYPE%vstd!map.Map. $ INT $ INT)) (has_type sysmap! (TYPE%vstd!map.Map. $ INT $ INT)) (has_type rmpmap! (TYPE%vstd!map.Map. $ INT $ INT)) (has_type pte! (TYPE%vstd!seq.Seq. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.)) (has_type is_pte! BOOL)) (and (and (and (and (and (= (verismo!ptr.snp.snp_u.impl&%24.spec_rmp.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!))) (%Poly%verismo!arch.rmp.def_s.RmpEntry. rmp!)) (= (verismo!ptr.snp.snp_u.impl&%24.spec_guestmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!))) (%Poly%vstd!map.Map<int./int.>. guestmap!))) (= (verismo!ptr.snp.snp_u.impl&%24.spec_sysmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!))) (%Poly%vstd!map.Map<int./int.>. sysmap!))) (= (verismo!ptr.snp.snp_u.impl&%24.spec_rmpmap.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!))) (%Poly%vstd!map.Map<int./int.>. rmpmap!))) (= (verismo!ptr.snp.snp_u.impl&%24.spec_pte.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!))) (%Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. pte!))) (= (verismo!ptr.snp.snp_u.impl&%24.spec_is_pte.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!))) (%B is_pte!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%23.spec_new.? rmp! guestmap! sysmap! rmpmap! pte! is_pte!)))))
(declare-fun ens%verismo!ptr.snp.snp_u.impl&%27.axiom_pte. (verismo!ptr.snp.snp_u.SwSnpMemAttr.) Bool)
(assert (forall ((self! verismo!ptr.snp.snp_u.SwSnpMemAttr.)) (! (= (ens%verismo!ptr.snp.snp_u.impl&%27.axiom_pte. self!) (=> (= (vstd!seq.Seq.len.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))) 1) (= (verismo!ptr.snp.snp_u.impl&%27.pte.? (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)) (%Poly%verismo!ptr.snp.snp_u.PTAttr. (vstd!seq.Seq.last.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!))))))))) :pattern ((ens%verismo!ptr.snp.snp_u.impl&%27.axiom_pte. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.) (=> (= (vstd!seq.Seq.len.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))) 1) (= (verismo!ptr.snp.snp_u.impl&%27.pte.? self!) (%Poly%verismo!ptr.snp.snp_u.PTAttr. (vstd!seq.Seq.last.? $ TYPE%verismo!ptr.snp.snp_u.PTAttr. (Poly%vstd!seq.Seq<verismo!ptr.snp.snp_u.PTAttr.>. (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. self!)))))))) :pattern ((verismo!ptr.snp.snp_u.impl&%27.pte.? self!)))))
(assert (forall ((coreid! Poly) (vmpl! Poly) (cpu! Poly) (regs! Poly)) (! (=> (and (has_type coreid! TYPE%verismo!registers.core_perm_s.CoreIdPerm.) (has_type vmpl! NAT) (has_type cpu! NAT) (has_type regs! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.))) (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!)) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.)) :pattern ((verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!)))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? self!) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? self!))))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/vmpl (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? self!)))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/cpu (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (<= 0 (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? self!)))))
(assert (fuel_bool_default fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.))
(assert (=> (fuel_bool fuel%verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.) (forall ((self! Poly)) (! (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? self!) (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/regs (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. self!))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? self!))))))
(declare-fun ens%verismo!registers.trackedcore.snpcore.impl&%2.axiom_spec_new. (verismo!registers.core_perm_s.CoreIdPerm. Int Int vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.) Bool)
(assert (forall ((coreid! verismo!registers.core_perm_s.CoreIdPerm.) (vmpl! Int) (cpu! Int) (regs! vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>.)) (! (= (ens%verismo!registers.trackedcore.snpcore.impl&%2.axiom_spec_new. coreid! vmpl! cpu! regs!) (and (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!) (I vmpl!) (I cpu!) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) coreid!) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!) (I vmpl!) (I cpu!) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) vmpl!) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!) (I vmpl!) (I cpu!) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) cpu!) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!) (I vmpl!) (I cpu!) (Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) regs!))) :pattern ((ens%verismo!registers.trackedcore.snpcore.impl&%2.axiom_spec_new. coreid! vmpl! cpu! regs!)))))
(assert (forall ((coreid! Poly) (vmpl! Poly) (cpu! Poly) (regs! Poly)) (! (=> (and (has_type coreid! TYPE%verismo!registers.core_perm_s.CoreIdPerm.) (has_type vmpl! NAT) (has_type cpu! NAT) (has_type regs! (TYPE%vstd!map.Map. $ TYPE%verismo!arch.reg.RegName. $ TYPE%verismo!registers.msr_perm_s.RegisterPerm.))) (and (and (and (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_coreid.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!))) (%Poly%verismo!registers.core_perm_s.CoreIdPerm. coreid!)) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_vmpl.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!))) (%I vmpl!))) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_cpu.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!))) (%I cpu!))) (= (verismo!registers.trackedcore.snpcore.impl&%0.spec_regs.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. (verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!))) (%Poly%vstd!map.Map<verismo!arch.reg.RegName./verismo!registers.msr_perm_s.RegisterPerm.>. regs!)))) :pattern ((verismo!registers.trackedcore.snpcore.impl&%2.spec_new.? coreid! vmpl! cpu! regs!)))))
(assert (forall ((accessed! Poly) (write! Poly) (conform! Poly) (exe! Poly) (sys! Poly) (dpl! Poly) (present! Poly)) (! (=> (and (has_type accessed! (UINT 64)) (has_type write! (UINT 64)) (has_type conform! (UINT 64)) (has_type exe! (UINT 64)) (has_type sys! (UINT 64)) (has_type dpl! (UINT 64)) (has_type present! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_accessed.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_accessed.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/accessed (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_write.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_write.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/write (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_write.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_conform.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_conform.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/conform (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_exe.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_exe.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/exe (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_sys.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_sys.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/sys (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_dpl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_dpl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/dpl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%0.spec_present.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%0.spec_present.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec./DescriptorAttr0_7Spec/present (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_present.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%2.axiom_spec_new. (Int Int Int Int Int Int Int) Bool)
(assert (forall ((accessed! Int) (write! Int) (conform! Int) (exe! Int) (sys! Int) (dpl! Int) (present! Int)) (! (= (ens%verismo!snp.cpu.gdt.impl&%2.axiom_spec_new. accessed! write! conform! exe! sys! dpl! present!) (and (= (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) accessed!) (= (verismo!snp.cpu.gdt.impl&%0.spec_write.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) write!) (= (verismo!snp.cpu.gdt.impl&%0.spec_conform.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) conform!) (= (verismo!snp.cpu.gdt.impl&%0.spec_exe.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) exe!) (= (verismo!snp.cpu.gdt.impl&%0.spec_sys.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) sys!) (= (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) dpl!) (= (verismo!snp.cpu.gdt.impl&%0.spec_present.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I accessed!) (I write!) (I conform!) (I exe!) (I sys!) (I dpl!) (I present!)))) present!))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%2.axiom_spec_new. accessed! write! conform! exe! sys! dpl! present!)))))
(assert (forall ((accessed! Poly) (write! Poly) (conform! Poly) (exe! Poly) (sys! Poly) (dpl! Poly) (present! Poly)) (! (=> (and (has_type accessed! (UINT 64)) (has_type write! (UINT 64)) (has_type conform! (UINT 64)) (has_type exe! (UINT 64)) (has_type sys! (UINT 64)) (has_type dpl! (UINT 64)) (has_type present! (UINT 64))) (and (and (and (and (and (and (= (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I accessed!)) (= (verismo!snp.cpu.gdt.impl&%0.spec_write.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I write!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_conform.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I conform!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_exe.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I exe!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_sys.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I sys!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I dpl!))) (= (verismo!snp.cpu.gdt.impl&%0.spec_present.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!))) (%I present!)))) :pattern ((verismo!snp.cpu.gdt.impl&%2.spec_new.? accessed! write! conform! exe! sys! dpl! present!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%3.new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%3.new.? val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_present.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_present.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_present.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) val!)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_present.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_present.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_present.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_sys.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_sys.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_exe.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_exe.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_conform.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_conform.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_write.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_write.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_write.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? (I (verismo!snp.cpu.gdt.impl&%0.spec_accessed.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_write.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_write.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_write.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? self! val!) (verismo!snp.cpu.gdt.impl&%2.spec_new.? val! (I (verismo!snp.cpu.gdt.impl&%0.spec_write.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_conform.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_exe.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_sys.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_dpl.? self!)) (I (verismo!snp.cpu.gdt.impl&%0.spec_present.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_accessed.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_accessed.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_write.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_write.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_write.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 1))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_write.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_write.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_write.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_conform.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_conform.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 2))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_exe.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_exe.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 3))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_sys.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_sys.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 4))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_dpl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_dpl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!) (let ((mask$ (uClip 64 3))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 5))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_present.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_present.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_present.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (I (uClip 64 7))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_present.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (uInv 64 (verismo!snp.cpu.gdt.impl&%16.spec_present.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_present.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.view.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.view.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.view.? self!) (verismo!snp.cpu.gdt.impl&%1.spec_set_present.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_dpl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_sys.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_exe.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_conform.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_write.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%1.spec_set_accessed.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_accessed.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_write.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_conform.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_exe.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_sys.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_dpl.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%16.spec_present.? self!))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. (verismo!snp.cpu.gdt.impl&%16.view.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%16.view.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%3.axiom_new. (verismo!snp.cpu.gdt.DescriptorAttr0_7.) Bool)
(assert (forall ((val! verismo!snp.cpu.gdt.DescriptorAttr0_7.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%3.axiom_new. val!) (= (verismo!snp.cpu.gdt.impl&%3.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. val!))))) (verismo!snp.cpu.gdt.impl&%16.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. val!)))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%3.axiom_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (= (verismo!snp.cpu.gdt.impl&%3.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. val!)))) (verismo!snp.cpu.gdt.impl&%16.view.? val!))) :pattern ((verismo!snp.cpu.gdt.impl&%3.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. val!)))) (verismo!snp.cpu.gdt.impl&%16.view.? val!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.impl&%3.to_value.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)) :pattern ((verismo!snp.cpu.gdt.impl&%3.to_value.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%3.axiom_into. (verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%3.axiom_into. self!) (= (verismo!snp.cpu.gdt.impl&%16.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.impl&%3.to_value.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!)))) self!)) :pattern ((ens%verismo!snp.cpu.gdt.impl&%3.axiom_into. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec.) (= (verismo!snp.cpu.gdt.impl&%16.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.impl&%3.to_value.? self!))) (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%3.to_value.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.inv.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.inv.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 127)))) :pattern ((verismo!snp.cpu.gdt.impl&%16.inv.? self!))))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%16.axiom_inv. (verismo!snp.cpu.gdt.DescriptorAttr0_7.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorAttr0_7.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%16.axiom_inv. self!) (and (verismo!snp.cpu.gdt.impl&%16.inv.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 127))))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%16.axiom_inv. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (and (verismo!snp.cpu.gdt.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 127))))) :pattern ((verismo!snp.cpu.gdt.impl&%16.inv.? self!) (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!))))))
(assert (forall ((avl! Poly) (long! Poly) (size32_or_16! Poly) (granularity! Poly)) (! (=> (and (has_type avl! (UINT 64)) (has_type long! (UINT 64)) (has_type size32_or_16! (UINT 64)) (has_type granularity! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%17.spec_avl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%17.spec_avl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/avl (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%17.spec_long.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%17.spec_long.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/long (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_long.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_long.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/size32_or_16 (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%17.spec_granularity.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%17.spec_granularity.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec./DescriptorAttr8_11Spec/granularity (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%19.axiom_spec_new. (Int Int Int Int) Bool)
(assert (forall ((avl! Int) (long! Int) (size32_or_16! Int) (granularity! Int)) (! (= (ens%verismo!snp.cpu.gdt.impl&%19.axiom_spec_new. avl! long! size32_or_16! granularity!) (and (= (verismo!snp.cpu.gdt.impl&%17.spec_avl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I avl!) (I long!) (I size32_or_16!) (I granularity!)))) avl!) (= (verismo!snp.cpu.gdt.impl&%17.spec_long.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I avl!) (I long!) (I size32_or_16!) (I granularity!)))) long!) (= (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I avl!) (I long!) (I size32_or_16!) (I granularity!)))) size32_or_16!) (= (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I avl!) (I long!) (I size32_or_16!) (I granularity!)))) granularity!))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%19.axiom_spec_new. avl! long! size32_or_16! granularity!)))))
(assert (forall ((avl! Poly) (long! Poly) (size32_or_16! Poly) (granularity! Poly)) (! (=> (and (has_type avl! (UINT 64)) (has_type long! (UINT 64)) (has_type size32_or_16! (UINT 64)) (has_type granularity! (UINT 64))) (and (and (and (= (verismo!snp.cpu.gdt.impl&%17.spec_avl.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!))) (%I avl!)) (= (verismo!snp.cpu.gdt.impl&%17.spec_long.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!))) (%I long!))) (= (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!))) (%I size32_or_16!))) (= (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!))) (%I granularity!)))) :pattern ((verismo!snp.cpu.gdt.impl&%19.spec_new.? avl! long! size32_or_16! granularity!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%20.new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%20.new.? val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? self! val!) (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!)) val!)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? self! val!) (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_long.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_long.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%18.spec_set_long.? self! val!) (verismo!snp.cpu.gdt.impl&%19.spec_new.? (I (verismo!snp.cpu.gdt.impl&%17.spec_avl.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_long.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_long.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_long.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_avl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%18.spec_set_avl.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? self! val!) (verismo!snp.cpu.gdt.impl&%19.spec_new.? val! (I (verismo!snp.cpu.gdt.impl&%17.spec_long.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_size32_or_16.? self!)) (I (verismo!snp.cpu.gdt.impl&%17.spec_granularity.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_avl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_avl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_long.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_long.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_long.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (I (uClip 64 1))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_long.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.impl&%33.spec_long.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_long.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (I (uClip 64 2))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_granularity.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_granularity.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (I (uClip 64 3))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (uInv 64 (verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.view.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.view.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.view.? self!) (verismo!snp.cpu.gdt.impl&%18.spec_set_granularity.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_size32_or_16.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_long.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%18.spec_set_avl.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%33.spec_avl.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%33.spec_long.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%33.spec_size32_or_16.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%33.spec_granularity.? self!))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. (verismo!snp.cpu.gdt.impl&%33.view.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) :pattern ((verismo!snp.cpu.gdt.impl&%33.view.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%20.axiom_new. (verismo!snp.cpu.gdt.DescriptorAttr8_11.) Bool)
(assert (forall ((val! verismo!snp.cpu.gdt.DescriptorAttr8_11.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%20.axiom_new. val!) (= (verismo!snp.cpu.gdt.impl&%20.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. val!))))) (verismo!snp.cpu.gdt.impl&%33.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. val!)))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%20.axiom_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (= (verismo!snp.cpu.gdt.impl&%20.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. val!)))) (verismo!snp.cpu.gdt.impl&%33.view.? val!))) :pattern ((verismo!snp.cpu.gdt.impl&%20.new.? (I (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. val!)))) (verismo!snp.cpu.gdt.impl&%33.view.? val!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.impl&%20.to_value.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)) :pattern ((verismo!snp.cpu.gdt.impl&%20.to_value.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%20.axiom_into. (verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%20.axiom_into. self!) (= (verismo!snp.cpu.gdt.impl&%33.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.impl&%20.to_value.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!)))) self!)) :pattern ((ens%verismo!snp.cpu.gdt.impl&%20.axiom_into. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec.) (= (verismo!snp.cpu.gdt.impl&%33.view.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.impl&%20.to_value.? self!))) (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11Spec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%20.to_value.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.inv.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.inv.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 7)))) :pattern ((verismo!snp.cpu.gdt.impl&%33.inv.? self!))))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%33.axiom_inv. (verismo!snp.cpu.gdt.DescriptorAttr8_11.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorAttr8_11.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%33.axiom_inv. self!) (and (verismo!snp.cpu.gdt.impl&%33.inv.? (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 7))))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%33.axiom_inv. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (and (verismo!snp.cpu.gdt.impl&%33.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 7))))) :pattern ((verismo!snp.cpu.gdt.impl&%33.inv.? self!) (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!))))))
(assert (forall ((limit0_15! Poly) (base0_23! Poly) (attr_0_7! Poly) (limit16_19! Poly) (attr_8_11! Poly) (base24_31! Poly)) (! (=> (and (has_type limit0_15! (UINT 64)) (has_type base0_23! (UINT 64)) (has_type attr_0_7! (UINT 64)) (has_type limit16_19! (UINT 64)) (has_type attr_8_11! (UINT 64)) (has_type base24_31! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit0_15 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_base0_23.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_base0_23.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base0_23 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_0_7 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/limit16_19 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/attr_8_11 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%34.spec_base24_31.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%34.spec_base24_31.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!) (verismo!snp.cpu.gdt.DescriptorSpec./DescriptorSpec/base24_31 (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (uInv 64 (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%36.axiom_spec_new. (Int Int Int Int Int Int) Bool)
(assert (forall ((limit0_15! Int) (base0_23! Int) (attr_0_7! Int) (limit16_19! Int) (attr_8_11! Int) (base24_31! Int)) (! (= (ens%verismo!snp.cpu.gdt.impl&%36.axiom_spec_new. limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!) (and (= (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) limit0_15!) (= (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) base0_23!) (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) attr_0_7!) (= (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) limit16_19!) (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) attr_8_11!) (= (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I limit0_15!) (I base0_23!) (I attr_0_7!) (I limit16_19!) (I attr_8_11!) (I base24_31!)))) base24_31!))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%36.axiom_spec_new. limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!)))))
(assert (forall ((limit0_15! Poly) (base0_23! Poly) (attr_0_7! Poly) (limit16_19! Poly) (attr_8_11! Poly) (base24_31! Poly)) (! (=> (and (has_type limit0_15! (UINT 64)) (has_type base0_23! (UINT 64)) (has_type attr_0_7! (UINT 64)) (has_type limit16_19! (UINT 64)) (has_type attr_8_11! (UINT 64)) (has_type base24_31! (UINT 64))) (and (and (and (and (and (= (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I limit0_15!)) (= (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I base0_23!))) (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I attr_0_7!))) (= (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I limit16_19!))) (= (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I attr_8_11!))) (= (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!))) (%I base24_31!)))) :pattern ((verismo!snp.cpu.gdt.impl&%36.spec_new.? limit0_15! base0_23! attr_0_7! limit16_19! attr_8_11! base24_31!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%37.new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%37.new.? val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) val!)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? (I (verismo!snp.cpu.gdt.impl&%34.spec_limit0_15.? self!)) val! (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? self! val!) (verismo!snp.cpu.gdt.impl&%36.spec_new.? val! (I (verismo!snp.cpu.gdt.impl&%34.spec_base0_23.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_0_7.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_limit16_19.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_attr_8_11.? self!)) (I (verismo!snp.cpu.gdt.impl&%34.spec_base24_31.? self!)))) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type val! (UINT 64))) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? self! val!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!) (let ((mask$ (uClip 64 65535))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_base0_23.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_base0_23.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!) (let ((mask$ (uClip 64 16777215))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 16))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!) (let ((mask$ (uClip 64 255))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 40))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!) (let ((mask$ (uClip 64 15))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 48))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!) (let ((mask$ (uClip 64 15))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 52))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_base24_31.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_base24_31.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!) (let ((mask$ (uClip 64 511))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (I (uClip 64 56))))) (I mask$))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (uInv 64 (verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.view.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.view.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.view.? self!) (verismo!snp.cpu.gdt.impl&%35.spec_set_base24_31.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_8_11.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_limit16_19.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_attr_0_7.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_base0_23.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%35.spec_set_limit0_15.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_limit0_15.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_base0_23.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_attr_0_7.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_limit16_19.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_attr_8_11.? self!))))) (I (uClip 64 (verismo!snp.cpu.gdt.impl&%50.spec_base24_31.? self!))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorSpec. (verismo!snp.cpu.gdt.impl&%50.view.? self!)) TYPE%verismo!snp.cpu.gdt.DescriptorSpec.)) :pattern ((verismo!snp.cpu.gdt.impl&%50.view.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%37.axiom_new. (verismo!snp.cpu.gdt.Descriptor.) Bool)
(assert (forall ((val! verismo!snp.cpu.gdt.Descriptor.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%37.axiom_new. val!) (= (verismo!snp.cpu.gdt.impl&%37.new.? (I (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. (Poly%verismo!snp.cpu.gdt.Descriptor. val!))))) (verismo!snp.cpu.gdt.impl&%50.view.? (Poly%verismo!snp.cpu.gdt.Descriptor. val!)))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%37.axiom_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!snp.cpu.gdt.Descriptor.) (= (verismo!snp.cpu.gdt.impl&%37.new.? (I (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. val!)))) (verismo!snp.cpu.gdt.impl&%50.view.? val!))) :pattern ((verismo!snp.cpu.gdt.impl&%37.new.? (I (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. val!)))) (verismo!snp.cpu.gdt.impl&%50.view.? val!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (has_type (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.impl&%37.to_value.? self!)) TYPE%verismo!snp.cpu.gdt.Descriptor.)) :pattern ((verismo!snp.cpu.gdt.impl&%37.to_value.? self!)))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%37.axiom_into. (verismo!snp.cpu.gdt.DescriptorSpec.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.DescriptorSpec.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%37.axiom_into. self!) (= (verismo!snp.cpu.gdt.impl&%50.view.? (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.impl&%37.to_value.? (Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!)))) self!)) :pattern ((ens%verismo!snp.cpu.gdt.impl&%37.axiom_into. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.DescriptorSpec.) (= (verismo!snp.cpu.gdt.impl&%50.view.? (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.impl&%37.to_value.? self!))) (%Poly%verismo!snp.cpu.gdt.DescriptorSpec. self!))) :pattern ((verismo!snp.cpu.gdt.impl&%37.to_value.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.inv.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.inv.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 18446744073709551615)))) :pattern ((verismo!snp.cpu.gdt.impl&%50.inv.? self!))))))
(declare-fun ens%verismo!snp.cpu.gdt.impl&%50.axiom_inv. (verismo!snp.cpu.gdt.Descriptor.) Bool)
(assert (forall ((self! verismo!snp.cpu.gdt.Descriptor.)) (! (= (ens%verismo!snp.cpu.gdt.impl&%50.axiom_inv. self!) (and (verismo!snp.cpu.gdt.impl&%50.inv.? (Poly%verismo!snp.cpu.gdt.Descriptor. self!)) (let ((tmp%%$ (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. (Poly%verismo!snp.cpu.gdt.Descriptor. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 18446744073709551615))))) :pattern ((ens%verismo!snp.cpu.gdt.impl&%50.axiom_inv. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.gdt.Descriptor.) (and (verismo!snp.cpu.gdt.impl&%50.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 18446744073709551615))))) :pattern ((verismo!snp.cpu.gdt.impl&%50.inv.? self!) (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%53.spec_default.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%53.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ TYPE%verismo!snp.cpu.gdt.Gdtr.) (Poly%verismo!snp.cpu.gdt.Gdtr. (verismo!snp.cpu.gdt.Gdtr./Gdtr (%Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) $ TYPE%tuple%0. (I 0))))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) $ TYPE%tuple%0. (I 0))))))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%59.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%59.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self!) (B (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%2.axiom_spec_new. (Int Int Int Int Int Int Int) Bool)
(assert (forall ((snp! Int) (vtom! Int) (reflectvc! Int) (restrict_inj! Int) (alternate_inj! Int) (btb_isolation! Int) (secure_tsc! Int)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%2.axiom_spec_new. snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!) (and (= (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I snp!) (I vtom!) (I reflectvc!) (I restrict_inj!) (I alternate_inj!) (I btb_isolation!) (I secure_tsc!)))) snp!) (= (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I snp!) (I vtom!) (I reflectvc!) (I restrict_inj!) (I alternate_inj!) (I btb_isolation!) (I secure_tsc!)))) vtom!) (= (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I snp!) (I vtom!) (I reflectvc!) (I restrict_inj!) (I alternate_inj!) (I btb_isolation!) (I secure_tsc!)))) reflectvc!) (= (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I snp!) (I vtom!) (I reflectvc!) (I restrict_inj!) (I alternate_inj!) (I btb_isolation!) (I secure_tsc!)))) restrict_inj!) (= (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I snp!) (I vtom!) (I reflectvc!) (I restrict_inj!) (I alternate_inj!) (I btb_isolation!) (I secure_tsc!)))) alternate_inj!) (= (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I snp!) (I vtom!) (I reflectvc!) (I restrict_inj!) (I alternate_inj!) (I btb_isolation!) (I secure_tsc!)))) btb_isolation!) (= (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I snp!) (I vtom!) (I reflectvc!) (I restrict_inj!) (I alternate_inj!) (I btb_isolation!) (I secure_tsc!)))) secure_tsc!))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%2.axiom_spec_new. snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!)))))
(assert (forall ((snp! Poly) (vtom! Poly) (reflectvc! Poly) (restrict_inj! Poly) (alternate_inj! Poly) (btb_isolation! Poly) (secure_tsc! Poly)) (! (=> (and (has_type snp! (UINT 64)) (has_type vtom! (UINT 64)) (has_type reflectvc! (UINT 64)) (has_type restrict_inj! (UINT 64)) (has_type alternate_inj! (UINT 64)) (has_type btb_isolation! (UINT 64)) (has_type secure_tsc! (UINT 64))) (and (and (and (and (and (and (= (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!))) (%I snp!)) (= (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!))) (%I vtom!))) (= (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!))) (%I reflectvc!))) (= (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!))) (%I restrict_inj!))) (= (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!))) (%I alternate_inj!))) (= (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!))) (%I btb_isolation!))) (= (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!))) (%I secure_tsc!)))) :pattern ((verismo!snp.cpu.vmsa.impl&%2.spec_new.? snp! vtom! reflectvc! restrict_inj! alternate_inj! btb_isolation! secure_tsc!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc.? self! val!) (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!)) val!)) :pattern ((verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation.? self! val!) (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!)) val! (I (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!)))) :pattern ((verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj.? self! val!) (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!)) val! (I (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!)))) :pattern ((verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj.? self! val!) (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!)) val! (I (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!)))) :pattern ((verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc.? self! val!) (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!)) val! (I (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!)))) :pattern ((verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom.? self! val!) (verismo!snp.cpu.vmsa.impl&%2.spec_new.? (I (verismo!snp.cpu.vmsa.impl&%0.spec_snp.? self!)) val! (I (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!)))) :pattern ((verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_snp.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%1.spec_set_snp.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%1.spec_set_snp.? self! val!) (verismo!snp.cpu.vmsa.impl&%2.spec_new.? val! (I (verismo!snp.cpu.vmsa.impl&%0.spec_vtom.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_reflectvc.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_restrict_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_alternate_inj.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_btb_isolation.? self!)) (I (verismo!snp.cpu.vmsa.impl&%0.spec_secure_tsc.? self!)))) :pattern ((verismo!snp.cpu.vmsa.impl&%1.spec_set_snp.? self! val!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_snp.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_snp.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_snp.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_snp.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%16.spec_snp.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_snp.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_vtom.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_vtom.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_vtom.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (I (uClip 64 1))))) (I mask$))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_vtom.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%16.spec_vtom.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_vtom.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (I (uClip 64 2))))) (I mask$))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (I (uClip 64 3))))) (I mask$))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (I (uClip 64 4))))) (I mask$))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (I (uClip 64 7))))) (I mask$))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (I (uClip 64 9))))) (I mask$))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (uInv 64 (verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.? self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.view.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.view.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.view.? self!) (verismo!snp.cpu.vmsa.impl&%1.spec_set_secure_tsc.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%1.spec_set_btb_isolation.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%1.spec_set_alternate_inj.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%1.spec_set_restrict_inj.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%1.spec_set_reflectvc.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%1.spec_set_vtom.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. (verismo!snp.cpu.vmsa.impl&%1.spec_set_snp.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (I (uClip 64 (verismo!snp.cpu.vmsa.impl&%16.spec_snp.? self!))))) (I (uClip 64 (verismo!snp.cpu.vmsa.impl&%16.spec_vtom.? self!))))) (I (uClip 64 (verismo!snp.cpu.vmsa.impl&%16.spec_reflectvc.? self!))))) (I (uClip 64 (verismo!snp.cpu.vmsa.impl&%16.spec_restrict_inj.? self!))))) (I (uClip 64 (verismo!snp.cpu.vmsa.impl&%16.spec_alternate_inj.? self!))))) (I (uClip 64 (verismo!snp.cpu.vmsa.impl&%16.spec_btb_isolation.? self!))))) (I (uClip 64 (verismo!snp.cpu.vmsa.impl&%16.spec_secure_tsc.? self!))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.view.? self!))))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%3.axiom_new. (verismo!snp.cpu.vmsa.SevFeatures.) Bool)
(assert (forall ((val! verismo!snp.cpu.vmsa.SevFeatures.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%3.axiom_new. val!) (= (verismo!snp.cpu.vmsa.impl&%3.new.? (I (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. (Poly%verismo!snp.cpu.vmsa.SevFeatures. val!))))) (verismo!snp.cpu.vmsa.impl&%16.view.? (Poly%verismo!snp.cpu.vmsa.SevFeatures. val!)))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%3.axiom_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (= (verismo!snp.cpu.vmsa.impl&%3.new.? (I (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. val!)))) (verismo!snp.cpu.vmsa.impl&%16.view.? val!))) :pattern ((verismo!snp.cpu.vmsa.impl&%3.new.? (I (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. val!)))) (verismo!snp.cpu.vmsa.impl&%16.view.? val!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (has_type (Poly%verismo!snp.cpu.vmsa.SevFeatures. (verismo!snp.cpu.vmsa.impl&%3.to_value.? self!)) TYPE%verismo!snp.cpu.vmsa.SevFeatures.)) :pattern ((verismo!snp.cpu.vmsa.impl&%3.to_value.? self!)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%3.axiom_into. (verismo!snp.cpu.vmsa.SevFeaturesSpec.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.SevFeaturesSpec.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%3.axiom_into. self!) (= (verismo!snp.cpu.vmsa.impl&%16.view.? (Poly%verismo!snp.cpu.vmsa.SevFeatures. (verismo!snp.cpu.vmsa.impl&%3.to_value.? (Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. self!)))) self!)) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%3.axiom_into. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeaturesSpec.) (= (verismo!snp.cpu.vmsa.impl&%16.view.? (Poly%verismo!snp.cpu.vmsa.SevFeatures. (verismo!snp.cpu.vmsa.impl&%3.to_value.? self!))) (%Poly%verismo!snp.cpu.vmsa.SevFeaturesSpec. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%3.to_value.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.inv.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.inv.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 511)))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.inv.? self!))))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%16.axiom_inv. (verismo!snp.cpu.vmsa.SevFeatures.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.SevFeatures.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%16.axiom_inv. self!) (and (verismo!snp.cpu.vmsa.impl&%16.inv.? (Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)) (let ((tmp%%$ (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. (Poly%verismo!snp.cpu.vmsa.SevFeatures. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 511))))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%16.axiom_inv. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (and (verismo!snp.cpu.vmsa.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 511))))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.inv.? self!) (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!))))))
(assert (forall ((es! Poly) (cs! Poly) (ss! Poly) (ds! Poly) (fs! Poly) (gs! Poly) (gdtr! Poly) (reserved_ldtr_idtr_tr! Poly) (vmpl! Poly) (cpl! Poly) (reserved2! Poly) (efer! Poly) (reserved3! Poly) (cr4! Poly) (cr3! Poly) (cr0! Poly) (reserved_dr7_6! Poly) (rflags! Poly) (rip! Poly) (reserved4! Poly) (rsp! Poly) (reserved5! Poly) (rax! Poly) (reserved6! Poly) (gpat! Poly) (reserved7! Poly) (rcx! Poly) (rdx! Poly) (rbx! Poly) (reserved8! Poly) (rbp! Poly) (rsi! Poly) (rdi! Poly) (reserved_9_r9_15_exits_scratch! Poly) (sev_features! Poly) (vintr_ctrl! Poly) (guest_error_code! Poly) (virtual_tom! Poly) (reserved_12! Poly) (xcr0! Poly) (reserved13! Poly)) (! (=> (and (has_type es! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type cs! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type ss! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type ds! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type fs! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type gs! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type gdtr! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type reserved_ldtr_idtr_tr! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90))) (has_type vmpl! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type cpl! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type reserved2! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4))) (has_type efer! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved3! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type cr4! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type cr3! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type cr0! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved_dr7_6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16))) (has_type rflags! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rip! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved4! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88))) (has_type rsp! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved5! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24))) (has_type rax! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104))) (has_type gpat! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved7! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152))) (has_type rcx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rdx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rbx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved8! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8))) (has_type rbp! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rsi! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rdi! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved_9_r9_15_exits_scratch! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type sev_features! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type vintr_ctrl! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type guest_error_code! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type virtual_tom! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved_12! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24))) (has_type xcr0! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved13! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)))) (has_type (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!)) TYPE%verismo!snp.cpu.vmsa.Vmsa.)) :pattern ((verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_es.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_es.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_es.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/es (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_es.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cs.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cs.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_cs.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_cs.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ss.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ss.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_ss.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_ss.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ds.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_ds.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_ds.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_ds.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_fs.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_fs.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_fs.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_fs.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gs.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gs.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_gs.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_gs.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cpl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cpl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_efer.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_efer.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_efer.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_efer.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr4.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr4.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr3.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr3.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr0.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_cr0.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rflags.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rflags.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rip.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rip.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rip.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rip.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsp.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsp.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rax.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rax.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rax.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gpat.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_gpat.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rcx.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rcx.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdx.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdx.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbx.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbx.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbp.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rbp.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsi.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rsi.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdi.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_rdi.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.) (forall ((self! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? self!) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (has_type (verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? self!) (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? self!)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%27.axiom_spec_new. (verismo!snp.cpu.vmsa.VmsaSegmentRegister. verismo!snp.cpu.vmsa.VmsaSegmentRegister. verismo!snp.cpu.vmsa.VmsaSegmentRegister. verismo!snp.cpu.vmsa.VmsaSegmentRegister. verismo!snp.cpu.vmsa.VmsaSegmentRegister. verismo!snp.cpu.vmsa.VmsaSegmentRegister. verismo!snp.cpu.vmsa.VmsaSegmentRegister. Poly verismo!tspec.security.sectype.SecType<u8./tuple%0.>. verismo!tspec.security.sectype.SecType<u8./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly verismo!tspec.security.sectype.SecType<u64./tuple%0.>. Poly) Bool)
(assert (forall ((es! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (cs! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (ss! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (ds! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (fs! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (gs! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (gdtr! verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (reserved_ldtr_idtr_tr! Poly) (vmpl! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (cpl! verismo!tspec.security.sectype.SecType<u8./tuple%0.>.) (reserved2! Poly) (efer! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved3! Poly) (cr4! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (cr3! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (cr0! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved_dr7_6! Poly) (rflags! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (rip! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved4! Poly) (rsp! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved5! Poly) (rax! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved6! Poly) (gpat! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved7! Poly) (rcx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (rdx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (rbx! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved8! Poly) (rbp! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (rsi! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (rdi! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved_9_r9_15_exits_scratch! Poly) (sev_features! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (vintr_ctrl! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (guest_error_code! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (virtual_tom! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved_12! Poly) (xcr0! verismo!tspec.security.sectype.SecType<u64./tuple%0.>.) (reserved13! Poly)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%27.axiom_spec_new. es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!) (and (= (verismo!snp.cpu.vmsa.impl&%25.spec_es.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) es!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cs.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) cs!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_ss.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) ss!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_ds.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) ds!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_fs.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) fs!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_gs.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) gs!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) gdtr!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved_ldtr_idtr_tr!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) vmpl!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) cpl!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved2!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_efer.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) efer!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved3!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) cr4!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) cr3!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) cr0!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved_dr7_6!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rflags!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rip.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rip!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved4!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rsp!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved5!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rax!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved6!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) gpat!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved7!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rcx!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rdx!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rbx!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved8!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rbp!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rsi!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) rdi!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved_9_r9_15_exits_scratch!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) sev_features!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) vintr_ctrl!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) guest_error_code!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) virtual_tom!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved_12!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) xcr0!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!) (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!) reserved_ldtr_idtr_tr! (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!) reserved2! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!) reserved3! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!) reserved_dr7_6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!) reserved4! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!) reserved5! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!) reserved6! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!) reserved7! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!) reserved8! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!) reserved_9_r9_15_exits_scratch! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!) reserved_12! (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!) reserved13!))) reserved13!))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%27.axiom_spec_new. es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!)))))
(assert (forall ((es! Poly) (cs! Poly) (ss! Poly) (ds! Poly) (fs! Poly) (gs! Poly) (gdtr! Poly) (reserved_ldtr_idtr_tr! Poly) (vmpl! Poly) (cpl! Poly) (reserved2! Poly) (efer! Poly) (reserved3! Poly) (cr4! Poly) (cr3! Poly) (cr0! Poly) (reserved_dr7_6! Poly) (rflags! Poly) (rip! Poly) (reserved4! Poly) (rsp! Poly) (reserved5! Poly) (rax! Poly) (reserved6! Poly) (gpat! Poly) (reserved7! Poly) (rcx! Poly) (rdx! Poly) (rbx! Poly) (reserved8! Poly) (rbp! Poly) (rsi! Poly) (rdi! Poly) (reserved_9_r9_15_exits_scratch! Poly) (sev_features! Poly) (vintr_ctrl! Poly) (guest_error_code! Poly) (virtual_tom! Poly) (reserved_12! Poly) (xcr0! Poly) (reserved13! Poly)) (! (=> (and (has_type es! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type cs! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type ss! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type ds! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type fs! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type gs! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type gdtr! TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (has_type reserved_ldtr_idtr_tr! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90))) (has_type vmpl! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type cpl! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)) (has_type reserved2! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4))) (has_type efer! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved3! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type cr4! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type cr3! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type cr0! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved_dr7_6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16))) (has_type rflags! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rip! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved4! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88))) (has_type rsp! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved5! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24))) (has_type rax! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved6! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104))) (has_type gpat! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved7! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152))) (has_type rcx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rdx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rbx! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved8! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8))) (has_type rbp! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rsi! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type rdi! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved_9_r9_15_exits_scratch! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112))) (has_type sev_features! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type vintr_ctrl! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type guest_error_code! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type virtual_tom! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved_12! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24))) (has_type xcr0! (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)) (has_type reserved13! (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (verismo!snp.cpu.vmsa.impl&%25.spec_es.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. es!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cs.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. cs!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_ss.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ss!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_ds.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. ds!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_fs.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. fs!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_gs.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gs!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_gdtr.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. gdtr!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_ldtr_idtr_tr.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved_ldtr_idtr_tr!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. vmpl!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cpl.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. cpl!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved2.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved2!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_efer.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. efer!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved3.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved3!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr4.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr4!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr3.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr3!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_cr0.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. cr0!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_dr7_6.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved_dr7_6!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rflags.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rflags!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rip.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rip!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved4.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved4!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rsp.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsp!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved5.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved5!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rax!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved6.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved6!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_gpat.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. gpat!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved7.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved7!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rcx!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdx!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbx!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved8.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved8!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbp.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rbp!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rsi.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rsi!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdi.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. rdi!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_9_r9_15_exits_scratch.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved_9_r9_15_exits_scratch!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_sev_features.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. sev_features!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_vintr_ctrl.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. vintr_ctrl!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. guest_error_code!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_virtual_tom.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. virtual_tom!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved_12.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved_12!)) (= (verismo!snp.cpu.vmsa.impl&%25.spec_xcr0.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. xcr0!))) (= (verismo!snp.cpu.vmsa.impl&%25.spec_reserved13.? (Poly%verismo!snp.cpu.vmsa.Vmsa. (verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!))) reserved13!))) :pattern ((verismo!snp.cpu.vmsa.impl&%27.spec_new.? es! cs! ss! ds! fs! gs! gdtr! reserved_ldtr_idtr_tr! vmpl! cpl! reserved2! efer! reserved3! cr4! cr3! cr0! reserved_dr7_6! rflags! rip! reserved4! rsp! reserved5! rax! reserved6! gpat! reserved7! rcx! rdx! rbx! reserved8! rbp! rsi! rdi! reserved_9_r9_15_exits_scratch! sev_features! vintr_ctrl! guest_error_code! virtual_tom! reserved_12! xcr0! reserved13!)))))
(assert (forall ((T&. Dcr) (T& Type) (F&. Dcr) (F& Type) (val! Poly) (offset! Poly)) (! (=> (and (has_type val! T&) (has_type offset! NAT)) (has_type (verismo!tspec.cast.field_at.? T&. T& F&. F& val! offset!) F&)) :pattern ((verismo!tspec.cast.field_at.? T&. T& F&. F& val! offset!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type)) (! (has_type (verismo!tspec.size_s.SpecSize.spec_size_def.? Self%&. Self%&) NAT) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? Self%&. Self%&)))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%12.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%12.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16)) (I 2))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 16)))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%19.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%19.spec_size_def.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32)) (I 4))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 32)))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%10.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%10.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)) (I 8))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%21.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%21.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.) (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%13.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%13.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8)) (I 1))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 8)))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%4.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%4.spec_size_def.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int N&) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))))) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&)))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 90)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.? no%param))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.? no%param)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_vmpl. (verismo!snp.cpu.vmsa.Vmsa.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.Vmsa.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_vmpl. self!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? (Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (I (verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.? (I 0))))))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_vmpl. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (= (verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) self! (I (verismo!snp.cpu.vmsa.impl&%33.spec_vmpl_offset.? (I 0))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_vmpl.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 90)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 4)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 88)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 24)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.? no%param))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.? no%param)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rax. (verismo!snp.cpu.vmsa.Vmsa.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.Vmsa.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rax. self!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? (Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (I (verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.? (I 0))))))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rax. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rax.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.cpu.vmsa.impl&%33.spec_rax_offset.? (I 0))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rax.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 90)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 4)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 88)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 24)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 104)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 152)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.? no%param))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.? no%param)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rcx. (verismo!snp.cpu.vmsa.Vmsa.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.Vmsa.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rcx. self!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (I (verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.? (I 0))))))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rcx. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.cpu.vmsa.impl&%33.spec_rcx_offset.? (I 0))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rcx.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 90)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 4)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 88)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 24)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 104)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 152)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.? no%param))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.? no%param)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rdx. (verismo!snp.cpu.vmsa.Vmsa.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.Vmsa.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rdx. self!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (I (verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.? (I 0))))))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rdx. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.cpu.vmsa.impl&%33.spec_rdx_offset.? (I 0))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rdx.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 90)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 4)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 88)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 24)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 104)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 152)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.? no%param))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.? no%param)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rbx. (verismo!snp.cpu.vmsa.Vmsa.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.Vmsa.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rbx. self!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? (Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (I (verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.? (I 0))))))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_rbx. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (= (verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.cpu.vmsa.impl&%33.spec_rbx_offset.? (I 0))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_rbx.? self!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.) (forall ((no%param Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.? no%param) (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 90)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 4)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 88)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 24)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 104)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 152)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 8)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (<= 0 (verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.? no%param))) :pattern ((verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.? no%param)))))
(declare-fun ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_guest_error_code. (verismo!snp.cpu.vmsa.Vmsa.) Bool)
(assert (forall ((self! verismo!snp.cpu.vmsa.Vmsa.)) (! (= (ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_guest_error_code. self!) (= (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? (Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!snp.cpu.vmsa.Vmsa. self!) (I (verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.? (I 0))))))) :pattern ((ens%verismo!snp.cpu.vmsa.impl&%33.axiom_field_guest_error_code. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!snp.cpu.vmsa.Vmsa.) (= (verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? self!) (%Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!tspec.cast.field_at.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! (I (verismo!snp.cpu.vmsa.impl&%33.spec_guest_error_code_offset.? (I 0))))))) :pattern ((verismo!snp.cpu.vmsa.impl&%25.spec_guest_error_code.? self!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? Self%&. Self%& self!) INT)) :pattern ((verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? Self%&. Self%& self!)))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%1.to_page.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%1.to_page.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT self!) (I (EucDiv (%I self!) 4096))) :pattern ((verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%69.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%69.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ NAT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%29.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%29.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ NAT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%28.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%28.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ INT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ INT self! rhs!))))))
(declare-fun ens%verismo!tspec.cast.axiom_cast_to_seq_unique. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!tspec.cast.axiom_cast_to_seq_unique. T&. T& val!) (= val! (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))) :pattern ((ens%verismo!tspec.cast.axiom_cast_to_seq_unique. T&. T& val!)))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (= val! (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))))
(declare-fun ens%verismo!tspec.fmap.impl&%2.axiom_spec_new. (Dcr Type Dcr Type Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (map! Poly)) (! (= (ens%verismo!tspec.fmap.impl&%2.axiom_spec_new. K&. K& V&. V& map!) (= (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& (verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!)) map!)) :pattern ((ens%verismo!tspec.fmap.impl&%2.axiom_spec_new. K&. K& V&. V& map!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (map! Poly)) (! (=> (has_type map! (TYPE%vstd!map.Map. K&. K& V&. V&)) (= (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& (verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!)) map!)) :pattern ((verismo!tspec.fmap.impl&%2.spec_new.? K&. K& V&. V& map!)))))
(declare-fun ens%verismo!tspec.fmap.impl&%3.axiom_inv. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (id! Poly)) (! (= (ens%verismo!tspec.fmap.impl&%3.axiom_inv. K&. K& V&. V& self! id!) (and (= (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!) (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)) id!))) :pattern ((ens%verismo!tspec.fmap.impl&%3.axiom_inv. K&. K& V&. V& self! id!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (id! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type id! K&)) (and (= (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!) (vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!)) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)) id!))) :pattern ((vstd!map.impl&%0.index.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) id!) (vstd!set.impl&%0.contains.? K&. K& (vstd!map.impl&%0.dom.? K&. K& V&. V& (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)) id!)))))
(declare-fun ens%verismo!tspec.fmap.impl&%3.axiom_equal. (Dcr Type Dcr Type Poly Poly) Bool)
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (other! Poly)) (! (= (ens%verismo!tspec.fmap.impl&%3.axiom_equal. K&. K& V&. V& self! other!) (and (= (ext_eq true (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&) self! other!) (= self! other!)) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& other!)) (= self! other!)))) :pattern ((ens%verismo!tspec.fmap.impl&%3.axiom_equal. K&. K& V&. V& self! other!)))))
(assert (forall ((K&. Dcr) (K& Type) (V&. Dcr) (V& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&)) (has_type other! (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&))) (and (= (ext_eq true (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&) self! other!) (= self! other!)) (= (ext_eq true (TYPE%vstd!map.Map. K&. K& V&. V&) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& other!)) (= self! other!)))) :pattern ((ext_eq true (TYPE%verismo!tspec.fmap.FMap. K&. K& V&. V&) self! other!) (verismo!tspec.fmap.impl&%0.spec_map.? K&. K& V&. V& self!)))))
(declare-fun ens%verismo!tspec.isconst.axiom_const_forall. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (= (ens%verismo!tspec.isconst.axiom_const_forall. T&. T& v!) (and (and (and (= (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!) (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 4))))) :pattern ((ens%verismo!tspec.isconst.axiom_const_forall. T&. T& v!)))))
(assert (forall ((T&. Dcr) (T& Type) (v! Poly)) (! (=> (has_type v! T&) (=> (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (and (and (and (= (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!) (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& v! (I 4)))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? T&. T& v!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (Rhs&. Dcr) (Rhs& Type) (Output&. Dcr) (Output& Type) (self! Poly) (rhs! Poly)) (! (=> (and (has_type self! Self%&) (has_type rhs! Rhs&)) (has_type (verismo!tspec.ops.VSpecMul.spec_mul.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!) Output&)) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? Self%&. Self%& Rhs&. Rhs& Output&. Output& self! rhs!)))))
(assert (forall ((Self%&. Dcr) (Self%& Type) (self! Poly)) (! (=> (has_type self! Self%&) (has_type (verismo!tspec.range_set.VRange.end.? Self%&. Self%& self!) INT)) :pattern ((verismo!tspec.range_set.VRange.end.? Self%&. Self%& self!)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (<= 0 (verismo!tspec.size_s.spec_max_count.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(declare-fun ens%verismo!tspec.size_s.axiom_max_count_size_rel. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_max_count_size_rel. T&. T&) (let ((tmp%%$ (verismo!tspec.size_s.spec_max_count.? T&. T&))) (and (< (EucDiv (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (verismo!tspec.size_s.spec_size.? T&. T&))) 2) tmp%%$) (<= tmp%%$ (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (nClip (Mul (verismo!tspec.size_s.spec_size.? T&. T&) 8)))))))) :pattern ((ens%verismo!tspec.size_s.axiom_max_count_size_rel. T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (let ((tmp%%$ (verismo!tspec.size_s.spec_max_count.? T&. T&))) (and (< (EucDiv (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (verismo!tspec.size_s.spec_size.? T&. T&))) 2) tmp%%$) (<= tmp%%$ (verismo!tspec.math.pow_s.spec_nat_pow2.? (I (nClip (Mul (verismo!tspec.size_s.spec_size.? T&. T&) 8))))))) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(declare-fun ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. T&. T&) (= (vstd!set.impl&%0.len.? T&. T& (vstd!set.impl&%0.full.? T&. T&)) (verismo!tspec.size_s.spec_max_count.? T&. T&))) :pattern ((ens%verismo!tspec.size_s.axiom_set_full_max_count_rel. T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (= (vstd!set.impl&%0.len.? T&. T& (vstd!set.impl&%0.full.? T&. T&)) (verismo!tspec.size_s.spec_max_count.? T&. T&)) :pattern ((verismo!tspec.size_s.spec_max_count.? T&. T&)))))
(declare-fun ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. (Dcr Type) Bool)
(assert (forall ((T&. Dcr) (T& Type)) (! (= (ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. T&. T&) (= (verismo!tspec.size_s.spec_size.? T&. T&) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))) :pattern ((ens%verismo!tspec.size_s.axiom_size_from_cast_bytes. T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (= (verismo!tspec.size_s.spec_size.? T&. T&) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)))) :pattern ((verismo!tspec.size_s.spec_size.? T&. T&)))))
(declare-fun ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. T&. T& val!) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (UINT 8) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!)))) :pattern ((ens%verismo!tspec.size_s.axiom_size_from_cast_bytes_def. T&. T& val!)))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (and (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (UINT 8) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) val!)))))
(declare-fun ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. (Dcr Type Poly) Bool)
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. T&. T& val!) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))) :pattern ((ens%verismo!primitives_e.sectype.axiom_size_from_cast_secbytes_def. T&. T& val!)))))
(assert (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (=> (has_type val! T&) (=> (and (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (= (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? T&. T&)) (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) val!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%15.is_constant_to.) (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self! vmpl!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T&. T& M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M& self!) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& M&. M& self!)))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) self! vmpl!))))))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&)) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%2.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%2.is_constant.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? T1&. T1& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T2&. T2& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%696.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%696.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%697.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%697.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%70.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%70.spec_eq.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT SZ) self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%22.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%22.spec_eq.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ INT self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.range_set.impl&%0.end.))
(assert (=> (fuel_bool fuel%verismo!tspec.range_set.impl&%0.end.) (forall ((self! Poly)) (! (= (verismo!tspec.range_set.VRange.end.? $ (TYPE%tuple%2. $ INT $ NAT) self!) (I (Add (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. self!))) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)))))) :pattern ((verismo!tspec.range_set.VRange.end.? $ (TYPE%tuple%2. $ INT $ NAT) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%21.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%21.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ NAT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%699.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%698.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%1.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%1.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%tuple%0. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%tuple%0. self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%1.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%1.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%tuple%0. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%tuple%0. self! vmpl!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%tuple%0.))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%0.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%tuple%0. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%tuple%0. self!))))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%tuple%0.))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%16.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%16.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%tuple%0.) (I 0))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%tuple%0.))
(assert (fuel_bool_default fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.seq.impl&%1.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) self!))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%8.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%8.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT SZ) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT SZ) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%8.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%8.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT SZ)) (I 8))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_s.impl&%1.snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_s.impl&%1.snp.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))))))) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_s.impl&%1.hw_snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_s.impl&%1.hw_snp.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))))))) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!))))))
(declare-fun req%verismo!ptr.ptr_u.impl&%2.value. (Dcr Type Poly) Bool)
(declare-const %%global_location_label%%63 Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (req%verismo!ptr.ptr_u.impl&%2.value. V&. V& self!) (=> %%global_location_label%%63 (verismo!ptr.snp.snp_u.impl&%27.is_vmpl0_private.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!)))) :pattern ((req%verismo!ptr.ptr_u.impl&%2.value. V&. V& self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_u.impl&%2.value.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_u.impl&%2.value.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))) :pattern ((verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!))))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&)) (has_type (Poly%core!option.Option. (verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!)) (TYPE%core!option.Option. V&. V&))) :pattern ((verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_u.impl&%2.wf_value.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_u.impl&%2.wf_value.) (forall ((V&. Dcr) (V& Type) (self! Poly) (val! Poly)) (! (= (verismo!ptr.ptr_u.impl&%2.wf_value.? V&. V& self! val!) (and (=> (not (verismo!ptr.snp.snp_u.impl&%27.is_vm_confidential.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? V&. V& val!))) (%B (verismo!tspec.wellformed.WellFormed.wf.? V&. V& val!)))) :pattern ((verismo!ptr.ptr_u.impl&%2.wf_value.? V&. V& self! val!))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_u.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_u.impl&%0.wf.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!) (B (and (and (verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (%Poly%verismo!ptr.def_s.SnpPointsToData. self!)))) (not (verismo!ptr.snp.snp_u.SwSnpMemAttr./SwSnpMemAttr/is_pte (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!))))) (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!)))))) (verismo!ptr.ptr_u.impl&%2.wf_value.? V&. V& self! (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!))))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%19.id.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%19.id.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.def_s.impl&%19.id.? V&. V& self!) (verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr (%Poly%verismo!ptr.def_s.SnpPPtr. self!))) :pattern ((verismo!ptr.def_s.impl&%19.id.? V&. V& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self!) (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%vstd!seq.Seq. T&. T&) (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT SZ)))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.usize_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.usize_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.usize_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))) 256))))))))))))))) :pattern ((verismo!tspec.stream.basic.usize_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%11.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%11.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))) 256)))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to.))
(declare-fun %%lambda%%25 (Dcr Type Poly Dcr Type Dcr Type) %%Function%%)
(assert (forall ((%%hole%%0 Dcr) (%%hole%%1 Type) (%%hole%%2 Poly) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Dcr) (%%hole%%6 Type) (i$ Poly)) (! (= (%%apply%%0 (%%lambda%%25 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) i$) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 (vstd!seq.Seq.index.? %%hole%%0 %%hole%%1 %%hole%%2 i$)))) :pattern ((%%apply%%0 (%%lambda%%25 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6) i$)))))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%4.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%25 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%7.wf.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%7.wf.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) self!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_psize.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_psize.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_psize.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 7))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_psize.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_psize.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_psize.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_present.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_present.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_present.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 0))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_present.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_present.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_present.? self!)))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%2.is_constant_to.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self! vmpl!) (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. T&. T&) (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!) vmpl!)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self! vmpl!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))))))
(assert (fuel_bool_default fuel%verismo!tspec_e.array.array_s.impl&%0.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec_e.array.array_s.impl&%0.wf.) (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self!) (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. T&. T&) (verismo!tspec_e.array.array_t.impl&%2.view.? T&. T& N&. N& self!))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&) self!))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))))))
(assert (forall ((T&. Dcr) (T& Type) (N&. Dcr) (N& Type)) (! (=> (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!tspec_e.array.Array. T&. T& N&. N&))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%1.wf.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%1.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.) self!) (B (verismo!tspec.security.sectype.impl&%9.wf_value.? T&. T& $ TYPE%tuple%0. self!))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.) self!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.)) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& $ TYPE%tuple%0.))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_page.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_page.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_page.? self!) (let ((mask$ (uClip 64 549755813887))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 12))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_page.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_page.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_page.? self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%8.is_constant.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%8.is_constant.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) self!))))))
(assert (forall ((present! Poly) (write! Poly) (supervisor! Poly) (pwt! Poly) (pcd! Poly) (accessed! Poly) (dirty! Poly) (psize! Poly) (global! Poly) (bit12! Poly) (encrypted! Poly) (page! Poly) (nx! Poly)) (! (=> (and (has_type present! (UINT 64)) (has_type write! (UINT 64)) (has_type supervisor! (UINT 64)) (has_type pwt! (UINT 64)) (has_type pcd! (UINT 64)) (has_type accessed! (UINT 64)) (has_type dirty! (UINT 64)) (has_type psize! (UINT 64)) (has_type global! (UINT 64)) (has_type bit12! (UINT 64)) (has_type encrypted! (UINT 64)) (has_type page! (UINT 64)) (has_type nx! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_present.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_present.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_present.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/present (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_present.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_present.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_present.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_write.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_write.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_write.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/write (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_write.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_write.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_write.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_supervisor.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_supervisor.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/supervisor (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_pwt.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_pwt.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/pwt (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_pwt.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_pcd.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_pcd.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/pcd (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_pcd.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_accessed.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_accessed.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/accessed (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_accessed.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_dirty.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_dirty.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/dirty (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_dirty.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_psize.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_psize.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_psize.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/psize (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_psize.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_psize.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_psize.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_global.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_global.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_global.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/global (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_global.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_global.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_global.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_bit12.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_bit12.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/bit12 (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_bit12.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_encrypted.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_encrypted.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/encrypted (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_page.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_page.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_page.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/page (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_page.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_page.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_page.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%0.spec_nx.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%0.spec_nx.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%0.spec_nx.? self!) (verismo!pgtable_e.def.SpecPTE./SpecPTE/nx (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_nx.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (uInv 64 (verismo!pgtable_e.def.impl&%0.spec_nx.? self!))) :pattern ((verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))))
(declare-fun ens%verismo!pgtable_e.def.impl&%2.axiom_spec_new. (Int Int Int Int Int Int Int Int Int Int Int Int Int) Bool)
(assert (forall ((present! Int) (write! Int) (supervisor! Int) (pwt! Int) (pcd! Int) (accessed! Int) (dirty! Int) (psize! Int) (global! Int) (bit12! Int) (encrypted! Int) (page! Int) (nx! Int)) (! (= (ens%verismo!pgtable_e.def.impl&%2.axiom_spec_new. present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!) (and (= (verismo!pgtable_e.def.impl&%0.spec_present.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) present!) (= (verismo!pgtable_e.def.impl&%0.spec_write.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) write!) (= (verismo!pgtable_e.def.impl&%0.spec_supervisor.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) supervisor!) (= (verismo!pgtable_e.def.impl&%0.spec_pwt.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) pwt!) (= (verismo!pgtable_e.def.impl&%0.spec_pcd.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) pcd!) (= (verismo!pgtable_e.def.impl&%0.spec_accessed.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) accessed!) (= (verismo!pgtable_e.def.impl&%0.spec_dirty.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) dirty!) (= (verismo!pgtable_e.def.impl&%0.spec_psize.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) psize!) (= (verismo!pgtable_e.def.impl&%0.spec_global.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) global!) (= (verismo!pgtable_e.def.impl&%0.spec_bit12.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) bit12!) (= (verismo!pgtable_e.def.impl&%0.spec_encrypted.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) encrypted!) (= (verismo!pgtable_e.def.impl&%0.spec_page.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) page!) (= (verismo!pgtable_e.def.impl&%0.spec_nx.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? (I present!) (I write!) (I supervisor!) (I pwt!) (I pcd!) (I accessed!) (I dirty!) (I psize!) (I global!) (I bit12!) (I encrypted!) (I page!) (I nx!)))) nx!))) :pattern ((ens%verismo!pgtable_e.def.impl&%2.axiom_spec_new. present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!)))))
(assert (forall ((present! Poly) (write! Poly) (supervisor! Poly) (pwt! Poly) (pcd! Poly) (accessed! Poly) (dirty! Poly) (psize! Poly) (global! Poly) (bit12! Poly) (encrypted! Poly) (page! Poly) (nx! Poly)) (! (=> (and (has_type present! (UINT 64)) (has_type write! (UINT 64)) (has_type supervisor! (UINT 64)) (has_type pwt! (UINT 64)) (has_type pcd! (UINT 64)) (has_type accessed! (UINT 64)) (has_type dirty! (UINT 64)) (has_type psize! (UINT 64)) (has_type global! (UINT 64)) (has_type bit12! (UINT 64)) (has_type encrypted! (UINT 64)) (has_type page! (UINT 64)) (has_type nx! (UINT 64))) (and (and (and (and (and (and (and (and (and (and (and (and (= (verismo!pgtable_e.def.impl&%0.spec_present.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I present!)) (= (verismo!pgtable_e.def.impl&%0.spec_write.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I write!))) (= (verismo!pgtable_e.def.impl&%0.spec_supervisor.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I supervisor!))) (= (verismo!pgtable_e.def.impl&%0.spec_pwt.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I pwt!))) (= (verismo!pgtable_e.def.impl&%0.spec_pcd.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I pcd!))) (= (verismo!pgtable_e.def.impl&%0.spec_accessed.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I accessed!))) (= (verismo!pgtable_e.def.impl&%0.spec_dirty.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I dirty!))) (= (verismo!pgtable_e.def.impl&%0.spec_psize.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I psize!))) (= (verismo!pgtable_e.def.impl&%0.spec_global.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I global!))) (= (verismo!pgtable_e.def.impl&%0.spec_bit12.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I bit12!))) (= (verismo!pgtable_e.def.impl&%0.spec_encrypted.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I encrypted!))) (= (verismo!pgtable_e.def.impl&%0.spec_page.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I page!))) (= (verismo!pgtable_e.def.impl&%0.spec_nx.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!))) (%I nx!)))) :pattern ((verismo!pgtable_e.def.impl&%2.spec_new.? present! write! supervisor! pwt! pcd! accessed! dirty! psize! global! bit12! encrypted! page! nx!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%3.new.? val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%3.new.? val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_nx.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_nx.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_nx.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) val!)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_nx.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_nx.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_nx.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_page.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_page.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_page.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_page.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_page.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_page.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_encrypted.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_encrypted.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_bit12.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_bit12.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_bit12.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_bit12.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_bit12.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_bit12.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_global.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_global.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_global.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_global.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_global.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_global.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_psize.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_psize.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_psize.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_psize.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_psize.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_psize.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_dirty.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_dirty.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_dirty.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_dirty.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_dirty.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_dirty.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_accessed.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_accessed.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_accessed.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_accessed.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_accessed.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_accessed.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_pcd.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_pcd.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_pcd.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_pcd.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_pcd.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_pcd.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_pwt.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_pwt.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_pwt.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_pwt.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_pwt.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_pwt.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_supervisor.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_supervisor.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_write.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_write.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_write.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? (I (verismo!pgtable_e.def.impl&%0.spec_present.? self!)) val! (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_write.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_write.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_write.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%1.spec_set_present.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%1.spec_set_present.) (forall ((self! Poly) (val! Poly)) (! (= (verismo!pgtable_e.def.impl&%1.spec_set_present.? self! val!) (verismo!pgtable_e.def.impl&%2.spec_new.? val! (I (verismo!pgtable_e.def.impl&%0.spec_write.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_supervisor.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pwt.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_pcd.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_accessed.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_dirty.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_psize.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_global.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_bit12.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_encrypted.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_page.? self!)) (I (verismo!pgtable_e.def.impl&%0.spec_nx.? self!)))) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_present.? self! val!))))))
(assert (forall ((self! Poly) (val! Poly)) (! (=> (and (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type val! (UINT 64))) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_present.? self! val!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%1.spec_set_present.? self! val!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_write.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_write.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_write.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 1))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_write.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_write.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_write.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_supervisor.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_supervisor.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 2))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_pwt.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_pwt.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_pwt.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 3))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_pwt.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_pwt.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_pwt.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_pcd.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_pcd.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_pcd.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 4))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_pcd.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_pcd.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_pcd.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_accessed.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_accessed.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_accessed.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 5))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_accessed.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_accessed.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_accessed.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_dirty.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_dirty.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_dirty.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 6))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_dirty.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_dirty.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_dirty.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_global.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_global.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_global.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 8))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_global.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_global.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_global.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_bit12.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_bit12.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_bit12.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 12))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_bit12.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_bit12.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_bit12.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_encrypted.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_encrypted.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 51))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_nx.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_nx.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_nx.? self!) (let ((mask$ (uClip 64 1))) (uClip 64 (uintand 64 (I (uClip 64 (uintshr 64 (I (uClip 64 (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (I (uClip 64 63))))) (I mask$))))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_nx.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (uInv 64 (verismo!pgtable_e.def.impl&%16.spec_nx.? self!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_nx.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.view.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.view.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.view.? self!) (verismo!pgtable_e.def.impl&%1.spec_set_nx.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_page.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_encrypted.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_bit12.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_global.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_psize.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_dirty.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_accessed.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_pcd.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_pwt.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_supervisor.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_write.? (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%1.spec_set_present.? (vstd!pervasive.arbitrary.? $ TYPE%verismo!pgtable_e.def.SpecPTE.) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_present.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_write.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_supervisor.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_pwt.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_pcd.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_accessed.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_dirty.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_psize.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_global.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_bit12.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_encrypted.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_page.? self!))))) (I (uClip 64 (verismo!pgtable_e.def.impl&%16.spec_nx.? self!))))) :pattern ((verismo!pgtable_e.def.impl&%16.view.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (has_type (Poly%verismo!pgtable_e.def.SpecPTE. (verismo!pgtable_e.def.impl&%16.view.? self!)) TYPE%verismo!pgtable_e.def.SpecPTE.)) :pattern ((verismo!pgtable_e.def.impl&%16.view.? self!)))))
(declare-fun ens%verismo!pgtable_e.def.impl&%3.axiom_new. (verismo!pgtable_e.def.PTE.) Bool)
(assert (forall ((val! verismo!pgtable_e.def.PTE.)) (! (= (ens%verismo!pgtable_e.def.impl&%3.axiom_new. val!) (= (verismo!pgtable_e.def.impl&%3.new.? (I (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. (Poly%verismo!pgtable_e.def.PTE. val!))))) (verismo!pgtable_e.def.impl&%16.view.? (Poly%verismo!pgtable_e.def.PTE. val!)))) :pattern ((ens%verismo!pgtable_e.def.impl&%3.axiom_new. val!)))))
(assert (forall ((val! Poly)) (! (=> (has_type val! TYPE%verismo!pgtable_e.def.PTE.) (= (verismo!pgtable_e.def.impl&%3.new.? (I (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. val!)))) (verismo!pgtable_e.def.impl&%16.view.? val!))) :pattern ((verismo!pgtable_e.def.impl&%3.new.? (I (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. val!)))) (verismo!pgtable_e.def.impl&%16.view.? val!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (has_type (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.impl&%3.to_value.? self!)) TYPE%verismo!pgtable_e.def.PTE.)) :pattern ((verismo!pgtable_e.def.impl&%3.to_value.? self!)))))
(declare-fun ens%verismo!pgtable_e.def.impl&%3.axiom_into. (verismo!pgtable_e.def.SpecPTE.) Bool)
(assert (forall ((self! verismo!pgtable_e.def.SpecPTE.)) (! (= (ens%verismo!pgtable_e.def.impl&%3.axiom_into. self!) (= (verismo!pgtable_e.def.impl&%16.view.? (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.impl&%3.to_value.? (Poly%verismo!pgtable_e.def.SpecPTE. self!)))) self!)) :pattern ((ens%verismo!pgtable_e.def.impl&%3.axiom_into. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.SpecPTE.) (= (verismo!pgtable_e.def.impl&%16.view.? (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.impl&%3.to_value.? self!))) (%Poly%verismo!pgtable_e.def.SpecPTE. self!))) :pattern ((verismo!pgtable_e.def.impl&%3.to_value.? self!)))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.inv.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.inv.) (forall ((self! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 9223372036854775807)))) :pattern ((verismo!pgtable_e.def.impl&%16.inv.? self!))))))
(declare-fun ens%verismo!pgtable_e.def.impl&%16.axiom_inv. (verismo!pgtable_e.def.PTE.) Bool)
(assert (forall ((self! verismo!pgtable_e.def.PTE.)) (! (= (ens%verismo!pgtable_e.def.impl&%16.axiom_inv. self!) (and (verismo!pgtable_e.def.impl&%16.inv.? (Poly%verismo!pgtable_e.def.PTE. self!)) (let ((tmp%%$ (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. (Poly%verismo!pgtable_e.def.PTE. self!))))) (and (<= 0 tmp%%$) (<= tmp%%$ 9223372036854775807))))) :pattern ((ens%verismo!pgtable_e.def.impl&%16.axiom_inv. self!)))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!pgtable_e.def.PTE.) (and (verismo!pgtable_e.def.impl&%16.inv.? self!) (let ((tmp%%$ (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!)))) (and (<= 0 tmp%%$) (<= tmp%%$ 9223372036854775807))))) :pattern ((verismo!pgtable_e.def.impl&%16.inv.? self!) (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!))))))
(assert (forall ((V&. Dcr) (V& Type) (ptr! Poly) (value! Poly) (snp! Poly)) (! (=> (and (has_type ptr! INT) (has_type value! (TYPE%core!option.Option. V&. V&)) (has_type snp! TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) (has_type (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%22.spec_new.? V&. V& ptr! value! snp!)) (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))) :pattern ((verismo!ptr.def_s.impl&%22.spec_new.? V&. V& ptr! value! snp!)))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%20.spec_ptr.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%20.spec_ptr.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.def_s.impl&%20.spec_ptr.? V&. V& self!) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/ptr (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))) :pattern ((verismo!ptr.def_s.impl&%20.spec_ptr.? V&. V& self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%20.spec_value.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%20.spec_value.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.def_s.impl&%20.spec_value.? V&. V& self!) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))) :pattern ((verismo!ptr.def_s.impl&%20.spec_value.? V&. V& self!))))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&)) (has_type (Poly%core!option.Option. (verismo!ptr.def_s.impl&%20.spec_value.? V&. V& self!)) (TYPE%core!option.Option. V&. V&))) :pattern ((verismo!ptr.def_s.impl&%20.spec_value.? V&. V& self!)))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%20.spec_snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%20.spec_snp.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!ptr.def_s.impl&%20.spec_snp.? V&. V& self!) (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))) :pattern ((verismo!ptr.def_s.impl&%20.spec_snp.? V&. V& self!))))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (=> (has_type self! (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&)) (has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.def_s.impl&%20.spec_snp.? V&. V& self!)) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) :pattern ((verismo!ptr.def_s.impl&%20.spec_snp.? V&. V& self!)))))
(declare-fun ens%verismo!ptr.def_s.impl&%22.axiom_spec_new. (Dcr Type Int core!option.Option. verismo!ptr.snp.snp_u.SnpMemAttr.) Bool)
(assert (forall ((V&. Dcr) (V& Type) (ptr! Int) (value! core!option.Option.) (snp! verismo!ptr.snp.snp_u.SnpMemAttr.)) (! (= (ens%verismo!ptr.def_s.impl&%22.axiom_spec_new. V&. V& ptr! value! snp!) (and (= (verismo!ptr.def_s.impl&%20.spec_ptr.? V&. V& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%22.spec_new.? V&. V& (I ptr!) (Poly%core!option.Option. value!) (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!)))) ptr!) (= (verismo!ptr.def_s.impl&%20.spec_value.? V&. V& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%22.spec_new.? V&. V& (I ptr!) (Poly%core!option.Option. value!) (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!)))) value!) (= (verismo!ptr.def_s.impl&%20.spec_snp.? V&. V& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%22.spec_new.? V&. V& (I ptr!) (Poly%core!option.Option. value!) (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!)))) snp!))) :pattern ((ens%verismo!ptr.def_s.impl&%22.axiom_spec_new. V&. V& ptr! value! snp!)))))
(assert (forall ((V&. Dcr) (V& Type) (ptr! Poly) (value! Poly) (snp! Poly)) (! (=> (and (has_type ptr! INT) (has_type value! (TYPE%core!option.Option. V&. V&)) (has_type snp! TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) (=> (and (and (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&) (tr_bound%verismo!tspec.wellformed.WellFormed. V&. V&)) (tr_bound%verismo!tspec.size_s.SpecSize. V&. V&)) (and (and (= (verismo!ptr.def_s.impl&%20.spec_ptr.? V&. V& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%22.spec_new.? V&. V& ptr! value! snp!))) (%I ptr!)) (= (verismo!ptr.def_s.impl&%20.spec_value.? V&. V& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%22.spec_new.? V&. V& ptr! value! snp!))) (%Poly%core!option.Option. value!))) (= (verismo!ptr.def_s.impl&%20.spec_snp.? V&. V& (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.impl&%22.spec_new.? V&. V& ptr! value! snp!))) (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!))))) :pattern ((verismo!ptr.def_s.impl&%22.spec_new.? V&. V& ptr! value! snp!)))))
(declare-fun ens%verismo!ptr.ptr_s.impl&%0.axiom_id_equal. (Dcr Type verismo!ptr.def_s.SnpPPtr. verismo!ptr.def_s.SnpPPtr.) Bool)
(assert (forall ((V&. Dcr) (V& Type) (self! verismo!ptr.def_s.SnpPPtr.) (other! verismo!ptr.def_s.SnpPPtr.)) (! (= (ens%verismo!ptr.ptr_s.impl&%0.axiom_id_equal. V&. V& self! other!) (= (= (verismo!ptr.def_s.impl&%19.id.? V&. V& (Poly%verismo!ptr.def_s.SnpPPtr. self!)) (verismo!ptr.def_s.impl&%19.id.? V&. V& (Poly%verismo!ptr.def_s.SnpPPtr. other!))) (= self! other!))) :pattern ((ens%verismo!ptr.ptr_s.impl&%0.axiom_id_equal. V&. V& self! other!)))))
(assert (forall ((V&. Dcr) (V& Type) (self! Poly) (other! Poly)) (! (=> (and (has_type self! (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) (has_type other! (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))) (=> (and (and (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&) (tr_bound%verismo!tspec.wellformed.WellFormed. V&. V&)) (tr_bound%verismo!tspec.size_s.SpecSize. V&. V&)) (= (= (verismo!ptr.def_s.impl&%19.id.? V&. V& self!) (verismo!ptr.def_s.impl&%19.id.? V&. V& other!)) (= self! other!)))) :pattern ((verismo!ptr.def_s.impl&%19.id.? V&. V& self!) (verismo!ptr.def_s.impl&%19.id.? V&. V& other!)))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_s.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_s.impl&%3.vspec_cast_to.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!) (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes (%I (I (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/ptr (%Poly%verismo!ptr.def_s.SnpPointsToData. self!)))) (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? V&. V& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.ptr_u.impl&%2.value.? V&. V& self!)))))) (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/snp (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%6.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. $ (TYPE%verismo!ptr.def_s.SnpPointsToData. T&. T&) self!) (Poly%verismo!ptr.def_s.SnpPointsToData. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData (%I (I (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!)))) (%Poly%core!option.Option. (Poly%core!option.Option. (core!option.Option./Some (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T& (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))))) (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. $ (TYPE%verismo!ptr.def_s.SnpPointsToData. T&. T&) self!))))))
(assert (forall ((pptr! Poly) (snp_bytes! Poly) (snp! Poly)) (! (=> (and (has_type pptr! INT) (has_type snp_bytes! (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (has_type snp! TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) (has_type (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%1.spec_new.? pptr! snp_bytes! snp!)) TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) :pattern ((verismo!ptr.raw_ptr_s.impl&%1.spec_new.? pptr! snp_bytes! snp!)))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_pptr.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_pptr.) (forall ((self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%2.spec_pptr.? self!) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))) :pattern ((verismo!ptr.raw_ptr_s.impl&%2.spec_pptr.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes.) (forall ((self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes.? self!) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp_bytes (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))) :pattern ((verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes.? self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%2.spec_snp.) (forall ((self! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%2.spec_snp.? self!) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))) :pattern ((verismo!ptr.raw_ptr_s.impl&%2.spec_snp.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.) (has_type (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.impl&%2.spec_snp.? self!)) TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) :pattern ((verismo!ptr.raw_ptr_s.impl&%2.spec_snp.? self!)))))
(declare-fun ens%verismo!ptr.raw_ptr_s.impl&%1.axiom_spec_new. (Int vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. verismo!ptr.snp.snp_u.SnpMemAttr.) Bool)
(assert (forall ((pptr! Int) (snp_bytes! vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.) (snp! verismo!ptr.snp.snp_u.SnpMemAttr.)) (! (= (ens%verismo!ptr.raw_ptr_s.impl&%1.axiom_spec_new. pptr! snp_bytes! snp!) (and (= (verismo!ptr.raw_ptr_s.impl&%2.spec_pptr.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%1.spec_new.? (I pptr!) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. snp_bytes!) (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!)))) pptr!) (= (verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%1.spec_new.? (I pptr!) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. snp_bytes!) (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!)))) snp_bytes!) (= (verismo!ptr.raw_ptr_s.impl&%2.spec_snp.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%1.spec_new.? (I pptr!) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. snp_bytes!) (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!)))) snp!))) :pattern ((ens%verismo!ptr.raw_ptr_s.impl&%1.axiom_spec_new. pptr! snp_bytes! snp!)))))
(assert (forall ((pptr! Poly) (snp_bytes! Poly) (snp! Poly)) (! (=> (and (has_type pptr! INT) (has_type snp_bytes! (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (has_type snp! TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.)) (and (and (= (verismo!ptr.raw_ptr_s.impl&%2.spec_pptr.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%1.spec_new.? pptr! snp_bytes! snp!))) (%I pptr!)) (= (verismo!ptr.raw_ptr_s.impl&%2.spec_snp_bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%1.spec_new.? pptr! snp_bytes! snp!))) (%Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. snp_bytes!))) (= (verismo!ptr.raw_ptr_s.impl&%2.spec_snp.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%1.spec_new.? pptr! snp_bytes! snp!))) (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. snp!)))) :pattern ((verismo!ptr.raw_ptr_s.impl&%1.spec_new.? pptr! snp_bytes! snp!)))))
(declare-fun ens%verismo!ptr.raw_ptr_s.impl&%7.tracked_empty. (Int verismo!ptr.snp.snp_u.SwSnpMemAttr. verismo!ptr.def_s.SnpPointsToRaw.) Bool)
(assert (forall ((ptr! Int) (snp! verismo!ptr.snp.snp_u.SwSnpMemAttr.) (ret! verismo!ptr.def_s.SnpPointsToRaw.)) (! (= (ens%verismo!ptr.raw_ptr_s.impl&%7.tracked_empty. ptr! snp! ret!) (and (= (%Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. ret!))))) snp!) (= (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. ret!)))) (tuple%2./tuple%2 (I ptr!) (I 0))) (verismo!ptr.raw_ptr_s.impl&%5.wf.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. ret!)))))) :pattern ((ens%verismo!ptr.raw_ptr_s.impl&%7.tracked_empty. ptr! snp! ret!)))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.) (forall ((self! Poly) (range! Poly)) (! (= (verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.? self! range!) (and (= (verismo!ptr.raw_ptr_s.impl&%5.range.? self!) (%Poly%tuple%2. range!)) (verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!)))))) :pattern ((verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.? self! range!))))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.take.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.take.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.take.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! (I 0) n!)) :pattern ((vstd!seq.impl&%0.take.? A&. A& self! n!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.take.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.take.? A&. A& self! n!)))))
(assert (fuel_bool_default fuel%vstd!seq.impl&%0.skip.))
(assert (=> (fuel_bool fuel%vstd!seq.impl&%0.skip.) (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (= (vstd!seq.impl&%0.skip.? A&. A& self! n!) (vstd!seq.Seq.subrange.? A&. A& self! n! (I (vstd!seq.Seq.len.? A&. A& self!)))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!))))))
(assert (forall ((A&. Dcr) (A& Type) (self! Poly) (n! Poly)) (! (=> (and (has_type self! (TYPE%vstd!seq.Seq. A&. A&)) (has_type n! INT)) (has_type (vstd!seq.impl&%0.skip.? A&. A& self! n!) (TYPE%vstd!seq.Seq. A&. A&))) :pattern ((vstd!seq.impl&%0.skip.? A&. A& self! n!)))))
(declare-fun req%verismo!ptr.raw_ptr_s.impl&%7.trusted_split. (verismo!ptr.def_s.SnpPointsToRaw. Int) Bool)
(declare-const %%global_location_label%%64 Bool)
(declare-const %%global_location_label%%65 Bool)
(declare-const %%global_location_label%%66 Bool)
(assert (forall ((self! verismo!ptr.def_s.SnpPointsToRaw.) (len1! Int)) (! (= (req%verismo!ptr.raw_ptr_s.impl&%7.trusted_split. self! len1!) (and (=> %%global_location_label%%64 (verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))))) (=> %%global_location_label%%65 (<= len1! (verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))) (=> %%global_location_label%%66 (> (verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))) 0)))) :pattern ((req%verismo!ptr.raw_ptr_s.impl&%7.trusted_split. self! len1!)))))
(declare-fun ens%verismo!ptr.raw_ptr_s.impl&%7.trusted_split. (verismo!ptr.def_s.SnpPointsToRaw. Int tuple%2.) Bool)
(assert (forall ((self! verismo!ptr.def_s.SnpPointsToRaw.) (len1! Int) (res! tuple%2.)) (! (= (ens%verismo!ptr.raw_ptr_s.impl&%7.trusted_split. self! len1! res!) (and (has_type (Poly%tuple%2. res!) (TYPE%tuple%2. $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. $ TYPE%verismo!ptr.def_s.SnpPointsToRaw.)) (verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!))))) (Poly%tuple%2. (tuple%2./tuple%2 (I (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))) (I len1!)))) (verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!))))) (Poly%tuple%2. (tuple%2./tuple%2 (I (Add (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) len1!)) (I (nClip (Sub (verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))) len1!)))))) (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!)))))))) (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!)))))))) (ext_eq true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. res!))))))) (vstd!seq.Seq.subrange.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (I 0) (I len1!))) (ext_eq true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. res!))))))) (vstd!seq.Seq.subrange.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (I len1!) (I (vstd!seq.Seq.len.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))))))))) :pattern ((ens%verismo!ptr.raw_ptr_s.impl&%7.trusted_split. self! len1! res!)))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%5.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%5.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 64) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%6.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%6.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 64) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 64) self!))))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%5.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%5.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 64) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 64) self! vmpl!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!registers.msr_perm_s.impl&%1.wf.))
(assert (=> (fuel_bool fuel%verismo!registers.msr_perm_s.impl&%1.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!registers.msr_perm_s.impl&%1.wf.? T&. T& self!) (and (=> (verismo!registers.msr_perm_s.impl&%0.shared.? T&. T& self!) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& (verismo!registers.msr_perm_s.impl&%0.value.? T&. T& self!))))) :pattern ((verismo!registers.msr_perm_s.impl&%1.wf.? T&. T& self!))))))
(assert (forall ((cpu! Poly) (run! Poly) (vmpl! Poly) (count! Poly) (sent_ghcb_msrs! Poly) (sent_mem! Poly)) (! (=> (and (has_type cpu! NAT) (has_type run! BOOL) (has_type vmpl! NAT) (has_type count! NAT) (has_type sent_ghcb_msrs! (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT))) (has_type sent_mem! (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))) (has_type (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!)) TYPE%verismo!registers.core_perm_s.CoreMode.)) :pattern ((verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!)))))
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_cpu.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_cpu.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_cpu.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/cpu (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_cpu.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.impl&%0.spec_cpu.? self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_cpu.? self!)))))
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_run.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_run.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_run.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/run (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_run.? self!))))))
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_vmpl.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_vmpl.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_vmpl.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_vmpl.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.impl&%0.spec_vmpl.? self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_vmpl.? self!)))))
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_count.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_count.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_count.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/count (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_count.? self!))))))
(assert (forall ((self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.core_perm_s.CoreMode.) (<= 0 (verismo!registers.core_perm_s.impl&%0.spec_count.? self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_count.? self!)))))
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_ghcb_msrs (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? self!))))))
(assert (fuel_bool_default fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_mem.))
(assert (=> (fuel_bool fuel%verismo!registers.core_perm_s.impl&%0.spec_sent_mem.) (forall ((self! Poly)) (! (= (verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? self!) (verismo!registers.core_perm_s.CoreMode./CoreMode/sent_mem (%Poly%verismo!registers.core_perm_s.CoreMode. self!))) :pattern ((verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%48.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%48.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%649.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%648.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT self!))))))
(declare-fun ens%verismo!registers.core_perm_s.impl&%2.axiom_spec_new. (Int Bool Int Int vstd!seq.Seq<tuple%2<nat./nat.>.>. vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.) Bool)
(assert (forall ((cpu! Int) (run! Bool) (vmpl! Int) (count! Int) (sent_ghcb_msrs! vstd!seq.Seq<tuple%2<nat./nat.>.>.) (sent_mem! vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>.)) (! (= (ens%verismo!registers.core_perm_s.impl&%2.axiom_spec_new. cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!) (and (= (verismo!registers.core_perm_s.impl&%0.spec_cpu.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) cpu!) (= (verismo!registers.core_perm_s.impl&%0.spec_run.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) run!) (= (verismo!registers.core_perm_s.impl&%0.spec_vmpl.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) vmpl!) (= (verismo!registers.core_perm_s.impl&%0.spec_count.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) count!) (= (verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) sent_ghcb_msrs!) (= (verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? (I cpu!) (B run!) (I vmpl!) (I count!) (Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!) (Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) sent_mem!))) :pattern ((ens%verismo!registers.core_perm_s.impl&%2.axiom_spec_new. cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!)))))
(assert (forall ((cpu! Poly) (run! Poly) (vmpl! Poly) (count! Poly) (sent_ghcb_msrs! Poly) (sent_mem! Poly)) (! (=> (and (has_type cpu! NAT) (has_type run! BOOL) (has_type vmpl! NAT) (has_type count! NAT) (has_type sent_ghcb_msrs! (TYPE%vstd!seq.Seq. $ (TYPE%tuple%2. $ NAT $ NAT))) (has_type sent_mem! (TYPE%vstd!seq.Seq. $ (TYPE%tuple%3. $ (TYPE%tuple%2. $ INT $ NAT) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))) (and (and (and (and (and (= (verismo!registers.core_perm_s.impl&%0.spec_cpu.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%I cpu!)) (= (verismo!registers.core_perm_s.impl&%0.spec_run.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%B run!))) (= (verismo!registers.core_perm_s.impl&%0.spec_vmpl.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%I vmpl!))) (= (verismo!registers.core_perm_s.impl&%0.spec_count.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%I count!))) (= (verismo!registers.core_perm_s.impl&%0.spec_sent_ghcb_msrs.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%Poly%vstd!seq.Seq<tuple%2<nat./nat.>.>. sent_ghcb_msrs!))) (= (verismo!registers.core_perm_s.impl&%0.spec_sent_mem.? (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!))) (%Poly%vstd!seq.Seq<tuple%3<tuple%2<int./nat.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>./vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>.>.>. sent_mem!)))) :pattern ((verismo!registers.core_perm_s.impl&%2.spec_new.? cpu! run! vmpl! count! sent_ghcb_msrs! sent_mem!)))))
(declare-fun req%verismo!registers.msr_perm_s.impl&%2.axiom_eq. (Dcr Type verismo!registers.msr_perm_s.RegisterPerm. verismo!registers.msr_perm_s.RegisterPerm.) Bool)
(declare-const %%global_location_label%%67 Bool)
(assert (forall ((T&. Dcr) (T& Type) (x! verismo!registers.msr_perm_s.RegisterPerm.) (y! verismo!registers.msr_perm_s.RegisterPerm.)) (! (= (req%verismo!registers.msr_perm_s.impl&%2.axiom_eq. T&. T& x! y!) (=> %%global_location_label%%67 (= (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPerm. x!)) (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPerm. y!))))) :pattern ((req%verismo!registers.msr_perm_s.impl&%2.axiom_eq. T&. T& x! y!)))))
(declare-fun ens%verismo!registers.msr_perm_s.impl&%2.axiom_eq. (Dcr Type verismo!registers.msr_perm_s.RegisterPerm. verismo!registers.msr_perm_s.RegisterPerm.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (x! verismo!registers.msr_perm_s.RegisterPerm.) (y! verismo!registers.msr_perm_s.RegisterPerm.)) (! (= (ens%verismo!registers.msr_perm_s.impl&%2.axiom_eq. T&. T& x! y!) (= x! y!)) :pattern ((ens%verismo!registers.msr_perm_s.impl&%2.axiom_eq. T&. T& x! y!)))))
(assert (forall ((T&. Dcr) (T& Type) (x! Poly) (y! Poly)) (! (=> (and (has_type x! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (has_type y! TYPE%verismo!registers.msr_perm_s.RegisterPerm.)) (=> (= (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& x!) (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& y!)) (= x! y!))) :pattern ((verismo!registers.msr_perm_s.impl&%2.view.? T&. T& x!) (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& y!)))))
(declare-fun ens%verismo!registers.msr_perm_s.impl&%2.axiom_wf. (Dcr Type verismo!registers.msr_perm_s.RegisterPerm.) Bool)
(assert (forall ((T&. Dcr) (T& Type) (self! verismo!registers.msr_perm_s.RegisterPerm.)) (! (= (ens%verismo!registers.msr_perm_s.impl&%2.axiom_wf. T&. T& self!) (= (verismo!registers.msr_perm_s.impl&%2.wf.? (Poly%verismo!registers.msr_perm_s.RegisterPerm. self!)) (verismo!registers.msr_perm_s.impl&%1.wf.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPerm. self!)))))) :pattern ((ens%verismo!registers.msr_perm_s.impl&%2.axiom_wf. T&. T& self!)))))
(assert (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (=> (has_type self! TYPE%verismo!registers.msr_perm_s.RegisterPerm.) (=> (and (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&)) (= (verismo!registers.msr_perm_s.impl&%2.wf.? self!) (verismo!registers.msr_perm_s.impl&%1.wf.? T&. T& (Poly%verismo!registers.msr_perm_s.RegisterPermValue. (verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!)))))) :pattern ((verismo!registers.msr_perm_s.impl&%2.view.? T&. T& self!)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%588.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%588.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%589.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%589.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%20.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%20.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ INT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%19.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%19.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT SZ) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%62.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%62.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%708.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%709.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%70.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%70.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT SZ)))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.))
(declare-fun %%lambda%%26 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%26 v1$ v2$) (I (Sub (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%26 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param) (mk_fun %%lambda%%26)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%732.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%732.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_usize_usize_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%733.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%733.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%64.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%64.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%703.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%702.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%7.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%7.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT SZ)) (I (uClip SZ 0)))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%0.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%0.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%core!option.Option. T&. T&) self!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%core!option.Option. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%0.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%0.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%core!option.Option. T&. T&) self! vmpl!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%core!option.Option. T&. T&) self! vmpl!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%core!option.Option. T&. T&))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%3.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%3.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%core!option.Option. T&. T&) self!) (B (=> (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T&. T& (core!option.Option./Some/0 (%Poly%core!option.Option. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%core!option.Option. T&. T&) self!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%core!option.Option. T&. T&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%core!option.Option. T&. T&))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!) (B (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. self!) (B (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/es (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%24.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self! vmpl!) (B (and (and (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) $ TYPE%tuple%0.) $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 32) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%60.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. self! vmpl!) (B (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/es (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) vmpl!)) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))) vmpl!))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 8) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. self! vmpl!))))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%23.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%23.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!) (B (and (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/selector (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!)))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 16) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/attr (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 32) (Poly%verismo!tspec.security.sectype.SecType<u32./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/limit (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.VmsaSegmentRegister./VmsaSegmentRegister/base (%Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%59.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%59.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. self!) (B (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/es (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ss (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/ds (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/fs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gs (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (Poly%verismo!snp.cpu.vmsa.VmsaSegmentRegister. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gdtr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 90)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_ldtr_idtr_tr (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 8) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vmpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 8) (Poly%verismo!tspec.security.sectype.SecType<u8./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cpl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 4)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved2 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/efer (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr3 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/cr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 16)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_dr7_6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rflags (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rip (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 88)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved4 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved5 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rax (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 104)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved6 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/gpat (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 152)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved7 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rcx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbx (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 8)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved8 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rbp (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rsi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/rdi (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 112)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_9_r9_15_exits_scratch (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/sev_features (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/vintr_ctrl (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/guest_error_code (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/virtual_tom (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 24)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved_12 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.vmsa.Vmsa./Vmsa/xcr0 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%verismo!tspec_e.array.Array. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.) $ (CONST_INT 3088)) (verismo!snp.cpu.vmsa.Vmsa./Vmsa/reserved13 (%Poly%verismo!snp.cpu.vmsa.Vmsa. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa. self!))))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.))
(assert (fuel_bool_default fuel%verismo!ptr.snp.rmp.rmp_t.RMP_4K.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.rmp.rmp_t.RMP_4K.) (= verismo!ptr.snp.rmp.rmp_t.RMP_4K.? 0)))
(assert (uInv 64 verismo!ptr.snp.rmp.rmp_t.RMP_4K.?))
(assert (fuel_bool_default fuel%verismo!ptr.snp.rmp.rmp_e.spec_perm_requires_pvalidate.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.rmp.rmp_e.spec_perm_requires_pvalidate.) (forall ((perm! Poly) (addr! Poly) (size! Poly) (val! Poly)) (! (= (verismo!ptr.snp.rmp.rmp_e.spec_perm_requires_pvalidate.? perm! addr! size! val!) (and (verismo!ptr.snp.snp_s.impl&%0.requires_pvalidate.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? perm!))) addr! (I verismo!ptr.snp.rmp.rmp_t.RMP_4K.?) (I (ite (%B val!) 1 0))) (verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? perm!)) (Poly%tuple%2. (tuple%2./tuple%2 addr! size!))))) :pattern ((verismo!ptr.snp.rmp.rmp_e.spec_perm_requires_pvalidate.? perm! addr! size! val!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.rmp.rmp_e.spec_perms_requires_pvalidate.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.rmp.rmp_e.spec_perms_requires_pvalidate.) (forall ((page_perms! Poly) (start_page! Poly) (end_page! Poly) (val! Poly)) (! (= (verismo!ptr.snp.rmp.rmp_e.spec_perms_requires_pvalidate.? page_perms! start_page! end_page! val!) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I start_page!) (%I i$)) (< (%I i$) (%I end_page!))) (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i$) (verismo!ptr.snp.rmp.rmp_e.spec_perm_requires_pvalidate.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms! i$) (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i$) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?) val!)))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i$))))) :pattern ((verismo!ptr.snp.rmp.rmp_e.spec_perms_requires_pvalidate.? page_perms! start_page! end_page! val!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.rmp.rmp_e.spec_perm_ensures_pvalidate.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.rmp.rmp_e.spec_perm_ensures_pvalidate.) (forall ((perm! Poly) (old_perm! Poly) (start! Poly) (size! Poly) (val! Poly)) (! (= (verismo!ptr.snp.rmp.rmp_e.spec_perm_ensures_pvalidate.? perm! old_perm! start! size! val!) (and (and (verismo!ptr.snp.snp_s.impl&%0.ensures_pvalidated.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? perm!))) (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? old_perm!))) val!) (verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? perm!)) (Poly%tuple%2. (tuple%2./tuple%2 start! size!)))) (=> (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? old_perm!)))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? perm!))))))))) :pattern ((verismo!ptr.snp.rmp.rmp_e.spec_perm_ensures_pvalidate.? perm! old_perm! start! size! val!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.rmp.rmp_e.spec_perms_ensures_pvalidate.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.rmp.rmp_e.spec_perms_ensures_pvalidate.) (forall ((page_perms! Poly) (old_perms! Poly) (start_page! Poly) (end_page! Poly) (val! Poly)) (! (= (verismo!ptr.snp.rmp.rmp_e.spec_perms_ensures_pvalidate.? page_perms! old_perms! start_page! end_page! val!) (and (ext_eq true (TYPE%vstd!set.Set. $ INT) (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. old_perms!) (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I start_page!) (%I i$)) (< (%I i$) (%I end_page!))) (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i$) (verismo!ptr.snp.rmp.rmp_e.spec_perm_ensures_pvalidate.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms! i$) (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. old_perms! i$) (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i$) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?) val!)))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i$)))))) :pattern ((verismo!ptr.snp.rmp.rmp_e.spec_perms_ensures_pvalidate.? page_perms! old_perms! start_page! end_page! val!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires_at.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires_at.) (forall ((page_perm! Poly) (i! Poly) (attr! Poly)) (! (= (verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires_at.? page_perm! i! attr!) (and (and (and (verismo!ptr.snp.snp_s.impl&%0.requires_rmpadjust_mem.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? page_perm!))) (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i!) (I verismo!ptr.snp.rmp.rmp_t.RMP_4K.?) attr! (Poly%core!option.Option. core!option.Option./None)) (verismo!ptr.raw_ptr_s.impl&%5.wf_range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? page_perm!)) (Poly%tuple%2. (tuple%2./tuple%2 (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i!) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?))))) (=> (> (verismo!ptr.snp.snp_u.impl&%0.spec_perms.? attr!) 0) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? page_perm!)))) (I (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? attr!)))))) (let ((tmp%%$ (verismo!ptr.snp.snp_u.impl&%0.spec_vmpl.? attr!))) (and (< 0 tmp%%$) (< tmp%%$ 4))))) :pattern ((verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires_at.? page_perm! i! attr!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires.) (forall ((page_perms! Poly) (start_page! Poly) (npages! Poly) (attr! Poly)) (! (= (verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires.? page_perms! start_page! npages! attr!) (and (%B (verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? $ INT start_page! npages!)) (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I start_page!) (%I i$)) (< (%I i$) (Add (%I start_page!) (%I npages!)))) (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i$) (verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires_at.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms! i$) i$ attr!)))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i$)))))) :pattern ((verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires.? page_perms! start_page! npages! attr!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjust.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjust.) (forall ((prev_perm! Poly) (perm! Poly) (page! Poly) (attr! Poly)) (! (= (verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjust.? prev_perm! perm! page! attr!) (and (and (and (verismo!ptr.snp.snp_s.impl&%0.ensures_rmpadjust.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? perm!))) (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? prev_perm!))) attr!) (verismo!ptr.raw_ptr_s.impl&%5.wf_range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? perm!)) (Poly%tuple%2. (tuple%2./tuple%2 (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT page!) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?))))) (= (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? perm!))) (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? prev_perm!))))) (ext_eq true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? perm!)))) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? prev_perm!))))))) :pattern ((verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjust.? prev_perm! perm! page! attr!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjmem.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjmem.) (forall ((prev_perms! Poly) (page_perms! Poly) (start_page! Poly) (npages! Poly) (attr! Poly)) (! (= (verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjmem.? prev_perms! page_perms! start_page! npages! attr!) (and (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I start_page!) (%I i$)) (< (%I i$) (Add (%I start_page!) (%I npages!)))) (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i$) (verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjust.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. prev_perms! i$) (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms! i$) i$ attr!)))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) i$)))) (ext_eq true (TYPE%vstd!set.Set. $ INT) (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. page_perms!) (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. prev_perms!)))) :pattern ((verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjmem.? prev_perms! page_perms! start_page! npages! attr!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%92.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%92.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%93.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%93.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (I 0))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%95.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%95.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%98.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%98.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%99.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%99.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (I 0))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%101.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%101.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%104.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%104.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (I 0)))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%105.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%105.spec_default.) (forall ((M&. Dcr) (M& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (I 0))))) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%23.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%23.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%483.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%482.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%484.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%485.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%24.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%24.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%487.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%486.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%488.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%489.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%491.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%490.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%492.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%493.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%495.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%494.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%496.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%497.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%499.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%498.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%500.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%501.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%503.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%502.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%504.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%505.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%17.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%17.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%507.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%506.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%508.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%509.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%511.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%510.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%512.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%513.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int.))
(declare-fun %%lambda%%27 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%27 v1$ v2$) (I (Add (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%27 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u8_u8_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param) (mk_fun %%lambda%%27)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%514.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%514.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u8_u8_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%515.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%515.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param) (mk_fun %%lambda%%26)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%516.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%516.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u8_u8_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%517.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%517.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.))
(declare-fun %%lambda%%28 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%28 v1$ v2$) (I (Mul (%I v1$) (%I v2$)))) :pattern ((%%apply%%1 %%lambda%%28 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? no%param) (mk_fun %%lambda%%28)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? no%param)) (TYPE%fun%2. $ (UINT 8) $ (UINT 8) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%518.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%518.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 8) M&. M& $ (UINT 8) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u8_u8_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%519.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%519.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%534.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%534.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%535.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%535.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%31.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%31.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%537.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%536.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%538.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%539.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%32.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%32.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%541.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%540.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%542.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%543.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%545.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%544.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%546.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%547.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%549.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%548.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%550.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%551.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%553.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%552.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%554.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%555.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%26.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%26.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%557.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%556.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%558.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%559.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%561.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%560.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%562.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%563.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%565.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%564.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%566.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%567.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u16_u16_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param) (mk_fun %%lambda%%27)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%568.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%568.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u16_u16_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%569.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%569.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param) (mk_fun %%lambda%%26)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%570.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%570.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u16_u16_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%571.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%571.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? no%param) (mk_fun %%lambda%%28)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? no%param)) (TYPE%fun%2. $ (UINT 16) $ (UINT 16) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%572.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%572.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 16) M&. M& $ (UINT 16) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u16_u16_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%573.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%573.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%39.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%39.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%591.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%590.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%592.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%593.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%40.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%40.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%595.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%594.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%596.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%597.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%599.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%598.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%600.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%601.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%603.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%602.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%604.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%605.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%35.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%35.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%607.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%606.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%608.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%609.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%611.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%610.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%612.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%613.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%615.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%614.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%616.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%617.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%619.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%618.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%620.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%621.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u32_u32_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param) (mk_fun %%lambda%%27)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%622.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%622.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u32_u32_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%623.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%623.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param) (mk_fun %%lambda%%26)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%624.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%624.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u32_u32_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%625.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%625.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? no%param) (mk_fun %%lambda%%28)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? no%param)) (TYPE%fun%2. $ (UINT 32) $ (UINT 32) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%626.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%626.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 32) M&. M& $ (UINT 32) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u32_u32_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%627.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%627.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%642.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%642.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%643.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%643.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%646.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%647.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%650.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%651.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%653.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%652.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%654.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%655.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%658.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%659.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%661.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%660.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%662.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%663.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%665.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%664.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%666.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%667.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%669.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%668.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%670.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%671.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%674.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%675.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_u64_u64_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param) (mk_fun %%lambda%%27)) :pattern ((verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%676.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%676.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_u64_u64_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%677.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%677.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param) (mk_fun %%lambda%%26)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%678.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%678.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_u64_u64_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%679.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%679.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? no%param) (mk_fun %%lambda%%28)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? no%param)) (TYPE%fun%2. $ (UINT 64) $ (UINT 64) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%680.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%680.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT 64) M&. M& $ (UINT 64) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_u64_u64_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%681.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%681.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%700.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%701.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%704.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%705.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%707.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%706.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%711.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%710.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%712.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%713.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%715.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%714.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%716.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%717.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%719.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%718.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%720.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%721.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%723.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%722.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%724.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%725.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%727.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%726.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%728.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%729.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_usize_usize_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param) (mk_fun %%lambda%%27)) :pattern ((verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%730.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%730.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_usize_usize_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%731.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%731.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? no%param) (mk_fun %%lambda%%28)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? no%param)) (TYPE%fun%2. $ (UINT SZ) $ (UINT SZ) $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%734.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%734.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ (UINT SZ) M&. M& $ (UINT SZ) $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_usize_usize_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%735.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%735.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ) M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%750.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%750.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%751.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%751.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%79.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%79.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%753.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%752.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%754.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%755.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%80.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%80.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%757.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%756.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%758.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%759.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%78.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%78.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%761.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%760.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%762.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%763.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%76.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%76.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%765.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%764.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%766.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%767.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%75.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%75.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%769.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%768.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%770.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%771.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%74.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%74.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%773.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%772.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%774.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%775.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%73.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%73.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%777.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%776.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%778.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%779.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.))
(declare-fun %%lambda%%29 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%29 v1$ v2$) (I (nClip (Add (%I v1$) (%I v2$))))) :pattern ((%%apply%%1 %%lambda%%29 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param) (mk_fun %%lambda%%29)) :pattern ((verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param)) (TYPE%fun%2. $ NAT $ NAT $ NAT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%780.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%780.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ NAT M&. M& $ NAT $ NAT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_nat_nat_nat.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%781.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%781.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param) (mk_fun %%lambda%%26)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param)) (TYPE%fun%2. $ NAT $ NAT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%782.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%782.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ NAT M&. M& $ NAT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_nat_nat_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%783.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%783.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.))
(declare-fun %%lambda%%30 () %%Function%%)
(assert (forall ((v1$ Poly) (v2$ Poly)) (! (= (%%apply%%1 %%lambda%%30 v1$ v2$) (I (nClip (Mul (%I v1$) (%I v2$))))) :pattern ((%%apply%%1 %%lambda%%30 v1$ v2$)))))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? no%param) (mk_fun %%lambda%%30)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? no%param)) (TYPE%fun%2. $ NAT $ NAT $ NAT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%784.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%784.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ NAT M&. M& $ NAT $ NAT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_nat_nat_nat.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%785.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%785.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%790.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%790.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%791.ord_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%791.ord_int.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!)))) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%71.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%71.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%793.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%792.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%794.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%795.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ INT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ INT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%797.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%796.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%798.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%799.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ NAT M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ NAT M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%801.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%800.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%802.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%803.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%68.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%68.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%805.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%804.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%806.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%807.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%67.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%67.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%809.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%808.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%810.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%811.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 32) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 32) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 32) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%66.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%66.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%813.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%812.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%814.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%815.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 16) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 16) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 16) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%65.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%65.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%817.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%816.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%818.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%819.vspec_cast_to.) (forall ((M&. Dcr) (M& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 8) M&. M& (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 8) M&. M& (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 8) self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_add_int_int_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param) (mk_fun %%lambda%%27)) :pattern ((verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param)) (TYPE%fun%2. $ INT $ INT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_add_int_int_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%820.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%820.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ INT M&. M& $ INT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_add_int_int_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%821.spec_add.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%821.spec_add.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecAdd.spec_add.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_sub_int_int_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param) (mk_fun %%lambda%%26)) :pattern ((verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param)) (TYPE%fun%2. $ INT $ INT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_sub_int_int_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%822.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%822.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ INT M&. M& $ INT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_sub_int_int_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%823.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%823.spec_sub.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.fnspec.fn_spec_mul_int_int_int.))
(assert (=> (fuel_bool fuel%verismo!tspec.fnspec.fn_spec_mul_int_int_int.) (forall ((no%param Poly)) (! (= (verismo!tspec.fnspec.fn_spec_mul_int_int_int.? no%param) (mk_fun %%lambda%%28)) :pattern ((verismo!tspec.fnspec.fn_spec_mul_int_int_int.? no%param))))))
(assert (forall ((no%param Poly)) (! (=> (has_type no%param INT) (has_type (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_int_int_int.? no%param)) (TYPE%fun%2. $ INT $ INT $ INT))) :pattern ((verismo!tspec.fnspec.fn_spec_mul_int_int_int.? no%param)))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%824.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%824.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!) (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.bop_new.? $ INT M&. M& $ INT $ INT self! rhs! (Poly%fun%2. (verismo!tspec.fnspec.fn_spec_mul_int_int_int.? (I 0)))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.security.sectype.impl&%825.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.security.sectype.impl&%825.spec_mul.) (forall ((M&. Dcr) (M& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT M&. M& (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT M&. M& rhs!)))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.bool_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.bool_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.bool_to_stream.? data!) (verismo!tspec.stream.basic.u8_to_stream.? (I (ite (%B data!) 1 0)))) :pattern ((verismo!tspec.stream.basic.bool_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.char_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.char_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.char_to_stream.? data!) (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (char%to_unicode (%C data!)))))) :pattern ((verismo!tspec.stream.basic.char_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!tspec.stream.basic.u128_to_stream.))
(assert (=> (fuel_bool fuel%verismo!tspec.stream.basic.u128_to_stream.) (forall ((data! Poly)) (! (= (verismo!tspec.stream.basic.u128_to_stream.? data!) (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I data!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I data!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I data!)))) 4294967296))))) 65536))))) 256))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296)))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296)))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I data!) 4294967296))))) 4294967296))))) 65536))))) 256)))))))))))))))))) :pattern ((verismo!tspec.stream.basic.u128_to_stream.? data!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%2.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%2.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%6.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%6.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir.) (I 0))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%7.wf.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%7.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%8.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestVir. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%14.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%14.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%15.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%15.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.) (I 0))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%16.wf.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%16.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%17.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%20.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%20.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%23.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%23.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%24.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%24.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy.) (I 0))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%25.wf.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%25.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%26.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!arch.addr_s.def_s.SysPhy. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%36.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%36.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!) (I (let ((val$ (ite (is-verismo!arch.addr_s.def_s.PageSize./Size4k_ (%Poly%verismo!arch.addr_s.def_s.PageSize. self!)) 0 1))) val$))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%38.spec_from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%38.spec_from_int.) (forall ((val! Poly)) (! (= (verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!) (ite (< (%I val!) 0) core!option.Option./None (ite (= (%I val!) 0) (core!option.Option./Some (Poly%verismo!arch.addr_s.def_s.PageSize. verismo!arch.addr_s.def_s.PageSize./Size4k)) (ite (= (%I val!) 1) (core!option.Option./Some (Poly%verismo!arch.addr_s.def_s.PageSize. verismo!arch.addr_s.def_s.PageSize./Size2m)) core!option.Option./None)))) :pattern ((verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%core!option.Option. (verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.addr_s.def_s.PageSize.))) :pattern ((verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!)))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%36.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%36.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. val!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.addr_s.def_s.impl&%38.spec_from_int.? val!))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. val!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.def_s.impl&%37.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.def_s.impl&%37.ord_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!) (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.addr_s.def_s.PageSize. self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%4.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%4.from_int.) (forall ((T&. Dcr) (T& Type) (val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) val!) (Poly%verismo!arch.addr_s.def_s.SpecPage. (verismo!arch.addr_s.page.impl&%3.new.? T&. T& val!))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) val!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%6.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%6.ord_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!) (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.addr_s.page.impl&%7.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.addr_s.page.impl&%7.ord_int.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!) (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&) self!))))))
(assert (fuel_bool_default fuel%verismo!arch.rmp.perm_s.impl&%1.as_int.))
(assert (=> (fuel_bool fuel%verismo!arch.rmp.perm_s.impl&%1.as_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntValue.as_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) self!) (I (let ((v1$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Read)) 1 0))) (let ((v2$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Write)) 2 0))) (let ((v3$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeU)) 4 0))) (let ((v4$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./ExeS)) 8 0))) (let ((v5$ (ite (vstd!set.impl&%0.contains.? $ TYPE%verismo!arch.rmp.perm_s.Perm. self! (Poly%verismo!arch.rmp.perm_s.Perm. verismo!arch.rmp.perm_s.Perm./Shadow)) 16 0))) (Add (Add (Add (Add v1$ v2$) v3$) v4$) v5$)))))))) :pattern ((verismo!tspec.integer.IntValue.as_int.? $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.) self!))))))
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%21.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%21.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.idt.def.Idtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!boot.idt.def.Idtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%22.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%22.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!boot.idt.def.Idtr.) (I (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))))))
(assert (fuel_bool_default fuel%verismo!boot.idt.def.impl&%25.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!boot.idt.def.impl&%25.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.idt.def.Idtr. self! vmpl!) (B (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/limit (%Poly%verismo!boot.idt.def.Idtr. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!boot.idt.def.Idtr./Idtr/base (%Poly%verismo!boot.idt.def.Idtr. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!boot.idt.def.Idtr. self! vmpl!))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%7.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%7.spec_eq.) (forall ((T&. Dcr) (T& Type) (T2&. Dcr) (T2& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& T2&. T2& self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) (verismo!tspec.integer.IntOrd.ord_int.? T2&. T2& rhs!)))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& T2&. T2& self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr.) (I 8))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%55.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%55.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 64) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%12.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%12.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self! rhs!) (B (= (I (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. self!))) (I (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr/value (%Poly%verismo!ptr.snp.snp_u.RmpAttr. rhs!)))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%13.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%14.wf.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%14.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%16.spec_new.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%16.spec_new.) (forall ((val! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%16.spec_new.? val!) (verismo!ptr.snp.snp_u.RmpAttr./RmpAttr (%I val!))) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!ptr.snp.snp_u.RmpAttr. (verismo!ptr.snp.snp_u.impl&%16.spec_new.? val!)) TYPE%verismo!ptr.snp.snp_u.RmpAttr.)) :pattern ((verismo!ptr.snp.snp_u.impl&%16.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%30.hw_snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%30.hw_snp.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. self!) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!)))) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%35.sw_eq.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%35.sw_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!ptr.snp.snp_u.impl&%35.sw_eq.? self! rhs!) (= (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!)) (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. rhs!)))) :pattern ((verismo!ptr.snp.snp_u.impl&%35.sw_eq.? self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!ptr.snp.snp_u.impl&%34.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!ptr.snp.snp_u.impl&%34.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. self! rhs!) (B (= (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. self!)) (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/sw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. rhs!))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.) (I 8))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%12.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%12.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self! rhs!) (B (= (I (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!))) (I (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. rhs!)))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%13.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%13.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%13.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%13.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%14.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%14.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%16.spec_new.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%16.spec_new.) (forall ((val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%16.spec_new.? val!) (verismo!snp.cpu.gdt.DescriptorAttr0_7./DescriptorAttr0_7 (%I val!))) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr0_7. (verismo!snp.cpu.gdt.impl&%16.spec_new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.)) :pattern ((verismo!snp.cpu.gdt.impl&%16.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%28.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%28.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.) (I 8))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%29.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%29.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self! rhs!) (B (= (I (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!))) (I (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11/value (%Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. rhs!)))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%30.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%30.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%30.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%30.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%31.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%31.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%33.spec_new.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%33.spec_new.) (forall ((val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%33.spec_new.? val!) (verismo!snp.cpu.gdt.DescriptorAttr8_11./DescriptorAttr8_11 (%I val!))) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.DescriptorAttr8_11. (verismo!snp.cpu.gdt.impl&%33.spec_new.? val!)) TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.)) :pattern ((verismo!snp.cpu.gdt.impl&%33.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%45.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%45.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.gdt.Descriptor.) (I 8))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%46.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%46.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. $ TYPE%verismo!snp.cpu.gdt.Descriptor. self! rhs!) (B (= (I (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. self!))) (I (verismo!snp.cpu.gdt.Descriptor./Descriptor/value (%Poly%verismo!snp.cpu.gdt.Descriptor. rhs!)))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. $ TYPE%verismo!snp.cpu.gdt.Descriptor. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%47.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%47.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%47.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%47.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%48.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%48.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.gdt.Descriptor. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%50.spec_new.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%50.spec_new.) (forall ((val! Poly)) (! (= (verismo!snp.cpu.gdt.impl&%50.spec_new.? val!) (verismo!snp.cpu.gdt.Descriptor./Descriptor (%I val!))) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.gdt.Descriptor. (verismo!snp.cpu.gdt.impl&%50.spec_new.? val!)) TYPE%verismo!snp.cpu.gdt.Descriptor.)) :pattern ((verismo!snp.cpu.gdt.impl&%50.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%56.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%56.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%57.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%57.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.gdt.Gdtr.) (I (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64)))))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.gdt.impl&%60.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.gdt.impl&%60.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self! vmpl!) (B (and (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) $ TYPE%tuple%0.) $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 16) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u16./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/limit (%Poly%verismo!snp.cpu.gdt.Gdtr. self!))))))) (%B (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))) vmpl!)) (verismo!tspec.security.sectype.impl&%9.wf_value.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SecType<u64./tuple%0.>. (verismo!snp.cpu.gdt.Gdtr./Gdtr/base (%Poly%verismo!snp.cpu.gdt.Gdtr. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.gdt.Gdtr. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures.) (I 8))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%12.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%12.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self! rhs!) (B (= (I (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. self!))) (I (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures/value (%Poly%verismo!snp.cpu.vmsa.SevFeatures. rhs!)))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%13.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%14.wf.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%14.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. self!))))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%16.spec_new.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%16.spec_new.) (forall ((val! Poly)) (! (= (verismo!snp.cpu.vmsa.impl&%16.spec_new.? val!) (verismo!snp.cpu.vmsa.SevFeatures./SevFeatures (%I val!))) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!snp.cpu.vmsa.SevFeatures. (verismo!snp.cpu.vmsa.impl&%16.spec_new.? val!)) TYPE%verismo!snp.cpu.vmsa.SevFeatures.)) :pattern ((verismo!snp.cpu.vmsa.impl&%16.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!snp.cpu.vmsa.impl&%32.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!snp.cpu.vmsa.impl&%32.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!snp.cpu.vmsa.Vmsa.) (I (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (nClip (Add (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (I (nClip (Add (nClip (Add (nClip (Add (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 16))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 32))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 90)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 8))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 4)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 16)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 88)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 24)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 104)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 152)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 8)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 112)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 24)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.))))))))) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 64))))) (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ NAT (I (Mul (const_int (CONST_INT 3088)) (%I (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) $ TYPE%tuple%0.)))))))))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%6.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%6.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 32) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%6.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%6.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 32) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 32) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%7.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%7.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 32) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%7.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%25 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%6.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%25 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%38.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%38.spec_eq.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 8) self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%15.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%15.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 64) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%62.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%62.spec_eq.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 64) self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!snp.ghcb.proto_s.SM_TERM_INVALID_PARAM.))
(assert (=> (fuel_bool fuel%verismo!snp.ghcb.proto_s.SM_TERM_INVALID_PARAM.) (= verismo!snp.ghcb.proto_s.SM_TERM_INVALID_PARAM.? 7)))
(assert (uInv 64 verismo!snp.ghcb.proto_s.SM_TERM_INVALID_PARAM.?))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%9.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%9.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 8) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 8) self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%7.spec_valid_pn_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%7.spec_valid_pn_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self! size!) (B (let ((start$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. self!))))))) (and (%B (verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? $ INT (I start$) size!)) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT SZ) self!))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self! size!))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%core!option.Option. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%2.vspec_cast_to.))
(declare-fun %%choose%%5 (Type Dcr Type Dcr Type Poly Dcr Type Dcr Type) Poly)
(assert (forall ((%%hole%%0 Type) (%%hole%%1 Dcr) (%%hole%%2 Type) (%%hole%%3 Dcr) (%%hole%%4 Type) (%%hole%%5 Poly) (%%hole%%6 Dcr) (%%hole%%7 Type) (%%hole%%8 Dcr) (%%hole%%9 Type)) (! (=> (exists ((ret$ Poly)) (! (and (has_type ret$ %%hole%%0) (= %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 ret$))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 ret$)))) (exists ((ret$ Poly)) (! (and (and (has_type ret$ %%hole%%0) (= %%hole%%5 (verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 ret$))) (= (%%choose%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9) ret$)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9 ret$))))) :pattern ((%%choose%%5 %%hole%%0 %%hole%%1 %%hole%%2 %%hole%%3 %%hole%%4 %%hole%%5 %%hole%%6 %%hole%%7 %%hole%%8 %%hole%%9)))))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%2.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) self!) (as_type (%%choose%%5 (UINT 8) $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%4.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16) self!) (as_type (%%choose%%5 (UINT 16) $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 16))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%6.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32) self!) (as_type (%%choose%%5 (UINT 32) $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 32))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%8.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%8.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64) self!) (as_type (%%choose%%5 (UINT 64) $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 64))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%9.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%9.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (%I self!)))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (%I self!))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (%I self!)))) 4294967296))))) 65536))))) 256))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296)))))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296)))))))) 65536))))) 256)))))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296)))))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296)))))))) 256))))))))) (Poly%vstd!seq.Seq<u8.>. (%Poly%vstd!seq.Seq<u8.>. (vstd!seq.Seq.add.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296))))) 65536))))))))) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (uClip 16 (EucDiv (%I (I (uClip 16 (uClip 32 (EucDiv (%I (I (uClip 32 (uClip 64 (EucDiv (%I (I (uClip 64 (uClip 128 (EucDiv (%I self!) 4294967296))))) 4294967296))))) 65536))))) 256))))))))))))))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%10.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%10.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128) self!) (as_type (%%choose%%5 (UINT 128) $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT 128))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%12.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%12.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ) self!) (as_type (%%choose%%5 (UINT SZ) $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) (UINT SZ))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%13.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%13.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (uClip 8 (char%to_unicode (%C self!))))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%14.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%14.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR self!) (as_type (%%choose%%5 CHAR $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8))) CHAR)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%15.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%15.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (Poly%vstd!seq.Seq<u8.>. (verismo!tspec.stream.basic.u8_to_stream.? (I (ite (%B self!) 1 0))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%16.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%16.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL self!) (as_type (%%choose%%5 BOOL $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self! $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8))) BOOL)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%21.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%21.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%29.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%29.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%37.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%37.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%45.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%45.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%49.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%49.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 8) self!) (I (uClip 8 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%50.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%50.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 16) self!) (I (uClip 16 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%51.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%51.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 32) self!) (I (uClip 32 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%52.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%52.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 64) self!) (I (uClip 64 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%53.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%53.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%54.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%54.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT SZ) self!) (I (uClip SZ (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%55.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%55.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ INT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%56.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%56.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ NAT self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%61.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%61.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%69.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%69.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%77.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%77.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 128) self!) (I (uClip 128 (%I self!)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%81.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%81.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%82.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%82.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 8) self!) (as_type (%%choose%%5 (UINT 8) $ (UINT 8) $ BOOL self! $ (UINT 8) $ BOOL) (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%83.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%83.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%84.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%84.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 16) self!) (as_type (%%choose%%5 (UINT 16) $ (UINT 16) $ BOOL self! $ (UINT 16) $ BOOL) (UINT 16))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%85.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%85.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 32) $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%86.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%86.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 32) self!) (as_type (%%choose%%5 (UINT 32) $ (UINT 32) $ BOOL self! $ (UINT 32) $ BOOL) (UINT 32))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 32) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%87.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%87.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%88.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%88.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 64) self!) (as_type (%%choose%%5 (UINT 64) $ (UINT 64) $ BOOL self! $ (UINT 64) $ BOOL) (UINT 64))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%89.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%89.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 128) $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%90.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%90.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 128) self!) (as_type (%%choose%%5 (UINT 128) $ (UINT 128) $ BOOL self! $ (UINT 128) $ BOOL) (UINT 128))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT 128) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%91.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%91.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%92.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%92.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT SZ) self!) (as_type (%%choose%%5 (UINT SZ) $ (UINT SZ) $ BOOL self! $ (UINT SZ) $ BOOL) (UINT SZ))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%93.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%93.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%94.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%94.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ INT self!) (as_type (%%choose%%5 INT $ INT $ BOOL self! $ INT $ BOOL) INT)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ INT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%95.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%95.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ BOOL self!) (B (not (= (%I self!) 0)))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ NAT $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%96.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%96.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ NAT self!) (as_type (%%choose%%5 NAT $ NAT $ BOOL self! $ NAT $ BOOL) NAT)) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ BOOL $ NAT self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%97.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%97.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (UINT 8) self!) (I (uClip 8 (char%to_unicode (%C self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ CHAR $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%98.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%98.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%99.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%99.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%100.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%100.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) self!) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.cast.impl&%101.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.cast.impl&%101.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!) (vstd!seq.Seq.empty.? $ (UINT 8))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%1.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%1.spec_default.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? (GHOST T&.) T&) (vstd!pervasive.arbitrary.? (GHOST T&.) T&)) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? (GHOST T&.) T&))))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%2.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%2.spec_default.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.default.SpecDefault.spec_default.? (TRACKED T&.) T&) (vstd!pervasive.arbitrary.? (TRACKED T&.) T&)) :pattern ((verismo!tspec.default.SpecDefault.spec_default.? (TRACKED T&.) T&))))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%3.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%3.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT 64)) (I (uClip 64 0)))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%4.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%4.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT 32)) (I (uClip 32 0)))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%5.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%5.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT 16)) (I (uClip 16 0)))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%6.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%6.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ (UINT 8)) (I (uClip 8 0)))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%8.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%8.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ INT) (I 0))))
(assert (fuel_bool_default fuel%verismo!tspec.default.impl&%9.spec_default.))
(assert (=> (fuel_bool fuel%verismo!tspec.default.impl&%9.spec_default.) (= (verismo!tspec.default.SpecDefault.spec_default.? $ NAT) (I 0))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%2.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%2.is_constant_to.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self! vmpl!) (B (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T1&. T1& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)) vmpl!)) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? T2&. T2& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!)) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%3.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%3.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? (GHOST T&.) T& self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? (GHOST T&.) T& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%3.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%3.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? (GHOST T&.) T& self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? (GHOST T&.) T& self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%4.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%4.is_constant.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? (TRACKED T&.) T& self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? (TRACKED T&.) T& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%4.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%4.is_constant_to.) (forall ((T&. Dcr) (T& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? (TRACKED T&.) T& self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? (TRACKED T&.) T& self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%7.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%7.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 16) self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%7.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%7.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 16) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 16) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%9.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%9.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 8) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (UINT 8) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%10.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%10.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ BOOL self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%10.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%10.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ BOOL self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ BOOL self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%11.is_constant.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%11.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ CHAR self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ CHAR self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.isconst.impl&%11.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!tspec.isconst.impl&%11.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ CHAR self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ CHAR self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%2.spec_sub.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%2.spec_sub.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& T1&. T1& $ INT self! rhs!) (I (Sub (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& rhs!))))) :pattern ((verismo!tspec.ops.VSpecSub.spec_sub.? T1&. T1& T1&. T1& $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%5.spec_mul.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%5.spec_mul.) (forall ((T1&. Dcr) (T1& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecMul.spec_mul.? T1&. T1& $ INT T1&. T1& self! rhs!) (verismo!tspec.integer.IntValue.from_int.? T1&. T1& (I (Mul (%I (verismo!tspec.integer.IntValue.as_int.? T1&. T1& self!)) (%I rhs!))))) :pattern ((verismo!tspec.ops.VSpecMul.spec_mul.? T1&. T1& $ INT T1&. T1& self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%16.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%16.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 32) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%17.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%17.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 16) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%18.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%18.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 8) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ INT $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%23.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%23.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 64) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%24.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%24.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 32) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%25.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%25.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 16) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%26.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%26.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 8) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%27.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%27.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT SZ) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ NAT $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%31.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%31.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 64) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%32.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%32.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 32) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%33.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%33.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 16) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%34.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%34.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 8) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%35.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%35.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT SZ) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%36.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%36.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ INT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%37.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%37.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ NAT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 8) $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%39.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%39.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 64) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%40.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%40.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 32) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%41.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%41.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 16) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%42.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%42.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 8) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%43.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%43.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT SZ) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%44.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%44.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ INT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%45.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%45.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ NAT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 16) $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%46.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%46.spec_eq.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 16) self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%47.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%47.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 64) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%48.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%48.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 32) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%49.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%49.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 16) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%50.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%50.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 8) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%51.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%51.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT SZ) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%52.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%52.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ INT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%53.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%53.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ NAT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 32) $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%54.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%54.spec_eq.) (forall ((T&. Dcr) (T& Type) (self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 32) self! rhs!) (B (= (verismo!tspec.integer.IntOrd.ord_int.? T&. T& self!) rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? T&. T& $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%56.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%56.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 32) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%57.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%57.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 16) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%58.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%58.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 8) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%59.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%59.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT SZ) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%60.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%60.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ INT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%61.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%61.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ NAT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT 64) $ NAT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%63.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%63.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 64) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 64) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%64.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%64.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 32) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 32) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%65.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%65.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 16) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 16) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%66.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%66.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 8) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT 8) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%67.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%67.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT SZ) self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ (UINT SZ) self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%68.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%68.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ INT self! rhs!) (B (= self! rhs!))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ (UINT SZ) $ INT self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.integer.impl&%71.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!tspec.integer.impl&%71.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%tuple%0. $ TYPE%tuple%0. self! rhs!) (B true)) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%tuple%0. $ TYPE%tuple%0. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%9.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%9.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (UINT 128)) (I 16))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%14.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%14.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ BOOL) (I 1))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%15.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%15.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ CHAR) (I 1))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%17.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%17.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? (GHOST T&.) T&) (I 0)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? (GHOST T&.) T&))))))
(assert (fuel_bool_default fuel%verismo!tspec.size_s.impl&%18.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!tspec.size_s.impl&%18.spec_size_def.) (forall ((T&. Dcr) (T& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? (TRACKED T&.) T&) (I 0)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? (TRACKED T&.) T&))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%1.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%1.wf.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!) (B (and (%B (verismo!tspec.wellformed.WellFormed.wf.? T1&. T1& (tuple%2./tuple%2/0 (%Poly%tuple%2. self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T2&. T2& (tuple%2./tuple%2/1 (%Poly%tuple%2. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%tuple%2. T1&. T1& T2&. T2&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%2.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%2.wf.) (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%tuple%3. T1&. T1& T2&. T2& T3&. T3&) self!) (B (and (and (%B (verismo!tspec.wellformed.WellFormed.wf.? T1&. T1& (tuple%3./tuple%3/0 (%Poly%tuple%3. self!)))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T2&. T2& (tuple%3./tuple%3/1 (%Poly%tuple%3. self!))))) (%B (verismo!tspec.wellformed.WellFormed.wf.? T3&. T3& (tuple%3./tuple%3/2 (%Poly%tuple%3. self!))))))) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (TYPE%tuple%3. T1&. T1& T2&. T2& T3&. T3&) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%4.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%4.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? (GHOST T&.) T& self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? (GHOST T&.) T& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%5.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%5.wf.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? (TRACKED T&.) T& self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? (TRACKED T&.) T& self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%8.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%8.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 16) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 16) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%10.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%10.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 8) self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ (UINT 8) self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%11.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%11.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ BOOL self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ BOOL self!))))))
(assert (fuel_bool_default fuel%verismo!tspec.wellformed.impl&%12.wf.))
(assert (=> (fuel_bool fuel%verismo!tspec.wellformed.impl&%12.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ CHAR self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ CHAR self!))))))
(assert (fuel_bool_default fuel%verismo!arch.reg.impl&%5.spec_from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.reg.impl&%5.spec_from_int.) (forall ((val! Poly)) (! (= (verismo!arch.reg.impl&%5.spec_from_int.? val!) (ite (< (%I val!) 0) core!option.Option./None (ite (= (%I val!) 0) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./CF)) (ite (= (%I val!) 1) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./R1)) (ite (= (%I val!) 2) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./PF)) (ite (= (%I val!) 3) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./R2)) (ite (= (%I val!) 4) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./AF)) (ite (= (%I val!) 5) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./R3)) (ite (= (%I val!) 6) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./ZF)) (ite (= (%I val!) 7) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./SF)) (ite (= (%I val!) 8) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./TF)) (ite (= (%I val!) 9) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./IF)) (ite (= (%I val!) 10) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./DF)) (ite (= (%I val!) 21) (core!option.Option./Some (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./ID)) core!option.Option./None)))))))))))))) :pattern ((verismo!arch.reg.impl&%5.spec_from_int.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! INT) (has_type (Poly%core!option.Option. (verismo!arch.reg.impl&%5.spec_from_int.? val!)) (TYPE%core!option.Option. $ TYPE%verismo!arch.reg.RflagBit.))) :pattern ((verismo!arch.reg.impl&%5.spec_from_int.? val!)))))
(assert (fuel_bool_default fuel%verismo!arch.reg.impl&%3.from_int.))
(assert (=> (fuel_bool fuel%verismo!arch.reg.impl&%3.from_int.) (forall ((val! Poly)) (! (= (verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.reg.RflagBit. val!) (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!arch.reg.impl&%5.spec_from_int.? val!))))) :pattern ((verismo!tspec.integer.IntValue.from_int.? $ TYPE%verismo!arch.reg.RflagBit. val!))))))
(assert (fuel_bool_default fuel%verismo!arch.reg.impl&%4.ord_int.))
(assert (=> (fuel_bool fuel%verismo!arch.reg.impl&%4.ord_int.) (forall ((self! Poly)) (! (= (verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.reg.RflagBit. self!) (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. self!)) :pattern ((verismo!tspec.integer.IntOrd.ord_int.? $ TYPE%verismo!arch.reg.RflagBit. self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.sectype.impl&%6.vspec_cast_to.) (forall ((T&. Dcr) (T& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (vstd!seq.Seq.empty.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%3.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%25 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!primitives_e.seq.impl&%5.vspec_cast_to.) (forall ((self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (let ((seq$ (%Poly%vstd!seq.Seq<u8.>. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (UINT 8)) self!)))) (vstd!seq.Seq.new.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) $ (TYPE%fun%1. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (vstd!seq.Seq.len.? $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$))) (Poly%fun%1. (mk_fun (%%lambda%%25 $ (UINT 8) (Poly%vstd!seq.Seq<u8.>. seq$) $ (UINT 8) $ TYPE%tuple%0.)))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%3.spec_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%3.spec_to_addr.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (UINT 64) $ (UINT 64) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT 64) (I (Mul (%I self!) (uClip 64 verismo!arch.addr_s.def_s.PAGE_SIZE.?))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (UINT 64) $ (UINT 64) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%3.paget_to_int.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%3.paget_to_int.) (forall ((v! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT 64) $ (UINT 64) v!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT v!)) :pattern ((verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT 64) $ (UINT 64) v!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%3.spec_ensures_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%3.spec_ensures_to_addr.) (forall ((self! Poly) (ret! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (UINT 64) $ (UINT 64) self! ret!) (B (and (and (%B (B true)) (=> (%B (B true)) (%B (B true)))) (= (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT 64) $ (UINT 64) ret!)) (Mul (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT 64) $ (UINT 64) self!)) 4096))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (UINT 64) $ (UINT 64) self! ret!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%3.spec_valid_pn_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%3.spec_valid_pn_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (UINT 64) $ (UINT 64) self! size!) (B (let ((start$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT self!)))) (and (%B (verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? $ INT (I start$) size!)) (%B (B true)))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (UINT 64) $ (UINT 64) self! size!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%5.spec_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%5.spec_to_addr.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (UINT SZ) $ (UINT SZ) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ INT $ (UINT SZ) (I (Mul (%I self!) (uClip SZ verismo!arch.addr_s.def_s.PAGE_SIZE.?))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (UINT SZ) $ (UINT SZ) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%5.paget_to_int.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%5.paget_to_int.) (forall ((v! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT SZ) $ (UINT SZ) v!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT v!)) :pattern ((verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT SZ) $ (UINT SZ) v!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%5.spec_ensures_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%5.spec_ensures_to_addr.) (forall ((self! Poly) (ret! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (UINT SZ) $ (UINT SZ) self! ret!) (B (and (and (%B (B true)) (=> (%B (B true)) (%B (B true)))) (= (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT SZ) $ (UINT SZ) ret!)) (Mul (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (UINT SZ) $ (UINT SZ) self!)) 4096))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (UINT SZ) $ (UINT SZ) self! ret!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%7.spec_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%7.spec_to_addr.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.) $ INT $ TYPE%tuple%0. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT $ TYPE%tuple%0. (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT SZ) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT SZ) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT SZ) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?)))))))))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%7.paget_to_int.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%7.paget_to_int.) (forall ((v! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) v!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (UINT SZ) $ TYPE%tuple%0. v!))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) v!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%7.spec_ensures_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%7.spec_ensures_to_addr.) (forall ((self! Poly) (ret! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self! ret!) (B (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT SZ) ret!) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) ret!)))) (= (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) ret!)) (Mul (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self!)) 4096))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) self! ret!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 64)))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%9.spec_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%9.spec_to_addr.) (forall ((self! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self!) (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT $ TYPE%tuple%0.) $ INT $ TYPE%tuple%0. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ INT $ TYPE%tuple%0. (verismo!tspec.ops.VSpecMul.spec_mul.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT $ TYPE%tuple%0.) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. self!) (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. (verismo!tspec.security.sectype.impl&%9.spec_new.? $ (UINT 64) $ TYPE%tuple%0. (Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.impl&%16.constant.? $ (UINT 64) $ TYPE%tuple%0. (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (UINT 64) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?)))))))))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%9.paget_to_int.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%9.paget_to_int.) (forall ((v! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) v!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. v!))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) v!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%9.spec_ensures_to_addr.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%9.spec_ensures_to_addr.) (forall ((self! Poly) (ret! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! ret!) (B (and (and (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) ret!) (=> (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self!)) (%B (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) ret!)))) (= (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) ret!)) (Mul (%I (verismo!addr_e.addr_interface.PageTrait.paget_to_int.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self!)) 4096))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_ensures_to_addr.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! ret!))))))
(assert (fuel_bool_default fuel%verismo!addr_e.addr_interface.impl&%9.spec_valid_pn_with.))
(assert (=> (fuel_bool fuel%verismo!addr_e.addr_interface.impl&%9.spec_valid_pn_with.) (forall ((self! Poly) (size! Poly)) (! (= (verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! size!) (B (let ((start$ (%I (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT 64) $ INT (verismo!tspec.security.sectype.SpecSecType./SpecSecType/val (%Poly%verismo!tspec.security.sectype.SpecSecType. (verismo!tspec.security.sectype.SecMemType.view.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (UINT 64) $ TYPE%tuple%0. self!))))))) (and (%B (verismo!addr_e.addr_interface.SpecPageTrait.spec_valid_pn_with.? $ INT (I start$) size!)) (verismo!tspec.security.sectype.impl&%20.wf.? $ (UINT 64) self!))))) :pattern ((verismo!addr_e.addr_interface.PageTrait.spec_valid_pn_with.? $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) self! size!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%11.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%11.spec_size_def.) (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ TYPE%verismo!pgtable_e.def.PTE.) (I 8))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%12.spec_eq.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%12.spec_eq.) (forall ((self! Poly) (rhs! Poly)) (! (= (verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!pgtable_e.def.PTE. $ TYPE%verismo!pgtable_e.def.PTE. self! rhs!) (B (= (I (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. self!))) (I (verismo!pgtable_e.def.PTE./PTE/value (%Poly%verismo!pgtable_e.def.PTE. rhs!)))))) :pattern ((verismo!tspec.ops.VSpecEq.spec_eq.? $ TYPE%verismo!pgtable_e.def.PTE. $ TYPE%verismo!pgtable_e.def.PTE. self! rhs!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%13.is_constant.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%13.is_constant.) (forall ((self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!pgtable_e.def.PTE. self!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ TYPE%verismo!pgtable_e.def.PTE. self!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%13.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%13.is_constant_to.) (forall ((self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!pgtable_e.def.PTE. self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ TYPE%verismo!pgtable_e.def.PTE. self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%14.wf.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%14.wf.) (forall ((self! Poly)) (! (= (verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!pgtable_e.def.PTE. self!) (B true)) :pattern ((verismo!tspec.wellformed.WellFormed.wf.? $ TYPE%verismo!pgtable_e.def.PTE. self!))))))
(assert (fuel_bool_default fuel%verismo!pgtable_e.def.impl&%16.spec_new.))
(assert (=> (fuel_bool fuel%verismo!pgtable_e.def.impl&%16.spec_new.) (forall ((val! Poly)) (! (= (verismo!pgtable_e.def.impl&%16.spec_new.? val!) (verismo!pgtable_e.def.PTE./PTE (%I val!))) :pattern ((verismo!pgtable_e.def.impl&%16.spec_new.? val!))))))
(assert (forall ((val! Poly)) (! (=> (has_type val! (UINT 64)) (has_type (Poly%verismo!pgtable_e.def.PTE. (verismo!pgtable_e.def.impl&%16.spec_new.? val!)) TYPE%verismo!pgtable_e.def.PTE.)) :pattern ((verismo!pgtable_e.def.impl&%16.spec_new.? val!)))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%8.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%8.is_constant_to.) (forall ((V&. Dcr) (V& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) self! vmpl!) (B true)) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) self! vmpl!))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&) (tr_bound%verismo!tspec.wellformed.WellFormed. V&. V&) (tr_bound%verismo!tspec.size_s.SpecSize. V&. V&) (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%4.vspec_cast_to.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%4.vspec_cast_to.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!) (verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (UINT SZ) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (I (verismo!ptr.def_s.SnpPPtr./SnpPPtr/uptr (%Poly%verismo!ptr.def_s.SnpPPtr. self!))))) :pattern ((verismo!tspec.cast.VTypeCast.vspec_cast_to.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.def_s.impl&%5.spec_size_def.))
(assert (=> (fuel_bool fuel%verismo!ptr.def_s.impl&%5.spec_size_def.) (forall ((V&. Dcr) (V& Type)) (! (= (verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)) (I 8)) :pattern ((verismo!tspec.size_s.SpecSize.spec_size_def.? $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&)))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_s.impl&%5.is_constant_to.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_s.impl&%5.is_constant_to.) (forall ((V&. Dcr) (V& Type) (self! Poly) (vmpl! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self! vmpl!) (B (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? V&. V& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))))) vmpl!))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self! vmpl!))))))
(assert (fuel_bool_default fuel%verismo!ptr.ptr_s.impl&%5.is_constant.))
(assert (=> (fuel_bool fuel%verismo!ptr.ptr_s.impl&%5.is_constant.) (forall ((V&. Dcr) (V& Type) (self! Poly)) (! (= (verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!) (B (and (%B (B (is-core!option.Option./Some_ (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. self!))))))) (%B (verismo!tspec.isconst.IsConstant.is_constant.? V&. V& (core!option.Option./Some/0 (%Poly%core!option.Option. (Poly%core!option.Option. (verismo!ptr.def_s.SnpPointsToData./SnpPointsToData/value (%Poly%verismo!ptr.def_s.SnpPointsToData. self!)))))))))) :pattern ((verismo!tspec.isconst.IsConstant.is_constant.? $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) self!))))))
(assert (fuel_bool_default fuel%verismo!ptr.raw_ptr_s.impl&%8.hw_snp.))
(assert (=> (fuel_bool fuel%verismo!ptr.raw_ptr_s.impl&%8.hw_snp.) (forall ((self! Poly)) (! (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!) (Poly%verismo!ptr.snp.snp_u.SwSnpMemAttr. (verismo!ptr.snp.snp_u.SnpMemAttr./SnpMemAttr/hw (%Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))))) :pattern ((verismo!ptr.snp.snp_u.SnpMemAttrTrait.hw_snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. self!))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 8)))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 8)))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&) :pattern ((tr_bound%vstd!std_specs.option.OptionAdditionalFns. $ (TYPE%core!option.Option. T&. T&) T&. T&)))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ CHAR $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ CHAR))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 8)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 16)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 32)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 8)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 16)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 32)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 64)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 8)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 16)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 32)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 64)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 128) $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT 128)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ INT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ BOOL))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ BOOL $ NAT))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ CHAR $ (UINT 8)))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%tuple%0. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (GHOST T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ TYPE%tuple%0.))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. (GHOST T&.) T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. (TRACKED T&.) T&)))))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT 64)))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT 32)))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT 16)))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT 8)))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ INT))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ NAT))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T1&. T1&) (tr_bound%verismo!tspec.isconst.IsConstant. T2&. T2&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. (GHOST T&.) T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.isconst.IsConstant. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. (TRACKED T&.) T&)))))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 32)))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ (UINT 16)))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ BOOL))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ CHAR))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ BOOL $ BOOL))
(assert (tr_bound%verismo!tspec.range_set.VRange. $ (TYPE%tuple%2. $ INT $ NAT)))
(assert (forall ((T&. Dcr) (T& Type) (M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.security.sectype.SecMemType. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M&) :pattern ((tr_bound%verismo!tspec.security.sectype.SecMemType. $ (TYPE%verismo!tspec.security.sectype.SecType. T&. T& M&. M&) T&. T& M&. M&)))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T1&. T1& T2&. T2&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. T2&. T2& M&. M&))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (M&. Dcr) (M& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T1&. T1& T2&. T2&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. T1&. T1& M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. T2&. T2& M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.default.SpecDefault. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 8) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%vstd!seq.Seq. $ (UINT 8)))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT SZ) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (TYPE%vstd!seq.Seq. $ (UINT 8)) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ NAT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ INT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ NAT)))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ NAT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT SZ))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 64))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 32))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 32) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 16))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 16) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (UINT 8))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ INT $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 8) M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ INT M&. M&))))))
(assert (forall ((M&. Dcr) (M& Type)) (! (tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&) $ (TYPE%verismo!tspec.security.sectype.SecType. $ INT M&. M&))))))
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecAdd. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecAdd. T1&. T1& $ INT T1&. T1&)))))
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& $ INT T1&. T1&)))))
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& T1&. T1& $ INT)) :pattern ((tr_bound%verismo!tspec.ops.VSpecSub. T1&. T1& T1&. T1& $ INT)))))
(assert (forall ((T1&. Dcr) (T1& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntValue. T1&. T1&) (tr_bound%verismo!tspec.ops.VSpecMul. T1&. T1& $ INT T1&. T1&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecMul. T1&. T1& $ INT T1&. T1&)))))
(assert (forall ((T&. Dcr) (T& Type) (T2&. Dcr) (T2& Type)) (! (=> (and (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.integer.IntOrd. T2&. T2&)) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& T2&. T2&)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& T2&. T2&)))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ INT $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ INT $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ INT $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ INT $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ INT $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ INT $ INT))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ INT $ NAT))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ INT)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ INT)))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ NAT $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ NAT $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ NAT $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ NAT $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ NAT $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ NAT $ INT))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ NAT $ NAT))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ NAT)) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ NAT)))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 8) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 8) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 8) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 8) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 8) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 8) $ INT))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 8) $ NAT))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 8))) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 8))))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 16) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 16) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 16) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 16) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 16) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 16) $ INT))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 16) $ NAT))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 16))) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 16))))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 32) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 32) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 32) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 32) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 32) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 32) $ INT))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 32) $ NAT))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 32))) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 32))))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 64) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 64) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 64) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 64) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 64) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 64) $ INT))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT 64) $ NAT))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 64))) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT 64))))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT SZ) $ (UINT 64)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT SZ) $ (UINT 32)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT SZ) $ (UINT 16)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT SZ) $ (UINT 8)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT SZ) $ (UINT SZ)))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT SZ) $ INT))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ (UINT SZ) $ NAT))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.integer.IntOrd. T&. T&) (tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT SZ))) :pattern ((tr_bound%verismo!tspec.ops.VSpecEq. T&. T& $ (UINT SZ))))))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ TYPE%tuple%0. $ TYPE%tuple%0.))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ (UINT 128)))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ BOOL))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ CHAR))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. (GHOST T&.) T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. (TRACKED T&.) T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%core!option.Option. T&. T&)) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%core!option.Option. T&. T&))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type)) (! (=> (and (tr_bound%verismo!tspec.wellformed.WellFormed. T1&. T1&) (tr_bound%verismo!tspec.wellformed.WellFormed. T2&. T2&)) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%tuple%2. T1&. T1& T2&. T2&))))))
(assert (forall ((T1&. Dcr) (T1& Type) (T2&. Dcr) (T2& Type) (T3&. Dcr) (T3& Type)) (! (=> (and (tr_bound%verismo!tspec.wellformed.WellFormed. T1&. T1&) (tr_bound%verismo!tspec.wellformed.WellFormed. T2&. T2&) (tr_bound%verismo!tspec.wellformed.WellFormed. T3&. T3&)) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%tuple%3. T1&. T1& T2&. T2& T3&. T3&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%tuple%3. T1&. T1& T2&. T2& T3&. T3&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. (GHOST T&.) T&) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. (GHOST T&.) T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.wellformed.WellFormed. (TRACKED T&.) T&) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. (TRACKED T&.) T&)))))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 32)))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ (UINT 16)))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ BOOL))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ CHAR))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!arch.addr_s.def_s.GuestVir. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!arch.addr_s.def_s.GuestVir.))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!arch.addr_s.def_s.GuestPhy.))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!arch.addr_s.def_s.SysPhy. $ (TYPE%vstd!seq.Seq. $ (UINT 8))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!arch.addr_s.def_s.SysPhy. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!arch.addr_s.def_s.SysPhy.))
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.addr_s.def_s.PageSize.))
(assert (tr_bound%verismo!tspec.integer.IntOrd. $ TYPE%verismo!arch.addr_s.def_s.PageSize.))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!arch.addr_s.def_s.SpecPage. T&. T&))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&)) :pattern ((tr_bound%verismo!tspec.integer.IntOrd. $ (TYPE%verismo!arch.addr_s.def_s.SpecAddr. T&. T&))))))
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.entities.VMPL.))
(assert (tr_bound%verismo!tspec.integer.IntValue. $ (TYPE%vstd!set.Set. $ TYPE%verismo!arch.rmp.perm_s.Perm.)))
(assert (tr_bound%verismo!tspec.integer.IntValue. $ TYPE%verismo!arch.reg.RflagBit.))
(assert (tr_bound%verismo!tspec.integer.IntOrd. $ TYPE%verismo!arch.reg.RflagBit.))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (tr_bound%verismo!primitives_e.sectype.FromSecSeq. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)) :pattern ((tr_bound%verismo!primitives_e.sectype.FromSecSeq. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) T&. T&)))))
(assert (forall ((T&. Dcr) (T& Type)) (! (tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. (TRACKED T&.) T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (tr_bound%verismo!primitives_e.sectype.ToSecSeq. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%vstd!seq.Seq. T&. T&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 16) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 32) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ (UINT 64) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!addr_e.addr_interface.SpecPageTrait. $ INT))
(assert (tr_bound%verismo!addr_e.addr_interface.SpecAddrTrait. $ INT))
(assert (tr_bound%verismo!addr_e.addr_interface.PageTrait. $ (UINT 64) $ (UINT 64)))
(assert (tr_bound%verismo!addr_e.addr_interface.PageTrait. $ (UINT SZ) $ (UINT SZ)))
(assert (tr_bound%verismo!addr_e.addr_interface.PageTrait. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT SZ) $ TYPE%tuple%0.)))
(assert (tr_bound%verismo!addr_e.addr_interface.PageTrait. $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.) $ (TYPE%verismo!tspec.security.sectype.SecType. $ (UINT 64) $ TYPE%tuple%0.)))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ TYPE%verismo!boot.idt.def.Idtr.))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!boot.idt.def.Idtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!boot.idt.def.Idtr.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!boot.idt.def.Idtr.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!boot.idt.def.Idtr.))
(declare-fun req%verismo!snp.ghcb.proto_e.vc_terminate. (Int verismo!registers.trackedcore.snpcore.SnpCore.) Bool)
(declare-const %%global_location_label%%68 Bool)
(assert (forall ((reason_code! Int) (pre%snpcore! verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (req%verismo!snp.ghcb.proto_e.vc_terminate. reason_code! pre%snpcore!) (=> %%global_location_label%%68 (verismo!registers.trackedcore.snpcore.impl&%3.inv_reg_cpu.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. pre%snpcore!)))) :pattern ((req%verismo!snp.ghcb.proto_e.vc_terminate. reason_code! pre%snpcore!)))))
(declare-fun ens%verismo!snp.ghcb.proto_e.vc_terminate. (Int verismo!registers.trackedcore.snpcore.SnpCore. verismo!registers.trackedcore.snpcore.SnpCore. tuple%0.) Bool)
(assert (forall ((reason_code! Int) (pre%snpcore! verismo!registers.trackedcore.snpcore.SnpCore.) (snpcore! verismo!registers.trackedcore.snpcore.SnpCore.) (ret! tuple%0.)) (! (= (ens%verismo!snp.ghcb.proto_e.vc_terminate. reason_code! pre%snpcore! snpcore! ret!) false) :pattern ((ens%verismo!snp.ghcb.proto_e.vc_terminate. reason_code! pre%snpcore! snpcore! ret!)))))
(declare-fun req%verismo!ptr.snp.rmp.rmp_e.rmpadjmem. (Int Int verismo!ptr.snp.snp_u.RmpAttr. verismo!registers.trackedcore.snpcore.SnpCore. vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.) Bool)
(declare-const %%global_location_label%%69 Bool)
(declare-const %%global_location_label%%70 Bool)
(declare-const %%global_location_label%%71 Bool)
(declare-const %%global_location_label%%72 Bool)
(assert (forall ((start_page! Int) (npages! Int) (attr! verismo!ptr.snp.snp_u.RmpAttr.) (pre%snpcore! verismo!registers.trackedcore.snpcore.SnpCore.) (pre%perms! vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)) (! (= (req%verismo!ptr.snp.rmp.rmp_e.rmpadjmem. start_page! npages! attr! pre%snpcore! pre%perms!) (and (=> %%global_location_label%%69 (not (verismo!ptr.snp.snp_u.impl&%25.is_vmsa.? (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%16.view.? (Poly%verismo!ptr.snp.snp_u.RmpAttr. attr!)))))) (=> %%global_location_label%%70 (verismo!ptr.snp.rmp.rmp_e.spec_rmpadjmem_requires.? (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. pre%perms!) (I start_page!) (I npages!) (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%16.view.? (Poly%verismo!ptr.snp.snp_u.RmpAttr. attr!))))) (=> %%global_location_label%%71 (verismo!registers.trackedcore.snpcore.impl&%3.inv.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. pre%snpcore!))) (=> %%global_location_label%%72 (= (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. pre%snpcore!)))))))) 0)))) :pattern ((req%verismo!ptr.snp.rmp.rmp_e.rmpadjmem. start_page! npages! attr! pre%snpcore! pre%perms!)))))
(declare-fun ens%verismo!ptr.snp.rmp.rmp_e.rmpadjmem. (Int Int verismo!ptr.snp.snp_u.RmpAttr. verismo!registers.trackedcore.snpcore.SnpCore. verismo!registers.trackedcore.snpcore.SnpCore. vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.) Bool)
(assert (forall ((start_page! Int) (npages! Int) (attr! verismo!ptr.snp.snp_u.RmpAttr.) (pre%snpcore! verismo!registers.trackedcore.snpcore.SnpCore.) (snpcore! verismo!registers.trackedcore.snpcore.SnpCore.) (pre%perms! vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.) (perms! vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)) (! (= (ens%verismo!ptr.snp.rmp.rmp_e.rmpadjmem. start_page! npages! attr! pre%snpcore! snpcore! pre%perms! perms!) (and (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (verismo!ptr.snp.rmp.rmp_e.spec_ensures_rmpadjmem.? (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. pre%perms!) (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!) (I start_page!) (I npages!) (Poly%verismo!ptr.snp.snp_u.RmpAttrSpec. (verismo!ptr.snp.snp_u.impl&%16.view.? (Poly%verismo!ptr.snp.snp_u.RmpAttr. attr!)))) (= pre%snpcore! snpcore!))) :pattern ((ens%verismo!ptr.snp.rmp.rmp_e.rmpadjmem. start_page! npages! attr! pre%snpcore! snpcore! pre%perms! perms!)))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!pgtable_e.def.PTE.))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ TYPE%verismo!pgtable_e.def.PTE. $ TYPE%verismo!pgtable_e.def.PTE.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!pgtable_e.def.PTE.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!pgtable_e.def.PTE.))
(assert (forall ((V&. Dcr) (V& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&) (tr_bound%verismo!tspec.wellformed.WellFormed. V&. V&) (tr_bound%verismo!tspec.size_s.SpecSize. V&. V&) (tr_bound%verismo!tspec.cast.VTypeCast. V&. V& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&) $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&) (tr_bound%verismo!tspec.wellformed.WellFormed. V&. V&) (tr_bound%verismo!tspec.size_s.SpecSize. V&. V&) (tr_bound%verismo!tspec.size_s.SpecSize. V&. V&)) (tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))) :pattern ((tr_bound%verismo!tspec.size_s.SpecSize. $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&) (tr_bound%verismo!tspec.wellformed.WellFormed. V&. V&) (tr_bound%verismo!tspec.size_s.SpecSize. V&. V&) (tr_bound%verismo!tspec.wellformed.WellFormed. V&. V&)) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!ptr.def_s.SnpPPtr. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&) (tr_bound%verismo!tspec.wellformed.WellFormed. V&. V&) (tr_bound%verismo!tspec.size_s.SpecSize. V&. V&)) (tr_bound%verismo!ptr.snp.snp_u.SnpMemAttrTrait. $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))) :pattern ((tr_bound%verismo!ptr.snp.snp_u.SnpMemAttrTrait. $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&) (tr_bound%verismo!tspec.wellformed.WellFormed. V&. V&) (tr_bound%verismo!tspec.size_s.SpecSize. V&. V&) (tr_bound%verismo!tspec.cast.VTypeCast. V&. V& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&) $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.)))))
(assert (forall ((V&. Dcr) (V& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&) (tr_bound%verismo!tspec.wellformed.WellFormed. V&. V&) (tr_bound%verismo!tspec.size_s.SpecSize. V&. V&)) (tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))) :pattern ((tr_bound%verismo!tspec.isconst.IsConstant. $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))))))
(assert (forall ((V&. Dcr) (V& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. V&. V&) (tr_bound%verismo!tspec.wellformed.WellFormed. V&. V&) (tr_bound%verismo!tspec.size_s.SpecSize. V&. V&)) (tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))) :pattern ((tr_bound%verismo!tspec.wellformed.WellFormed. $ (TYPE%verismo!ptr.def_s.SnpPointsToData. V&. V&))))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!ptr.snp.snp_u.RmpAttr.))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ TYPE%verismo!ptr.snp.snp_u.RmpAttr. $ TYPE%verismo!ptr.snp.snp_u.RmpAttr.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!ptr.snp.snp_u.RmpAttr.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!ptr.snp.snp_u.RmpAttr.))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ TYPE%verismo!ptr.snp.snp_u.PTAttr.))
(assert (tr_bound%verismo!ptr.snp.snp_u.SnpMemAttrTrait. $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ TYPE%verismo!ptr.snp.snp_u.SwSnpMemAttr.))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr. $ TYPE%verismo!ptr.snp.snp_u.SnpMemAttr.))
(assert (forall ((T&. Dcr) (T& Type)) (! (=> (and (tr_bound%verismo!tspec.isconst.IsConstant. T&. T&) (tr_bound%verismo!tspec.wellformed.WellFormed. T&. T&) (tr_bound%verismo!tspec.size_s.SpecSize. T&. T&) (tr_bound%verismo!tspec.cast.VTypeCast. T&. T& $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)))) (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. $ (TYPE%verismo!ptr.def_s.SnpPointsToData. T&. T&))) :pattern ((tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. $ (TYPE%verismo!ptr.def_s.SnpPointsToData. T&. T&))))))
(assert (tr_bound%verismo!ptr.snp.snp_u.SnpMemAttrTrait. $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes.))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr0_7.))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!snp.cpu.gdt.DescriptorAttr8_11.))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!snp.cpu.gdt.Descriptor.))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ TYPE%verismo!snp.cpu.gdt.Descriptor. $ TYPE%verismo!snp.cpu.gdt.Descriptor.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!snp.cpu.gdt.Descriptor.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!snp.cpu.gdt.Descriptor.))
(assert (tr_bound%verismo!tspec.default.SpecDefault. $ TYPE%verismo!snp.cpu.gdt.Gdtr.))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!snp.cpu.gdt.Gdtr. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!snp.cpu.gdt.Gdtr.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!snp.cpu.gdt.Gdtr.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!snp.cpu.gdt.Gdtr.))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!snp.cpu.vmsa.SevFeatures.))
(assert (tr_bound%verismo!tspec.ops.VSpecEq. $ TYPE%verismo!snp.cpu.vmsa.SevFeatures. $ TYPE%verismo!snp.cpu.vmsa.SevFeatures.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!snp.cpu.vmsa.SevFeatures.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!snp.cpu.vmsa.SevFeatures.))
(assert (tr_bound%verismo!tspec.cast.VTypeCast. $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister. $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.))))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.))
(assert (tr_bound%verismo!tspec.wellformed.WellFormed. $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.))
(assert (tr_bound%verismo!tspec.isconst.IsConstant. $ TYPE%verismo!snp.cpu.vmsa.VmsaSegmentRegister.))
(assert (tr_bound%verismo!tspec.size_s.SpecSize. $ TYPE%verismo!snp.cpu.vmsa.Vmsa.))
(declare-fun req%verismo!tspec_e.math.bits_e.bit_check. (Int Int) Bool)
(declare-const %%global_location_label%%73 Bool)
(assert (forall ((val! Int) (bit! Int)) (! (= (req%verismo!tspec_e.math.bits_e.bit_check. val! bit!) (=> %%global_location_label%%73 (< bit! 64))) :pattern ((req%verismo!tspec_e.math.bits_e.bit_check. val! bit!)))))
(declare-fun ens%verismo!tspec_e.math.bits_e.bit_check. (Int Int Bool) Bool)
(assert (forall ((val! Int) (bit! Int) (ret! Bool)) (! (= (ens%verismo!tspec_e.math.bits_e.bit_check. val! bit! ret!) (= ret! (= (uClip 64 (uintshl 64 (I 1) (I (%I (I (uClip 64 bit!)))))) (uClip 64 (uintand 64 (I (%I (I (uClip 64 val!)))) (I (uClip 64 (uintshl 64 (I 1) (I (%I (I (uClip 64 bit!)))))))))))) :pattern ((ens%verismo!tspec_e.math.bits_e.bit_check. val! bit! ret!)))))
(declare-fun ens%verismo!arch.reg.impl&%5.as_u64. (verismo!arch.reg.RflagBit. Int) Bool)
(assert (forall ((self! verismo!arch.reg.RflagBit.) (ret! Int)) (! (= (ens%verismo!arch.reg.impl&%5.as_u64. self! ret!) (and (uInv 64 ret!) (= ret! (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. (Poly%verismo!arch.reg.RflagBit. self!)))))) :pattern ((ens%verismo!arch.reg.impl&%5.as_u64. self! ret!)))))
(declare-fun ens%verismo!arch.rmp.def_s.impl&%6.proof_eq. (verismo!arch.rmp.def_s.RmpEntry. verismo!arch.rmp.def_s.RmpEntry.) Bool)
(assert (forall ((self! verismo!arch.rmp.def_s.RmpEntry.) (r! verismo!arch.rmp.def_s.RmpEntry.)) (! (= (ens%verismo!arch.rmp.def_s.impl&%6.proof_eq. self! r!) (= (= (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. self!)) (verismo!arch.rmp.access_u.impl&%0.view.? (Poly%verismo!arch.rmp.def_s.RmpEntry. r!))) (= self! r!))) :pattern ((ens%verismo!arch.rmp.def_s.impl&%6.proof_eq. self! r!)))))
(declare-fun ens%verismo!ptr.snp.snp_s.impl&%1.reveal_use_rflags. (Int) Bool)
(assert (forall ((no%param Int)) (! (= (ens%verismo!ptr.snp.snp_s.impl&%1.reveal_use_rflags. no%param) (forall ((rflags$ Poly)) (! (=> (has_type rflags$ (UINT 64)) (not (= (uClip 64 (uintor 64 (I (%I rflags$)) (I (uClip 64 (uintshl 64 (I 1) (I (%I (I (uClip 64 (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./CF)))))))))))) 0))) :pattern ((uClip 64 (uintor 64 (I (%I rflags$)) (I (uClip 64 (uintshl 64 (I 1) (I (%I (I (uClip 64 (%I (verismo!tspec.integer.IntValue.as_int.? $ TYPE%verismo!arch.reg.RflagBit. (Poly%verismo!arch.reg.RflagBit. verismo!arch.reg.RflagBit./CF)))))))))))))))) :pattern ((ens%verismo!ptr.snp.snp_s.impl&%1.reveal_use_rflags. no%param)))))
(declare-fun req%verismo!ptr.raw_ptr_s.impl&%7.tracked_join. (verismo!ptr.def_s.SnpPointsToRaw. verismo!ptr.def_s.SnpPointsToRaw.) Bool)
(declare-const %%global_location_label%%74 Bool)
(declare-const %%global_location_label%%75 Bool)
(declare-const %%global_location_label%%76 Bool)
(declare-const %%global_location_label%%77 Bool)
(assert (forall ((self! verismo!ptr.def_s.SnpPointsToRaw.) (other! verismo!ptr.def_s.SnpPointsToRaw.)) (! (= (req%verismo!ptr.raw_ptr_s.impl&%7.tracked_join. self! other!) (and (=> %%global_location_label%%74 (= (I (Add (%I (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))))) (%I (tuple%2./tuple%2/1 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))))))) (tuple%2./tuple%2/0 (%Poly%tuple%2. (Poly%tuple%2. (verismo!ptr.raw_ptr_s.impl&%5.range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. other!))))))))) (=> %%global_location_label%%75 (= (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))) (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. other!)))))) (=> %%global_location_label%%76 (verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))))) (=> %%global_location_label%%77 (verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. other!)))))))))) :pattern ((req%verismo!ptr.raw_ptr_s.impl&%7.tracked_join. self! other!)))))
(declare-fun ens%verismo!ptr.raw_ptr_s.impl&%7.tracked_join. (verismo!ptr.def_s.SnpPointsToRaw. verismo!ptr.def_s.SnpPointsToRaw. verismo!ptr.def_s.SnpPointsToRaw.) Bool)
(assert (forall ((self! verismo!ptr.def_s.SnpPointsToRaw.) (other! verismo!ptr.def_s.SnpPointsToRaw.) (res! verismo!ptr.def_s.SnpPointsToRaw.)) (! (= (ens%verismo!ptr.raw_ptr_s.impl&%7.tracked_join. self! other! res!) (and (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. res!))))) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/pptr (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))) (= (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. res!))))) (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))))) (= (verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. res!)))) (nClip (Add (verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!)))) (verismo!ptr.raw_ptr_s.impl&%5.size.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. other!))))))) (verismo!ptr.snp.snp_u.impl&%35.wf.? (Poly%verismo!ptr.snp.snp_u.SnpMemAttr. (verismo!ptr.raw_ptr_s.SnpPointsToBytes./SnpPointsToBytes/snp (%Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. res!))))))) (ext_eq true (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. res!))))) (vstd!seq.Seq.add.? $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. other!))))))) (= (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (I 1))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. other!))))) (I 1)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. res!))))) (I 1)))) (= (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (I 2))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. other!))))) (I 2)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. res!))))) (I 2)))) (= (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (I 3))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. other!))))) (I 3)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. res!))))) (I 3)))) (= (and (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. self!))))) (I 4))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. other!))))) (I 4)))) (%B (verismo!tspec.isconst.IsConstant.is_constant_to.? $ (TYPE%vstd!seq.Seq. $ (TYPE%verismo!tspec.security.sectype.SpecSecType. $ (UINT 8) $ TYPE%tuple%0.)) (Poly%vstd!seq.Seq<verismo!tspec.security.sectype.SpecSecType<u8./tuple%0.>.>. (verismo!ptr.raw_ptr_s.impl&%5.bytes.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. res!))))) (I 4)))))) :pattern ((ens%verismo!ptr.raw_ptr_s.impl&%7.tracked_join. self! other! res!)))))
(declare-fun req%verismo!ptr.snp.rmp.rmp_e.pvalmem. (Int Int Bool verismo!ptr.def_s.SnpPointsToRaw. verismo!registers.trackedcore.snpcore.SnpCore.) Bool)
(declare-const %%global_location_label%%78 Bool)
(declare-const %%global_location_label%%79 Bool)
(declare-const %%global_location_label%%80 Bool)
(declare-const %%global_location_label%%81 Bool)
(declare-const %%global_location_label%%82 Bool)
(declare-const %%global_location_label%%83 Bool)
(assert (forall ((start! Int) (end! Int) (val! Bool) (perm! verismo!ptr.def_s.SnpPointsToRaw.) (pre%snpcore! verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (req%verismo!ptr.snp.rmp.rmp_e.pvalmem. start! end! val! perm! pre%snpcore!) (and (=> %%global_location_label%%78 (verismo!ptr.snp.rmp.rmp_e.spec_perm_requires_pvalidate.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. perm!) (I start!) (I (nClip (Sub end! start!))) (B val!))) (=> %%global_location_label%%79 (= (EucMod end! 4096) 0)) (=> %%global_location_label%%80 (= (EucMod start! 4096) 0)) (=> %%global_location_label%%81 (< start! end!)) (=> %%global_location_label%%82 (verismo!registers.trackedcore.snpcore.impl&%3.inv.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. pre%snpcore!))) (=> %%global_location_label%%83 (= (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. pre%snpcore!)))))))) 0)))) :pattern ((req%verismo!ptr.snp.rmp.rmp_e.pvalmem. start! end! val! perm! pre%snpcore!)))))
(declare-fun ens%verismo!ptr.snp.rmp.rmp_e.pvalmem. (Int Int Bool verismo!ptr.def_s.SnpPointsToRaw. verismo!registers.trackedcore.snpcore.SnpCore. verismo!registers.trackedcore.snpcore.SnpCore. verismo!ptr.def_s.SnpPointsToRaw.) Bool)
(assert (forall ((start! Int) (end! Int) (val! Bool) (perm! verismo!ptr.def_s.SnpPointsToRaw.) (pre%snpcore! verismo!registers.trackedcore.snpcore.SnpCore.) (snpcore! verismo!registers.trackedcore.snpcore.SnpCore.) (ret! verismo!ptr.def_s.SnpPointsToRaw.)) (! (= (ens%verismo!ptr.snp.rmp.rmp_e.pvalmem. start! end! val! perm! pre%snpcore! snpcore! ret!) (and (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (verismo!ptr.raw_ptr_s.impl&%5.snp_wf_range.? (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. ret!))) (Poly%tuple%2. (tuple%2./tuple%2 (I start!) (I (nClip (Sub end! start!)))))) (verismo!ptr.snp.snp_s.impl&%0.ensures_pvalidated.? (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. ret!)))) (verismo!ptr.snp.snp_u.SnpMemAttrTrait.snp.? $ TYPE%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (Poly%verismo!ptr.raw_ptr_s.SnpPointsToBytes. (verismo!ptr.raw_ptr_s.impl&%4.view.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. perm!)))) (B val!)) (verismo!ptr.snp.rmp.rmp_e.spec_perm_ensures_pvalidate.? (Poly%verismo!ptr.def_s.SnpPointsToRaw. ret!) (Poly%verismo!ptr.def_s.SnpPointsToRaw. perm!) (I start!) (I (nClip (Sub end! start!))) (B val!)) (verismo!registers.trackedcore.snpcore.impl&%3.inv.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!)) (= pre%snpcore! snpcore!))) :pattern ((ens%verismo!ptr.snp.rmp.rmp_e.pvalmem. start! end! val! perm! pre%snpcore! snpcore! ret!)))))
(declare-fun req%verismo!ptr.snp.rmp.rmp_e.pvalmem2. (Int Int Bool vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. verismo!registers.trackedcore.snpcore.SnpCore.) Bool)
(declare-const %%global_location_label%%84 Bool)
(declare-const %%global_location_label%%85 Bool)
(declare-const %%global_location_label%%86 Bool)
(declare-const %%global_location_label%%87 Bool)
(declare-const %%global_location_label%%88 Bool)
(declare-const %%global_location_label%%89 Bool)
(assert (forall ((start! Int) (end! Int) (val! Bool) (pre%perms! vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.) (pre%snpcore! verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (req%verismo!ptr.snp.rmp.rmp_e.pvalmem2. start! end! val! pre%perms! pre%snpcore!) (and (=> %%global_location_label%%84 (= (EucMod end! 4096) 0)) (=> %%global_location_label%%85 (= (EucMod start! 4096) 0)) (=> %%global_location_label%%86 (< start! end!)) (=> %%global_location_label%%87 (verismo!ptr.snp.rmp.rmp_e.spec_perms_requires_pvalidate.? (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. pre%perms!) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I start!)) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I end!)) (B val!))) (=> %%global_location_label%%88 (verismo!registers.trackedcore.snpcore.impl&%3.inv.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. pre%snpcore!))) (=> %%global_location_label%%89 (= (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. pre%snpcore!)))))))) 0)))) :pattern ((req%verismo!ptr.snp.rmp.rmp_e.pvalmem2. start! end! val! pre%perms! pre%snpcore!)))))
(declare-fun ens%verismo!ptr.snp.rmp.rmp_e.pvalmem2. (Int Int Bool vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. verismo!registers.trackedcore.snpcore.SnpCore. verismo!registers.trackedcore.snpcore.SnpCore.) Bool)
(assert (forall ((start! Int) (end! Int) (val! Bool) (pre%perms! vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.) (perms! vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.) (pre%snpcore! verismo!registers.trackedcore.snpcore.SnpCore.) (snpcore! verismo!registers.trackedcore.snpcore.SnpCore.)) (! (= (ens%verismo!ptr.snp.rmp.rmp_e.pvalmem2. start! end! val! pre%perms! perms! pre%snpcore! snpcore!) (and (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (verismo!ptr.snp.rmp.rmp_e.spec_perms_ensures_pvalidate.? (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!) (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. pre%perms!) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I start!)) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I end!)) (B val!)) (verismo!registers.trackedcore.snpcore.impl&%3.inv.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!)) (= pre%snpcore! snpcore!))) :pattern ((ens%verismo!ptr.snp.rmp.rmp_e.pvalmem2. start! end! val! pre%perms! perms! pre%snpcore! snpcore!)))))
(declare-const start! Int)
(declare-const end! Int)
(declare-const val! Bool)
(declare-const perms!@0 vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)
(declare-const snpcore!@0 verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-const verus_tmp_old_perms@ vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)
(declare-const verus_tmp_old_snpcore@ verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-const verus_tmp_pn@ Int)
(declare-const tmp%1 Bool)
(declare-const tmp%2 Poly)
(declare-const verus_tmp_current_perm@ verismo!ptr.def_s.SnpPointsToRaw.)
(declare-const tmp%3 Bool)
(declare-const tmp%4 Bool)
(declare-const i@ Poly)
(declare-const tmp%5 Bool)
(declare-const tmp%6 Bool)
(declare-const i$1@ Poly)
(declare-const tmp%7 Bool)
(declare-const tmp%8 Bool)
(declare-const i$2@ Poly)
(declare-const tmp%9 Bool)
(declare-const tmp%10 Bool)
(declare-const tmp%11 Bool)
(declare-const verus_tmp$2@0 Int)
(declare-const pn@0 Int)
(declare-const verus_tmp$3@ verismo!ptr.def_s.SnpPointsToRaw.)
(declare-const current_perm@0 verismo!ptr.def_s.SnpPointsToRaw.)
(declare-const next_vaddr@ Int)
(declare-const verus_tmp_current_perm$1@ verismo!ptr.def_s.SnpPointsToRaw.)
(declare-const current_perm$1@0 verismo!ptr.def_s.SnpPointsToRaw.)
(declare-const verus_tmp@0 vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)
(declare-const old_perms@0 vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)
(declare-const verus_tmp$1@0 verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-const old_snpcore@0 verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-const vaddr@0 Int)
(assert fuel_defaults)
(assert (uInv 64 start!))
(assert (uInv 64 end!))
(assert (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!@0) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.))
(assert (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. verus_tmp$1@0) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.))
(assert (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. verus_tmp_old_snpcore@) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.))
(assert (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. old_snpcore@0) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.))
(assert (uInv 64 vaddr@0))
(declare-const perms!@1 vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)
(declare-const snpcore!@1 verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-const verus_tmp$2@1 Int)
(declare-const pn@1 Int)
(declare-const perms!@2 vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)
(declare-const current_perm@1 verismo!ptr.def_s.SnpPointsToRaw.)
(declare-const snpcore!@2 verismo!registers.trackedcore.snpcore.SnpCore.)
(declare-const current_perm$1@1 verismo!ptr.def_s.SnpPointsToRaw.)
(declare-const vaddr@1 Int)
(declare-const perms!@3 vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>.)
(declare-const %%location_label%%0 Bool)
(declare-const %%location_label%%1 Bool)
(declare-const %%location_label%%2 Bool)
(declare-const %%location_label%%3 Bool)
(declare-const %%location_label%%4 Bool)
(declare-const %%location_label%%5 Bool)
(declare-const %%location_label%%6 Bool)
(declare-const %%location_label%%7 Bool)
(declare-const %%location_label%%8 Bool)
(declare-const %%location_label%%9 Bool)
(declare-const %%location_label%%10 Bool)
(declare-const %%location_label%%11 Bool)
(declare-const %%location_label%%12 Bool)
(declare-const %%location_label%%13 Bool)
(declare-const %%location_label%%14 Bool)
(declare-const %%location_label%%15 Bool)
(declare-const %%location_label%%16 Bool)
(declare-const %%location_label%%17 Bool)
(declare-const %%location_label%%18 Bool)
(declare-const %%location_label%%19 Bool)
(declare-const %%location_label%%20 Bool)
(declare-const %%location_label%%21 Bool)
(declare-const %%location_label%%22 Bool)
(declare-const %%location_label%%23 Bool)
(declare-const %%location_label%%24 Bool)
(declare-const %%location_label%%25 Bool)
(declare-const %%location_label%%26 Bool)
(declare-const %%location_label%%27 Bool)
(declare-const %%location_label%%28 Bool)
(assert (not (=> (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!@1) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (=> (%B (B true)) (=> (%B (B true)) (=> (= (EucMod end! 4096) 0) (=> (= (EucMod vaddr@0 4096) 0) (=> (and (<= start! vaddr@0) (<= vaddr@0 end!)) (=> (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I start!))) (%I i$)) (< (%I i$) (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I end!))))) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0)) i$))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0)) i$)))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@0))) (%I i$)) (< (%I i$) (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I end!))))) (and (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@1)) i$) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0)) i$)) (= (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@1) i$) (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0) i$))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@1)) i$)))) (=> (verismo!ptr.snp.rmp.rmp_e.spec_perms_requires_pvalidate.? (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I start!)) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I end!)) (B val!)) (=> (verismo!ptr.snp.rmp.rmp_e.spec_perms_requires_pvalidate.? (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@1) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@0)) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I end!)) (B val!)) (=> (verismo!ptr.snp.rmp.rmp_e.spec_perms_ensures_pvalidate.? (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@1) (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I start!)) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@0)) (B val!)) (=> (verismo!registers.trackedcore.snpcore.impl&%3.inv.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!@1)) (=> (= (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!@1)))))))) 0) (=> (= old_snpcore@0 snpcore!@1) (=> (< vaddr@0 end!) (=> (= verus_tmp$2@1 (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@0)))) (=> (= verus_tmp_pn@ verus_tmp$2@1) (=> (= pn@1 verus_tmp_pn@) (=> (= tmp%1 (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@1)) (I pn@1))) (and (=> %%location_label%%0 tmp%1) (=> tmp%1 (and (=> %%location_label%%1 (req%vstd!map.impl&%0.tracked_remove. $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@1) (I pn@1))) (=> (ens%vstd!map.impl&%0.tracked_remove. $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@1) (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@2) (I pn@1) tmp%2) (=> (= verus_tmp$3@ (%Poly%verismo!ptr.def_s.SnpPointsToRaw. tmp%2)) (=> (= verus_tmp_current_perm@ verus_tmp$3@) (=> (= current_perm@1 verus_tmp_current_perm@) (and (=> %%location_label%%2 (uInv 64 (Add vaddr@0 (uClip 64 verismo!arch.addr_s.def_s.PAGE_SIZE.?)))) (=> (= next_vaddr@ (uClip 64 (Add vaddr@0 (uClip 64 verismo!arch.addr_s.def_s.PAGE_SIZE.?)))) (and (=> %%location_label%%3 (req%verismo!ptr.snp.rmp.rmp_e.pvalmem. vaddr@0 next_vaddr@ val! current_perm@1 snpcore!@1)) (=> (has_type (Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!@2) TYPE%verismo!registers.trackedcore.snpcore.SnpCore.) (=> (ens%verismo!ptr.snp.rmp.rmp_e.pvalmem. vaddr@0 next_vaddr@ val! current_perm@1 snpcore!@1 snpcore!@2 verus_tmp_current_perm$1@) (=> (= current_perm$1@1 verus_tmp_current_perm$1@) (=> (= tmp%3 (= (Add (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@0))) 1) (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I next_vaddr@))))) (and (=> %%location_label%%4 tmp%3) (=> tmp%3 (=> (= vaddr@1 next_vaddr@) (=> (ens%vstd!map.impl&%0.tracked_insert. $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@2) (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3) (I pn@1) (Poly%verismo!ptr.def_s.SnpPointsToRaw. current_perm$1@1)) (=> (= tmp%4 (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) (I pn@1))) (and (=> %%location_label%%5 tmp%4) (=> tmp%4 (and (=> (has_type i@ INT) (=> (and (<= (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@1))) (%I i@)) (< (%I i@) (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I end!))))) (=> (= tmp%5 (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0)) i@)) (and (=> %%location_label%%6 tmp%5) (=> tmp%5 (=> (= tmp%6 (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) i@)) (and (=> %%location_label%%7 tmp%6) (=> tmp%6 (=> %%location_label%%8 (and (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) i@) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0)) i@)) (= (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3) i@) (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0) i@)))))))))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@1))) (%I i$)) (< (%I i$) (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I end!))))) (and (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) i$) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0)) i$)) (= (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3) i$) (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0) i$))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) i$)))) (and (=> (has_type i$1@ INT) (=> (and (<= (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I start!))) (%I i$1@)) (< (%I i$1@) (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@1))))) (=> (= tmp%7 (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0)) i$1@)) (and (=> %%location_label%%9 tmp%7) (=> tmp%7 (=> (= tmp%8 (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) i$1@)) (and (=> %%location_label%%10 tmp%8) (=> tmp%8 (=> %%location_label%%11 (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) i$1@) (verismo!ptr.snp.rmp.rmp_e.spec_perm_ensures_pvalidate.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3) i$1@) (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0) i$1@) (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i$1@) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?) (B val!)))))))))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I start!))) (%I i$)) (< (%I i$) (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@1))))) (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) i$) (verismo!ptr.snp.rmp.rmp_e.spec_perm_ensures_pvalidate.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3) i$) (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0) i$) (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i$) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?) (B val!))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) i$)))) (and (=> (has_type i$2@ INT) (=> (and (<= (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@1))) (%I i$2@)) (< (%I i$2@) (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I end!))))) (=> (= tmp%9 (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0)) i$2@)) (and (=> %%location_label%%12 tmp%9) (=> tmp%9 (=> (= tmp%10 (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) i$2@)) (and (=> %%location_label%%13 tmp%10) (=> tmp%10 (=> %%location_label%%14 (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) i$2@) (verismo!ptr.snp.rmp.rmp_e.spec_perm_requires_pvalidate.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3) i$2@) (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i$2@) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?) (B val!)))))))))))) (=> (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@1))) (%I i$)) (< (%I i$) (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I end!))))) (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) i$) (verismo!ptr.snp.rmp.rmp_e.spec_perm_requires_pvalidate.? (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3) i$) (verismo!addr_e.addr_interface.SpecPageTrait.to_addr.? $ INT i$) (I verismo!arch.addr_s.def_s.PAGE_SIZE.?) (B val!))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) i$)))) (=> (= tmp%11 (verismo!ptr.snp.rmp.rmp_e.spec_perms_ensures_pvalidate.? (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3) (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I start!)) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@1)) (B val!))) (and (=> %%location_label%%15 tmp%11) (=> tmp%11 (and (=> %%location_label%%16 (%B (B true))) (and (=> %%location_label%%17 (%B (B true))) (and (=> %%location_label%%18 (= (EucMod end! 4096) 0)) (and (=> %%location_label%%19 (= (EucMod vaddr@1 4096) 0)) (and (=> %%location_label%%20 (and (<= start! vaddr@1) (<= vaddr@1 end!))) (and (=> %%location_label%%21 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I start!))) (%I i$)) (< (%I i$) (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I end!))))) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0)) i$))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0)) i$))))) (and (=> %%location_label%%22 (forall ((i$ Poly)) (! (=> (has_type i$ INT) (=> (and (<= (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@1))) (%I i$)) (< (%I i$) (%I (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I end!))))) (and (and (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) i$) (vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0)) i$)) (= (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3) i$) (vstd!map.impl&%0.index.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0) i$))))) :pattern ((vstd!set.impl&%0.contains.? $ INT (vstd!map.impl&%0.dom.? $ INT $ TYPE%verismo!ptr.def_s.SnpPointsToRaw. (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3)) i$))))) (and (=> %%location_label%%23 (verismo!ptr.snp.rmp.rmp_e.spec_perms_requires_pvalidate.? (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I start!)) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I end!)) (B val!))) (and (=> %%location_label%%24 (verismo!ptr.snp.rmp.rmp_e.spec_perms_requires_pvalidate.? (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@1)) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I end!)) (B val!))) (and (=> %%location_label%%25 (verismo!ptr.snp.rmp.rmp_e.spec_perms_ensures_pvalidate.? (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. perms!@3) (Poly%vstd!map.Map<int./verismo!ptr.def_s.SnpPointsToRaw.>. old_perms@0) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I start!)) (verismo!addr_e.addr_interface.SpecAddrTrait.to_page.? $ INT (I vaddr@1)) (B val!))) (and (=> %%location_label%%26 (verismo!registers.trackedcore.snpcore.impl&%3.inv.? (Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!@2))) (and (=> %%location_label%%27 (= (verismo!registers.core_perm_s.CoreMode./CoreMode/vmpl (%Poly%verismo!registers.core_perm_s.CoreMode. (Poly%verismo!registers.core_perm_s.CoreMode. (verismo!registers.core_perm_s.impl&%4.view.? (Poly%verismo!registers.core_perm_s.CoreIdPerm. (verismo!registers.trackedcore.snpcore.SnpCore./SnpCore/coreid (%Poly%verismo!registers.trackedcore.snpcore.SnpCore. (Poly%verismo!registers.trackedcore.snpcore.SnpCore. snpcore!@2)))))))) 0)) (=> %%location_label%%28 (= old_snpcore@0 snpcore!@2)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
